revision;file;methodsignature;leftbody;basebody;rightbody
E:\Mestrado\FPFNAnalysis\projects\andlytics\revisions\rev_66f86ad_333f857\rev_66f86ad-333f857;\src\com\github\andlyticsproject\ContentAdapter;insertOrUpdateAppStats(AppStats,String);public void insertOrUpdateAppStats(AppStats appStats, String packageName) {;public void insertOrUpdateAppStats(AppStats appStats, String packageName) {;public void insertOrUpdateAppStats(AppStats downloadInfo, String packageName) {
E:\Mestrado\FPFNAnalysis\projects\andlytics\revisions\rev_66f86ad_333f857\rev_66f86ad-333f857;\src\com\github\andlyticsproject\ContentAdapter;insertOrUpdateAppStats(AppStats,String);		if (appStats.getNumberOfErrors() != null) {
			values.put(AppStatsTable.KEY_STATS_NUM_ERRORS, appStats.getNumberOfErrors());
		}
		if (appStats.getTotalRevenue() != null) {
			values.put(AppStatsTable.KEY_STATS_TOTAL_REVENUE, appStats.getTotalRevenue()
					.getAmount());
			values.put(AppStatsTable.KEY_STATS_CURRENCY, appStats.getTotalRevenue()
					.getCurrencyCode());;		if (appStats.getNumberOfErrors() != null) {
			values.put(AppStatsTable.KEY_STATS_NUM_ERRORS, appStats.getNumberOfErrors());
		}
		if (appStats.getTotalRevenue() != null) {
			values.put(AppStatsTable.KEY_STATS_TOTAL_REVENUE, appStats.getTotalRevenue());;		if (downloadInfo.getNumberOfErrors() != null) {
			values.put(AppStatsTable.KEY_STATS_NUM_ERRORS, downloadInfo.getNumberOfErrors());
E:\Mestrado\FPFNAnalysis\projects\AntennaPod\revisions\rev_cdd9a0d_a482899\rev_cdd9a0d-a482899;\src\de\danoeh\antennapod\storage\DBTasks;autodownloadUndownloadedItems(Context);            List<FeedItem> itemsToDownload = new ArrayList<FeedItem>();
            if (episodeSpaceLeft > 0 && undownloadedEpisodes > 0) {
                for (int i = 0; i < queue.size(); i++) { // ignore playing item
                    FeedItem item = queue.get(i);
                    if (item.hasMedia() && !item.getMedia().isDownloaded()
                            && !item.getMedia().isPlaying()
                            && item.getFeed().getPreferences().getAutoDownload()) {
                        itemsToDownload.add(item);
                        episodeSpaceLeft--;
                        undownloadedEpisodes--;
                        if (episodeSpaceLeft == 0 || undownloadedEpisodes == 0) {
                            break;;            List<FeedItem> itemsToDownload = new ArrayList<FeedItem>();
            if (episodeSpaceLeft > 0 && undownloadedEpisodes > 0) {
                for (int i = 0; i < queue.size(); i++) { // ignore playing item
                    FeedItem item = queue.get(i);
                    if (item.hasMedia() && !item.getMedia().isDownloaded()
                            && !item.getMedia().isPlaying()) {
                        itemsToDownload.add(item);
                        episodeSpaceLeft--;
                        undownloadedEpisodes--;
                        if (episodeSpaceLeft == 0 || undownloadedEpisodes == 0) {
                            break;;                    List<FeedItem> itemsToDownload = new ArrayList<FeedItem>();
                    if (episodeSpaceLeft > 0 && undownloadedEpisodes > 0) {
                        for (int i = 0; i < queue.size(); i++) { // ignore playing item
                            FeedItem item = queue.get(i);
                            if (item.hasMedia() && !item.getMedia().isDownloaded()
                                    && !item.getMedia().isPlaying()) {
                                itemsToDownload.add(item);
                                episodeSpaceLeft--;
                                undownloadedEpisodes--;
                                if (episodeSpaceLeft == 0 || undownloadedEpisodes == 0) {
                                    break;
                                }
                            }
E:\Mestrado\FPFNAnalysis\projects\AntennaPod\revisions\rev_cdd9a0d_a482899\rev_cdd9a0d-a482899;\src\de\danoeh\antennapod\storage\DBTasks;autodownloadUndownloadedItems(Context);                }
            }
            if (episodeSpaceLeft > 0 && undownloadedEpisodes > 0) {
                for (FeedItem item : unreadItems) {
                    if (item.hasMedia() && !item.getMedia().isDownloaded()
                            && item.getFeed().getPreferences().getAutoDownload()) {
                        itemsToDownload.add(item);
                        episodeSpaceLeft--;
                        undownloadedEpisodes--;
                        if (episodeSpaceLeft == 0 || undownloadedEpisodes == 0) {
                            break;;                }
            }
            if (episodeSpaceLeft > 0 && undownloadedEpisodes > 0) {
                for (FeedItem item : unreadItems) {
                    if (item.hasMedia() && !item.getMedia().isDownloaded()) {
                        itemsToDownload.add(item);
                        episodeSpaceLeft--;
                        undownloadedEpisodes--;
                        if (episodeSpaceLeft == 0 || undownloadedEpisodes == 0) {
                            break;;                    if (episodeSpaceLeft > 0 && undownloadedEpisodes > 0) {
                        for (FeedItem item : unreadItems) {
                            if (item.hasMedia() && !item.getMedia().isDownloaded()) {
                                itemsToDownload.add(item);
                                episodeSpaceLeft--;
                                undownloadedEpisodes--;
                                if (episodeSpaceLeft == 0 || undownloadedEpisodes == 0) {
                                    break;
                                }
                            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;deflate();        cf.default_validation_class = new Utf8(defaultValidator.toString());
        cf.key_validation_class = new Utf8(keyValidator.toString());;        cf.default_validation_class = new Utf8(defaultValidator.getClass().getName());;        cf.default_validation_class = new Utf8(defaultValidator.getClass().getName());
        cf.key_validation_class = new Utf8(keyValidator.getClass().getName());
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;convertToThrift(CFMetaData);        def.setDefault_validation_class(cfm.defaultValidator.toString());
        def.setKey_validation_class(cfm.keyValidator.toString());;        def.setDefault_validation_class(cfm.defaultValidator.getClass().getName());;        def.setDefault_validation_class(cfm.defaultValidator.getClass().getName());
        def.setKey_validation_class(cfm.keyValidator.getClass().getName());
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;extractPlaceHolders(MethodNode,ClassNode,ClassNode);            current = getNextSuperClass(current, declaringClass);;            // we have to continue with either an interface or normal super class
            ClassNode nextNode = null;
            if (declaringClass.isInterface()) {
                ClassNode[] interfaces = current.getUnresolvedInterfaces();
                for (int i=0; i<interfaces.length; i++) {
                    if (implementsInterfaceOrIsSubclassOf(interfaces[i],declaringClass)) {
                        nextNode = interfaces[i];
                        break;
                    }
                }
            }

            if (nextNode==null) nextNode = current.getUnresolvedSuperClass();
            current = nextNode;;            // we have to continue with either an interface or normal super class
            ClassNode nextNode = null;
            if (declaringClass.isInterface()) {
                ClassNode[] interfaces = current.getUnresolvedInterfaces();
                for (int i=0; i<interfaces.length; i++) {
                    if (implementsInterfaceOrIsSubclassOf(interfaces[i],declaringClass)) {
                        nextNode = interfaces[i];
                        break;
                    }
                }
            }

            if (nextNode==null) {
                nextNode = current.getUnresolvedSuperClass();
                if (current.isArray()) {
                    nextNode = current.getComponentType();
                    nextNode = nextNode.getUnresolvedSuperClass();
                    if (nextNode!=null) {
                        nextNode = nextNode.makeArray();
                    } else {
                        nextNode = OBJECT_TYPE;
                    }
                }
            }
            current = nextNode;
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\subprojects\groovy-groovydoc\src\test\groovy\org\codehaus\groovy\tools\groovydoc\GroovyDocToolTest;setUp();                        "src/test/groovy"},;                        "../../subprojects/groovy-swing/src/main/groovy",
                        "../../subprojects/groovy-swing/src/main/java",
                        "../../subprojects/groovy-xml/src/main/java",
                        "../../subprojects/groovy-console/src/main/groovy",
                        "../../subprojects/groovy-sql/src/main/java"},;                		"src/test/groovy",
                        "../../subprojects/groovy-swing/src/main/groovy",
                        "../../subprojects/groovy-swing/src/main/java",
                        "../../subprojects/groovy-console/src/main/groovy",
                        "../../subprojects/groovy-sql/src/main/java"},
E:\Mestrado\FPFNAnalysis\projects\Osmand\revisions\rev_6b959dd_8ceaed0\rev_6b959dd-8ceaed0;\DataExtractionOSM\src\net\osmand\data\preparation\IndexRouteCreator;commitAndCloseFiles(String,String,boolean);		deleteRouteTreeFiles(rTreeMapIndexNonPackFileName, rTreeMapIndexPackFileName, deleteDatabaseIndexes, routeTree);
		deleteRouteTreeFiles(rTreeMapIndexNonPackFileName+"b", rTreeMapIndexPackFileName+"b", deleteDatabaseIndexes, baserouteTree);;		if (routeTree != null) {
			RandomAccessFile file = routeTree.getFileHdr().getFile();
			file.close();
			if (rTreeMapIndexNonPackFileName != null) {
				File f = new File(rTreeMapIndexNonPackFileName);
				if (f.exists() && deleteDatabaseIndexes) {
					f.delete();
				}
			}
			if (rTreeMapIndexPackFileName != null) {
				File f = new File(rTreeMapIndexPackFileName);
				if (f.exists() && deleteDatabaseIndexes) {
					f.delete();
				}
			}
		};		if (routeTree != null) {
			RandomAccessFile file = routeTree.getFileHdr().getFile();
			file.close();
		}
		if (rTreeMapIndexNonPackFileName != null) {
			File f = new File(rTreeMapIndexNonPackFileName);
			if (f.exists() && deleteDatabaseIndexes) {
				f.delete();
			}
		}
		if (rTreeMapIndexPackFileName != null) {
			File f = new File(rTreeMapIndexPackFileName);
			if (f.exists() && deleteDatabaseIndexes) {
				f.delete();
			}
		}
