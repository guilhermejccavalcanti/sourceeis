revision;file;methodsignature;leftbody;basebody;rightbody
E:\Mestrado\FPFNAnalysis\projects\andlytics\revisions\rev_66f86ad_333f857\rev_66f86ad-333f857;\src\com\github\andlyticsproject\ContentAdapter;insertOrUpdateAppStats(AppStats,String);public void insertOrUpdateAppStats(AppStats appStats, String packageName) {;public void insertOrUpdateAppStats(AppStats appStats, String packageName) {;public void insertOrUpdateAppStats(AppStats downloadInfo, String packageName) {
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;absolute(int);;;public boolean absolute(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;afterLast();;;public void afterLast() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;beforeFirst();;;public void beforeFirst() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;cancelRowUpdates();;;public void cancelRowUpdates() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;clearWarnings();;;public void clearWarnings() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;deleteRow();;;public void deleteRow() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;findColumn(String);;;public int findColumn(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;first();;;public boolean first() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getArray(int);;;public Array getArray(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getArray(String);;;public Array getArray(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getAsciiStream(int);;;public InputStream getAsciiStream(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getAsciiStream(String);;;public InputStream getAsciiStream(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getBinaryStream(int);;;public InputStream getBinaryStream(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getBinaryStream(String);;;public InputStream getBinaryStream(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getBlob(int);;;public Blob getBlob(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getBlob(String);;;public Blob getBlob(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getByte(int);;;public byte getByte(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getByte(String);;;public byte getByte(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getCharacterStream(int);;;public Reader getCharacterStream(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getCharacterStream(String);;;public Reader getCharacterStream(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getClob(int);;;public Clob getClob(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getClob(String);;;public Clob getClob(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getConcurrency();;;public int getConcurrency() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getCursorName();;;public String getCursorName() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getFetchDirection();;;public int getFetchDirection() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getFetchSize();;;public int getFetchSize() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getHoldability();;;public int getHoldability() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getRef(int);;;public Ref getRef(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getRef(String);;;public Ref getRef(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getRowId(int);;;public RowId getRowId(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getRowId(String);;;public RowId getRowId(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getSQLXML(int);;;public SQLXML getSQLXML(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getSQLXML(String);;;public SQLXML getSQLXML(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getShort(int);;;public short getShort(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getShort(String);;;public short getShort(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getStatement();;;public Statement getStatement() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getURL(int);;;public URL getURL(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getURL(String);;;public URL getURL(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getUnicodeStream(int);;;public InputStream getUnicodeStream(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getUnicodeStream(String);;;public InputStream getUnicodeStream(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getWarnings();;;public SQLWarning getWarnings() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;insertRow();;;public void insertRow() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;moveToCurrentRow();;;public void moveToCurrentRow() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;moveToInsertRow();;;public void moveToInsertRow() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;previous();;;public boolean previous() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;refreshRow();;;public void refreshRow() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;relative(int);;;public boolean relative(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;rowDeleted();;;public boolean rowDeleted() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;rowInserted();;;public boolean rowInserted() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;rowUpdated();;;public boolean rowUpdated() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;setFetchDirection(int);;;public void setFetchDirection(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;setFetchSize(int);;;public void setFetchSize(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getNCharacterStream(int);;;public Reader getNCharacterStream(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getNCharacterStream(String);;;public Reader getNCharacterStream(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getNClob(int);;;public NClob getNClob(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getNClob(String);;;public NClob getNClob(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getNString(int);;;public String getNString(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getNString(String);;;public String getNString(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getBigDecimal(int);;;public BigDecimal getBigDecimal(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getBigDecimal(String);;;public BigDecimal getBigDecimal(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getBigDecimal(int,int);;;public BigDecimal getBigDecimal(int arg0, int arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;getBigDecimal(String,int);;;public BigDecimal getBigDecimal(String arg0, int arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateArray(int,Array);;;public void updateArray(int arg0, Array arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateArray(String,Array);;;public void updateArray(String arg0, Array arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateAsciiStream(int,InputStream);;;public void updateAsciiStream(int arg0, InputStream arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateAsciiStream(String,InputStream);;;public void updateAsciiStream(String arg0, InputStream arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateAsciiStream(int,InputStream,int);;;public void updateAsciiStream(int arg0, InputStream arg1, int arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateAsciiStream(String,InputStream,int);;;public void updateAsciiStream(String arg0, InputStream arg1, int arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateAsciiStream(int,InputStream,long);;;public void updateAsciiStream(int arg0, InputStream arg1, long arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateAsciiStream(String,InputStream,long);;;public void updateAsciiStream(String arg0, InputStream arg1, long arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBigDecimal(int,BigDecimal);;;public void updateBigDecimal(int arg0, BigDecimal arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBigDecimal(String,BigDecimal);;;public void updateBigDecimal(String arg0, BigDecimal arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBinaryStream(int,InputStream);;;public void updateBinaryStream(int arg0, InputStream arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBinaryStream(String,InputStream);;;public void updateBinaryStream(String arg0, InputStream arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBinaryStream(int,InputStream,int);;;public void updateBinaryStream(int arg0, InputStream arg1, int arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBinaryStream(String,InputStream,int);;;public void updateBinaryStream(String arg0, InputStream arg1, int arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBinaryStream(int,InputStream,long);;;public void updateBinaryStream(int arg0, InputStream arg1, long arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBinaryStream(String,InputStream,long);;;public void updateBinaryStream(String arg0, InputStream arg1, long arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBlob(int,Blob);;;public void updateBlob(int arg0, Blob arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBlob(String,Blob);;;public void updateBlob(String arg0, Blob arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBlob(int,InputStream);;;public void updateBlob(int arg0, InputStream arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBlob(String,InputStream);;;public void updateBlob(String arg0, InputStream arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBlob(int,InputStream,long);;;public void updateBlob(int arg0, InputStream arg1, long arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBlob(String,InputStream,long);;;public void updateBlob(String arg0, InputStream arg1, long arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBoolean(int,boolean);;;public void updateBoolean(int arg0, boolean arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBoolean(String,boolean);;;public void updateBoolean(String arg0, boolean arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateByte(int,byte);;;public void updateByte(int arg0, byte arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateByte(String,byte);;;public void updateByte(String arg0, byte arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBytes(int,byte[]);;;public void updateBytes(int arg0, byte[] arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateBytes(String,byte[]);;;public void updateBytes(String arg0, byte[] arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateCharacterStream(int,Reader);;;public void updateCharacterStream(int arg0, Reader arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateCharacterStream(String,Reader);;;public void updateCharacterStream(String arg0, Reader arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateCharacterStream(int,Reader,int);;;public void updateCharacterStream(int arg0, Reader arg1, int arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateCharacterStream(String,Reader,int);;;public void updateCharacterStream(String arg0, Reader arg1, int arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateCharacterStream(int,Reader,long);;;public void updateCharacterStream(int arg0, Reader arg1, long arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateCharacterStream(String,Reader,long);;;public void updateCharacterStream(String arg0, Reader arg1, long arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateClob(int,Clob);;;public void updateClob(int arg0, Clob arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateClob(String,Clob);;;public void updateClob(String arg0, Clob arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateClob(int,Reader);;;public void updateClob(int arg0, Reader arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateClob(String,Reader);;;public void updateClob(String arg0, Reader arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateClob(int,Reader,long);;;public void updateClob(int arg0, Reader arg1, long arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateClob(String,Reader,long);;;public void updateClob(String arg0, Reader arg1, long arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateDate(int,Date);;;public void updateDate(int arg0, Date arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateDate(String,Date);;;public void updateDate(String arg0, Date arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateDouble(int,double);;;public void updateDouble(int arg0, double arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateDouble(String,double);;;public void updateDouble(String arg0, double arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateFloat(int,float);;;public void updateFloat(int arg0, float arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateFloat(String,float);;;public void updateFloat(String arg0, float arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateInt(int,int);;;public void updateInt(int arg0, int arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateInt(String,int);;;public void updateInt(String arg0, int arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateLong(int,long);;;public void updateLong(int arg0, long arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateLong(String,long);;;public void updateLong(String arg0, long arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateNCharacterStream(int,Reader);;;public void updateNCharacterStream(int arg0, Reader arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateNCharacterStream(String,Reader);;;public void updateNCharacterStream(String arg0, Reader arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateNCharacterStream(int,Reader,long);;;public void updateNCharacterStream(int arg0, Reader arg1, long arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateNCharacterStream(String,Reader,long);;;public void updateNCharacterStream(String arg0, Reader arg1, long arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateNClob(int,NClob);;;public void updateNClob(int arg0, NClob arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateNClob(String,NClob);;;public void updateNClob(String arg0, NClob arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateNClob(int,Reader);;;public void updateNClob(int arg0, Reader arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateNClob(String,Reader);;;public void updateNClob(String arg0, Reader arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateNClob(int,Reader,long);;;public void updateNClob(int arg0, Reader arg1, long arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateNClob(String,Reader,long);;;public void updateNClob(String arg0, Reader arg1, long arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateNString(int,String);;;public void updateNString(int arg0, String arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateNString(String,String);;;public void updateNString(String arg0, String arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateNull(int);;;public void updateNull(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateNull(String);;;public void updateNull(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateObject(int,Object);;;public void updateObject(int arg0, Object arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateObject(String,Object);;;public void updateObject(String arg0, Object arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateObject(int,Object,int);;;public void updateObject(int arg0, Object arg1, int arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateObject(String,Object,int);;;public void updateObject(String arg0, Object arg1, int arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateRef(int,Ref);;;public void updateRef(int arg0, Ref arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateRef(String,Ref);;;public void updateRef(String arg0, Ref arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateRow();;;public void updateRow() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateRowId(int,RowId);;;public void updateRowId(int arg0, RowId arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateRowId(String,RowId);;;public void updateRowId(String arg0, RowId arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateSQLXML(int,SQLXML);;;public void updateSQLXML(int arg0, SQLXML arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateSQLXML(String,SQLXML);;;public void updateSQLXML(String arg0, SQLXML arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateShort(int,short);;;public void updateShort(int arg0, short arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateShort(String,short);;;public void updateShort(String arg0, short arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateString(int,String);;;public void updateString(int arg0, String arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateString(String,String);;;public void updateString(String arg0, String arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateTime(int,Time);;;public void updateTime(int arg0, Time arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateTime(String,Time);;;public void updateTime(String arg0, Time arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateTimestamp(int,Timestamp);;;public void updateTimestamp(int arg0, Timestamp arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\AbstractResultSet;updateTimestamp(String,Timestamp);;;public void updateTimestamp(String arg0, Timestamp arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;CassandraConnection(String);;;public CassandraConnection(String url)
    {
        try
        {
            final int splitIndex = url.indexOf('@');
            final String usr_pwd = url.substring(0, splitIndex);
            final String host_port = url.substring(splitIndex + 1);
            final int usr_colonIdx = usr_pwd.lastIndexOf(':');
            final int usr_backwardIdx = usr_pwd.indexOf('/');
            final String userName = usr_pwd.substring(usr_colonIdx + 1, usr_backwardIdx);
            final String password = usr_pwd.substring(usr_backwardIdx + 1);
            final int host_colonIdx = host_port.indexOf(':');
            final String hostName = host_port.substring(0, host_colonIdx);
            final int host_backwardIdx = host_port.indexOf('/');
            final String port = host_port.substring(host_colonIdx + 1, host_backwardIdx);
            final String keyspace = host_port.substring(host_backwardIdx + 1);
            cassandraCon = new org.apache.cassandra.cql.jdbc.Connection(hostName, Integer.valueOf(port), userName,
                                                                                                                             password);
            final String useQ = "USE " + keyspace;
            cassandraCon.execute(useQ);
        }
        catch (NumberFormatException e)
        {
            throw new DriverResolverException(e.getMessage());
        }
        catch (TTransportException e)
        {
            throw new DriverResolverException(e.getMessage());
        }
        catch (AuthenticationException e)
        {
            throw new DriverResolverException(e.getMessage());
        }
        catch (AuthorizationException e)
        {
            throw new DriverResolverException(e.getMessage());
        }
        catch (TException e)
        {
            throw new DriverResolverException(e.getMessage());
        }
        catch (InvalidRequestException e)
        {
            throw new DriverResolverException(e.getMessage());
        }
        catch (UnavailableException e)
        {
            throw new DriverResolverException(e.getMessage());
        }
        catch (TimedOutException e)
        {
            throw new DriverResolverException(e.getMessage());
        }
        catch (SchemaDisagreementException e)
        {
            throw new DriverResolverException("schema does not match across nodes, (try again later).");
        }

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;isWrapperFor(Class<?>);;;public boolean isWrapperFor(Class<?> arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;unwrap(Class<T>);;;public <T> T unwrap(Class<T> arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;clearWarnings();;;public void clearWarnings() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;close();;;public void close() throws SQLException
    {
        if (cassandraCon != null)
        {
            cassandraCon.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;commit();;;public void commit() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;createArrayOf(String,Object[]);;;public Array createArrayOf(String arg0, Object[] arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;createBlob();;;public Blob createBlob() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;createClob();;;public Clob createClob() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;createNClob();;;public NClob createNClob() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;createSQLXML();;;public SQLXML createSQLXML() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;createStatement();;;public Statement createStatement() throws SQLException
    {
        return new CassandraStatement(this.cassandraCon);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;createStatement(int,int);;;public Statement createStatement(int arg0, int arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;createStatement(int,int,int);;;public Statement createStatement(int arg0, int arg1, int arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;createStruct(String,Object[]);;;public Struct createStruct(String arg0, Object[] arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;getAutoCommit();;;public boolean getAutoCommit() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;getCatalog();;;public String getCatalog() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;getClientInfo();;;public Properties getClientInfo() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;getClientInfo(String);;;public String getClientInfo(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;getHoldability();;;public int getHoldability() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;getMetaData();;;public DatabaseMetaData getMetaData() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;getTransactionIsolation();;;public int getTransactionIsolation() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;getTypeMap();;;public Map<String, Class<?>> getTypeMap() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;getWarnings();;;public SQLWarning getWarnings() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;isClosed();;;public boolean isClosed() throws SQLException
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;isReadOnly();;;public boolean isReadOnly() throws SQLException
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;isValid(int);;;public boolean isValid(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;nativeSQL(String);;;public String nativeSQL(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;prepareCall(String);;;public CallableStatement prepareCall(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;prepareCall(String,int,int);;;public CallableStatement prepareCall(String arg0, int arg1, int arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;prepareCall(String,int,int,int);;;public CallableStatement prepareCall(String arg0, int arg1, int arg2, int arg3) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;prepareStatement(String);;;public PreparedStatement prepareStatement(String sql) throws SQLException
    {
        return new CassandraPreparedStatement(this.cassandraCon, sql);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;prepareStatement(String,int);;;public PreparedStatement prepareStatement(String arg0, int arg1) throws SQLException
    {
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;prepareStatement(String,int[]);;;public PreparedStatement prepareStatement(String arg0, int[] arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;prepareStatement(String,String[]);;;public PreparedStatement prepareStatement(String arg0, String[] arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;prepareStatement(String,int,int);;;public PreparedStatement prepareStatement(String arg0, int arg1, int arg2) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;prepareStatement(String,int,int,int);;;public PreparedStatement prepareStatement(String arg0, int arg1, int arg2, int arg3) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;releaseSavepoint(Savepoint);;;public void releaseSavepoint(Savepoint arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;rollback();;;public void rollback() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;rollback(Savepoint);;;public void rollback(Savepoint arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;setAutoCommit(boolean);;;public void setAutoCommit(boolean arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;setCatalog(String);;;public void setCatalog(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;setClientInfo(Properties);;;public void setClientInfo(Properties arg0) throws SQLClientInfoException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;setClientInfo(String,String);;;public void setClientInfo(String arg0, String arg1) throws SQLClientInfoException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;setHoldability(int);;;public void setHoldability(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;setReadOnly(boolean);;;public void setReadOnly(boolean arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;setSavepoint();;;public Savepoint setSavepoint() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;setSavepoint(String);;;public Savepoint setSavepoint(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;setTransactionIsolation(int);;;public void setTransactionIsolation(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraConnection;setTypeMap(Map<String,Class<?>>);;;public void setTypeMap(Map<String, Class<?>> arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraDriver;acceptsURL(String);;;public boolean acceptsURL(String url) throws SQLException
    {
        return url.startsWith(ACCEPTS_URL);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraDriver;connect(String,Properties);;;public Connection connect(String url, Properties props) throws SQLException
    {
        if (acceptsURL(url))
        {
            return new CassandraConnection(url);
        }
        else
        {
            throw new InvalidUrlException("Invalid connection url:" + url + ". should start with jdbc:cassandra");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraDriver;getMajorVersion();;;public int getMajorVersion()
    {
        return MAJOR_VERSION;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraDriver;getMinorVersion();;;public int getMinorVersion()
    {
        return MINOR_VERSION;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraDriver;getPropertyInfo(String,Properties);;;public DriverPropertyInfo[] getPropertyInfo(String arg0, Properties arg1) throws SQLException
    {
        return new DriverPropertyInfo[0];
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraDriver;jdbcCompliant();;;public boolean jdbcCompliant()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;CassandraPreparedStatement(Connection,String);;;CassandraPreparedStatement(Connection con, String cql)
    {
        super(con, cql);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;makeCqlString(String);;;private static String makeCqlString(String s) 
    {
        // escape any single-quotes with double single-quotes.
        return s.replaceAll("\'", "\'\'");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;applySimpleBindings(String,AbstractType,ParameterIterator);;;private static String applySimpleBindings(String q, AbstractType type, ParameterIterator params) throws SQLException
    {
        assert type != null;
        // we need to keep track of whether or not we are between quotes and ignore any question marks within them
        // so that they are not substituted.  
        StringBuffer sb = new StringBuffer();
        boolean between = false;
        for (char c : q.toCharArray())
        {
            if (c == '\'')
                between = !between;
            if (between)
                sb.append(c);
            else if (c == '?') // !between if we got here.
            {
                try
                {
                    // perform substitution!
                    Object param = params.nextParam();
                    String stringParam = type == null ? param.toString() : type.toString(param);
                    stringParam = makeCqlString(stringParam);
                    if (type == null || type.needsQuotes())
                        stringParam = "'" + stringParam + "'";
                    sb.append(stringParam);
                }
                catch (ClassCastException ex)
                {
                    throw new SQLException("Mismatched types: " + ex.getLocalizedMessage());
                }
            }
            else
                sb.append(c);
                
        }
        return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;applyDualBindings(String,AbstractType,AbstractType,ParameterIterator);;;private static String applyDualBindings(String q, AbstractType ltype, AbstractType rtype, ParameterIterator params) throws SQLException
    {
        StringBuffer sb = new StringBuffer();
        boolean between = false;
        boolean left = true; // we always start on the left-hand side of a statement. we switch state if we reach a comma and we are not between.
        for (char c : q.toCharArray())
        {
            if (c == '\'')
                between = !between;
            if (c == '=' && !between)
                left = false;
            if (c == ',' && !between)
                left = true;
            
            if (c == '?' && !between)
            {
                try
                {
                    Object param = params.nextParam();
                    AbstractType type = left ? ltype : rtype;
                    String stringParam = makeCqlString(type.toString(param));
                    if (type.needsQuotes())
                        stringParam = "'" + stringParam + "'";
                    sb.append(stringParam);
                }
                catch (ClassCastException ex)
                {
                    throw new SQLException("Mismatched types: " + ex.getLocalizedMessage());
                }
            }
            else
                sb.append(c);
        }
        return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;makeCql();;;public synchronized String makeCql() throws SQLException
    { 
        // break cql up
        Matcher m;
        m = Delete.matcher(cql);
        if (m.matches())
            return makeDelete(m.end(1));
        m = Update.matcher(cql);
        if (m.matches())
            return makeUpdate(m.end(1));
        m = Select.matcher(cql);
        if (m.matches())
            return makeSelect(m.end(1));
        
        // if we made it this far, cql is not parameterizable. this isn't bad, there is just nothing to be done.
        return cql;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;makeDelete(int);;;private String makeDelete(int pivot) throws SQLException
    { 
        String keyspace = connection.getKeyspace(cql);
        String columnFamily = connection.getColumnFamily(cql);
        ParameterIterator params = new ParameterIterator();
        String left = cql.substring(0, pivot);
        AbstractType leftType = connection.decoder.getComparator(keyspace, columnFamily);
        if (leftType == null)
            throw new SQLException("Could not find comparator for " + keyspace + "." + columnFamily);
        left = applySimpleBindings(left, leftType, params);
        String right = cql.substring(pivot);
        AbstractType keyVald = connection.decoder.getKeyValidator(keyspace, columnFamily);
        if (keyVald == null)
            throw new SQLException("Could not find key validator for " + keyspace + "." + columnFamily);
        right = applySimpleBindings(right, keyVald, params);
        return left + right;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;makeSelect(int);;;private String makeSelect(int pivot) throws SQLException
    { 
        String keyspace = connection.getKeyspace(cql);
        String columnFamily = connection.getColumnFamily(cql);
        ParameterIterator params = new ParameterIterator();
        String left = cql.substring(0, pivot);
        AbstractType leftType = connection.decoder.getComparator(keyspace, columnFamily);
        if (leftType == null)
            throw new SQLException("Could not find comparator for " + keyspace + "." + columnFamily);
        left = applySimpleBindings(left, leftType, params);
        String right = cql.substring(pivot);
        AbstractType keyVald = connection.decoder.getKeyValidator(keyspace, columnFamily);
        if (keyVald == null)
            throw new SQLException("Could not find key validator for " + keyspace + "." + columnFamily);
        right = applySimpleBindings(right, keyVald, params);
        return left + right;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;makeUpdate(int);;;private String makeUpdate(int pivot) throws SQLException
    {
        // this one is a little bit different. left contains key=value pairs. we use the comparator for the left side,
        // the validator for the right side.  right side is treated as a key.
        String keyspace = connection.getKeyspace(cql);
        String columnFamily = connection.getColumnFamily(cql);
        ParameterIterator params = new ParameterIterator();
        String left = cql.substring(0, pivot);
        AbstractType leftComp = connection.decoder.getComparator(keyspace, columnFamily);
        if (leftComp == null)
            throw new SQLException("Could not find comparator for " + keyspace + "." + columnFamily);
        AbstractType leftVald = connection.decoder.getComparator(keyspace, columnFamily);
        if (leftVald == null)
            throw new SQLException("Could not find validator for " + keyspace + "." + columnFamily);
        left = applyDualBindings(left, leftComp, leftVald, params);
        String right = cql.substring(pivot);
        AbstractType keyVald = connection.decoder.getKeyValidator(keyspace, columnFamily);
        if (keyVald == null)
            throw new SQLException("Could not find key validator for " + keyspace + "." + columnFamily);
        right = applySimpleBindings(right, keyVald, params);
        return left + right; 
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;addBatch();;;public void addBatch() throws SQLException
    {
        queries.add(makeCql());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;clearParameters();;;public synchronized void clearParameters() throws SQLException
    {
        variables.clear();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;execute();;;public boolean execute() throws SQLException
    {
        return this.cql != null && super.execute(makeCql());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;executeQuery();;;public ResultSet executeQuery() throws SQLException
    {
        return this.cql != null ? super.executeQuery(makeCql()) : null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;executeUpdate();;;public int executeUpdate() throws SQLException
    {
        String q = makeCql();
        if (!UpdatePattern.matcher(q).matches())
            throw new SQLException("Not an update statement.");
        super.execute(q);
        // we don't know how many rows were updated.
        return 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;getMetaData();;;public ResultSetMetaData getMetaData() throws SQLException
    {
        // todo: current impl of RSMD relies on knowing the results. implementing this will require refactoring CRSMD into 
        // two classes: the first will be an implementation whose methods don't rely on knowing the results, the second
        // will implement the full CRSMD interfae and extend or compose the first.
        throw new SQLFeatureNotSupportedException("PreparedStatement.getMetaData() hasn't been implemented yet.");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setByte(int,byte);;;public void setByte(int parameterIndex, byte x) throws SQLException
    {
        setObject(parameterIndex, new byte[]{x});
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setBytes(int,byte[]);;;public void setBytes(int parameterIndex, byte[] x) throws SQLException
    {
        setObject(parameterIndex, ByteBuffer.wrap(x));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setInt(int,int);;;public void setInt(int parameterIndex, int x) throws SQLException
    {
        setObject(parameterIndex, new BigInteger(Integer.toString(x)));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setLong(int,long);;;public void setLong(int parameterIndex, long x) throws SQLException
    {
        setObject(parameterIndex, x);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setNString(int,String);;;public void setNString(int parameterIndex, String value) throws SQLException
    {
        setString(parameterIndex, value);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setObject(int,Object);;;public void setObject(int parameterIndex, Object x) throws SQLException
    {
        variables.put(parameterIndex, x);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setShort(int,short);;;public void setShort(int parameterIndex, short x) throws SQLException
    {
        setInt(parameterIndex, x);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setString(int,String);;;public void setString(int parameterIndex, String x) throws SQLException
    {
        setObject(parameterIndex, x);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;getParameterMetaData();;;public ParameterMetaData getParameterMetaData() throws SQLException
    {
        throw new SQLFeatureNotSupportedException("PreparedStatement.getParameterMetaData() hasn't been implemented yet.");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setArray(int,Array);;;public void setArray(int parameterIndex, Array x) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setAsciiStream(int,InputStream);;;public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setAsciiStream(int,InputStream,int);;;public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setAsciiStream(int,InputStream,long);;;public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setBigDecimal(int,BigDecimal);;;public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setBinaryStream(int,InputStream);;;public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setBinaryStream(int,InputStream,int);;;public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setBinaryStream(int,InputStream,long);;;public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setBlob(int,Blob);;;public void setBlob(int parameterIndex, Blob x) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setBlob(int,InputStream);;;public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setBlob(int,InputStream,long);;;public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setBoolean(int,boolean);;;public void setBoolean(int parameterIndex, boolean x) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setCharacterStream(int,Reader);;;public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setCharacterStream(int,Reader,int);;;public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setCharacterStream(int,Reader,long);;;public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setClob(int,Clob);;;public void setClob(int parameterIndex, Clob x) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setClob(int,Reader);;;public void setClob(int parameterIndex, Reader reader) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setClob(int,Reader,long);;;public void setClob(int parameterIndex, Reader reader, long length) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setDate(int,Date);;;public void setDate(int parameterIndex, Date x) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setDate(int,Date,Calendar);;;public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setDouble(int,double);;;public void setDouble(int parameterIndex, double x) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setFloat(int,float);;;public void setFloat(int parameterIndex, float x) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setNCharacterStream(int,Reader);;;public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setNCharacterStream(int,Reader,long);;;public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setNClob(int,NClob);;;public void setNClob(int parameterIndex, NClob value) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setNClob(int,Reader);;;public void setNClob(int parameterIndex, Reader reader) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setNClob(int,Reader,long);;;public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setNull(int,int);;;public void setNull(int parameterIndex, int sqlType) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setNull(int,int,String);;;public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setObject(int,Object,int);;;public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setObject(int,Object,int,int);;;public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setRef(int,Ref);;;public void setRef(int parameterIndex, Ref x) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setRowId(int,RowId);;;public void setRowId(int parameterIndex, RowId x) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setSQLXML(int,SQLXML);;;public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setTime(int,Time);;;public void setTime(int parameterIndex, Time x) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setTime(int,Time,Calendar);;;public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setTimestamp(int,Timestamp);;;public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setTimestamp(int,Timestamp,Calendar);;;public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setURL(int,URL);;;public void setURL(int parameterIndex, URL x) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;setUnicodeStream(int,InputStream,int);;;public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException
    {
        throw new SQLFeatureNotSupportedException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraPreparedStatement;nextParam();;;private Object nextParam() throws SQLException
        {
            Object p = params.get(index++);
            if (p == null)
                throw new SQLException("No parameter bound to " + (index-1));
            return p;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraResultSet;getKey();;;public byte[] getKey();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraResultSet;getBigInteger(int);;;public BigInteger getBigInteger(int i);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraResultSet;getBigInteger(String);;;public BigInteger getBigInteger(String name);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraResultSet;getColumn(int);;;public TypedColumn getColumn(int i);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraResultSet;getColumn(String);;;public TypedColumn getColumn(String name);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;CassandraStatement(org.apache.cassandra.cql.jdbc.Connection);;;CassandraStatement(org.apache.cassandra.cql.jdbc.Connection con)
    {
        this(con, null);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;CassandraStatement(org.apache.cassandra.cql.jdbc.Connection,String);;;CassandraStatement(org.apache.cassandra.cql.jdbc.Connection con, String cql)
    {
        this.connection = con;
        this.cql = cql;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;isWrapperFor(Class<?>);;;public boolean isWrapperFor(Class<?> iface) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;unwrap(Class<T>);;;public <T> T unwrap(Class<T> iface) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;addBatch(String);;;public void addBatch(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;cancel();;;public void cancel() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;clearBatch();;;public void clearBatch() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;clearWarnings();;;public void clearWarnings() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;close();;;public void close() throws SQLException
    {
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;execute(String);;;public boolean execute(String query) throws SQLException
    {
        try
        {
            return connection.execute(query) != null;
        } 
        catch (InvalidRequestException e)
        {
            throw new SQLException(e.getWhy());
        }
        catch (UnavailableException e)
        {
            throw new SQLException("Cassandra was unavialable", e);
        }
        catch (TimedOutException e)
        {
            throw new SQLException(e.getMessage());
        }
        catch (SchemaDisagreementException e)
        {
            throw new SQLException("schema does not match across nodes, (try again later).");
        }
        catch (TException e)
        {
            throw new SQLException(e.getMessage());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;execute(String,int);;;public boolean execute(String arg0, int arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;execute(String,int[]);;;public boolean execute(String arg0, int[] arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;execute(String,String[]);;;public boolean execute(String arg0, String[] arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;executeBatch();;;public int[] executeBatch() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;executeQuery(String);;;public ResultSet executeQuery(String query) throws SQLException
    {
        try
        {
            CqlResult rSet = connection.execute(query);
            // todo: encapsulate.
            return new CResultSet(rSet, connection.decoder, connection.curKeyspace, connection.curColumnFamily);
        }
        catch (InvalidRequestException e)
        {
            throw new SQLException(e.getWhy());
        }
        catch (UnavailableException e)
        {
            throw new SQLException(e.getMessage());
        }
        catch (TimedOutException e)
        {
            throw new SQLException(e.getMessage());
        }
        catch (SchemaDisagreementException e)
        {
            throw new SQLException("schema does not match across nodes, (try again later).");
        }
        catch (TException e)
        {
            throw new SQLException(e.getMessage());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;executeUpdate(String);;;public int executeUpdate(String query) throws SQLException
    {
        if (!UpdatePattern.matcher(query).matches())
            throw new SQLException("Not an update statement.");
        try
        {
            CqlResult rSet = connection.execute(query);
            assert rSet.getType().equals(CqlResultType.VOID);
            // if only we knew how many rows were updated.
            return 0;
        }
        catch (InvalidRequestException e)
        {
            throw new SQLException(e.getWhy());
        }
        catch (UnavailableException e)
        {
            throw new SQLException(e.getMessage());
        }
        catch (TimedOutException e)
        {
            throw new SQLException(e.getMessage());
        }
        catch (SchemaDisagreementException e)
        {
            throw new SQLException("schema does not match across nodes, (try again later).");
        }
        catch (TException e)
        {
            throw new SQLException(e.getMessage());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;executeUpdate(String,int);;;public int executeUpdate(String arg0, int arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;executeUpdate(String,int[]);;;public int executeUpdate(String arg0, int[] arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;executeUpdate(String,String[]);;;public int executeUpdate(String arg0, String[] arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;getConnection();;;public Connection getConnection() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;getFetchDirection();;;public int getFetchDirection() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;getFetchSize();;;public int getFetchSize() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;getGeneratedKeys();;;public ResultSet getGeneratedKeys() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;getMaxFieldSize();;;public int getMaxFieldSize() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;getMaxRows();;;public int getMaxRows() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;getMoreResults();;;public boolean getMoreResults() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;getMoreResults(int);;;public boolean getMoreResults(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;getQueryTimeout();;;public int getQueryTimeout() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;getResultSet();;;public ResultSet getResultSet() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;getResultSetConcurrency();;;public int getResultSetConcurrency() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;getResultSetHoldability();;;public int getResultSetHoldability() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;getResultSetType();;;public int getResultSetType() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;getUpdateCount();;;public int getUpdateCount() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;getWarnings();;;public SQLWarning getWarnings() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;isClosed();;;public boolean isClosed() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;isPoolable();;;public boolean isPoolable() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;setCursorName(String);;;public void setCursorName(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;setEscapeProcessing(boolean);;;public void setEscapeProcessing(boolean arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;setFetchDirection(int);;;public void setFetchDirection(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;setFetchSize(int);;;public void setFetchSize(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;setMaxFieldSize(int);;;public void setMaxFieldSize(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;setMaxRows(int);;;public void setMaxRows(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;setPoolable(boolean);;;public void setPoolable(boolean arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CassandraStatement;setQueryTimeout(int);;;public void setQueryTimeout(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\ColumnDecoder;ColumnDecoder(List<KsDef>);;;public ColumnDecoder(List<KsDef> defs)
    {
        for (KsDef ks : defs)
        {
            for (CfDef cf : ks.getCf_defs())
            {
                try
                {
                    metadata.put(String.format("%s.%s", ks.getName(), cf.getName()), CFMetaData.fromThrift(cf));
                }
                catch (InvalidRequestException e)
                {
                    throw new RuntimeException(e);
                }
                catch (ConfigurationException e)
                {
                    throw new RuntimeException(e);
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\ColumnDecoder;getComparator(String,String);;;AbstractType getComparator(String keyspace, String columnFamily)
    {
        return metadata.get(String.format("%s.%s", keyspace, columnFamily)).comparator;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\ColumnDecoder;getNameType(String,String,ByteBuffer);;;AbstractType getNameType(String keyspace, String columnFamily, ByteBuffer name)
    {

        CFMetaData md = metadata.get(String.format("%s.%s", keyspace, columnFamily));
        try
        {
            if (ByteBufferUtil.string(name).equalsIgnoreCase(ByteBufferUtil.string(md.getKeyName())))
                return AsciiType.instance;
        }
        catch (CharacterCodingException e)
        {
            // not be the key name
        }
        return md.comparator;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\ColumnDecoder;getValueType(String,String,ByteBuffer);;;AbstractType getValueType(String keyspace, String columnFamily, ByteBuffer name)
    {
        CFMetaData md = metadata.get(String.format("%s.%s", keyspace, columnFamily));
        try
        {
            if (ByteBufferUtil.string(name).equalsIgnoreCase(ByteBufferUtil.string(md.getKeyName())))
                return md.getKeyValidator();
        }
        catch (CharacterCodingException e)
        {
            // not be the key name
        }
        ColumnDefinition cd = md.getColumnDefinition(name);
        return cd == null ? md.getDefaultValidator() : cd.getValidator();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\ColumnDecoder;getKeyValidator(String,String);;;public AbstractType getKeyValidator(String keyspace, String columnFamily)
    {
        return metadata.get(String.format("%s.%s", keyspace, columnFamily)).getKeyValidator();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\ColumnDecoder;colNameAsString(String,String,ByteBuffer);;;public String colNameAsString(String keyspace, String columnFamily, ByteBuffer name)
    {
        AbstractType comparator = getNameType(keyspace, columnFamily, name);
        return comparator.getString(name);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\ColumnDecoder;makeCol(String,String,Column);;;public TypedColumn makeCol(String keyspace, String columnFamily, Column column)
    {
        return new TypedColumn(column,
                               getNameType(keyspace, columnFamily, column.name),
                               getValueType(keyspace, columnFamily, column.name));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\Connection;Connection(String,int);;;public Connection(String hostName, int portNo) throws TTransportException
    {
        this.hostName = hostName;
        this.portNo = portNo;
        TSocket socket = new TSocket(hostName, portNo);
        transport = new TFramedTransport(socket);
        TProtocol protocol = new TBinaryProtocol(transport);
        client = new Cassandra.Client(protocol);
        socket.open();
        
        logger.info("Connected to {}:{}", hostName, portNo);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\Connection;Connection(String,int,String,String);;;public Connection(String hostName, int portNo, String userName, String password)
    throws AuthenticationException, AuthorizationException, TException
    {
        this(hostName, portNo);
        
        Map<String, String> credentials = new HashMap<String, String>();
        AuthenticationRequest areq = new AuthenticationRequest(credentials);
        client.login(areq) ;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\Connection;execute(String);;;public CqlResult execute(String queryStr)
    throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException
    {
        return execute(queryStr, defaultCompression);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\Connection;execute(String,Compression);;;public CqlResult execute(String queryStr, Compression compress)
    throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException
    {
        if (decoder == null)
            decoder = new ColumnDecoder(client.describe_keyspaces());
        
        curKeyspace = getKeyspace(queryStr);
        curColumnFamily = getColumnFamily(queryStr);
        try
        {
            return client.execute_cql_query(Utils.compressQuery(queryStr, compress), compress);
        }
        catch (TException error)
        {
            numFailures++;
            timeOfLastFailure = System.currentTimeMillis();
            throw error;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\Connection;getKeyspace(String);;;String getKeyspace(String query)
    {
        String ks = curKeyspace;
        Matcher isKeyspace = KeyspacePattern.matcher(query);
        if (isKeyspace.matches())
            ks = isKeyspace.group(1);
        return ks;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\Connection;getColumnFamily(String);;;String getColumnFamily(String query) 
    {
        String cf = curColumnFamily;
        Matcher isSelect = SelectPattern.matcher(query);
        if (isSelect.matches())
            cf = isSelect.group(1);
        Matcher isUpdate = UpdatePatter.matcher(query);
        if (isUpdate.matches())
            cf = isUpdate.group(1);   
        return cf;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\Connection;close();;;public void close()
    {
        transport.close();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\Connection;isOpen();;;public boolean isOpen()
    {
        return transport.isOpen();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\Connection;QueryMetadata(String,String);;;QueryMetadata(String keyspace, String columnFamily)
        {
            this.keyspace = keyspace;
            this.columnFamily = columnFamily;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\ConnectionPool;ConnectionPool(String);;;public ConnectionPool(String hostName) throws TTransportException
    {
        this(hostName, DEFAULT_PORT, DEFAULT_MAX_CONNECTIONS, DEFAULT_MAX_IDLE, DEFAULT_EVICTION_DELAY_MILLIS);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\ConnectionPool;ConnectionPool(String,int);;;public ConnectionPool(String hostName, int portNo) throws TTransportException
    {
        this(hostName, portNo, DEFAULT_MAX_CONNECTIONS, DEFAULT_MAX_IDLE, DEFAULT_EVICTION_DELAY_MILLIS);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\ConnectionPool;ConnectionPool(String,int,int,int,long);;;public ConnectionPool(String hostName, int portNo, int maxConns, int maxIdle, long evictionDelay)
    throws TTransportException
    {
        this.hostName = hostName;
        this.portNo = portNo;
        this.maxConns = maxConns;
        this.maxIdle = maxIdle;
        
        eviction = new Timer("EVICTION-THREAD", true);
        eviction.schedule(new EvictionTask(), new Date(), evictionDelay);
        
        connections.add(new Connection(hostName, portNo));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\ConnectionPool;borrowConnection();;;public Connection borrowConnection()
    {
        Connection conn = null;
        
        if ((conn = connections.poll()) == null)
        {
            try
            {
                conn = new Connection(hostName, portNo);
            }
            catch (TTransportException error)
            {
                logger.error(String.format("Error connecting to %s:%s", hostName, portNo), error);
            }
        }
        
        return conn;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\ConnectionPool;returnConnection(Connection);;;public void returnConnection(Connection connection)
    {
        if (connections.size() >= maxConns)
        {
            if (connection.isOpen()) connection.close();
            logger.warn("Max pool size reached; Connection discarded.");
            return;
        }
        
        if (!connection.isOpen())
        {
            logger.warn("Stubbornly refusing to return a closed connection to the pool (discarded instead).");
            return;
        }
        
        connections.add(connection);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\ConnectionPool;run();;;public void run()
        {
            int count = 0;
            
            while (connections.size() > maxIdle)
            {
                Connection conn = connections.poll();
                if (conn.isOpen()) conn.close();
                count++;
            }
            
            if (count > 0)
                logger.debug("Eviction run complete: {} connections evicted.", count);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;CResultSet(CqlResult,ColumnDecoder,String,String);;;CResultSet(CqlResult resultSet, ColumnDecoder decoder, String keyspace, String columnFamily)
    {
        this.decoder = decoder;
        this.keyspace = keyspace;
        this.columnFamily = columnFamily;
        rSetIter = resultSet.getRowsIterator();
        meta = new CResultSetMetaData();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getKey();;;public byte[] getKey()
    {
        return curRowKey;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getColumn(int);;;public TypedColumn getColumn(int i)
    {
        return values.get(i);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getColumn(String);;;public TypedColumn getColumn(String name)
    {
        return valueMap.get(name);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;close();;;public void close() throws SQLException
    {
        valueMap = null;
        values = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getBytes(TypedColumn);;;private byte[] getBytes(TypedColumn column)
    {
        ByteBuffer value = (ByteBuffer) column.getValue();
        wasNull = value == null;
        return value == null ? null : ByteBufferUtil.clone(value).array();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getBytes(int);;;public byte[] getBytes(int index) throws SQLException
    {
        return getBytes(values.get(index - 1));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getBytes(String);;;public byte[] getBytes(String name) throws SQLException
    {
        return getBytes(valueMap.get(name));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getDate(int);;;public Date getDate(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getDate(String);;;public Date getDate(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getDate(int,Calendar);;;public Date getDate(int arg0, Calendar arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getDate(String,Calendar);;;public Date getDate(String arg0, Calendar arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getDouble(int);;;public double getDouble(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getDouble(String);;;public double getDouble(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getFloat(int);;;public float getFloat(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getFloat(String);;;public float getFloat(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getBoolean(int);;;public boolean getBoolean(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getBoolean(String);;;public boolean getBoolean(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getBigInteger(TypedColumn);;;private BigInteger getBigInteger(TypedColumn column)
    {
        BigInteger value = (BigInteger) column.getValue();
        wasNull = value == null;
        return value;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getBigInteger(int);;;public BigInteger getBigInteger(int i)
    {
        return getBigInteger(values.get(i - 1));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getBigInteger(String);;;public BigInteger getBigInteger(String name)
    {
        return getBigInteger(valueMap.get(name));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getInt(TypedColumn);;;private int getInt(TypedColumn column) throws SQLException
    {
        // bit of a hack, this, but asking for getInt seems so common that we should accomodate it
        if (column.getValue() instanceof BigInteger)
        {
            wasNull = false;
            return getBigInteger(column).intValue();
        }
        else if (column.getValue() instanceof Long)
        {
            wasNull = false;
            return getLong(column).intValue();
        }
        else if (column.getValue() == null)
        {
            wasNull = true;
            return 0;
        }
        throw new SQLException("Non-integer value " + column.getValue());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getInt(int);;;public int getInt(int index) throws SQLException
    {
        return getInt(values.get(index - 1));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getInt(String);;;public int getInt(String name) throws SQLException
    {
        return getInt(valueMap.get(name));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getLong(TypedColumn);;;private Long getLong(TypedColumn column)
    {
        Long value = (Long) column.getValue();
        wasNull = value == null;
        return value == null ? 0 : value;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getLong(int);;;public long getLong(int index) throws SQLException
    {
        return getLong(values.get(index - 1));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getLong(String);;;public long getLong(String name) throws SQLException
    {
        return getLong(valueMap.get(name));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getMetaData();;;public ResultSetMetaData getMetaData() throws SQLException
    {
        return meta;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getObject(TypedColumn);;;private Object getObject(TypedColumn column)
    {
        Object value = column.getValue();
        wasNull = value == null;
        return value;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getObject(int);;;public Object getObject(int index) throws SQLException
    {
        return getObject(values.get(index - 1));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getObject(String);;;public Object getObject(String name) throws SQLException
    {
        return getObject(valueMap.get(name));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getObject(int,Map<String,Class<?>>);;;public Object getObject(int arg0, Map<String, Class<?>> arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getObject(String,Map<String,Class<?>>);;;public Object getObject(String arg0, Map<String, Class<?>> arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getRow();;;public int getRow() throws SQLException
    {
        return rowNumber;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getString(TypedColumn);;;private String getString(TypedColumn column)
    {
        String value = (String) column.getValue();
        wasNull = value == null;
        return value == null ? null : value;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getString(int);;;public String getString(int index) throws SQLException
    {
        return getString(values.get(index - 1));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getString(String);;;public String getString(String name) throws SQLException
    {
        return getString(valueMap.get(name));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getTime(int);;;public Time getTime(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getTime(String);;;public Time getTime(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getTime(int,Calendar);;;public Time getTime(int arg0, Calendar arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getTime(String,Calendar);;;public Time getTime(String arg0, Calendar arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getTimestamp(int);;;public Timestamp getTimestamp(int arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getTimestamp(String);;;public Timestamp getTimestamp(String arg0) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getTimestamp(int,Calendar);;;public Timestamp getTimestamp(int arg0, Calendar arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getTimestamp(String,Calendar);;;public Timestamp getTimestamp(String arg0, Calendar arg1) throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getType();;;public int getType() throws SQLException
    {
        return ResultSet.TYPE_FORWARD_ONLY;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;isAfterLast();;;public boolean isAfterLast() throws SQLException
    {
        return rowNumber == Integer.MAX_VALUE;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;isBeforeFirst();;;public boolean isBeforeFirst() throws SQLException
    {
        return rowNumber == 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;isClosed();;;public boolean isClosed() throws SQLException
    {
        return valueMap == null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;isFirst();;;public boolean isFirst() throws SQLException
    {
        return rowNumber == 1;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;isLast();;;public boolean isLast() throws SQLException
    {
        return !rSetIter.hasNext();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;last();;;public boolean last() throws SQLException
    {
        throw new UnsupportedOperationException("method not supported");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;unwrap(Class<T>);;;public <T> T unwrap(Class<T> iface) throws SQLException
    {
        if (iface.equals(CassandraResultSet.class))
            return (T) this;
        throw new SQLException("Unsupported unwrap interface: " + iface.getSimpleName());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;isWrapperFor(Class<?>);;;public boolean isWrapperFor(Class<?> iface) throws SQLException
    {
        return CassandraResultSet.class.isAssignableFrom(iface);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;next();;;public synchronized boolean next() throws SQLException
    {
        if (!values.isEmpty() || !valueMap.isEmpty())
        {
            values.clear();
            valueMap.clear();
        }
        if (rSetIter != null && rSetIter.hasNext())
        {
            CqlRow row = rSetIter.next();
            rowNumber++;
            curRowKey = row.getKey();
            List<Column> cols = row.getColumns();
            for (Column col : cols)
            {

                TypedColumn c = decoder.makeCol(keyspace, columnFamily, col);
                values.add(c);
                valueMap.put(decoder.colNameAsString(keyspace, columnFamily, col.name), c);
            }
            return !(values.isEmpty() && valueMap.isEmpty());
        } 
        else
        {
            rowNumber = Integer.MAX_VALUE;
            return false;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;wasNull();;;public boolean wasNull() throws SQLException
    {
        return wasNull;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;checkIndex(int);;;private void checkIndex(int i) throws SQLException
        {
            if (i >= values.size())
                throw new SQLException("Invalid column index " + i);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getColumnCount();;;public int getColumnCount() throws SQLException
        {
            return values.size();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;isAutoIncrement(int);;;public boolean isAutoIncrement(int column) throws SQLException
        {
            column--;
            checkIndex(column);
            return values.get(column).getValueType() instanceof CounterColumnType; // todo: check Value is correct.
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;isCaseSensitive(int);;;public boolean isCaseSensitive(int column) throws SQLException
        {
            column--;
            checkIndex(column);
            TypedColumn tc = values.get(column);
            return tc.getValueType().isCaseSensitive();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;isSearchable(int);;;public boolean isSearchable(int column) throws SQLException
        {
            return false;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;isCurrency(int);;;public boolean isCurrency(int column) throws SQLException
        {
            column--;
            checkIndex(column);
            TypedColumn tc = values.get(column);
            return tc.getValueType().isCurrency();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;isNullable(int);;;public int isNullable(int column) throws SQLException
        {
            return ResultSetMetaData.columnNullable;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;isSigned(int);;;public boolean isSigned(int column) throws SQLException
        {
            column--;
            checkIndex(column);
            TypedColumn tc = values.get(column);
            return tc.getValueType().isSigned();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getColumnDisplaySize(int);;;public int getColumnDisplaySize(int column) throws SQLException
        {
            column--;
            checkIndex(column);
            return values.get(column).getValueString().length();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getColumnLabel(int);;;public String getColumnLabel(int column) throws SQLException
        {
            return getColumnName(column);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getColumnName(int);;;public String getColumnName(int column) throws SQLException
        {
            column--;
            checkIndex(column);
            return values.get(column).getNameString();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getSchemaName(int);;;public String getSchemaName(int column) throws SQLException
        {
            return keyspace;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getPrecision(int);;;public int getPrecision(int column) throws SQLException
        {
            column--;
            checkIndex(column);
            TypedColumn col = values.get(column);
            return col.getValueType().getPrecision(col.getValue());
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getScale(int);;;public int getScale(int column) throws SQLException
        {
            column--;
            checkIndex(column);
            TypedColumn tc = values.get(column);
            return tc.getValueType().getScale(tc.getValue());
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getTableName(int);;;public String getTableName(int column) throws SQLException
        {
            return columnFamily;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getCatalogName(int);;;public String getCatalogName(int column) throws SQLException
        {
            throw new SQLFeatureNotSupportedException("Cassandra has no catalogs");
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getColumnType(int);;;public int getColumnType(int column) throws SQLException
        {
            column--;
            checkIndex(column);
            return values.get(column).getValueType().getJdbcType();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getColumnTypeName(int);;;public String getColumnTypeName(int column) throws SQLException
        {
            column--;
            checkIndex(column);
            return values.get(column).getValueType().getClass().getSimpleName();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;isReadOnly(int);;;public boolean isReadOnly(int column) throws SQLException
        {
            return column == 0;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;isWritable(int);;;public boolean isWritable(int column) throws SQLException
        {
            return column > 0;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;isDefinitelyWritable(int);;;public boolean isDefinitelyWritable(int column) throws SQLException
        {
            return isWritable(column);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;getColumnClassName(int);;;public String getColumnClassName(int column) throws SQLException
        {
            column--;
            checkIndex(column);
            return values.get(column).getValueType().getType().getName();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;unwrap(Class<T>);;;public <T> T unwrap(Class<T> iface) throws SQLException
        {
            throw new SQLException("No wrapping implemented");
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\CResultSet;isWrapperFor(Class<?>);;;public boolean isWrapperFor(Class<?> iface) throws SQLException
        {
            return false;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\DriverResolverException;DriverResolverException(String);;;public DriverResolverException(String errMsg) {
		super(errMsg);
	}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\InvalidUrlException;InvalidUrlException(String);;;public InvalidUrlException(String errMsg) {
		super(errMsg);
	}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\TypedColumn;TypedColumn(Column,AbstractType,AbstractType);;;public TypedColumn(Column column, AbstractType comparator, AbstractType validator)
    {
        rawColumn = column;
        this.value = column.value == null ? null : validator.compose(column.value);
        nameString = comparator.getString(column.name);
        nameType = comparator;
        valueType = validator;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\TypedColumn;getRawColumn();;;public Column getRawColumn()
    {
        return rawColumn;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\TypedColumn;getValue();;;public Object getValue()
    {
        return value;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\TypedColumn;getNameString();;;public String getNameString()
    {
        return nameString;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\TypedColumn;getValueString();;;public String getValueString()
    {
        return valueType.getString(rawColumn.value);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\TypedColumn;getNameType();;;public AbstractType getNameType()
    {
        return nameType;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\TypedColumn;getValueType();;;public AbstractType getValueType()
    {
        return valueType;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\src\org\apache\cassandra\cql\jdbc\Utils;compressQuery(String,Compression);;;public static ByteBuffer compressQuery(String queryStr, Compression compression)
    {
        byte[] data = queryStr.getBytes(Charsets.UTF_8);
        Deflater compressor = new Deflater();
        compressor.setInput(data);
        compressor.finish();
        
        ByteArrayOutputStream byteArray = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        
        while (!compressor.finished())
        {
            int size = compressor.deflate(buffer);
            byteArray.write(buffer, 0, size);
        }
        
        logger.trace("Compressed query statement {} bytes in length to {} bytes",
                     data.length,
                     byteArray.size());
        
        return ByteBuffer.wrap(byteArray.toByteArray());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\EmbeddedServiceBase;cleanUpOldStuff();;;@BeforeClass 
    public static void cleanUpOldStuff() throws IOException
    {
        CleanupHelper.cleanupAndLeaveDirs();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\EmbeddedServiceBase;startCassandraServer();;;public static void startCassandraServer() throws IOException, ConfigurationException
    {
        if (!checkIfServerRunning())
        {
            loadData();
            cassandra = new EmbeddedCassandraService();
            cassandra.start();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\EmbeddedServiceBase;loadData();;;static void loadData() throws ConfigurationException
    {
        for (KSMetaData table : SchemaLoader.schemaDefinition())
        {
            for (CFMetaData cfm : table.cfMetaData().values())
            {
                CFMetaData.map(cfm);
            }
            DatabaseDescriptor.setTableDefinition(table, DatabaseDescriptor.getDefsVersion());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\EmbeddedServiceBase;checkIfServerRunning();;;static boolean checkIfServerRunning()
    {
        try
        {
            Socket socket = new Socket("127.0.0.1", 9170);
            return socket.getInetAddress() != null;
        } 
        catch (UnknownHostException e)
        {
            return false;
        }
        catch (IOException e)
        {
            return false;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\JdbcDriverTest;startServer();;;@BeforeClass
    public static void startServer() throws Exception
    {
        startCassandraServer();
        Class.forName("org.apache.cassandra.cql.jdbc.CassandraDriver");
        con = DriverManager.getConnection("jdbc:cassandra:root/root@localhost:9170/Keyspace1");
        String[] inserts = 
        {
            String.format("UPDATE Standard1 SET '%s' = '%s', '%s' = '%s' WHERE KEY = '%s'", first, firstrec, last, lastrec, jsmith),    
            "UPDATE JdbcInteger SET 1 = 11, 2 = 22, 42='fortytwo' WHERE KEY = '" + jsmith + "'",
            "UPDATE JdbcInteger SET 3 = 33, 4 = 44 WHERE KEY = '" + jsmith + "'",
            "UPDATE JdbcLong SET 1 = 11, 2 = 22 WHERE KEY = '" + jsmith + "'",
            "UPDATE JdbcAscii SET 'first' = 'firstrec', last = 'lastrec' WHERE key = '" + jsmith + "'",
            String.format("UPDATE JdbcBytes SET '%s' = '%s', '%s' = '%s' WHERE key = '%s'", first, firstrec, last, lastrec, jsmith),
            "UPDATE JdbcUtf8 SET 'first' = 'firstrec', fortytwo = '42', last = 'lastrec' WHERE key = '" + jsmith + "'",
        };
        for (String q : inserts)
        {
            try 
            {
                executeNoResults(con, q);
            }
            catch (SQLException ex)
            {
                throw new AssertionError(ex.getMessage() + ", query:" + q);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\JdbcDriverTest;expectedMetaData(ResultSetMetaData,int,String,String,String,String,int,String,boolean,boolean);;;private static void expectedMetaData(ResultSetMetaData md, int col, String colClass, String table, String schema,
                                  String label, int type, String typeName, boolean signed, boolean caseSensitive) throws SQLException
    {
        assertEquals(colClass, md.getColumnClassName(col)); // full class name of type<T>
        assertEquals(table, md.getTableName(col));
        assertEquals(schema, md.getSchemaName(col));
        assertEquals(label, md.getColumnLabel(col));
        assertEquals(label, md.getColumnName(col));
        assertEquals(type, md.getColumnType(col));
        assertEquals(typeName, md.getColumnTypeName(col));
        assertEquals(signed, md.isSigned(col));
        assertEquals(caseSensitive, md.isCaseSensitive(col));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\JdbcDriverTest;expectedMetaData(ResultSetMetaData,int,String,int,String,boolean,boolean);;;private static void expectedMetaData(ResultSetMetaData md, int col,
                                         String valuClass, int valuType, String valuTypeName, boolean valuSigned, boolean valuCaseSense) throws SQLException
    {
        assertEquals(valuClass, md.getColumnClassName(col));
        assertEquals(valuType, md.getColumnType(col));
        assertEquals(valuTypeName, md.getColumnTypeName(col));
        assertEquals(valuSigned, md.isSigned(col));
        assertEquals(valuCaseSense, md.isCaseSensitive(col));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\JdbcDriverTest;testNonDefaultColumnValidators();;;@Test
    public void testNonDefaultColumnValidators() throws SQLException
    {
        String key = FBUtilities.bytesToHex("Integer".getBytes());
        Statement stmt = con.createStatement();
        stmt.executeUpdate("update JdbcInteger set 1=36893488147419103232, 42='fortytwofortytwo' where key='" + key + "'");
        ResultSet rs = stmt.executeQuery("select 1, 2, 42 from JdbcInteger where key='" + key + "'");
        assert rs.next();
        assert rs.getObject("1").equals(new BigInteger("36893488147419103232"));
        assert rs.getString("42").equals("fortytwofortytwo") : rs.getString("42");
        
        ResultSetMetaData md = rs.getMetaData();
        assert md.getColumnCount() == 3;
        expectedMetaData(md, 1, BigInteger.class.getName(), "JdbcInteger", "Keyspace1", "1", Types.BIGINT, IntegerType.class.getSimpleName(), true, false);
        expectedMetaData(md, 2, BigInteger.class.getName(), "JdbcInteger", "Keyspace1", "2", Types.BIGINT, IntegerType.class.getSimpleName(), true, false);
        expectedMetaData(md, 3, String.class.getName(), "JdbcInteger", "Keyspace1", "42", Types.VARCHAR, UTF8Type.class.getSimpleName(), false, true);
        
        rs = stmt.executeQuery("select key, 1, 2, 42 from JdbcInteger where key='" + key + "'");
        assert rs.next();
        assert Arrays.equals(rs.getBytes("key"), FBUtilities.hexToBytes(key));
        assert rs.getObject("1").equals(new BigInteger("36893488147419103232"));
        assert rs.getString("42").equals("fortytwofortytwo") : rs.getString("42");

        stmt.executeUpdate("update JdbcUtf8 set a='aa', b='bb', fortytwo='4242' where key='" + key + "'");
        rs = stmt.executeQuery("select a, b, fortytwo from JdbcUtf8 where key='" + key + "'");
        assert rs.next();
        assert rs.getString("a").equals("aa");
        assert rs.getString("b").equals("bb");
        assert rs.getInt("fortytwo") == 4242L;
        
        md = rs.getMetaData();
        expectedMetaData(md, 1, String.class.getName(), "JdbcUtf8", "Keyspace1", "a", Types.VARCHAR, UTF8Type.class.getSimpleName(), false, true);
        expectedMetaData(md, 2, String.class.getName(), "JdbcUtf8", "Keyspace1", "b", Types.VARCHAR, UTF8Type.class.getSimpleName(), false, true);
        expectedMetaData(md, 3, BigInteger.class.getName(), "JdbcUtf8", "Keyspace1", "fortytwo", Types.BIGINT, IntegerType.class.getSimpleName(), true, false);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\JdbcDriverTest;testLongMetadata();;;@Test
    public void testLongMetadata() throws SQLException
    {
        String key = FBUtilities.bytesToHex("Long".getBytes());
        Statement stmt = con.createStatement();
        stmt.executeUpdate("UPDATE JdbcLong SET 1=111, 2=222 WHERE KEY = '" + key + "'");
        ResultSet rs = stmt.executeQuery("SELECT 1, 2 from JdbcLong WHERE KEY = '" + key + "'");
        assert rs.next();
        assert rs.getLong("1") == 111;
        assert rs.getLong("2") == 222;
        
        ResultSetMetaData md = rs.getMetaData();
        assert md.getColumnCount() == 2;
        expectedMetaData(md, 1, Long.class.getName(), "JdbcLong", "Keyspace1", "1", Types.INTEGER, LongType.class.getSimpleName(), true, false);
        expectedMetaData(md, 2, Long.class.getName(), "JdbcLong", "Keyspace1", "2", Types.INTEGER, LongType.class.getSimpleName(), true, false);
        
        for (int i = 0; i < md.getColumnCount(); i++)
            expectedMetaData(md, i + 1, Long.class.getName(), Types.INTEGER, LongType.class.getSimpleName(), true, false);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\JdbcDriverTest;testStringMetadata();;;@Test
    public void testStringMetadata() throws SQLException
    {
        String aKey = FBUtilities.bytesToHex("ascii".getBytes());
        String uKey = FBUtilities.bytesToHex("utf8".getBytes());
        Statement stmt = con.createStatement();
        stmt.executeUpdate("UPDATE JdbcAscii SET a='aa', b='bb' WHERE KEY = '" + aKey + "'");
        stmt.executeUpdate("UPDATE JdbcUtf8 SET a='aa', b='bb' WHERE KEY = '" + uKey + "'");
        ResultSet rs0 = stmt.executeQuery("SELECT a, b FROM JdbcAscii WHERE KEY = '" + aKey + "'");
        ResultSet rs1 = stmt.executeQuery("SELECT a, b FROM JdbcUtf8 WHERE KEY = '" + uKey + "'");
        for (ResultSet rs : new ResultSet[] { rs0, rs1 }) 
        {
            assert rs.next();
            assert rs.getString("a").equals("aa");
            assert rs.getString("b").equals("bb");
        }
        
        ResultSetMetaData md = rs0.getMetaData();
        assert md.getColumnCount() == 2;
        expectedMetaData(md, 1, String.class.getName(), "JdbcAscii", "Keyspace1", "a", Types.VARCHAR, AsciiType.class.getSimpleName(), false, true);
        expectedMetaData(md, 2, String.class.getName(), "JdbcAscii", "Keyspace1", "b", Types.VARCHAR, AsciiType.class.getSimpleName(), false, true);
        md = rs1.getMetaData();
        assert md.getColumnCount() == 2;
        expectedMetaData(md, 1, String.class.getName(), "JdbcUtf8", "Keyspace1", "a", Types.VARCHAR, UTF8Type.class.getSimpleName(), false, true);
        expectedMetaData(md, 2, String.class.getName(), "JdbcUtf8", "Keyspace1", "b", Types.VARCHAR, UTF8Type.class.getSimpleName(), false, true);

        for (int i = 0; i < 2; i++)
        {
            expectedMetaData(rs0.getMetaData(),
                             i + 1,
                             String.class.getName(),
                             Types.VARCHAR,
                             AsciiType.class.getSimpleName(),
                             false,
                             true);
            expectedMetaData(rs1.getMetaData(),
                             i + 1,
                             String.class.getName(),
                             Types.VARCHAR,
                             UTF8Type.class.getSimpleName(),
                             false,
                             true);

        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\JdbcDriverTest;testBytesMetadata();;;@Test
    public void testBytesMetadata() throws SQLException 
    {
        String key = FBUtilities.bytesToHex("bytes".getBytes());
        Statement stmt = con.createStatement();
        byte[] a = "a_".getBytes();
        byte[] b = "b_".getBytes();
        byte[] aa = "_aa_".getBytes();
        byte[] bb = "_bb_".getBytes();
        stmt.executeUpdate(String.format(
                "UPDATE JdbcBytes set '%s'='%s', '%s'='%s' WHERE KEY = '" + key + "'",
                FBUtilities.bytesToHex(a),
                FBUtilities.bytesToHex(aa),
                FBUtilities.bytesToHex(b),
                FBUtilities.bytesToHex(bb)));
        ResultSet rs = stmt.executeQuery(String.format(
                "SELECT '%s', '%s' from JdbcBytes WHERE KEY = '" + key + "'",
                FBUtilities.bytesToHex(a),
                FBUtilities.bytesToHex(b)));
        assert rs.next();
        assert Arrays.equals(aa, rs.getBytes(1));
        assert Arrays.equals(bb, rs.getBytes(2));
        assert Arrays.equals(aa, rs.getBytes(FBUtilities.bytesToHex(a)));
        assert Arrays.equals(bb, rs.getBytes(FBUtilities.bytesToHex(b)));
        ResultSetMetaData md = rs.getMetaData();
        assert md.getColumnCount() == 2;
        expectedMetaData(md, 1, ByteBuffer.class.getName(), "JdbcBytes", "Keyspace1", FBUtilities.bytesToHex(a), Types.BINARY, BytesType.class.getSimpleName(), false, false);
        expectedMetaData(md, 2, ByteBuffer.class.getName(), "JdbcBytes", "Keyspace1", FBUtilities.bytesToHex(b), Types.BINARY, BytesType.class.getSimpleName(), false, false);
        
        for (int i = 0; i < md.getColumnCount(); i++)
            expectedMetaData(md, i + 1, ByteBuffer.class.getName(), Types.BINARY, BytesType.class.getSimpleName(), false, false);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\JdbcDriverTest;testWithStatementBytesType();;;@Test
    public void testWithStatementBytesType() throws SQLException
    {
        Statement stmt = con.createStatement();
        
        String selectQ = String.format("SELECT '%s', '%s' FROM Standard1 WHERE KEY='%s'", first, last, jsmith);
        checkResultSet(stmt.executeQuery(selectQ), "Bytes", 1, first, last);
        
        selectQ = String.format("SELECT '%s', '%s' FROM JdbcBytes WHERE KEY='%s'", first, last, jsmith);
        checkResultSet(stmt.executeQuery(selectQ), "Bytes", 1, first, last);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\JdbcDriverTest;testWithStatement();;;@Test
    public void testWithStatement() throws SQLException
    {
        Statement stmt = con.createStatement();
        
        String selectQ = "SELECT 1, 2 FROM JdbcInteger WHERE KEY='" + jsmith + "'";
        checkResultSet(stmt.executeQuery(selectQ), "Int", 1, "1", "2");
        
        selectQ = "SELECT 3, 4 FROM JdbcInteger WHERE KEY='" + jsmith + "'";
        checkResultSet(stmt.executeQuery(selectQ), "Int", 1, "3", "4");
        
        selectQ = "SELECT 1, 2, 3, 4 FROM JdbcInteger WHERE KEY='" + jsmith + "'";
        checkResultSet(stmt.executeQuery(selectQ), "Int", 1, "1", "2", "3", "4");
        
        selectQ = "SELECT 1, 2 FROM JdbcLong WHERE KEY='" + jsmith + "'";
        checkResultSet(stmt.executeQuery(selectQ), "Long", 1, "1", "2");
        
        selectQ = "SELECT 'first', last FROM JdbcAscii WHERE KEY='" + jsmith + "'";
        checkResultSet(stmt.executeQuery(selectQ), "String", 1, "first", "last");
        
        selectQ = String.format("SELECT '%s', '%s' FROM JdbcBytes WHERE KEY='%s'", first, last, jsmith);
        checkResultSet(stmt.executeQuery(selectQ), "Bytes", 1, first, last);
        
        selectQ = "SELECT 'first', last FROM JdbcUtf8 WHERE KEY='" + jsmith + "'";
        checkResultSet(stmt.executeQuery(selectQ), "String", 1, "first", "last");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\JdbcDriverTest;testWithPreparedStatementBytesType();;;@Test
    public void testWithPreparedStatementBytesType() throws SQLException
    {
        String selectQ = String.format("SELECT '%s', '%s' FROM Standard1 WHERE KEY='%s'", first, last, jsmith);
        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Bytes", 1, first, last);
        
        selectQ = String.format("SELECT '%s', '%s' FROM JdbcBytes WHERE KEY='%s'", first, last, jsmith);
        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Bytes", 1, first, last);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\JdbcDriverTest;testWithPreparedStatement();;;@Test
    public void testWithPreparedStatement() throws SQLException
    {
        String selectQ = String.format("SELECT '%s', '%s' FROM Standard1 WHERE KEY='%s'", first, last, jsmith);
        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Bytes", 1, first, last);
        
        selectQ = "SELECT 1, 2 FROM JdbcInteger WHERE KEY='" + jsmith + "'";
        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Int", 1, "1", "2");
        
        selectQ = "SELECT 3, 4 FROM JdbcInteger WHERE KEY='" + jsmith + "'";
        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Int", 1, "3", "4");
        
        selectQ = "SELECT 1, 2, 3, 4 FROM JdbcInteger WHERE KEY='" + jsmith + "'";
        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Int", 1, "1", "2", "3", "4");
        
        selectQ = "SELECT 1, 2 FROM JdbcLong WHERE KEY='" + jsmith + "'";
        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Long", 1, "1", "2");
        
        selectQ = "SELECT 'first', last FROM JdbcAscii WHERE KEY='" + jsmith + "'";
        checkResultSet(executePreparedStatementWithResults(con, selectQ), "String", 1, "first", "last");
        
        selectQ = String.format("SELECT '%s', '%s' FROM JdbcBytes WHERE KEY='%s'", first, last, jsmith);
        checkResultSet(executePreparedStatementWithResults(con, selectQ), "Bytes", 1, first, last);
        
        selectQ = "SELECT 'first', last FROM JdbcUtf8 WHERE KEY='" + jsmith + "'";
        checkResultSet(executePreparedStatementWithResults(con, selectQ), "String", 1, "first", "last");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\JdbcDriverTest;testWithDeleteStatement();;;@Test
    public void testWithDeleteStatement() throws SQLException
    {
        // the pattern: 0) a deltion, 1) ensure deletion 2) ensure deletion wasn't over-eager.
        String[] statements = 
        {
                String.format("DELETE '%s', '%s' FROM Standard1 WHERE KEY='%s'",
                              FBUtilities.bytesToHex("firstN".getBytes()),
                              FBUtilities.bytesToHex("lastN".getBytes()),
                              jsmith),
                String.format("SELECT '%s', '%s' FROM Standard1 WHERE KEY='%s'",
                              FBUtilities.bytesToHex("firstN".getBytes()),
                              FBUtilities.bytesToHex("lastN".getBytes()),
                              jsmith),
                String.format("SELECT '%s' FROM Standard1 WHERE KEY='%s'",
                              first,
                              jsmith),
                
                "DELETE 1, 3 FROM JdbcInteger WHERE KEY='" + jsmith + "'",
                "SELECT 1, 3 FROM JdbcInteger WHERE KEY='" + jsmith + "'",
                "SELECT 2, 4 FROM JdbcInteger WHERE KEY='" + jsmith + "'",
                
                "DELETE 1 FROM JdbcLong WHERE KEY='" + jsmith + "'",
                "SELECT 1 FROM JdbcLong WHERE KEY='" + jsmith + "'",
                "SELECT 2 FROM JdbcLong WHERE KEY='" + jsmith + "'",
                
                "DELETE 'first' FROM JdbcAscii WHERE KEY='" + jsmith + "'",
                "SELECT 'first' FROM JdbcAscii WHERE KEY='" + jsmith + "'",
                "SELECT last FROM JdbcAscii WHERE KEY='" + jsmith + "'",
                
                String.format("DELETE '%s' FROM JdbcBytes WHERE KEY='%s'", first, jsmith),
                String.format("SELECT '%s' FROM JdbcBytes WHERE KEY='%s'", first, jsmith),
                String.format("SELECT '%s' FROM JdbcBytes WHERE KEY='%s'", last, jsmith),
                
                "DELETE 'first' FROM JdbcUtf8 WHERE KEY='" + jsmith + "'",
                "SELECT 'first' FROM JdbcUtf8 WHERE KEY='" + jsmith + "'",
                "SELECT last FROM JdbcUtf8 WHERE KEY='" + jsmith + "'",
        };
        
        for (int i = 0; i < statements.length/3; i++) 
        {
            executeNoResults(con, statements[3*i]);
            ResultSet rs = executePreparedStatementWithResults(con, statements[3*i+1]);
            rs.next();
            rs.getObject(1);
            assert rs.wasNull();
            rs.close();

            rs = executePreparedStatementWithResults(con, statements[3*i+2]);
            assert rs.next() : statements[3*i+2];
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\JdbcDriverTest;stopServer();;;@AfterClass
    public static void stopServer() throws SQLException
    {
        if (con != null)
        {
            String[] stmts = 
            {
                "TRUNCATE Standard1",
                "TRUNCATE JdbcAscii", // todo: this one is broken for some reason.
                "TRUNCATE JdbcInteger",
                "TRUNCATE JdbcLong",
                "TRUNCATE JdbcBytes",
                "TRUNCATE JdbcUtf8",
            };
            for (String stmt : stmts)
            {
                try 
                {
                    executeNoResults(con, stmt);
                }
                catch (SQLException ex)
                {
                    throw new SQLException(stmt, ex);
                }
            }
            con.close();
            con = null;
        }
        
        // Cleanup backup links
        File backups = new File("build/test/cassandra/data/Keyspace1/backups");
        if (backups.exists())
            for (String fname : backups.list())
                new File("build/test/cassandra/data/Keyspace1/backups" + File.separator + fname).delete();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\JdbcDriverTest;checkResultSet(ResultSet,String,int,String);;;private static void checkResultSet(ResultSet rs, String accessor, int expectedRows, String... cols) throws SQLException
    {
        int actualRows = 0;
        assert rs != null;
        while (rs.next())
        {
            actualRows++;
            for (int c = 0; c < cols.length; c++)
            {
                // getObject should always work.
                assert rs.getObject(cols[c]) != null;
                assert rs.getObject(c+1) != null;
                
                // now call the accessor.
                try
                {
                    Method byInt = rs.getClass().getDeclaredMethod("get" + accessor, int.class);
                    byInt.setAccessible(true);
                    assert byInt.invoke(rs, c+1) != null;
                    
                    Method byString = rs.getClass().getDeclaredMethod("get" + accessor, String.class);
                    byString.setAccessible(true);
                    assert byString.invoke(rs, cols[c]) != null;
                }
                catch (NoSuchMethodException ex)
                {
                    throw new RuntimeException(ex);
                }
                catch (IllegalAccessException ex)
                {
                    throw new RuntimeException(ex);
                }
                catch (InvocationTargetException ex) 
                {
                    throw new RuntimeException(ex);
                }
            }
        }
        
        assert actualRows == expectedRows : String.format("expected %d rows, got %d", expectedRows, actualRows);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\JdbcDriverTest;executePreparedStatementWithResults(Connection,String);;;private static ResultSet executePreparedStatementWithResults(final Connection con, final String selectQ) throws SQLException
    {
        PreparedStatement statement = con.prepareStatement(selectQ);
        return statement.executeQuery();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\JdbcDriverTest;executeNoResults(Connection,String);;;private static void executeNoResults(final Connection con, final String cql) throws SQLException
    {
        PreparedStatement statement = con.prepareStatement(cql);
        statement.execute();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\jdbc\PreparedStatementTest;waxOn();;;@BeforeClass
    public static void waxOn() throws Exception
    {
        startCassandraServer();
        Class.forName("org.apache.cassandra.cql.jdbc.CassandraDriver");
        con = DriverManager.getConnection("jdbc:cassandra:root/root@localhost:9170/Keyspace1");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\jdbc\PreparedStatementTest;testBytes();;;@Test
    public void testBytes() throws SQLException
    {
        // insert
        PreparedStatement stmt = con.prepareStatement("update JdbcBytes set ?=?, ?=? where key=?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setBytes(1, FBUtilities.toByteArray(i));
            stmt.setBytes(2, FBUtilities.toByteArray((i+1)*10));
            stmt.setBytes(3, FBUtilities.toByteArray(i+100));
            stmt.setBytes(4, FBUtilities.toByteArray((i+1)*10+1));
            stmt.setBytes(5, key);
            stmt.executeUpdate();
        }
        
        // verify
        stmt = con.prepareStatement("select ?, ? from JdbcBytes where key=?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setBytes(1, FBUtilities.toByteArray(i));
            stmt.setBytes(2, FBUtilities.toByteArray(i+100));
            stmt.setBytes(3, key);
            ResultSet rs = stmt.executeQuery();
            assert rs.next();
            assert Arrays.equals(rs.getBytes(FBUtilities.bytesToHex(FBUtilities.toByteArray(i))), FBUtilities.toByteArray((i+1)*10));
            assert Arrays.equals(rs.getBytes(FBUtilities.bytesToHex(FBUtilities.toByteArray(i+100))), FBUtilities.toByteArray((i+1)*10+1));
            assert Arrays.equals(rs.getBytes(1), FBUtilities.toByteArray((i+1)*10));
            assert Arrays.equals(rs.getBytes(2), FBUtilities.toByteArray((i+1)*10+1));
            assert !rs.next();
            rs.close();
        }
        
        // delete
        stmt = con.prepareStatement("delete ?, ? from JdbcBytes where key=?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setBytes(1, FBUtilities.toByteArray(i));
            stmt.setBytes(2, FBUtilities.toByteArray(i+100));
            stmt.setBytes(3, key);
            stmt.execute();
        }
        
        // verify
        stmt = con.prepareStatement("select ?, ? from JdbcBytes where key=?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setBytes(1, FBUtilities.toByteArray(i));
            stmt.setBytes(2, FBUtilities.toByteArray(i+100));
            stmt.setBytes(3, key);
            ResultSet rs = stmt.executeQuery();
            rs.next();
            assert rs.getString(1) == null;  assert rs.getString(2) == null;
            rs.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\jdbc\PreparedStatementTest;testUtf8();;;@Test
    public void testUtf8() throws SQLException
    {
        // insert.
        PreparedStatement stmt = con.prepareStatement("update JdbcUtf8 set ?=?, ?=? where key = ?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setString(1, "1\u6543\u3435\u6554");
            stmt.setString(2, "abc\u6543\u3435\u6554");
            stmt.setString(3, "2\u6543\u3435\u6554");
            stmt.setString(4, "def\u6543\u3435\u6554");
            stmt.setBytes(5, key);
            stmt.executeUpdate();
        }
        
        // verify
        stmt = con.prepareStatement("select ?, ? from JdbcUtf8 where key=?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setString(1, "1\u6543\u3435\u6554");
            stmt.setString(2, "2\u6543\u3435\u6554");
            stmt.setBytes(3, key);
            ResultSet rs = stmt.executeQuery();
            assert rs.next();
            assert rs.getString("1\u6543\u3435\u6554").equals("abc\u6543\u3435\u6554");
            assert rs.getString("2\u6543\u3435\u6554").equals("def\u6543\u3435\u6554");
            assert rs.getString(1).equals("abc\u6543\u3435\u6554");
            assert rs.getString(2).equals("def\u6543\u3435\u6554");
            assert !rs.next();
            rs.close();
        }
        
        // delete
        stmt = con.prepareStatement("delete ?, ? from JdbcUtf8 where key=?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setString(1, "1\u6543\u3435\u6554");
            stmt.setString(2, "2\u6543\u3435\u6554");
            stmt.setBytes(3, key);
            stmt.execute();
        }
        
        // verify
        stmt = con.prepareStatement("select ?, ? from JdbcUtf8 where key=?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setString(1, "1\u6543\u3435\u6554");
            stmt.setString(2, "2\u6543\u3435\u6554");
            stmt.setBytes(3, key);
            ResultSet rs = stmt.executeQuery();
            rs.next();
            assert rs.getString(1) == null;  assert rs.getString(2) == null;
            rs.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\jdbc\PreparedStatementTest;testAscii();;;@Test
    public void testAscii() throws SQLException
    {
        // insert.
        PreparedStatement stmt = con.prepareStatement("update JdbcAscii set ?=?, ?=? where key = ?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setString(1, "1");
            stmt.setString(2, "abc");
            stmt.setString(3, "2");
            stmt.setString(4, "def");
            stmt.setBytes(5, key);
            stmt.executeUpdate();
        }
        
        // verify
        stmt = con.prepareStatement("select ?, ? from JdbcAscii where key=?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setString(1, "1");
            stmt.setString(2, "2");
            stmt.setBytes(3, key);
            ResultSet rs = stmt.executeQuery();
            assert rs.next();
            assert rs.getString("1").equals("abc");
            assert rs.getString("2").equals("def");
            assert rs.getString(1).equals("abc");
            assert rs.getString(2).equals("def");
            assert !rs.next();
            rs.close();
        }
        
        // delete
        stmt = con.prepareStatement("delete ?, ? from JdbcAscii where key=?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setString(1, "1");
            stmt.setString(2, "2");
            stmt.setBytes(3, key);
            stmt.execute();
        }
        
        // verify
        stmt = con.prepareStatement("select ?, ? from JdbcAscii where key=?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setString(1, "1");
            stmt.setString(2, "2");
            stmt.setBytes(3, key);
            ResultSet rs = stmt.executeQuery();
            rs.next();
            assert rs.getString(1) == null;  assert rs.getString(2) == null;
            rs.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\jdbc\PreparedStatementTest;testLong();;;@Test
    public void testLong() throws SQLException
    {
        PreparedStatement stmt = con.prepareStatement("update JdbcLong set ?=?, ?=? where key = ?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setLong(1, 1);
            stmt.setLong(2, (i+1)*10);
            stmt.setLong(3, 2);
            stmt.setLong(4, (i+1)*10+1);
            stmt.setBytes(5, key);
            stmt.executeUpdate();
        }
        stmt.close();
        
        // verify.
        stmt = con.prepareStatement("select ?, ? from JdbcLong where key = ?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setLong(1, 1);
            stmt.setLong(2, 2);
            stmt.setBytes(3, key);
            ResultSet rs = stmt.executeQuery();
            assert rs.next();
            assert rs.getLong("1") == (i+1)*10;
            assert rs.getLong("2") == (i+1)*10+1;
            assert rs.getLong(1) == (i+1)*10;
            assert rs.getLong(2) == (i+1)*10+1;
            assert !rs.next();
            rs.close();
        }
        
        // delete
        stmt = con.prepareStatement("delete ?, ? from JdbcLong where key = ?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setLong(1, 1);
            stmt.setLong(2, 2);
            stmt.setBytes(3, key);
            stmt.execute();
        }
        
        // verify.
        stmt = con.prepareStatement("select ?, ? from JdbcLong where key = ?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setLong(1, 1);
            stmt.setLong(2, 2);
            stmt.setBytes(3, key);
            ResultSet rs = stmt.executeQuery();
            rs.next();
            rs.getLong(1);
            assert rs.wasNull();
            rs.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\jdbc\PreparedStatementTest;testInteger();;;@Test
    public void testInteger() throws SQLException
    {
        PreparedStatement stmt = con.prepareStatement("update JdbcInteger set ?=?, ?=? where key = ?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setInt(1, 1);
            stmt.setInt(2, (i+1)*10);
            stmt.setInt(3, 2);
            stmt.setInt(4, (i+1)*10+1);
            stmt.setBytes(5, key);
            stmt.executeUpdate();
        }
        stmt.close();
        
        // verify.
        stmt = con.prepareStatement("select ?, ? from JdbcInteger where key = ?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setInt(1, 1);
            stmt.setInt(2, 2);
            stmt.setBytes(3, key);
            ResultSet rs = stmt.executeQuery();
            assert rs.next();
            assert rs.getInt("1") == (i+1)*10;
            assert rs.getInt("2") == (i+1)*10+1;
            assert rs.getInt(1) == (i+1)*10;
            assert rs.getInt(2) == (i+1)*10+1;
            assert !rs.next();
            rs.close();
        }
        
        // delete
        stmt = con.prepareStatement("delete ?, ? from JdbcInteger where key = ?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setInt(1, 1);
            stmt.setInt(2, 2);
            stmt.setBytes(3, key);
            stmt.execute();
        }
        
        // verify.
        stmt = con.prepareStatement("select ?, ? from JdbcInteger where key = ?");
        for (int i = 0; i < 5; i++)
        {
            byte[] key = Integer.toString(i).getBytes();
            stmt.setInt(1, 1);
            stmt.setInt(2, 2);
            stmt.setBytes(3, key);
            ResultSet rs = stmt.executeQuery();
            rs.next();
            rs.getInt(1);
            assert rs.wasNull();
            rs.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\drivers\java\test\org\apache\cassandra\cql\jdbc\PreparedStatementTest;testParamSubstitution();;;@Test
    public void testParamSubstitution() throws SQLException
    {
        byte[] key = "key".getBytes();
        String q = "SELECT 'fo??est', ?, ? from JdbcUtf8 WHERE KEY = ?";
        CassandraPreparedStatement stmt = (CassandraPreparedStatement)con.prepareStatement(q);
        stmt.setString(1, "pathological param: ?'make it?? '' sto'p?'");
        stmt.setString(2, "simple");
        stmt.setBytes(3, key);
        String qq = stmt.makeCql();
        assert qq.equals("SELECT 'fo??est', 'pathological param: ?''make it?? '''' sto''p?''', 'simple' from JdbcUtf8 WHERE KEY = '6b6579'");
        
        q = "UPDATE JdbcUtf8 USING CONSISTENCY ONE SET 'fru??us'=?, ?='gr''d?', ?=?, ?=? WHERE key=?";
        stmt = (CassandraPreparedStatement)con.prepareStatement(q);
        stmt.setString(1, "o?e");
        stmt.setString(2, "tw'o");
        stmt.setString(3, "thr'?'ee");
        stmt.setString(4, "fo''?'ur");
        stmt.setString(5, "five");
        stmt.setString(6, "six");
        stmt.setBytes(7, key);
        qq = stmt.makeCql();
        assert qq.equals("UPDATE JdbcUtf8 USING CONSISTENCY ONE SET 'fru??us'='o?e', 'tw''o'='gr''d?', 'thr''?''ee'='fo''''?''ur', 'five'='six' WHERE key='6b6579'");
        
        q = "DELETE ?, ? FROM JdbcUtf8 WHERE KEY=?";
        stmt = (CassandraPreparedStatement)con.prepareStatement(q);
        stmt.setString(1, "on'?'");
        stmt.setString(2, "two");
        stmt.setBytes(3, key);
        qq = stmt.makeCql();
        assert qq.equals("DELETE 'on''?''', 'two' FROM JdbcUtf8 WHERE KEY='6b6579'");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\bmt\CassandraBulkLoader;map(Text,Text,OutputCollector<Text,Text>,Reporter);;;public void map(Text key, Text value, OutputCollector<Text, Text> output, Reporter reporter) throws IOException {
            // This is a simple key/value mapper.
            output.collect(key, value);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\bmt\CassandraBulkLoader;configure(JobConf);;;public void configure(JobConf job) {
            this.jobconf = job;
            String cassConfig;

            // Get the cached files
            try
            {
                localFiles = DistributedCache.getLocalCacheFiles(job);
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            cassConfig = localFiles[0].getParent().toString();

            System.setProperty("storage-config",cassConfig);

            try
            {
                StorageService.instance.initClient();
            }
            catch (Exception e)
            {
                throw new RuntimeException(e);
            }
            try
            {
                Thread.sleep(10*1000);
            }
            catch (InterruptedException e)
            {
                throw new RuntimeException(e);
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\bmt\CassandraBulkLoader;close();;;public void close()
        {
            try
            {
                // release the cache
                DistributedCache.releaseCache(new URI("/cassandra/storage-conf.xml#storage-conf.xml"), this.jobconf);
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
            catch (URISyntaxException e)
            {
                throw new RuntimeException(e);
            }
            try
            {
                // Sleep just in case the number of keys we send over is small
                Thread.sleep(3*1000);
            }
            catch (InterruptedException e)
            {
                throw new RuntimeException(e);
            }
            StorageService.instance.stopClient();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\bmt\CassandraBulkLoader;reduce(Text,Iterator<Text>,OutputCollector<Text,Text>,Reporter);;;public void reduce(Text key, Iterator<Text> values, OutputCollector<Text, Text> output, Reporter reporter) throws IOException
        {
            ColumnFamily columnFamily;
            String keyspace = "Keyspace1";
            String cfName = "Super1";
            Message message;
            List<ColumnFamily> columnFamilies;
            columnFamilies = new LinkedList<ColumnFamily>();
            String line;

            /* Create a column family */
            columnFamily = ColumnFamily.create(keyspace, cfName);
            while (values.hasNext()) {
                // Split the value (line based on your own delimiter)
                line = values.next().toString();
                String[] fields = line.split("\1");
                String SuperColumnName = fields[1];
                String ColumnName = fields[2];
                String ColumnValue = fields[3];
                int timestamp = 0;
                columnFamily.addColumn(new QueryPath(cfName,
                                                     ByteBufferUtil.bytes(SuperColumnName),
                                                     ByteBufferUtil.bytes(ColumnName)),
                                       ByteBufferUtil.bytes(ColumnValue),
                                       timestamp);
            }

            columnFamilies.add(columnFamily);

            /* Get serialized message to send to cluster */
            message = createMessage(keyspace, key.getBytes(), cfName, columnFamilies);
            List<IAsyncResult> results = new ArrayList<IAsyncResult>();
            for (InetAddress endpoint: StorageService.instance.getNaturalEndpoints(keyspace, ByteBufferUtil.bytes(key)))
            {
                /* Send message to end point */
                results.add(MessagingService.instance().sendRR(message, endpoint));
            }
            /* wait for acks */
            for (IAsyncResult result : results)
            {
                try
                {
                    result.get(DatabaseDescriptor.getRpcTimeout(), TimeUnit.MILLISECONDS);
                }
                catch (TimeoutException e)
                {
                    // you should probably add retry logic here
                    throw new RuntimeException(e);
                }
            }
            
            output.collect(key, new Text(" inserted into Cassandra node(s)"));
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\bmt\CassandraBulkLoader;runJob(String[]);;;public static void runJob(String[] args)
    {
        JobConf conf = new JobConf(CassandraBulkLoader.class);

        if(args.length >= 4)
        {
          conf.setNumReduceTasks(new Integer(args[3]));
        }

        try
        {
            // We store the cassandra storage-conf.xml on the HDFS cluster
            DistributedCache.addCacheFile(new URI("/cassandra/storage-conf.xml#storage-conf.xml"), conf);
        }
        catch (URISyntaxException e)
        {
            throw new RuntimeException(e);
        }
        conf.setInputFormat(KeyValueTextInputFormat.class);
        conf.setJobName("CassandraBulkLoader_v2");
        conf.setMapperClass(Map.class);
        conf.setReducerClass(Reduce.class);

        conf.setOutputKeyClass(Text.class);
        conf.setOutputValueClass(Text.class);

        FileInputFormat.setInputPaths(conf, new Path(args[1]));
        FileOutputFormat.setOutputPath(conf, new Path(args[2]));
        try
        {
            JobClient.runJob(conf);
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\bmt\CassandraBulkLoader;createMessage(String,byte[],String,List<ColumnFamily>);;;public static Message createMessage(String keyspace, byte[] key, String columnFamily, List<ColumnFamily> columnFamilies)
    {
        ColumnFamily baseColumnFamily;
        DataOutputBuffer bufOut = new DataOutputBuffer();
        RowMutation rm;
        Message message;
        Column column;

        /* Get the first column family from list, this is just to get past validation */
        baseColumnFamily = new ColumnFamily(ColumnFamilyType.Standard,
                                            DatabaseDescriptor.getComparator(keyspace, columnFamily),
                                            DatabaseDescriptor.getSubComparator(keyspace, columnFamily),
                                            CFMetaData.getId(keyspace, columnFamily));
        
        for(ColumnFamily cf : columnFamilies) {
            bufOut.reset();
            ColumnFamily.serializer().serializeWithIndexes(cf, bufOut);
            byte[] data = new byte[bufOut.getLength()];
            System.arraycopy(bufOut.getData(), 0, data, 0, bufOut.getLength());

            column = new Column(FBUtilities.toByteBuffer(cf.id()), ByteBuffer.wrap(data), 0);
            baseColumnFamily.addColumn(column);
        }
        rm = new RowMutation(keyspace, ByteBuffer.wrap(key));
        rm.add(baseColumnFamily);

        try
        {
            /* Make message */
            message = rm.makeRowMutationMessage(StorageService.Verb.BINARY, MessagingService.version_);
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }

        return message;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\bmt\CassandraBulkLoader;main(String[]);;;public static void main(String[] args) throws Exception
    {
        runJob(args);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\client_only\src\ClientOnlyExample;startClient();;;private static void startClient() throws Exception
    {
        StorageService.instance.initClient();
        // sleep for a bit so that gossip can do its thing.
        try
        {
            Thread.sleep(10000L);
        }
        catch (Exception ex)
        {
            throw new AssertionError(ex);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\client_only\src\ClientOnlyExample;testWriting();;;private static void testWriting() throws Exception
    {
        // do some writing.
        for (int i = 0; i < 100; i++)
        {
            RowMutation change = new RowMutation(KEYSPACE, ByteBufferUtil.bytes(("key" + i)));
            ColumnPath cp = new ColumnPath(COLUMN_FAMILY).setColumn(("colb").getBytes());
            change.add(new QueryPath(cp), ByteBufferUtil.bytes(("value" + i)), 0);

            // don't call change.apply().  The reason is that is makes a static call into Table, which will perform
            // local storage initialization, which creates local directories.
            // change.apply();

            StorageProxy.mutate(Arrays.asList(change), ConsistencyLevel.ONE);
            System.out.println("wrote key" + i);
        }
        System.out.println("Done writing.");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\client_only\src\ClientOnlyExample;testReading();;;private static void testReading() throws Exception
    {
        // do some queries.
        Collection<ByteBuffer> cols = new ArrayList<ByteBuffer>()
        {{
            add(ByteBufferUtil.bytes("colb"));
        }};
        for (int i = 0; i < 100; i++)
        {
            List<ReadCommand> commands = new ArrayList<ReadCommand>();
            SliceByNamesReadCommand readCommand = new SliceByNamesReadCommand(KEYSPACE, ByteBufferUtil.bytes(("key" + i)),
                                                                              new QueryPath(COLUMN_FAMILY, null, null), cols);
            readCommand.setDigestQuery(false);
            commands.add(readCommand);
            List<Row> rows = StorageProxy.read(commands, ConsistencyLevel.ONE);
            assert rows.size() == 1;
            Row row = rows.get(0);
            ColumnFamily cf = row.cf;
            if (cf != null)
            {
                for (IColumn col : cf.getSortedColumns())
                {
                    System.out.println(ByteBufferUtil.string(col.name()) + ", " + ByteBufferUtil.string(col.value()));
                }
            }
            else
                System.err.println("This output indicates that nothing was read.");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\client_only\src\ClientOnlyExample;main(String);;;public static void main(String args[]) throws Exception
    {
        startClient();
        setupKeyspace(createConnection());
        testWriting();
        logger.info("Writing is done. Sleeping, then will try to read.");
        try
        {
            Thread.currentThread().sleep(10000);
        }
        catch (InterruptedException ex) 
        {
            throw new RuntimeException(ex);
        }
        
        testReading();
        
        // no need to do this:
        // StorageService.instance().decommission();
        // do this instead:
        StorageService.instance.stopClient();
        System.exit(0); // the only way to really stop the process.
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\client_only\src\ClientOnlyExample;setupKeyspace(Cassandra.Iface);;;private static void setupKeyspace(Cassandra.Iface client) throws TException, InvalidRequestException
    {
        List<CfDef> cfDefList = new ArrayList<CfDef>();
        CfDef columnFamily = new CfDef(KEYSPACE, COLUMN_FAMILY);
        cfDefList.add(columnFamily);

        try 
        {
            client.system_add_keyspace(new KsDef(KEYSPACE, "org.apache.cassandra.locator.SimpleStrategy", 1, cfDefList));
            int magnitude = client.describe_ring(KEYSPACE).size();
            try
            {
                Thread.sleep(1000 * magnitude);
            }
            catch (InterruptedException e)
            {
                throw new RuntimeException(e);
            }
        }
        catch (InvalidRequestException probablyExists) 
        {
            logger.warn("Problem creating keyspace: " + probablyExists.getMessage());    
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\client_only\src\ClientOnlyExample;createConnection();;;private static Cassandra.Iface createConnection() throws TTransportException
    {
        if (System.getProperty("cassandra.host") == null || System.getProperty("cassandra.port") == null)
        {
           logger.warn("cassandra.host or cassandra.port is not defined, using default");
        }
        return createConnection( System.getProperty("cassandra.host","localhost"),
                                 Integer.valueOf(System.getProperty("cassandra.port","9160")),
                                 Boolean.valueOf(System.getProperty("cassandra.framed", "true")) );
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\client_only\src\ClientOnlyExample;createConnection(String,Integer,boolean);;;private static Cassandra.Client createConnection(String host, Integer port, boolean framed) throws TTransportException
    {
        TSocket socket = new TSocket(host, port);
        TTransport trans = framed ? new TFramedTransport(socket) : socket;
        trans.open();
        TProtocol protocol = new TBinaryProtocol(trans);

        return new Cassandra.Client(protocol);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\hadoop_word_count\src\WordCount;main(String[]);;;public static void main(String[] args) throws Exception
    {
        // Let ToolRunner handle generic command-line options
        ToolRunner.run(new Configuration(), new WordCount(), args);
        System.exit(0);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\hadoop_word_count\src\WordCount;setup(org.apache.hadoop.mapreduce.Mapper.Context);;;protected void setup(org.apache.hadoop.mapreduce.Mapper.Context context)
        throws IOException, InterruptedException
        {
            sourceColumn = ByteBufferUtil.bytes(context.getConfiguration().get(CONF_COLUMN_NAME));
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\hadoop_word_count\src\WordCount;map(ByteBuffer,SortedMap<ByteBuffer,IColumn>,Context);;;public void map(ByteBuffer key, SortedMap<ByteBuffer, IColumn> columns, Context context) throws IOException, InterruptedException
        {
            IColumn column = columns.get(sourceColumn);
            if (column == null)
                return;
            String value = ByteBufferUtil.string(column.value());
            logger.debug("read " + key + ":" + value + " from " + context.getInputSplit());

            StringTokenizer itr = new StringTokenizer(value);
            while (itr.hasMoreTokens())
            {
                word.set(itr.nextToken());
                context.write(word, one);
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\hadoop_word_count\src\WordCount;reduce(Text,Iterable<IntWritable>,Context);;;public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException
        {
            int sum = 0;
            for (IntWritable val : values)
                sum += val.get();
            context.write(key, new IntWritable(sum));
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\hadoop_word_count\src\WordCount;setup(org.apache.hadoop.mapreduce.Reducer.Context);;;protected void setup(org.apache.hadoop.mapreduce.Reducer.Context context)
        throws IOException, InterruptedException
        {
            outputKey = ByteBufferUtil.bytes(context.getConfiguration().get(CONF_COLUMN_NAME));
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\hadoop_word_count\src\WordCount;reduce(Text,Iterable<IntWritable>,Context);;;public void reduce(Text word, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException
        {
            int sum = 0;
            for (IntWritable val : values)
                sum += val.get();
            context.write(outputKey, Collections.singletonList(getMutation(word, sum)));
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\hadoop_word_count\src\WordCount;getMutation(Text,int);;;private static Mutation getMutation(Text word, int sum)
        {
            Column c = new Column();
            c.name = ByteBuffer.wrap(Arrays.copyOf(word.getBytes(), word.getLength()));
            c.value = ByteBufferUtil.bytes(String.valueOf(sum));
            c.timestamp = System.currentTimeMillis() * 1000;

            Mutation m = new Mutation();
            m.column_or_supercolumn = new ColumnOrSuperColumn();
            m.column_or_supercolumn.column = c;
            return m;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\hadoop_word_count\src\WordCount;run(String[]);;;public int run(String[] args) throws Exception
    {
        String outputReducerType = "filesystem";
        if (args != null && args[0].startsWith(OUTPUT_REDUCER_VAR))
        {
            String[] s = args[0].split("=");
            if (s != null && s.length == 2)
                outputReducerType = s[1];
        }
        logger.info("output reducer type: " + outputReducerType);

        for (int i = 0; i < WordCountSetup.TEST_COUNT; i++)
        {
            String columnName = "text" + i;
            getConf().set(CONF_COLUMN_NAME, columnName);

            Job job = new Job(getConf(), "wordcount");
            job.setJarByClass(WordCount.class);
            job.setMapperClass(TokenizerMapper.class);

            if (outputReducerType.equalsIgnoreCase("filesystem"))
            {
                job.setCombinerClass(ReducerToFilesystem.class);
                job.setReducerClass(ReducerToFilesystem.class);
                job.setOutputKeyClass(Text.class);
                job.setOutputValueClass(IntWritable.class);
                FileOutputFormat.setOutputPath(job, new Path(OUTPUT_PATH_PREFIX + i));
            }
            else
            {
                job.setReducerClass(ReducerToCassandra.class);

                job.setMapOutputKeyClass(Text.class);
                job.setMapOutputValueClass(IntWritable.class);
                job.setOutputKeyClass(ByteBuffer.class);
                job.setOutputValueClass(List.class);

                job.setOutputFormatClass(ColumnFamilyOutputFormat.class);

                ConfigHelper.setOutputColumnFamily(job.getConfiguration(), KEYSPACE, OUTPUT_COLUMN_FAMILY);
            }

            job.setInputFormatClass(ColumnFamilyInputFormat.class);


            ConfigHelper.setRpcPort(job.getConfiguration(), "9160");
            ConfigHelper.setInitialAddress(job.getConfiguration(), "localhost");
            ConfigHelper.setPartitioner(job.getConfiguration(), "org.apache.cassandra.dht.RandomPartitioner");
            ConfigHelper.setInputColumnFamily(job.getConfiguration(), KEYSPACE, COLUMN_FAMILY);
            SlicePredicate predicate = new SlicePredicate().setColumn_names(Arrays.asList(ByteBufferUtil.bytes(columnName)));
            ConfigHelper.setInputSlicePredicate(job.getConfiguration(), predicate);

            job.waitForCompletion(true);
        }
        return 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\hadoop_word_count\src\WordCountSetup;main(String[]);;;public static void main(String[] args) throws Exception
    {
        Cassandra.Iface client = createConnection();

        setupKeyspace(client);

        client.set_keyspace(WordCount.KEYSPACE);

        Map<ByteBuffer, Map<String,List<Mutation>>> mutationMap;
        Column c;

        // text0: no rows

        // text1: 1 row, 1 word
        c = new Column()
            .setName(ByteBufferUtil.bytes("text1"))
            .setValue(ByteBufferUtil.bytes("word1"))
            .setTimestamp(System.currentTimeMillis());
        mutationMap = getMutationMap(ByteBufferUtil.bytes("key0"), WordCount.COLUMN_FAMILY, c);
        client.batch_mutate(mutationMap, ConsistencyLevel.ONE);
        logger.info("added text1");

        // text1: 1 row, 2 word
        c = new Column()
            .setName(ByteBufferUtil.bytes("text2"))
            .setValue(ByteBufferUtil.bytes("word1 word2"))
            .setTimestamp(System.currentTimeMillis());
        mutationMap = getMutationMap(ByteBufferUtil.bytes("key0"), WordCount.COLUMN_FAMILY, c);
        client.batch_mutate(mutationMap, ConsistencyLevel.ONE);
        logger.info("added text2");

        // text3: 1000 rows, 1 word
        mutationMap = new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
        for (int i=0; i<1000; i++)
        {
            c = new Column()
                .setName(ByteBufferUtil.bytes("text3"))
                .setValue(ByteBufferUtil.bytes("word1"))
                .setTimestamp(System.currentTimeMillis());
            addToMutationMap(mutationMap, ByteBufferUtil.bytes("key" + i), WordCount.COLUMN_FAMILY, c);
        }
        client.batch_mutate(mutationMap, ConsistencyLevel.ONE);
        logger.info("added text3");

        System.exit(0);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\hadoop_word_count\src\WordCountSetup;getMutationMap(ByteBuffer,String,Column);;;private static Map<ByteBuffer,Map<String,List<Mutation>>> getMutationMap(ByteBuffer key, String cf, Column c)
    {
        Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap = new HashMap<ByteBuffer,Map<String,List<Mutation>>>();
        addToMutationMap(mutationMap, key, cf, c);
        return mutationMap;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\hadoop_word_count\src\WordCountSetup;addToMutationMap(Map<ByteBuffer,Map<String,List<Mutation>>>,ByteBuffer,String,Column);;;private static void addToMutationMap(Map<ByteBuffer,Map<String,List<Mutation>>> mutationMap, ByteBuffer key, String cf, Column c)
    {
        Map<String,List<Mutation>> cfMutation = new HashMap<String,List<Mutation>>();
        List<Mutation> mList = new ArrayList<Mutation>();
        ColumnOrSuperColumn cc = new ColumnOrSuperColumn();
        Mutation m = new Mutation();

        cc.setColumn(c);
        m.setColumn_or_supercolumn(cc);
        mList.add(m);
        cfMutation.put(cf, mList);
        mutationMap.put(key, cfMutation);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\hadoop_word_count\src\WordCountSetup;setupKeyspace(Cassandra.Iface);;;private static void setupKeyspace(Cassandra.Iface client) throws TException, InvalidRequestException, SchemaDisagreementException {
        List<CfDef> cfDefList = new ArrayList<CfDef>();
        CfDef input = new CfDef(WordCount.KEYSPACE, WordCount.COLUMN_FAMILY);
        input.setComparator_type("AsciiType");
        input.setDefault_validation_class("AsciiType");
        cfDefList.add(input);
        CfDef output = new CfDef(WordCount.KEYSPACE, WordCount.OUTPUT_COLUMN_FAMILY);
        output.setComparator_type("AsciiType");
        output.setDefault_validation_class("AsciiType");
        cfDefList.add(output);

        KsDef ksDef = new KsDef(WordCount.KEYSPACE, "org.apache.cassandra.locator.SimpleStrategy", cfDefList);
        ksDef.putToStrategy_options("replication_factor", "1");
        client.system_add_keyspace(ksDef);
        int magnitude = client.describe_ring(WordCount.KEYSPACE).size();
        try
        {
            Thread.sleep(1000 * magnitude);
        }
        catch (InterruptedException e)
        {
            throw new RuntimeException(e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\hadoop_word_count\src\WordCountSetup;createConnection();;;private static Cassandra.Iface createConnection() throws TTransportException
    {
        if (System.getProperty("cassandra.host") == null || System.getProperty("cassandra.port") == null)
        {
           logger.warn("cassandra.host or cassandra.port is not defined, using default");
        }
        return createConnection( System.getProperty("cassandra.host","localhost"),
                                 Integer.valueOf(System.getProperty("cassandra.port","9160")),
                                 Boolean.valueOf(System.getProperty("cassandra.framed", "true")) );
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\examples\hadoop_word_count\src\WordCountSetup;createConnection(String,Integer,boolean);;;private static Cassandra.Client createConnection(String host, Integer port, boolean framed) throws TTransportException
    {
        TSocket socket = new TSocket(host, port);
        TTransport trans = framed ? new TFramedTransport(socket) : socket;
        trans.open();
        TProtocol protocol = new TBinaryProtocol(trans);

        return new Cassandra.Client(protocol);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\AuthenticationException;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // WHY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.why = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\AuthenticationException;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.why != null) {
      oprot.writeFieldBegin(WHY_FIELD_DESC);
      oprot.writeString(this.why);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\AuthenticationException;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\AuthenticationException;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\AuthenticationRequest;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CREDENTIALS
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
              this.credentials = new HashMap<String,String>(2*_map24.size);
              for (int _i25 = 0; _i25 < _map24.size; ++_i25)
              {
                String _key26;
                String _val27;
                _key26 = iprot.readString();
                _val27 = iprot.readString();
                this.credentials.put(_key26, _val27);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\AuthenticationRequest;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.credentials != null) {
      oprot.writeFieldBegin(CREDENTIALS_FIELD_DESC);
      {
        oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.credentials.size()));
        for (Map.Entry<String, String> _iter28 : this.credentials.entrySet())
        {
          oprot.writeString(_iter28.getKey());
          oprot.writeString(_iter28.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\AuthenticationRequest;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\AuthenticationRequest;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\AuthorizationException;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // WHY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.why = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\AuthorizationException;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.why != null) {
      oprot.writeFieldBegin(WHY_FIELD_DESC);
      oprot.writeString(this.why);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\AuthorizationException;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\AuthorizationException;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;add(ByteBuffer,ColumnParent,CounterColumn,ConsistencyLevel);;;public void add(ByteBuffer key, ColumnParent column_parent, CounterColumn column, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;remove_counter(ByteBuffer,ColumnPath,ConsistencyLevel);;;public void remove_counter(ByteBuffer key, ColumnPath path, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;execute_cql_query(ByteBuffer,Compression);;;public CqlResult execute_cql_query(ByteBuffer query, Compression compression) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;login(AuthenticationRequest,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.login_call>);;;public void login(AuthenticationRequest auth_request, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.login_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;set_keyspace(String,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.set_keyspace_call>);;;public void set_keyspace(String keyspace, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.set_keyspace_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;get(ByteBuffer,ColumnPath,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_call>);;;public void get(ByteBuffer key, ColumnPath column_path, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;get_slice(ByteBuffer,ColumnParent,SlicePredicate,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_slice_call>);;;public void get_slice(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_slice_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;get_count(ByteBuffer,ColumnParent,SlicePredicate,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_count_call>);;;public void get_count(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_count_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;multiget_slice(List<ByteBuffer>,ColumnParent,SlicePredicate,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.multiget_slice_call>);;;public void multiget_slice(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.multiget_slice_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;multiget_count(List<ByteBuffer>,ColumnParent,SlicePredicate,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.multiget_count_call>);;;public void multiget_count(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.multiget_count_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;get_range_slices(ColumnParent,SlicePredicate,KeyRange,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_range_slices_call>);;;public void get_range_slices(ColumnParent column_parent, SlicePredicate predicate, KeyRange range, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_range_slices_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;get_indexed_slices(ColumnParent,IndexClause,SlicePredicate,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_indexed_slices_call>);;;public void get_indexed_slices(ColumnParent column_parent, IndexClause index_clause, SlicePredicate column_predicate, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_indexed_slices_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;insert(ByteBuffer,ColumnParent,Column,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.insert_call>);;;public void insert(ByteBuffer key, ColumnParent column_parent, Column column, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.insert_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;add(ByteBuffer,ColumnParent,CounterColumn,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.add_call>);;;public void add(ByteBuffer key, ColumnParent column_parent, CounterColumn column, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.add_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;remove(ByteBuffer,ColumnPath,long,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.remove_call>);;;public void remove(ByteBuffer key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.remove_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;remove_counter(ByteBuffer,ColumnPath,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.remove_counter_call>);;;public void remove_counter(ByteBuffer key, ColumnPath path, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.remove_counter_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;batch_mutate(Map<ByteBuffer,Map<String,List<Mutation>>>,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.batch_mutate_call>);;;public void batch_mutate(Map<ByteBuffer,Map<String,List<Mutation>>> mutation_map, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.batch_mutate_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;truncate(String,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.truncate_call>);;;public void truncate(String cfname, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.truncate_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_schema_versions(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_schema_versions_call>);;;public void describe_schema_versions(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_schema_versions_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_keyspaces(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_keyspaces_call>);;;public void describe_keyspaces(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_keyspaces_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_cluster_name(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_cluster_name_call>);;;public void describe_cluster_name(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_cluster_name_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_version(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_version_call>);;;public void describe_version(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_version_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_ring(String,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_ring_call>);;;public void describe_ring(String keyspace, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_ring_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_partitioner(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_partitioner_call>);;;public void describe_partitioner(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_partitioner_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_snitch(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_snitch_call>);;;public void describe_snitch(org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_snitch_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_keyspace(String,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_keyspace_call>);;;public void describe_keyspace(String keyspace, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_keyspace_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_splits(String,String,String,int,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_splits_call>);;;public void describe_splits(String cfName, String start_token, String end_token, int keys_per_split, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.describe_splits_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_add_column_family(CfDef,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.system_add_column_family_call>);;;public void system_add_column_family(CfDef cf_def, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.system_add_column_family_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_drop_column_family(String,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.system_drop_column_family_call>);;;public void system_drop_column_family(String column_family, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.system_drop_column_family_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_add_keyspace(KsDef,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.system_add_keyspace_call>);;;public void system_add_keyspace(KsDef ks_def, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.system_add_keyspace_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_drop_keyspace(String,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.system_drop_keyspace_call>);;;public void system_drop_keyspace(String keyspace, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.system_drop_keyspace_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_update_keyspace(KsDef,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.system_update_keyspace_call>);;;public void system_update_keyspace(KsDef ks_def, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.system_update_keyspace_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_update_column_family(CfDef,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.system_update_column_family_call>);;;public void system_update_column_family(CfDef cf_def, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.system_update_column_family_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;execute_cql_query(ByteBuffer,Compression,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.execute_cql_query_call>);;;public void execute_cql_query(ByteBuffer query, Compression compression, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.execute_cql_query_call> resultHandler) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getClient(org.apache.thrift.protocol.TProtocol);;;public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getClient(org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;Client(org.apache.thrift.protocol.TProtocol);;;public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      this(prot, prot);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;Client(org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;add(ByteBuffer,ColumnParent,CounterColumn,ConsistencyLevel);;;public void add(ByteBuffer key, ColumnParent column_parent, CounterColumn column, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, org.apache.thrift.TException
    {
      send_add(key, column_parent, column, consistency_level);
      recv_add();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;send_add(ByteBuffer,ColumnParent,CounterColumn,ConsistencyLevel);;;public void send_add(ByteBuffer key, ColumnParent column_parent, CounterColumn column, ConsistencyLevel consistency_level) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      add_args args = new add_args();
      args.setKey(key);
      args.setColumn_parent(column_parent);
      args.setColumn(column);
      args.setConsistency_level(consistency_level);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;recv_add();;;public void recv_add() throws InvalidRequestException, UnavailableException, TimedOutException, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "add failed: out of sequence response");
      }
      add_result result = new add_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      return;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;remove_counter(ByteBuffer,ColumnPath,ConsistencyLevel);;;public void remove_counter(ByteBuffer key, ColumnPath path, ConsistencyLevel consistency_level) throws InvalidRequestException, UnavailableException, TimedOutException, org.apache.thrift.TException
    {
      send_remove_counter(key, path, consistency_level);
      recv_remove_counter();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;send_remove_counter(ByteBuffer,ColumnPath,ConsistencyLevel);;;public void send_remove_counter(ByteBuffer key, ColumnPath path, ConsistencyLevel consistency_level) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove_counter", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      remove_counter_args args = new remove_counter_args();
      args.setKey(key);
      args.setPath(path);
      args.setConsistency_level(consistency_level);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;recv_remove_counter();;;public void recv_remove_counter() throws InvalidRequestException, UnavailableException, TimedOutException, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "remove_counter failed: out of sequence response");
      }
      remove_counter_result result = new remove_counter_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      return;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;execute_cql_query(ByteBuffer,Compression);;;public CqlResult execute_cql_query(ByteBuffer query, Compression compression) throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, org.apache.thrift.TException
    {
      send_execute_cql_query(query, compression);
      return recv_execute_cql_query();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;send_execute_cql_query(ByteBuffer,Compression);;;public void send_execute_cql_query(ByteBuffer query, Compression compression) throws org.apache.thrift.TException
    {
      oprot_.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execute_cql_query", org.apache.thrift.protocol.TMessageType.CALL, ++seqid_));
      execute_cql_query_args args = new execute_cql_query_args();
      args.setQuery(query);
      args.setCompression(compression);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;recv_execute_cql_query();;;public CqlResult recv_execute_cql_query() throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot_.readMessageBegin();
      if (msg.type == org.apache.thrift.protocol.TMessageType.EXCEPTION) {
        org.apache.thrift.TApplicationException x = org.apache.thrift.TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.BAD_SEQUENCE_ID, "execute_cql_query failed: out of sequence response");
      }
      execute_cql_query_result result = new execute_cql_query_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ire != null) {
        throw result.ire;
      }
      if (result.ue != null) {
        throw result.ue;
      }
      if (result.te != null) {
        throw result.te;
      }
      if (result.sde != null) {
        throw result.sde;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "execute_cql_query failed: unknown result");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;Factory(org.apache.thrift.async.TAsyncClientManager,org.apache.thrift.protocol.TProtocolFactory);;;public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getAsyncClient(org.apache.thrift.transport.TNonblockingTransport);;;public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;AsyncClient(org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.async.TAsyncClientManager,org.apache.thrift.transport.TNonblockingTransport);;;public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;login(AuthenticationRequest,org.apache.thrift.async.AsyncMethodCallback<login_call>);;;public void login(AuthenticationRequest auth_request, org.apache.thrift.async.AsyncMethodCallback<login_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      login_call method_call = new login_call(auth_request, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;login_call(AuthenticationRequest,org.apache.thrift.async.AsyncMethodCallback<login_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public login_call(AuthenticationRequest auth_request, org.apache.thrift.async.AsyncMethodCallback<login_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth_request = auth_request;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.CALL, 0));
        login_args args = new login_args();
        args.setAuth_request(auth_request);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;set_keyspace(String,org.apache.thrift.async.AsyncMethodCallback<set_keyspace_call>);;;public void set_keyspace(String keyspace, org.apache.thrift.async.AsyncMethodCallback<set_keyspace_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      set_keyspace_call method_call = new set_keyspace_call(keyspace, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;set_keyspace_call(String,org.apache.thrift.async.AsyncMethodCallback<set_keyspace_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public set_keyspace_call(String keyspace, org.apache.thrift.async.AsyncMethodCallback<set_keyspace_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keyspace = keyspace;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("set_keyspace", org.apache.thrift.protocol.TMessageType.CALL, 0));
        set_keyspace_args args = new set_keyspace_args();
        args.setKeyspace(keyspace);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;get(ByteBuffer,ColumnPath,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<get_call>);;;public void get(ByteBuffer key, ColumnPath column_path, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<get_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_call method_call = new get_call(key, column_path, consistency_level, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;get_call(ByteBuffer,ColumnPath,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<get_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public get_call(ByteBuffer key, ColumnPath column_path, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<get_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.column_path = column_path;
        this.consistency_level = consistency_level;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_args args = new get_args();
        args.setKey(key);
        args.setColumn_path(column_path);
        args.setConsistency_level(consistency_level);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;get_slice(ByteBuffer,ColumnParent,SlicePredicate,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<get_slice_call>);;;public void get_slice(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<get_slice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_slice_call method_call = new get_slice_call(key, column_parent, predicate, consistency_level, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;get_slice_call(ByteBuffer,ColumnParent,SlicePredicate,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<get_slice_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public get_slice_call(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<get_slice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.column_parent = column_parent;
        this.predicate = predicate;
        this.consistency_level = consistency_level;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_slice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_slice_args args = new get_slice_args();
        args.setKey(key);
        args.setColumn_parent(column_parent);
        args.setPredicate(predicate);
        args.setConsistency_level(consistency_level);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;get_count(ByteBuffer,ColumnParent,SlicePredicate,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<get_count_call>);;;public void get_count(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<get_count_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_count_call method_call = new get_count_call(key, column_parent, predicate, consistency_level, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;get_count_call(ByteBuffer,ColumnParent,SlicePredicate,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<get_count_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public get_count_call(ByteBuffer key, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<get_count_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.column_parent = column_parent;
        this.predicate = predicate;
        this.consistency_level = consistency_level;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_count", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_count_args args = new get_count_args();
        args.setKey(key);
        args.setColumn_parent(column_parent);
        args.setPredicate(predicate);
        args.setConsistency_level(consistency_level);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;multiget_slice(List<ByteBuffer>,ColumnParent,SlicePredicate,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<multiget_slice_call>);;;public void multiget_slice(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<multiget_slice_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multiget_slice_call method_call = new multiget_slice_call(keys, column_parent, predicate, consistency_level, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;multiget_slice_call(List<ByteBuffer>,ColumnParent,SlicePredicate,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<multiget_slice_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public multiget_slice_call(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<multiget_slice_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keys = keys;
        this.column_parent = column_parent;
        this.predicate = predicate;
        this.consistency_level = consistency_level;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiget_slice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multiget_slice_args args = new multiget_slice_args();
        args.setKeys(keys);
        args.setColumn_parent(column_parent);
        args.setPredicate(predicate);
        args.setConsistency_level(consistency_level);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;multiget_count(List<ByteBuffer>,ColumnParent,SlicePredicate,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<multiget_count_call>);;;public void multiget_count(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<multiget_count_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      multiget_count_call method_call = new multiget_count_call(keys, column_parent, predicate, consistency_level, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;multiget_count_call(List<ByteBuffer>,ColumnParent,SlicePredicate,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<multiget_count_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public multiget_count_call(List<ByteBuffer> keys, ColumnParent column_parent, SlicePredicate predicate, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<multiget_count_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keys = keys;
        this.column_parent = column_parent;
        this.predicate = predicate;
        this.consistency_level = consistency_level;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiget_count", org.apache.thrift.protocol.TMessageType.CALL, 0));
        multiget_count_args args = new multiget_count_args();
        args.setKeys(keys);
        args.setColumn_parent(column_parent);
        args.setPredicate(predicate);
        args.setConsistency_level(consistency_level);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;get_range_slices(ColumnParent,SlicePredicate,KeyRange,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<get_range_slices_call>);;;public void get_range_slices(ColumnParent column_parent, SlicePredicate predicate, KeyRange range, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<get_range_slices_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_range_slices_call method_call = new get_range_slices_call(column_parent, predicate, range, consistency_level, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;get_range_slices_call(ColumnParent,SlicePredicate,KeyRange,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<get_range_slices_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public get_range_slices_call(ColumnParent column_parent, SlicePredicate predicate, KeyRange range, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<get_range_slices_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.column_parent = column_parent;
        this.predicate = predicate;
        this.range = range;
        this.consistency_level = consistency_level;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_range_slices", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_range_slices_args args = new get_range_slices_args();
        args.setColumn_parent(column_parent);
        args.setPredicate(predicate);
        args.setRange(range);
        args.setConsistency_level(consistency_level);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;get_indexed_slices(ColumnParent,IndexClause,SlicePredicate,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<get_indexed_slices_call>);;;public void get_indexed_slices(ColumnParent column_parent, IndexClause index_clause, SlicePredicate column_predicate, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<get_indexed_slices_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_indexed_slices_call method_call = new get_indexed_slices_call(column_parent, index_clause, column_predicate, consistency_level, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;get_indexed_slices_call(ColumnParent,IndexClause,SlicePredicate,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<get_indexed_slices_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public get_indexed_slices_call(ColumnParent column_parent, IndexClause index_clause, SlicePredicate column_predicate, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<get_indexed_slices_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.column_parent = column_parent;
        this.index_clause = index_clause;
        this.column_predicate = column_predicate;
        this.consistency_level = consistency_level;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_indexed_slices", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_indexed_slices_args args = new get_indexed_slices_args();
        args.setColumn_parent(column_parent);
        args.setIndex_clause(index_clause);
        args.setColumn_predicate(column_predicate);
        args.setConsistency_level(consistency_level);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;insert(ByteBuffer,ColumnParent,Column,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<insert_call>);;;public void insert(ByteBuffer key, ColumnParent column_parent, Column column, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<insert_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insert_call method_call = new insert_call(key, column_parent, column, consistency_level, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;insert_call(ByteBuffer,ColumnParent,Column,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<insert_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public insert_call(ByteBuffer key, ColumnParent column_parent, Column column, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<insert_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.column_parent = column_parent;
        this.column = column;
        this.consistency_level = consistency_level;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insert_args args = new insert_args();
        args.setKey(key);
        args.setColumn_parent(column_parent);
        args.setColumn(column);
        args.setConsistency_level(consistency_level);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;add(ByteBuffer,ColumnParent,CounterColumn,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<add_call>);;;public void add(ByteBuffer key, ColumnParent column_parent, CounterColumn column, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<add_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      add_call method_call = new add_call(key, column_parent, column, consistency_level, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;add_call(ByteBuffer,ColumnParent,CounterColumn,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<add_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public add_call(ByteBuffer key, ColumnParent column_parent, CounterColumn column, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<add_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.column_parent = column_parent;
        this.column = column;
        this.consistency_level = consistency_level;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add", org.apache.thrift.protocol.TMessageType.CALL, 0));
        add_args args = new add_args();
        args.setKey(key);
        args.setColumn_parent(column_parent);
        args.setColumn(column);
        args.setConsistency_level(consistency_level);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getResult();;;public void getResult() throws InvalidRequestException, UnavailableException, TimedOutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_add();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;remove(ByteBuffer,ColumnPath,long,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<remove_call>);;;public void remove(ByteBuffer key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<remove_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      remove_call method_call = new remove_call(key, column_path, timestamp, consistency_level, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;remove_call(ByteBuffer,ColumnPath,long,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<remove_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public remove_call(ByteBuffer key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<remove_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.column_path = column_path;
        this.timestamp = timestamp;
        this.consistency_level = consistency_level;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove", org.apache.thrift.protocol.TMessageType.CALL, 0));
        remove_args args = new remove_args();
        args.setKey(key);
        args.setColumn_path(column_path);
        args.setTimestamp(timestamp);
        args.setConsistency_level(consistency_level);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;remove_counter(ByteBuffer,ColumnPath,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<remove_counter_call>);;;public void remove_counter(ByteBuffer key, ColumnPath path, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<remove_counter_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      remove_counter_call method_call = new remove_counter_call(key, path, consistency_level, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;remove_counter_call(ByteBuffer,ColumnPath,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<remove_counter_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public remove_counter_call(ByteBuffer key, ColumnPath path, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<remove_counter_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.path = path;
        this.consistency_level = consistency_level;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove_counter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        remove_counter_args args = new remove_counter_args();
        args.setKey(key);
        args.setPath(path);
        args.setConsistency_level(consistency_level);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getResult();;;public void getResult() throws InvalidRequestException, UnavailableException, TimedOutException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_remove_counter();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;batch_mutate(Map<ByteBuffer,Map<String,List<Mutation>>>,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<batch_mutate_call>);;;public void batch_mutate(Map<ByteBuffer,Map<String,List<Mutation>>> mutation_map, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<batch_mutate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batch_mutate_call method_call = new batch_mutate_call(mutation_map, consistency_level, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;batch_mutate_call(Map<ByteBuffer,Map<String,List<Mutation>>>,ConsistencyLevel,org.apache.thrift.async.AsyncMethodCallback<batch_mutate_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public batch_mutate_call(Map<ByteBuffer,Map<String,List<Mutation>>> mutation_map, ConsistencyLevel consistency_level, org.apache.thrift.async.AsyncMethodCallback<batch_mutate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mutation_map = mutation_map;
        this.consistency_level = consistency_level;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batch_mutate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batch_mutate_args args = new batch_mutate_args();
        args.setMutation_map(mutation_map);
        args.setConsistency_level(consistency_level);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;truncate(String,org.apache.thrift.async.AsyncMethodCallback<truncate_call>);;;public void truncate(String cfname, org.apache.thrift.async.AsyncMethodCallback<truncate_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      truncate_call method_call = new truncate_call(cfname, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;truncate_call(String,org.apache.thrift.async.AsyncMethodCallback<truncate_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public truncate_call(String cfname, org.apache.thrift.async.AsyncMethodCallback<truncate_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cfname = cfname;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("truncate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        truncate_args args = new truncate_args();
        args.setCfname(cfname);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_schema_versions(org.apache.thrift.async.AsyncMethodCallback<describe_schema_versions_call>);;;public void describe_schema_versions(org.apache.thrift.async.AsyncMethodCallback<describe_schema_versions_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      describe_schema_versions_call method_call = new describe_schema_versions_call(resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_schema_versions_call(org.apache.thrift.async.AsyncMethodCallback<describe_schema_versions_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public describe_schema_versions_call(org.apache.thrift.async.AsyncMethodCallback<describe_schema_versions_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_schema_versions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        describe_schema_versions_args args = new describe_schema_versions_args();
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_keyspaces(org.apache.thrift.async.AsyncMethodCallback<describe_keyspaces_call>);;;public void describe_keyspaces(org.apache.thrift.async.AsyncMethodCallback<describe_keyspaces_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      describe_keyspaces_call method_call = new describe_keyspaces_call(resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_keyspaces_call(org.apache.thrift.async.AsyncMethodCallback<describe_keyspaces_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public describe_keyspaces_call(org.apache.thrift.async.AsyncMethodCallback<describe_keyspaces_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_keyspaces", org.apache.thrift.protocol.TMessageType.CALL, 0));
        describe_keyspaces_args args = new describe_keyspaces_args();
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_cluster_name(org.apache.thrift.async.AsyncMethodCallback<describe_cluster_name_call>);;;public void describe_cluster_name(org.apache.thrift.async.AsyncMethodCallback<describe_cluster_name_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      describe_cluster_name_call method_call = new describe_cluster_name_call(resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_cluster_name_call(org.apache.thrift.async.AsyncMethodCallback<describe_cluster_name_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public describe_cluster_name_call(org.apache.thrift.async.AsyncMethodCallback<describe_cluster_name_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_cluster_name", org.apache.thrift.protocol.TMessageType.CALL, 0));
        describe_cluster_name_args args = new describe_cluster_name_args();
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_version(org.apache.thrift.async.AsyncMethodCallback<describe_version_call>);;;public void describe_version(org.apache.thrift.async.AsyncMethodCallback<describe_version_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      describe_version_call method_call = new describe_version_call(resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_version_call(org.apache.thrift.async.AsyncMethodCallback<describe_version_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public describe_version_call(org.apache.thrift.async.AsyncMethodCallback<describe_version_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_version", org.apache.thrift.protocol.TMessageType.CALL, 0));
        describe_version_args args = new describe_version_args();
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_ring(String,org.apache.thrift.async.AsyncMethodCallback<describe_ring_call>);;;public void describe_ring(String keyspace, org.apache.thrift.async.AsyncMethodCallback<describe_ring_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      describe_ring_call method_call = new describe_ring_call(keyspace, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_ring_call(String,org.apache.thrift.async.AsyncMethodCallback<describe_ring_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public describe_ring_call(String keyspace, org.apache.thrift.async.AsyncMethodCallback<describe_ring_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keyspace = keyspace;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_ring", org.apache.thrift.protocol.TMessageType.CALL, 0));
        describe_ring_args args = new describe_ring_args();
        args.setKeyspace(keyspace);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_partitioner(org.apache.thrift.async.AsyncMethodCallback<describe_partitioner_call>);;;public void describe_partitioner(org.apache.thrift.async.AsyncMethodCallback<describe_partitioner_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      describe_partitioner_call method_call = new describe_partitioner_call(resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_partitioner_call(org.apache.thrift.async.AsyncMethodCallback<describe_partitioner_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public describe_partitioner_call(org.apache.thrift.async.AsyncMethodCallback<describe_partitioner_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_partitioner", org.apache.thrift.protocol.TMessageType.CALL, 0));
        describe_partitioner_args args = new describe_partitioner_args();
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_snitch(org.apache.thrift.async.AsyncMethodCallback<describe_snitch_call>);;;public void describe_snitch(org.apache.thrift.async.AsyncMethodCallback<describe_snitch_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      describe_snitch_call method_call = new describe_snitch_call(resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_snitch_call(org.apache.thrift.async.AsyncMethodCallback<describe_snitch_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public describe_snitch_call(org.apache.thrift.async.AsyncMethodCallback<describe_snitch_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_snitch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        describe_snitch_args args = new describe_snitch_args();
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_keyspace(String,org.apache.thrift.async.AsyncMethodCallback<describe_keyspace_call>);;;public void describe_keyspace(String keyspace, org.apache.thrift.async.AsyncMethodCallback<describe_keyspace_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      describe_keyspace_call method_call = new describe_keyspace_call(keyspace, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_keyspace_call(String,org.apache.thrift.async.AsyncMethodCallback<describe_keyspace_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public describe_keyspace_call(String keyspace, org.apache.thrift.async.AsyncMethodCallback<describe_keyspace_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keyspace = keyspace;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_keyspace", org.apache.thrift.protocol.TMessageType.CALL, 0));
        describe_keyspace_args args = new describe_keyspace_args();
        args.setKeyspace(keyspace);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_splits(String,String,String,int,org.apache.thrift.async.AsyncMethodCallback<describe_splits_call>);;;public void describe_splits(String cfName, String start_token, String end_token, int keys_per_split, org.apache.thrift.async.AsyncMethodCallback<describe_splits_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      describe_splits_call method_call = new describe_splits_call(cfName, start_token, end_token, keys_per_split, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_splits_call(String,String,String,int,org.apache.thrift.async.AsyncMethodCallback<describe_splits_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public describe_splits_call(String cfName, String start_token, String end_token, int keys_per_split, org.apache.thrift.async.AsyncMethodCallback<describe_splits_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cfName = cfName;
        this.start_token = start_token;
        this.end_token = end_token;
        this.keys_per_split = keys_per_split;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_splits", org.apache.thrift.protocol.TMessageType.CALL, 0));
        describe_splits_args args = new describe_splits_args();
        args.setCfName(cfName);
        args.setStart_token(start_token);
        args.setEnd_token(end_token);
        args.setKeys_per_split(keys_per_split);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_add_column_family(CfDef,org.apache.thrift.async.AsyncMethodCallback<system_add_column_family_call>);;;public void system_add_column_family(CfDef cf_def, org.apache.thrift.async.AsyncMethodCallback<system_add_column_family_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      system_add_column_family_call method_call = new system_add_column_family_call(cf_def, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_add_column_family_call(CfDef,org.apache.thrift.async.AsyncMethodCallback<system_add_column_family_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public system_add_column_family_call(CfDef cf_def, org.apache.thrift.async.AsyncMethodCallback<system_add_column_family_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cf_def = cf_def;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_add_column_family", org.apache.thrift.protocol.TMessageType.CALL, 0));
        system_add_column_family_args args = new system_add_column_family_args();
        args.setCf_def(cf_def);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_drop_column_family(String,org.apache.thrift.async.AsyncMethodCallback<system_drop_column_family_call>);;;public void system_drop_column_family(String column_family, org.apache.thrift.async.AsyncMethodCallback<system_drop_column_family_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      system_drop_column_family_call method_call = new system_drop_column_family_call(column_family, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_drop_column_family_call(String,org.apache.thrift.async.AsyncMethodCallback<system_drop_column_family_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public system_drop_column_family_call(String column_family, org.apache.thrift.async.AsyncMethodCallback<system_drop_column_family_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.column_family = column_family;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_drop_column_family", org.apache.thrift.protocol.TMessageType.CALL, 0));
        system_drop_column_family_args args = new system_drop_column_family_args();
        args.setColumn_family(column_family);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_add_keyspace(KsDef,org.apache.thrift.async.AsyncMethodCallback<system_add_keyspace_call>);;;public void system_add_keyspace(KsDef ks_def, org.apache.thrift.async.AsyncMethodCallback<system_add_keyspace_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      system_add_keyspace_call method_call = new system_add_keyspace_call(ks_def, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_add_keyspace_call(KsDef,org.apache.thrift.async.AsyncMethodCallback<system_add_keyspace_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public system_add_keyspace_call(KsDef ks_def, org.apache.thrift.async.AsyncMethodCallback<system_add_keyspace_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ks_def = ks_def;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_add_keyspace", org.apache.thrift.protocol.TMessageType.CALL, 0));
        system_add_keyspace_args args = new system_add_keyspace_args();
        args.setKs_def(ks_def);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_drop_keyspace(String,org.apache.thrift.async.AsyncMethodCallback<system_drop_keyspace_call>);;;public void system_drop_keyspace(String keyspace, org.apache.thrift.async.AsyncMethodCallback<system_drop_keyspace_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      system_drop_keyspace_call method_call = new system_drop_keyspace_call(keyspace, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_drop_keyspace_call(String,org.apache.thrift.async.AsyncMethodCallback<system_drop_keyspace_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public system_drop_keyspace_call(String keyspace, org.apache.thrift.async.AsyncMethodCallback<system_drop_keyspace_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.keyspace = keyspace;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_drop_keyspace", org.apache.thrift.protocol.TMessageType.CALL, 0));
        system_drop_keyspace_args args = new system_drop_keyspace_args();
        args.setKeyspace(keyspace);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_update_keyspace(KsDef,org.apache.thrift.async.AsyncMethodCallback<system_update_keyspace_call>);;;public void system_update_keyspace(KsDef ks_def, org.apache.thrift.async.AsyncMethodCallback<system_update_keyspace_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      system_update_keyspace_call method_call = new system_update_keyspace_call(ks_def, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_update_keyspace_call(KsDef,org.apache.thrift.async.AsyncMethodCallback<system_update_keyspace_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public system_update_keyspace_call(KsDef ks_def, org.apache.thrift.async.AsyncMethodCallback<system_update_keyspace_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ks_def = ks_def;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_update_keyspace", org.apache.thrift.protocol.TMessageType.CALL, 0));
        system_update_keyspace_args args = new system_update_keyspace_args();
        args.setKs_def(ks_def);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_update_column_family(CfDef,org.apache.thrift.async.AsyncMethodCallback<system_update_column_family_call>);;;public void system_update_column_family(CfDef cf_def, org.apache.thrift.async.AsyncMethodCallback<system_update_column_family_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      system_update_column_family_call method_call = new system_update_column_family_call(cf_def, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_update_column_family_call(CfDef,org.apache.thrift.async.AsyncMethodCallback<system_update_column_family_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public system_update_column_family_call(CfDef cf_def, org.apache.thrift.async.AsyncMethodCallback<system_update_column_family_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cf_def = cf_def;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_update_column_family", org.apache.thrift.protocol.TMessageType.CALL, 0));
        system_update_column_family_args args = new system_update_column_family_args();
        args.setCf_def(cf_def);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;execute_cql_query(ByteBuffer,Compression,org.apache.thrift.async.AsyncMethodCallback<execute_cql_query_call>);;;public void execute_cql_query(ByteBuffer query, Compression compression, org.apache.thrift.async.AsyncMethodCallback<execute_cql_query_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      execute_cql_query_call method_call = new execute_cql_query_call(query, compression, resultHandler, this, protocolFactory, transport);
      this.currentMethod = method_call;
      manager.call(method_call);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;execute_cql_query_call(ByteBuffer,Compression,org.apache.thrift.async.AsyncMethodCallback<execute_cql_query_call>,org.apache.thrift.async.TAsyncClient,org.apache.thrift.protocol.TProtocolFactory,org.apache.thrift.transport.TNonblockingTransport);;;public execute_cql_query_call(ByteBuffer query, Compression compression, org.apache.thrift.async.AsyncMethodCallback<execute_cql_query_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
        this.compression = compression;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write_args(org.apache.thrift.protocol.TProtocol);;;public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execute_cql_query", org.apache.thrift.protocol.TMessageType.CALL, 0));
        execute_cql_query_args args = new execute_cql_query_args();
        args.setQuery(query);
        args.setCompression(compression);
        args.write(prot);
        prot.writeMessageEnd();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getResult();;;public CqlResult getResult() throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_execute_cql_query();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;Processor(Iface);;;      processMap_.put("add", new add());
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;Processor(Iface);;;      processMap_.put("remove_counter", new remove_counter());
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;Processor(Iface);;;      processMap_.put("execute_cql_query", new execute_cql_query());
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public boolean process(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
    {
      org.apache.thrift.protocol.TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, org.apache.thrift.protocol.TType.STRUCT);
        iprot.readMessageEnd();
        org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(msg.name, org.apache.thrift.protocol.TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        login_args args = new login_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        login_result result = new login_result();
        try {
          iface_.login(args.auth_request);
        } catch (AuthenticationException authnx) {
          result.authnx = authnx;
        } catch (AuthorizationException authzx) {
          result.authzx = authzx;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing login", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing login");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        set_keyspace_args args = new set_keyspace_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("set_keyspace", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        set_keyspace_result result = new set_keyspace_result();
        try {
          iface_.set_keyspace(args.keyspace);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing set_keyspace", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing set_keyspace");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("set_keyspace", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("set_keyspace", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        get_args args = new get_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        get_result result = new get_result();
        try {
          result.success = iface_.get(args.key, args.column_path, args.consistency_level);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (NotFoundException nfe) {
          result.nfe = nfe;
        } catch (UnavailableException ue) {
          result.ue = ue;
        } catch (TimedOutException te) {
          result.te = te;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing get");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        get_slice_args args = new get_slice_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_slice", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        get_slice_result result = new get_slice_result();
        try {
          result.success = iface_.get_slice(args.key, args.column_parent, args.predicate, args.consistency_level);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (UnavailableException ue) {
          result.ue = ue;
        } catch (TimedOutException te) {
          result.te = te;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_slice", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing get_slice");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_slice", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_slice", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        get_count_args args = new get_count_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_count", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        get_count_result result = new get_count_result();
        try {
          result.success = iface_.get_count(args.key, args.column_parent, args.predicate, args.consistency_level);
          result.setSuccessIsSet(true);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (UnavailableException ue) {
          result.ue = ue;
        } catch (TimedOutException te) {
          result.te = te;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_count", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing get_count");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_count", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_count", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        multiget_slice_args args = new multiget_slice_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiget_slice", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        multiget_slice_result result = new multiget_slice_result();
        try {
          result.success = iface_.multiget_slice(args.keys, args.column_parent, args.predicate, args.consistency_level);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (UnavailableException ue) {
          result.ue = ue;
        } catch (TimedOutException te) {
          result.te = te;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing multiget_slice", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing multiget_slice");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiget_slice", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiget_slice", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        multiget_count_args args = new multiget_count_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiget_count", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        multiget_count_result result = new multiget_count_result();
        try {
          result.success = iface_.multiget_count(args.keys, args.column_parent, args.predicate, args.consistency_level);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (UnavailableException ue) {
          result.ue = ue;
        } catch (TimedOutException te) {
          result.te = te;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing multiget_count", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing multiget_count");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiget_count", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("multiget_count", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        get_range_slices_args args = new get_range_slices_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_range_slices", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        get_range_slices_result result = new get_range_slices_result();
        try {
          result.success = iface_.get_range_slices(args.column_parent, args.predicate, args.range, args.consistency_level);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (UnavailableException ue) {
          result.ue = ue;
        } catch (TimedOutException te) {
          result.te = te;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_range_slices", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing get_range_slices");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_range_slices", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_range_slices", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        get_indexed_slices_args args = new get_indexed_slices_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_indexed_slices", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        get_indexed_slices_result result = new get_indexed_slices_result();
        try {
          result.success = iface_.get_indexed_slices(args.column_parent, args.index_clause, args.column_predicate, args.consistency_level);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (UnavailableException ue) {
          result.ue = ue;
        } catch (TimedOutException te) {
          result.te = te;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing get_indexed_slices", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing get_indexed_slices");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_indexed_slices", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get_indexed_slices", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        insert_args args = new insert_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insert", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        insert_result result = new insert_result();
        try {
          iface_.insert(args.key, args.column_parent, args.column, args.consistency_level);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (UnavailableException ue) {
          result.ue = ue;
        } catch (TimedOutException te) {
          result.te = te;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing insert", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing insert");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insert", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insert", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        add_args args = new add_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        add_result result = new add_result();
        try {
          iface_.add(args.key, args.column_parent, args.column, args.consistency_level);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (UnavailableException ue) {
          result.ue = ue;
        } catch (TimedOutException te) {
          result.te = te;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing add", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing add");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("add", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        remove_args args = new remove_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        remove_result result = new remove_result();
        try {
          iface_.remove(args.key, args.column_path, args.timestamp, args.consistency_level);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (UnavailableException ue) {
          result.ue = ue;
        } catch (TimedOutException te) {
          result.te = te;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing remove", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing remove");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        remove_counter_args args = new remove_counter_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove_counter", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        remove_counter_result result = new remove_counter_result();
        try {
          iface_.remove_counter(args.key, args.path, args.consistency_level);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (UnavailableException ue) {
          result.ue = ue;
        } catch (TimedOutException te) {
          result.te = te;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing remove_counter", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing remove_counter");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove_counter", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("remove_counter", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        batch_mutate_args args = new batch_mutate_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batch_mutate", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        batch_mutate_result result = new batch_mutate_result();
        try {
          iface_.batch_mutate(args.mutation_map, args.consistency_level);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (UnavailableException ue) {
          result.ue = ue;
        } catch (TimedOutException te) {
          result.te = te;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing batch_mutate", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing batch_mutate");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batch_mutate", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batch_mutate", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        truncate_args args = new truncate_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("truncate", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        truncate_result result = new truncate_result();
        try {
          iface_.truncate(args.cfname);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (UnavailableException ue) {
          result.ue = ue;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing truncate", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing truncate");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("truncate", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("truncate", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        describe_schema_versions_args args = new describe_schema_versions_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_schema_versions", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        describe_schema_versions_result result = new describe_schema_versions_result();
        try {
          result.success = iface_.describe_schema_versions();
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing describe_schema_versions", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing describe_schema_versions");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_schema_versions", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_schema_versions", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        describe_keyspaces_args args = new describe_keyspaces_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_keyspaces", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        describe_keyspaces_result result = new describe_keyspaces_result();
        try {
          result.success = iface_.describe_keyspaces();
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing describe_keyspaces", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing describe_keyspaces");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_keyspaces", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_keyspaces", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        describe_cluster_name_args args = new describe_cluster_name_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_cluster_name", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        describe_cluster_name_result result = new describe_cluster_name_result();
        result.success = iface_.describe_cluster_name();
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_cluster_name", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        describe_version_args args = new describe_version_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_version", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        describe_version_result result = new describe_version_result();
        result.success = iface_.describe_version();
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_version", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        describe_ring_args args = new describe_ring_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_ring", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        describe_ring_result result = new describe_ring_result();
        try {
          result.success = iface_.describe_ring(args.keyspace);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing describe_ring", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing describe_ring");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_ring", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_ring", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        describe_partitioner_args args = new describe_partitioner_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_partitioner", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        describe_partitioner_result result = new describe_partitioner_result();
        result.success = iface_.describe_partitioner();
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_partitioner", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        describe_snitch_args args = new describe_snitch_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_snitch", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        describe_snitch_result result = new describe_snitch_result();
        result.success = iface_.describe_snitch();
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_snitch", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        describe_keyspace_args args = new describe_keyspace_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_keyspace", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        describe_keyspace_result result = new describe_keyspace_result();
        try {
          result.success = iface_.describe_keyspace(args.keyspace);
        } catch (NotFoundException nfe) {
          result.nfe = nfe;
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing describe_keyspace", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing describe_keyspace");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_keyspace", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_keyspace", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        describe_splits_args args = new describe_splits_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_splits", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        describe_splits_result result = new describe_splits_result();
        try {
          result.success = iface_.describe_splits(args.cfName, args.start_token, args.end_token, args.keys_per_split);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing describe_splits", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing describe_splits");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_splits", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("describe_splits", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        system_add_column_family_args args = new system_add_column_family_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_add_column_family", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        system_add_column_family_result result = new system_add_column_family_result();
        try {
          result.success = iface_.system_add_column_family(args.cf_def);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (SchemaDisagreementException sde) {
          result.sde = sde;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing system_add_column_family", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing system_add_column_family");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_add_column_family", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_add_column_family", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        system_drop_column_family_args args = new system_drop_column_family_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_drop_column_family", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        system_drop_column_family_result result = new system_drop_column_family_result();
        try {
          result.success = iface_.system_drop_column_family(args.column_family);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (SchemaDisagreementException sde) {
          result.sde = sde;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing system_drop_column_family", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing system_drop_column_family");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_drop_column_family", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_drop_column_family", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        system_add_keyspace_args args = new system_add_keyspace_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_add_keyspace", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        system_add_keyspace_result result = new system_add_keyspace_result();
        try {
          result.success = iface_.system_add_keyspace(args.ks_def);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (SchemaDisagreementException sde) {
          result.sde = sde;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing system_add_keyspace", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing system_add_keyspace");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_add_keyspace", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_add_keyspace", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        system_drop_keyspace_args args = new system_drop_keyspace_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_drop_keyspace", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        system_drop_keyspace_result result = new system_drop_keyspace_result();
        try {
          result.success = iface_.system_drop_keyspace(args.keyspace);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (SchemaDisagreementException sde) {
          result.sde = sde;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing system_drop_keyspace", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing system_drop_keyspace");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_drop_keyspace", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_drop_keyspace", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        system_update_keyspace_args args = new system_update_keyspace_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_update_keyspace", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        system_update_keyspace_result result = new system_update_keyspace_result();
        try {
          result.success = iface_.system_update_keyspace(args.ks_def);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (SchemaDisagreementException sde) {
          result.sde = sde;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing system_update_keyspace", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing system_update_keyspace");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_update_keyspace", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_update_keyspace", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        system_update_column_family_args args = new system_update_column_family_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_update_column_family", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        system_update_column_family_result result = new system_update_column_family_result();
        try {
          result.success = iface_.system_update_column_family(args.cf_def);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (SchemaDisagreementException sde) {
          result.sde = sde;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing system_update_column_family", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing system_update_column_family");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_update_column_family", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("system_update_column_family", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;process(int,org.apache.thrift.protocol.TProtocol,org.apache.thrift.protocol.TProtocol);;;public void process(int seqid, org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException
      {
        execute_cql_query_args args = new execute_cql_query_args();
        try {
          args.read(iprot);
        } catch (org.apache.thrift.protocol.TProtocolException e) {
          iprot.readMessageEnd();
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execute_cql_query", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        execute_cql_query_result result = new execute_cql_query_result();
        try {
          result.success = iface_.execute_cql_query(args.query, args.compression);
        } catch (InvalidRequestException ire) {
          result.ire = ire;
        } catch (UnavailableException ue) {
          result.ue = ue;
        } catch (TimedOutException te) {
          result.te = te;
        } catch (SchemaDisagreementException sde) {
          result.sde = sde;
        } catch (Throwable th) {
          LOGGER.error("Internal error processing execute_cql_query", th);
          org.apache.thrift.TApplicationException x = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, "Internal error processing execute_cql_query");
          oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execute_cql_query", org.apache.thrift.protocol.TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("execute_cql_query", org.apache.thrift.protocol.TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTH_REQUEST
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.auth_request = new AuthenticationRequest();
              this.auth_request.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.auth_request != null) {
        oprot.writeFieldBegin(AUTH_REQUEST_FIELD_DESC);
        this.auth_request.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // AUTHNX
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.authnx = new AuthenticationException();
              this.authnx.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // AUTHZX
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.authzx = new AuthorizationException();
              this.authzx.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetAuthnx()) {
        oprot.writeFieldBegin(AUTHNX_FIELD_DESC);
        this.authnx.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetAuthzx()) {
        oprot.writeFieldBegin(AUTHZX_FIELD_DESC);
        this.authzx.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEYSPACE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.keyspace = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.keyspace != null) {
        oprot.writeFieldBegin(KEYSPACE_FIELD_DESC);
        oprot.writeString(this.keyspace);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;bufferForKey();;;public ByteBuffer bufferForKey() {
      return key;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.key = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // COLUMN_PATH
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.column_path = new ColumnPath();
              this.column_path.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CONSISTENCY_LEVEL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeBinary(this.key);
        oprot.writeFieldEnd();
      }
      if (this.column_path != null) {
        oprot.writeFieldBegin(COLUMN_PATH_FIELD_DESC);
        this.column_path.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.consistency_level != null) {
        oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
        oprot.writeI32(this.consistency_level.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new ColumnOrSuperColumn();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NFE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.nfe = new NotFoundException();
              this.nfe.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // UE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ue = new UnavailableException();
              this.ue.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // TE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.te = new TimedOutException();
              this.te.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNfe()) {
        oprot.writeFieldBegin(NFE_FIELD_DESC);
        this.nfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTe()) {
        oprot.writeFieldBegin(TE_FIELD_DESC);
        this.te.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;bufferForKey();;;public ByteBuffer bufferForKey() {
      return key;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.key = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // COLUMN_PARENT
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.column_parent = new ColumnParent();
              this.column_parent.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PREDICATE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.predicate = new SlicePredicate();
              this.predicate.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CONSISTENCY_LEVEL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeBinary(this.key);
        oprot.writeFieldEnd();
      }
      if (this.column_parent != null) {
        oprot.writeFieldBegin(COLUMN_PARENT_FIELD_DESC);
        this.column_parent.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.predicate != null) {
        oprot.writeFieldBegin(PREDICATE_FIELD_DESC);
        this.predicate.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.consistency_level != null) {
        oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
        oprot.writeI32(this.consistency_level.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list50 = iprot.readListBegin();
                this.success = new ArrayList<ColumnOrSuperColumn>(_list50.size);
                for (int _i51 = 0; _i51 < _list50.size; ++_i51)
                {
                  ColumnOrSuperColumn _elem52;
                  _elem52 = new ColumnOrSuperColumn();
                  _elem52.read(iprot);
                  this.success.add(_elem52);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ue = new UnavailableException();
              this.ue.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.te = new TimedOutException();
              this.te.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (ColumnOrSuperColumn _iter53 : this.success)
          {
            _iter53.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTe()) {
        oprot.writeFieldBegin(TE_FIELD_DESC);
        this.te.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;bufferForKey();;;public ByteBuffer bufferForKey() {
      return key;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.key = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // COLUMN_PARENT
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.column_parent = new ColumnParent();
              this.column_parent.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PREDICATE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.predicate = new SlicePredicate();
              this.predicate.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CONSISTENCY_LEVEL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeBinary(this.key);
        oprot.writeFieldEnd();
      }
      if (this.column_parent != null) {
        oprot.writeFieldBegin(COLUMN_PARENT_FIELD_DESC);
        this.column_parent.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.predicate != null) {
        oprot.writeFieldBegin(PREDICATE_FIELD_DESC);
        this.predicate.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.consistency_level != null) {
        oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
        oprot.writeI32(this.consistency_level.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ue = new UnavailableException();
              this.ue.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.te = new TimedOutException();
              this.te.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTe()) {
        oprot.writeFieldBegin(TE_FIELD_DESC);
        this.te.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEYS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list54 = iprot.readListBegin();
                this.keys = new ArrayList<ByteBuffer>(_list54.size);
                for (int _i55 = 0; _i55 < _list54.size; ++_i55)
                {
                  ByteBuffer _elem56;
                  _elem56 = iprot.readBinary();
                  this.keys.add(_elem56);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // COLUMN_PARENT
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.column_parent = new ColumnParent();
              this.column_parent.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PREDICATE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.predicate = new SlicePredicate();
              this.predicate.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CONSISTENCY_LEVEL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.keys != null) {
        oprot.writeFieldBegin(KEYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.keys.size()));
          for (ByteBuffer _iter57 : this.keys)
          {
            oprot.writeBinary(_iter57);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.column_parent != null) {
        oprot.writeFieldBegin(COLUMN_PARENT_FIELD_DESC);
        this.column_parent.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.predicate != null) {
        oprot.writeFieldBegin(PREDICATE_FIELD_DESC);
        this.predicate.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.consistency_level != null) {
        oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
        oprot.writeI32(this.consistency_level.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin();
                this.success = new HashMap<ByteBuffer,List<ColumnOrSuperColumn>>(2*_map58.size);
                for (int _i59 = 0; _i59 < _map58.size; ++_i59)
                {
                  ByteBuffer _key60;
                  List<ColumnOrSuperColumn> _val61;
                  _key60 = iprot.readBinary();
                  {
                    org.apache.thrift.protocol.TList _list62 = iprot.readListBegin();
                    _val61 = new ArrayList<ColumnOrSuperColumn>(_list62.size);
                    for (int _i63 = 0; _i63 < _list62.size; ++_i63)
                    {
                      ColumnOrSuperColumn _elem64;
                      _elem64 = new ColumnOrSuperColumn();
                      _elem64.read(iprot);
                      _val61.add(_elem64);
                    }
                    iprot.readListEnd();
                  }
                  this.success.put(_key60, _val61);
                }
                iprot.readMapEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ue = new UnavailableException();
              this.ue.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.te = new TimedOutException();
              this.te.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, this.success.size()));
          for (Map.Entry<ByteBuffer, List<ColumnOrSuperColumn>> _iter65 : this.success.entrySet())
          {
            oprot.writeBinary(_iter65.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter65.getValue().size()));
              for (ColumnOrSuperColumn _iter66 : _iter65.getValue())
              {
                _iter66.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTe()) {
        oprot.writeFieldBegin(TE_FIELD_DESC);
        this.te.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEYS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list67 = iprot.readListBegin();
                this.keys = new ArrayList<ByteBuffer>(_list67.size);
                for (int _i68 = 0; _i68 < _list67.size; ++_i68)
                {
                  ByteBuffer _elem69;
                  _elem69 = iprot.readBinary();
                  this.keys.add(_elem69);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // COLUMN_PARENT
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.column_parent = new ColumnParent();
              this.column_parent.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PREDICATE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.predicate = new SlicePredicate();
              this.predicate.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CONSISTENCY_LEVEL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.keys != null) {
        oprot.writeFieldBegin(KEYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.keys.size()));
          for (ByteBuffer _iter70 : this.keys)
          {
            oprot.writeBinary(_iter70);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.column_parent != null) {
        oprot.writeFieldBegin(COLUMN_PARENT_FIELD_DESC);
        this.column_parent.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.predicate != null) {
        oprot.writeFieldBegin(PREDICATE_FIELD_DESC);
        this.predicate.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.consistency_level != null) {
        oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
        oprot.writeI32(this.consistency_level.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map71 = iprot.readMapBegin();
                this.success = new HashMap<ByteBuffer,Integer>(2*_map71.size);
                for (int _i72 = 0; _i72 < _map71.size; ++_i72)
                {
                  ByteBuffer _key73;
                  int _val74;
                  _key73 = iprot.readBinary();
                  _val74 = iprot.readI32();
                  this.success.put(_key73, _val74);
                }
                iprot.readMapEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ue = new UnavailableException();
              this.ue.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.te = new TimedOutException();
              this.te.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, this.success.size()));
          for (Map.Entry<ByteBuffer, Integer> _iter75 : this.success.entrySet())
          {
            oprot.writeBinary(_iter75.getKey());
            oprot.writeI32(_iter75.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTe()) {
        oprot.writeFieldBegin(TE_FIELD_DESC);
        this.te.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // COLUMN_PARENT
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.column_parent = new ColumnParent();
              this.column_parent.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PREDICATE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.predicate = new SlicePredicate();
              this.predicate.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // RANGE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.range = new KeyRange();
              this.range.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CONSISTENCY_LEVEL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.column_parent != null) {
        oprot.writeFieldBegin(COLUMN_PARENT_FIELD_DESC);
        this.column_parent.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.predicate != null) {
        oprot.writeFieldBegin(PREDICATE_FIELD_DESC);
        this.predicate.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.range != null) {
        oprot.writeFieldBegin(RANGE_FIELD_DESC);
        this.range.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.consistency_level != null) {
        oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
        oprot.writeI32(this.consistency_level.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list76 = iprot.readListBegin();
                this.success = new ArrayList<KeySlice>(_list76.size);
                for (int _i77 = 0; _i77 < _list76.size; ++_i77)
                {
                  KeySlice _elem78;
                  _elem78 = new KeySlice();
                  _elem78.read(iprot);
                  this.success.add(_elem78);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ue = new UnavailableException();
              this.ue.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.te = new TimedOutException();
              this.te.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (KeySlice _iter79 : this.success)
          {
            _iter79.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTe()) {
        oprot.writeFieldBegin(TE_FIELD_DESC);
        this.te.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // COLUMN_PARENT
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.column_parent = new ColumnParent();
              this.column_parent.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // INDEX_CLAUSE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.index_clause = new IndexClause();
              this.index_clause.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // COLUMN_PREDICATE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.column_predicate = new SlicePredicate();
              this.column_predicate.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CONSISTENCY_LEVEL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.column_parent != null) {
        oprot.writeFieldBegin(COLUMN_PARENT_FIELD_DESC);
        this.column_parent.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.index_clause != null) {
        oprot.writeFieldBegin(INDEX_CLAUSE_FIELD_DESC);
        this.index_clause.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.column_predicate != null) {
        oprot.writeFieldBegin(COLUMN_PREDICATE_FIELD_DESC);
        this.column_predicate.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.consistency_level != null) {
        oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
        oprot.writeI32(this.consistency_level.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                this.success = new ArrayList<KeySlice>(_list80.size);
                for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                {
                  KeySlice _elem82;
                  _elem82 = new KeySlice();
                  _elem82.read(iprot);
                  this.success.add(_elem82);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ue = new UnavailableException();
              this.ue.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.te = new TimedOutException();
              this.te.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (KeySlice _iter83 : this.success)
          {
            _iter83.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTe()) {
        oprot.writeFieldBegin(TE_FIELD_DESC);
        this.te.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;bufferForKey();;;public ByteBuffer bufferForKey() {
      return key;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.key = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // COLUMN_PARENT
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.column_parent = new ColumnParent();
              this.column_parent.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // COLUMN
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.column = new Column();
              this.column.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CONSISTENCY_LEVEL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeBinary(this.key);
        oprot.writeFieldEnd();
      }
      if (this.column_parent != null) {
        oprot.writeFieldBegin(COLUMN_PARENT_FIELD_DESC);
        this.column_parent.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.column != null) {
        oprot.writeFieldBegin(COLUMN_FIELD_DESC);
        this.column.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.consistency_level != null) {
        oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
        oprot.writeI32(this.consistency_level.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ue = new UnavailableException();
              this.ue.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.te = new TimedOutException();
              this.te.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTe()) {
        oprot.writeFieldBegin(TE_FIELD_DESC);
        this.te.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftId(int);;;public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // COLUMN_PARENT
            return COLUMN_PARENT;
          case 3: // COLUMN
            return COLUMN;
          case 4: // CONSISTENCY_LEVEL
            return CONSISTENCY_LEVEL;
          default:
            return null;
        }
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftIdOrThrow(int);;;public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByName(String);;;public static _Fields findByName(String name) {
        return byName.get(name);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;_Fields(short,String);;;_Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getThriftFieldId();;;public short getThriftFieldId() {
        return _thriftId;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldName();;;public String getFieldName() {
        return _fieldName;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;add_args();;;public add_args() {
      this.consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.ONE;

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;add_args(ByteBuffer,ColumnParent,CounterColumn,ConsistencyLevel);;;public add_args(
      ByteBuffer key,
      ColumnParent column_parent,
      CounterColumn column,
      ConsistencyLevel consistency_level)
    {
      this();
      this.key = key;
      this.column_parent = column_parent;
      this.column = column;
      this.consistency_level = consistency_level;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;add_args(add_args);;;public add_args(add_args other) {
      if (other.isSetKey()) {
        this.key = org.apache.thrift.TBaseHelper.copyBinary(other.key);
;
      }
      if (other.isSetColumn_parent()) {
        this.column_parent = new ColumnParent(other.column_parent);
      }
      if (other.isSetColumn()) {
        this.column = new CounterColumn(other.column);
      }
      if (other.isSetConsistency_level()) {
        this.consistency_level = other.consistency_level;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;deepCopy();;;public add_args deepCopy() {
      return new add_args(this);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;clear();;;@Override
    public void clear() {
      this.key = null;
      this.column_parent = null;
      this.column = null;
      this.consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.ONE;

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getKey();;;public byte[] getKey() {
      setKey(org.apache.thrift.TBaseHelper.rightSize(key));
      return key == null ? null : key.array();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;bufferForKey();;;public ByteBuffer bufferForKey() {
      return key;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setKey(byte[]);;;public add_args setKey(byte[] key) {
      setKey(key == null ? (ByteBuffer)null : ByteBuffer.wrap(key));
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setKey(ByteBuffer);;;public add_args setKey(ByteBuffer key) {
      this.key = key;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetKey();;;public void unsetKey() {
      this.key = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetKey();;;public boolean isSetKey() {
      return this.key != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setKeyIsSet(boolean);;;public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getColumn_parent();;;public ColumnParent getColumn_parent() {
      return this.column_parent;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setColumn_parent(ColumnParent);;;public add_args setColumn_parent(ColumnParent column_parent) {
      this.column_parent = column_parent;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetColumn_parent();;;public void unsetColumn_parent() {
      this.column_parent = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetColumn_parent();;;public boolean isSetColumn_parent() {
      return this.column_parent != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setColumn_parentIsSet(boolean);;;public void setColumn_parentIsSet(boolean value) {
      if (!value) {
        this.column_parent = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getColumn();;;public CounterColumn getColumn() {
      return this.column;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setColumn(CounterColumn);;;public add_args setColumn(CounterColumn column) {
      this.column = column;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetColumn();;;public void unsetColumn() {
      this.column = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetColumn();;;public boolean isSetColumn() {
      return this.column != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setColumnIsSet(boolean);;;public void setColumnIsSet(boolean value) {
      if (!value) {
        this.column = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getConsistency_level();;;public ConsistencyLevel getConsistency_level() {
      return this.consistency_level;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setConsistency_level(ConsistencyLevel);;;public add_args setConsistency_level(ConsistencyLevel consistency_level) {
      this.consistency_level = consistency_level;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetConsistency_level();;;public void unsetConsistency_level() {
      this.consistency_level = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetConsistency_level();;;public boolean isSetConsistency_level() {
      return this.consistency_level != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setConsistency_levelIsSet(boolean);;;public void setConsistency_levelIsSet(boolean value) {
      if (!value) {
        this.consistency_level = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setFieldValue(_Fields,Object);;;public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((ByteBuffer)value);
        }
        break;

      case COLUMN_PARENT:
        if (value == null) {
          unsetColumn_parent();
        } else {
          setColumn_parent((ColumnParent)value);
        }
        break;

      case COLUMN:
        if (value == null) {
          unsetColumn();
        } else {
          setColumn((CounterColumn)value);
        }
        break;

      case CONSISTENCY_LEVEL:
        if (value == null) {
          unsetConsistency_level();
        } else {
          setConsistency_level((ConsistencyLevel)value);
        }
        break;

      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldValue(_Fields);;;public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case COLUMN_PARENT:
        return getColumn_parent();

      case COLUMN:
        return getColumn();

      case CONSISTENCY_LEVEL:
        return getConsistency_level();

      }
      throw new IllegalStateException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSet(_Fields);;;public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case COLUMN_PARENT:
        return isSetColumn_parent();
      case COLUMN:
        return isSetColumn();
      case CONSISTENCY_LEVEL:
        return isSetConsistency_level();
      }
      throw new IllegalStateException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(Object);;;@Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_args)
        return this.equals((add_args)that);
      return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(add_args);;;public boolean equals(add_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_column_parent = true && this.isSetColumn_parent();
      boolean that_present_column_parent = true && that.isSetColumn_parent();
      if (this_present_column_parent || that_present_column_parent) {
        if (!(this_present_column_parent && that_present_column_parent))
          return false;
        if (!this.column_parent.equals(that.column_parent))
          return false;
      }

      boolean this_present_column = true && this.isSetColumn();
      boolean that_present_column = true && that.isSetColumn();
      if (this_present_column || that_present_column) {
        if (!(this_present_column && that_present_column))
          return false;
        if (!this.column.equals(that.column))
          return false;
      }

      boolean this_present_consistency_level = true && this.isSetConsistency_level();
      boolean that_present_consistency_level = true && that.isSetConsistency_level();
      if (this_present_consistency_level || that_present_consistency_level) {
        if (!(this_present_consistency_level && that_present_consistency_level))
          return false;
        if (!this.consistency_level.equals(that.consistency_level))
          return false;
      }

      return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;hashCode();;;@Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_key = true && (isSetKey());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      boolean present_column_parent = true && (isSetColumn_parent());
      builder.append(present_column_parent);
      if (present_column_parent)
        builder.append(column_parent);

      boolean present_column = true && (isSetColumn());
      builder.append(present_column);
      if (present_column)
        builder.append(column);

      boolean present_consistency_level = true && (isSetConsistency_level());
      builder.append(present_consistency_level);
      if (present_consistency_level)
        builder.append(consistency_level.getValue());

      return builder.toHashCode();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;compareTo(add_args);;;public int compareTo(add_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      add_args typedOther = (add_args)other;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumn_parent()).compareTo(typedOther.isSetColumn_parent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumn_parent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column_parent, typedOther.column_parent);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetColumn()).compareTo(typedOther.isSetColumn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetColumn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.column, typedOther.column);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(typedOther.isSetConsistency_level());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConsistency_level()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consistency_level, typedOther.consistency_level);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;fieldForId(int);;;public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.key = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // COLUMN_PARENT
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.column_parent = new ColumnParent();
              this.column_parent.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // COLUMN
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.column = new CounterColumn();
              this.column.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CONSISTENCY_LEVEL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeBinary(this.key);
        oprot.writeFieldEnd();
      }
      if (this.column_parent != null) {
        oprot.writeFieldBegin(COLUMN_PARENT_FIELD_DESC);
        this.column_parent.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.column != null) {
        oprot.writeFieldBegin(COLUMN_FIELD_DESC);
        this.column.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.consistency_level != null) {
        oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
        oprot.writeI32(this.consistency_level.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;toString();;;@Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.key, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("column_parent:");
      if (this.column_parent == null) {
        sb.append("null");
      } else {
        sb.append(this.column_parent);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("column:");
      if (this.column == null) {
        sb.append("null");
      } else {
        sb.append(this.column);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("consistency_level:");
      if (this.consistency_level == null) {
        sb.append("null");
      } else {
        sb.append(this.consistency_level);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;validate();;;public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (key == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'key' was not present! Struct: " + toString());
      }
      if (column_parent == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'column_parent' was not present! Struct: " + toString());
      }
      if (column == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'column' was not present! Struct: " + toString());
      }
      if (consistency_level == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'consistency_level' was not present! Struct: " + toString());
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftId(int);;;public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftIdOrThrow(int);;;public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByName(String);;;public static _Fields findByName(String name) {
        return byName.get(name);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;_Fields(short,String);;;_Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getThriftFieldId();;;public short getThriftFieldId() {
        return _thriftId;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldName();;;public String getFieldName() {
        return _fieldName;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;add_result();;;public add_result() {
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;add_result(InvalidRequestException,UnavailableException,TimedOutException);;;public add_result(
      InvalidRequestException ire,
      UnavailableException ue,
      TimedOutException te)
    {
      this();
      this.ire = ire;
      this.ue = ue;
      this.te = te;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;add_result(add_result);;;public add_result(add_result other) {
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new TimedOutException(other.te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;deepCopy();;;public add_result deepCopy() {
      return new add_result(this);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;clear();;;@Override
    public void clear() {
      this.ire = null;
      this.ue = null;
      this.te = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getIre();;;public InvalidRequestException getIre() {
      return this.ire;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setIre(InvalidRequestException);;;public add_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetIre();;;public void unsetIre() {
      this.ire = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetIre();;;public boolean isSetIre() {
      return this.ire != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setIreIsSet(boolean);;;public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getUe();;;public UnavailableException getUe() {
      return this.ue;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setUe(UnavailableException);;;public add_result setUe(UnavailableException ue) {
      this.ue = ue;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetUe();;;public void unsetUe() {
      this.ue = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetUe();;;public boolean isSetUe() {
      return this.ue != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setUeIsSet(boolean);;;public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getTe();;;public TimedOutException getTe() {
      return this.te;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setTe(TimedOutException);;;public add_result setTe(TimedOutException te) {
      this.te = te;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetTe();;;public void unsetTe() {
      this.te = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetTe();;;public boolean isSetTe() {
      return this.te != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setTeIsSet(boolean);;;public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setFieldValue(_Fields,Object);;;public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TimedOutException)value);
        }
        break;

      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldValue(_Fields);;;public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSet(_Fields);;;public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(Object);;;@Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof add_result)
        return this.equals((add_result)that);
      return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(add_result);;;public boolean equals(add_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;hashCode();;;@Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ire = true && (isSetIre());
      builder.append(present_ire);
      if (present_ire)
        builder.append(ire);

      boolean present_ue = true && (isSetUe());
      builder.append(present_ue);
      if (present_ue)
        builder.append(ue);

      boolean present_te = true && (isSetTe());
      builder.append(present_te);
      if (present_te)
        builder.append(te);

      return builder.toHashCode();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;compareTo(add_result);;;public int compareTo(add_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      add_result typedOther = (add_result)other;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, typedOther.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;fieldForId(int);;;public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ue = new UnavailableException();
              this.ue.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.te = new TimedOutException();
              this.te.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTe()) {
        oprot.writeFieldBegin(TE_FIELD_DESC);
        this.te.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;toString();;;@Override
    public String toString() {
      StringBuilder sb = new StringBuilder("add_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;validate();;;public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;bufferForKey();;;public ByteBuffer bufferForKey() {
      return key;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.key = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // COLUMN_PATH
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.column_path = new ColumnPath();
              this.column_path.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TIMESTAMP
            if (field.type == org.apache.thrift.protocol.TType.I64) {
              this.timestamp = iprot.readI64();
              setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CONSISTENCY_LEVEL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeBinary(this.key);
        oprot.writeFieldEnd();
      }
      if (this.column_path != null) {
        oprot.writeFieldBegin(COLUMN_PATH_FIELD_DESC);
        this.column_path.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(this.timestamp);
      oprot.writeFieldEnd();
      if (this.consistency_level != null) {
        oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
        oprot.writeI32(this.consistency_level.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bit_vector = new BitSet(1);
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ue = new UnavailableException();
              this.ue.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.te = new TimedOutException();
              this.te.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTe()) {
        oprot.writeFieldBegin(TE_FIELD_DESC);
        this.te.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftId(int);;;public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // PATH
            return PATH;
          case 3: // CONSISTENCY_LEVEL
            return CONSISTENCY_LEVEL;
          default:
            return null;
        }
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftIdOrThrow(int);;;public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByName(String);;;public static _Fields findByName(String name) {
        return byName.get(name);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;_Fields(short,String);;;_Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getThriftFieldId();;;public short getThriftFieldId() {
        return _thriftId;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldName();;;public String getFieldName() {
        return _fieldName;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;remove_counter_args();;;public remove_counter_args() {
      this.consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.ONE;

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;remove_counter_args(ByteBuffer,ColumnPath,ConsistencyLevel);;;public remove_counter_args(
      ByteBuffer key,
      ColumnPath path,
      ConsistencyLevel consistency_level)
    {
      this();
      this.key = key;
      this.path = path;
      this.consistency_level = consistency_level;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;remove_counter_args(remove_counter_args);;;public remove_counter_args(remove_counter_args other) {
      if (other.isSetKey()) {
        this.key = org.apache.thrift.TBaseHelper.copyBinary(other.key);
;
      }
      if (other.isSetPath()) {
        this.path = new ColumnPath(other.path);
      }
      if (other.isSetConsistency_level()) {
        this.consistency_level = other.consistency_level;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;deepCopy();;;public remove_counter_args deepCopy() {
      return new remove_counter_args(this);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;clear();;;@Override
    public void clear() {
      this.key = null;
      this.path = null;
      this.consistency_level = org.apache.cassandra.thrift.ConsistencyLevel.ONE;

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getKey();;;public byte[] getKey() {
      setKey(org.apache.thrift.TBaseHelper.rightSize(key));
      return key == null ? null : key.array();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;bufferForKey();;;public ByteBuffer bufferForKey() {
      return key;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setKey(byte[]);;;public remove_counter_args setKey(byte[] key) {
      setKey(key == null ? (ByteBuffer)null : ByteBuffer.wrap(key));
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setKey(ByteBuffer);;;public remove_counter_args setKey(ByteBuffer key) {
      this.key = key;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetKey();;;public void unsetKey() {
      this.key = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetKey();;;public boolean isSetKey() {
      return this.key != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setKeyIsSet(boolean);;;public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getPath();;;public ColumnPath getPath() {
      return this.path;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setPath(ColumnPath);;;public remove_counter_args setPath(ColumnPath path) {
      this.path = path;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetPath();;;public void unsetPath() {
      this.path = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetPath();;;public boolean isSetPath() {
      return this.path != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setPathIsSet(boolean);;;public void setPathIsSet(boolean value) {
      if (!value) {
        this.path = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getConsistency_level();;;public ConsistencyLevel getConsistency_level() {
      return this.consistency_level;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setConsistency_level(ConsistencyLevel);;;public remove_counter_args setConsistency_level(ConsistencyLevel consistency_level) {
      this.consistency_level = consistency_level;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetConsistency_level();;;public void unsetConsistency_level() {
      this.consistency_level = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetConsistency_level();;;public boolean isSetConsistency_level() {
      return this.consistency_level != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setConsistency_levelIsSet(boolean);;;public void setConsistency_levelIsSet(boolean value) {
      if (!value) {
        this.consistency_level = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setFieldValue(_Fields,Object);;;public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((ByteBuffer)value);
        }
        break;

      case PATH:
        if (value == null) {
          unsetPath();
        } else {
          setPath((ColumnPath)value);
        }
        break;

      case CONSISTENCY_LEVEL:
        if (value == null) {
          unsetConsistency_level();
        } else {
          setConsistency_level((ConsistencyLevel)value);
        }
        break;

      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldValue(_Fields);;;public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case PATH:
        return getPath();

      case CONSISTENCY_LEVEL:
        return getConsistency_level();

      }
      throw new IllegalStateException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSet(_Fields);;;public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case PATH:
        return isSetPath();
      case CONSISTENCY_LEVEL:
        return isSetConsistency_level();
      }
      throw new IllegalStateException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(Object);;;@Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof remove_counter_args)
        return this.equals((remove_counter_args)that);
      return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(remove_counter_args);;;public boolean equals(remove_counter_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_path = true && this.isSetPath();
      boolean that_present_path = true && that.isSetPath();
      if (this_present_path || that_present_path) {
        if (!(this_present_path && that_present_path))
          return false;
        if (!this.path.equals(that.path))
          return false;
      }

      boolean this_present_consistency_level = true && this.isSetConsistency_level();
      boolean that_present_consistency_level = true && that.isSetConsistency_level();
      if (this_present_consistency_level || that_present_consistency_level) {
        if (!(this_present_consistency_level && that_present_consistency_level))
          return false;
        if (!this.consistency_level.equals(that.consistency_level))
          return false;
      }

      return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;hashCode();;;@Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_key = true && (isSetKey());
      builder.append(present_key);
      if (present_key)
        builder.append(key);

      boolean present_path = true && (isSetPath());
      builder.append(present_path);
      if (present_path)
        builder.append(path);

      boolean present_consistency_level = true && (isSetConsistency_level());
      builder.append(present_consistency_level);
      if (present_consistency_level)
        builder.append(consistency_level.getValue());

      return builder.toHashCode();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;compareTo(remove_counter_args);;;public int compareTo(remove_counter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      remove_counter_args typedOther = (remove_counter_args)other;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPath()).compareTo(typedOther.isSetPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, typedOther.path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetConsistency_level()).compareTo(typedOther.isSetConsistency_level());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConsistency_level()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consistency_level, typedOther.consistency_level);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;fieldForId(int);;;public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEY
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.key = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PATH
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.path = new ColumnPath();
              this.path.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CONSISTENCY_LEVEL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeBinary(this.key);
        oprot.writeFieldEnd();
      }
      if (this.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        this.path.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.consistency_level != null) {
        oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
        oprot.writeI32(this.consistency_level.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;toString();;;@Override
    public String toString() {
      StringBuilder sb = new StringBuilder("remove_counter_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.key, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("consistency_level:");
      if (this.consistency_level == null) {
        sb.append("null");
      } else {
        sb.append(this.consistency_level);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;validate();;;public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (key == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'key' was not present! Struct: " + toString());
      }
      if (path == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'path' was not present! Struct: " + toString());
      }
      if (consistency_level == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'consistency_level' was not present! Struct: " + toString());
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftId(int);;;public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // TE
            return TE;
          default:
            return null;
        }
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftIdOrThrow(int);;;public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByName(String);;;public static _Fields findByName(String name) {
        return byName.get(name);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;_Fields(short,String);;;_Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getThriftFieldId();;;public short getThriftFieldId() {
        return _thriftId;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldName();;;public String getFieldName() {
        return _fieldName;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;remove_counter_result();;;public remove_counter_result() {
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;remove_counter_result(InvalidRequestException,UnavailableException,TimedOutException);;;public remove_counter_result(
      InvalidRequestException ire,
      UnavailableException ue,
      TimedOutException te)
    {
      this();
      this.ire = ire;
      this.ue = ue;
      this.te = te;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;remove_counter_result(remove_counter_result);;;public remove_counter_result(remove_counter_result other) {
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new TimedOutException(other.te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;deepCopy();;;public remove_counter_result deepCopy() {
      return new remove_counter_result(this);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;clear();;;@Override
    public void clear() {
      this.ire = null;
      this.ue = null;
      this.te = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getIre();;;public InvalidRequestException getIre() {
      return this.ire;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setIre(InvalidRequestException);;;public remove_counter_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetIre();;;public void unsetIre() {
      this.ire = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetIre();;;public boolean isSetIre() {
      return this.ire != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setIreIsSet(boolean);;;public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getUe();;;public UnavailableException getUe() {
      return this.ue;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setUe(UnavailableException);;;public remove_counter_result setUe(UnavailableException ue) {
      this.ue = ue;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetUe();;;public void unsetUe() {
      this.ue = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetUe();;;public boolean isSetUe() {
      return this.ue != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setUeIsSet(boolean);;;public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getTe();;;public TimedOutException getTe() {
      return this.te;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setTe(TimedOutException);;;public remove_counter_result setTe(TimedOutException te) {
      this.te = te;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetTe();;;public void unsetTe() {
      this.te = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetTe();;;public boolean isSetTe() {
      return this.te != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setTeIsSet(boolean);;;public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setFieldValue(_Fields,Object);;;public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TimedOutException)value);
        }
        break;

      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldValue(_Fields);;;public Object getFieldValue(_Fields field) {
      switch (field) {
      case IRE:
        return getIre();

      case UE:
        return getUe();

      case TE:
        return getTe();

      }
      throw new IllegalStateException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSet(_Fields);;;public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      }
      throw new IllegalStateException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(Object);;;@Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof remove_counter_result)
        return this.equals((remove_counter_result)that);
      return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(remove_counter_result);;;public boolean equals(remove_counter_result that) {
      if (that == null)
        return false;

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;hashCode();;;@Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_ire = true && (isSetIre());
      builder.append(present_ire);
      if (present_ire)
        builder.append(ire);

      boolean present_ue = true && (isSetUe());
      builder.append(present_ue);
      if (present_ue)
        builder.append(ue);

      boolean present_te = true && (isSetTe());
      builder.append(present_te);
      if (present_te)
        builder.append(te);

      return builder.toHashCode();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;compareTo(remove_counter_result);;;public int compareTo(remove_counter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      remove_counter_result typedOther = (remove_counter_result)other;

      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, typedOther.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;fieldForId(int);;;public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ue = new UnavailableException();
              this.ue.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.te = new TimedOutException();
              this.te.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTe()) {
        oprot.writeFieldBegin(TE_FIELD_DESC);
        this.te.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;toString();;;@Override
    public String toString() {
      StringBuilder sb = new StringBuilder("remove_counter_result(");
      boolean first = true;

      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;validate();;;public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MUTATION_MAP
            if (field.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map84 = iprot.readMapBegin();
                this.mutation_map = new HashMap<ByteBuffer,Map<String,List<Mutation>>>(2*_map84.size);
                for (int _i85 = 0; _i85 < _map84.size; ++_i85)
                {
                  ByteBuffer _key86;
                  Map<String,List<Mutation>> _val87;
                  _key86 = iprot.readBinary();
                  {
                    org.apache.thrift.protocol.TMap _map88 = iprot.readMapBegin();
                    _val87 = new HashMap<String,List<Mutation>>(2*_map88.size);
                    for (int _i89 = 0; _i89 < _map88.size; ++_i89)
                    {
                      String _key90;
                      List<Mutation> _val91;
                      _key90 = iprot.readString();
                      {
                        org.apache.thrift.protocol.TList _list92 = iprot.readListBegin();
                        _val91 = new ArrayList<Mutation>(_list92.size);
                        for (int _i93 = 0; _i93 < _list92.size; ++_i93)
                        {
                          Mutation _elem94;
                          _elem94 = new Mutation();
                          _elem94.read(iprot);
                          _val91.add(_elem94);
                        }
                        iprot.readListEnd();
                      }
                      _val87.put(_key90, _val91);
                    }
                    iprot.readMapEnd();
                  }
                  this.mutation_map.put(_key86, _val87);
                }
                iprot.readMapEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CONSISTENCY_LEVEL
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.consistency_level = ConsistencyLevel.findByValue(iprot.readI32());
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mutation_map != null) {
        oprot.writeFieldBegin(MUTATION_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, this.mutation_map.size()));
          for (Map.Entry<ByteBuffer, Map<String,List<Mutation>>> _iter95 : this.mutation_map.entrySet())
          {
            oprot.writeBinary(_iter95.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, _iter95.getValue().size()));
              for (Map.Entry<String, List<Mutation>> _iter96 : _iter95.getValue().entrySet())
              {
                oprot.writeString(_iter96.getKey());
                {
                  oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter96.getValue().size()));
                  for (Mutation _iter97 : _iter96.getValue())
                  {
                    _iter97.write(oprot);
                  }
                  oprot.writeListEnd();
                }
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.consistency_level != null) {
        oprot.writeFieldBegin(CONSISTENCY_LEVEL_FIELD_DESC);
        oprot.writeI32(this.consistency_level.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ue = new UnavailableException();
              this.ue.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.te = new TimedOutException();
              this.te.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTe()) {
        oprot.writeFieldBegin(TE_FIELD_DESC);
        this.te.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CFNAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.cfname = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.cfname != null) {
        oprot.writeFieldBegin(CFNAME_FIELD_DESC);
        oprot.writeString(this.cfname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ue = new UnavailableException();
              this.ue.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map98 = iprot.readMapBegin();
                this.success = new HashMap<String,List<String>>(2*_map98.size);
                for (int _i99 = 0; _i99 < _map98.size; ++_i99)
                {
                  String _key100;
                  List<String> _val101;
                  _key100 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list102 = iprot.readListBegin();
                    _val101 = new ArrayList<String>(_list102.size);
                    for (int _i103 = 0; _i103 < _list102.size; ++_i103)
                    {
                      String _elem104;
                      _elem104 = iprot.readString();
                      _val101.add(_elem104);
                    }
                    iprot.readListEnd();
                  }
                  this.success.put(_key100, _val101);
                }
                iprot.readMapEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, this.success.size()));
          for (Map.Entry<String, List<String>> _iter105 : this.success.entrySet())
          {
            oprot.writeString(_iter105.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter105.getValue().size()));
              for (String _iter106 : _iter105.getValue())
              {
                oprot.writeString(_iter106);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list107 = iprot.readListBegin();
                this.success = new ArrayList<KsDef>(_list107.size);
                for (int _i108 = 0; _i108 < _list107.size; ++_i108)
                {
                  KsDef _elem109;
                  _elem109 = new KsDef();
                  _elem109.read(iprot);
                  this.success.add(_elem109);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (KsDef _iter110 : this.success)
          {
            _iter110.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEYSPACE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.keyspace = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.keyspace != null) {
        oprot.writeFieldBegin(KEYSPACE_FIELD_DESC);
        oprot.writeString(this.keyspace);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list111 = iprot.readListBegin();
                this.success = new ArrayList<TokenRange>(_list111.size);
                for (int _i112 = 0; _i112 < _list111.size; ++_i112)
                {
                  TokenRange _elem113;
                  _elem113 = new TokenRange();
                  _elem113.read(iprot);
                  this.success.add(_elem113);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.success.size()));
          for (TokenRange _iter114 : this.success)
          {
            _iter114.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEYSPACE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.keyspace = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.keyspace != null) {
        oprot.writeFieldBegin(KEYSPACE_FIELD_DESC);
        oprot.writeString(this.keyspace);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new KsDef();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // NFE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.nfe = new NotFoundException();
              this.nfe.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetNfe()) {
        oprot.writeFieldBegin(NFE_FIELD_DESC);
        this.nfe.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CF_NAME
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.cfName = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // START_TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.start_token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // END_TOKEN
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.end_token = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // KEYS_PER_SPLIT
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.keys_per_split = iprot.readI32();
              setKeys_per_splitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!isSetKeys_per_split()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'keys_per_split' was not found in serialized data! Struct: " + toString());
      }
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.cfName != null) {
        oprot.writeFieldBegin(CF_NAME_FIELD_DESC);
        oprot.writeString(this.cfName);
        oprot.writeFieldEnd();
      }
      if (this.start_token != null) {
        oprot.writeFieldBegin(START_TOKEN_FIELD_DESC);
        oprot.writeString(this.start_token);
        oprot.writeFieldEnd();
      }
      if (this.end_token != null) {
        oprot.writeFieldBegin(END_TOKEN_FIELD_DESC);
        oprot.writeString(this.end_token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KEYS_PER_SPLIT_FIELD_DESC);
      oprot.writeI32(this.keys_per_split);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftId(int);;;          case 1: // IRE
            return IRE;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_splits_result(List<String>,InvalidRequestException);;;public describe_splits_result(
      List<String> success,
      InvalidRequestException ire)
    {
      this();
      this.success = success;
      this.ire = ire;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;describe_splits_result(describe_splits_result);;;      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;clear();;;      this.ire = null;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getIre();;;public InvalidRequestException getIre() {
      return this.ire;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setIre(InvalidRequestException);;;public describe_splits_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetIre();;;public void unsetIre() {
      this.ire = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetIre();;;public boolean isSetIre() {
      return this.ire != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setIreIsSet(boolean);;;public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setFieldValue(_Fields,Object);;;      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldValue(_Fields);;;      case IRE:
        return getIre();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSet(_Fields);;;      case IRE:
        return isSetIre();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(describe_splits_result);;;      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;hashCode();;;      boolean present_ire = true && (isSetIre());
      builder.append(present_ire);
      if (present_ire)
        builder.append(ire);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list115 = iprot.readListBegin();
                this.success = new ArrayList<String>(_list115.size);
                for (int _i116 = 0; _i116 < _list115.size; ++_i116)
                {
                  String _elem117;
                  _elem117 = iprot.readString();
                  this.success.add(_elem117);
                }
                iprot.readListEnd();
              }
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.success.size()));
          for (String _iter118 : this.success)
          {
            oprot.writeString(_iter118);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;toString();;;      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CF_DEF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.cf_def = new CfDef();
              this.cf_def.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.cf_def != null) {
        oprot.writeFieldBegin(CF_DEF_FIELD_DESC);
        this.cf_def.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftId(int);;;          case 2: // SDE
            return SDE;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_add_column_family_result(String,InvalidRequestException,SchemaDisagreementException);;;public system_add_column_family_result(
      String success,
      InvalidRequestException ire,
      SchemaDisagreementException sde)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.sde = sde;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_add_column_family_result(system_add_column_family_result);;;      if (other.isSetSde()) {
        this.sde = new SchemaDisagreementException(other.sde);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;clear();;;      this.sde = null;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getSde();;;public SchemaDisagreementException getSde() {
      return this.sde;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setSde(SchemaDisagreementException);;;public system_add_column_family_result setSde(SchemaDisagreementException sde) {
      this.sde = sde;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetSde();;;public void unsetSde() {
      this.sde = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetSde();;;public boolean isSetSde() {
      return this.sde != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setSdeIsSet(boolean);;;public void setSdeIsSet(boolean value) {
      if (!value) {
        this.sde = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setFieldValue(_Fields,Object);;;      case SDE:
        if (value == null) {
          unsetSde();
        } else {
          setSde((SchemaDisagreementException)value);
        }
        break;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldValue(_Fields);;;      case SDE:
        return getSde();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSet(_Fields);;;      case SDE:
        return isSetSde();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(system_add_column_family_result);;;      boolean this_present_sde = true && this.isSetSde();
      boolean that_present_sde = true && that.isSetSde();
      if (this_present_sde || that_present_sde) {
        if (!(this_present_sde && that_present_sde))
          return false;
        if (!this.sde.equals(that.sde))
          return false;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;hashCode();;;      boolean present_sde = true && (isSetSde());
      builder.append(present_sde);
      if (present_sde)
        builder.append(sde);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SDE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.sde = new SchemaDisagreementException();
              this.sde.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSde()) {
        oprot.writeFieldBegin(SDE_FIELD_DESC);
        this.sde.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;toString();;;      if (!first) sb.append(", ");
      sb.append("sde:");
      if (this.sde == null) {
        sb.append("null");
      } else {
        sb.append(this.sde);
      }
      first = false;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // COLUMN_FAMILY
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.column_family = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.column_family != null) {
        oprot.writeFieldBegin(COLUMN_FAMILY_FIELD_DESC);
        oprot.writeString(this.column_family);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftId(int);;;          case 2: // SDE
            return SDE;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_drop_column_family_result(String,InvalidRequestException,SchemaDisagreementException);;;public system_drop_column_family_result(
      String success,
      InvalidRequestException ire,
      SchemaDisagreementException sde)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.sde = sde;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_drop_column_family_result(system_drop_column_family_result);;;      if (other.isSetSde()) {
        this.sde = new SchemaDisagreementException(other.sde);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;clear();;;      this.sde = null;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getSde();;;public SchemaDisagreementException getSde() {
      return this.sde;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setSde(SchemaDisagreementException);;;public system_drop_column_family_result setSde(SchemaDisagreementException sde) {
      this.sde = sde;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetSde();;;public void unsetSde() {
      this.sde = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetSde();;;public boolean isSetSde() {
      return this.sde != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setSdeIsSet(boolean);;;public void setSdeIsSet(boolean value) {
      if (!value) {
        this.sde = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setFieldValue(_Fields,Object);;;      case SDE:
        if (value == null) {
          unsetSde();
        } else {
          setSde((SchemaDisagreementException)value);
        }
        break;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldValue(_Fields);;;      case SDE:
        return getSde();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSet(_Fields);;;      case SDE:
        return isSetSde();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(system_drop_column_family_result);;;      boolean this_present_sde = true && this.isSetSde();
      boolean that_present_sde = true && that.isSetSde();
      if (this_present_sde || that_present_sde) {
        if (!(this_present_sde && that_present_sde))
          return false;
        if (!this.sde.equals(that.sde))
          return false;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;hashCode();;;      boolean present_sde = true && (isSetSde());
      builder.append(present_sde);
      if (present_sde)
        builder.append(sde);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SDE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.sde = new SchemaDisagreementException();
              this.sde.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSde()) {
        oprot.writeFieldBegin(SDE_FIELD_DESC);
        this.sde.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;toString();;;      if (!first) sb.append(", ");
      sb.append("sde:");
      if (this.sde == null) {
        sb.append("null");
      } else {
        sb.append(this.sde);
      }
      first = false;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KS_DEF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ks_def = new KsDef();
              this.ks_def.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ks_def != null) {
        oprot.writeFieldBegin(KS_DEF_FIELD_DESC);
        this.ks_def.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftId(int);;;          case 2: // SDE
            return SDE;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_add_keyspace_result(String,InvalidRequestException,SchemaDisagreementException);;;public system_add_keyspace_result(
      String success,
      InvalidRequestException ire,
      SchemaDisagreementException sde)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.sde = sde;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_add_keyspace_result(system_add_keyspace_result);;;      if (other.isSetSde()) {
        this.sde = new SchemaDisagreementException(other.sde);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;clear();;;      this.sde = null;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getSde();;;public SchemaDisagreementException getSde() {
      return this.sde;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setSde(SchemaDisagreementException);;;public system_add_keyspace_result setSde(SchemaDisagreementException sde) {
      this.sde = sde;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetSde();;;public void unsetSde() {
      this.sde = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetSde();;;public boolean isSetSde() {
      return this.sde != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setSdeIsSet(boolean);;;public void setSdeIsSet(boolean value) {
      if (!value) {
        this.sde = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setFieldValue(_Fields,Object);;;      case SDE:
        if (value == null) {
          unsetSde();
        } else {
          setSde((SchemaDisagreementException)value);
        }
        break;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldValue(_Fields);;;      case SDE:
        return getSde();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSet(_Fields);;;      case SDE:
        return isSetSde();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(system_add_keyspace_result);;;      boolean this_present_sde = true && this.isSetSde();
      boolean that_present_sde = true && that.isSetSde();
      if (this_present_sde || that_present_sde) {
        if (!(this_present_sde && that_present_sde))
          return false;
        if (!this.sde.equals(that.sde))
          return false;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;hashCode();;;      boolean present_sde = true && (isSetSde());
      builder.append(present_sde);
      if (present_sde)
        builder.append(sde);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SDE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.sde = new SchemaDisagreementException();
              this.sde.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSde()) {
        oprot.writeFieldBegin(SDE_FIELD_DESC);
        this.sde.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;toString();;;      if (!first) sb.append(", ");
      sb.append("sde:");
      if (this.sde == null) {
        sb.append("null");
      } else {
        sb.append(this.sde);
      }
      first = false;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KEYSPACE
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.keyspace = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.keyspace != null) {
        oprot.writeFieldBegin(KEYSPACE_FIELD_DESC);
        oprot.writeString(this.keyspace);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftId(int);;;          case 2: // SDE
            return SDE;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_drop_keyspace_result(String,InvalidRequestException,SchemaDisagreementException);;;public system_drop_keyspace_result(
      String success,
      InvalidRequestException ire,
      SchemaDisagreementException sde)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.sde = sde;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_drop_keyspace_result(system_drop_keyspace_result);;;      if (other.isSetSde()) {
        this.sde = new SchemaDisagreementException(other.sde);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;clear();;;      this.sde = null;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getSde();;;public SchemaDisagreementException getSde() {
      return this.sde;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setSde(SchemaDisagreementException);;;public system_drop_keyspace_result setSde(SchemaDisagreementException sde) {
      this.sde = sde;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetSde();;;public void unsetSde() {
      this.sde = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetSde();;;public boolean isSetSde() {
      return this.sde != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setSdeIsSet(boolean);;;public void setSdeIsSet(boolean value) {
      if (!value) {
        this.sde = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setFieldValue(_Fields,Object);;;      case SDE:
        if (value == null) {
          unsetSde();
        } else {
          setSde((SchemaDisagreementException)value);
        }
        break;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldValue(_Fields);;;      case SDE:
        return getSde();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSet(_Fields);;;      case SDE:
        return isSetSde();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(system_drop_keyspace_result);;;      boolean this_present_sde = true && this.isSetSde();
      boolean that_present_sde = true && that.isSetSde();
      if (this_present_sde || that_present_sde) {
        if (!(this_present_sde && that_present_sde))
          return false;
        if (!this.sde.equals(that.sde))
          return false;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;hashCode();;;      boolean present_sde = true && (isSetSde());
      builder.append(present_sde);
      if (present_sde)
        builder.append(sde);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SDE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.sde = new SchemaDisagreementException();
              this.sde.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSde()) {
        oprot.writeFieldBegin(SDE_FIELD_DESC);
        this.sde.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;toString();;;      if (!first) sb.append(", ");
      sb.append("sde:");
      if (this.sde == null) {
        sb.append("null");
      } else {
        sb.append(this.sde);
      }
      first = false;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // KS_DEF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ks_def = new KsDef();
              this.ks_def.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ks_def != null) {
        oprot.writeFieldBegin(KS_DEF_FIELD_DESC);
        this.ks_def.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftId(int);;;          case 2: // SDE
            return SDE;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_update_keyspace_result(String,InvalidRequestException,SchemaDisagreementException);;;public system_update_keyspace_result(
      String success,
      InvalidRequestException ire,
      SchemaDisagreementException sde)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.sde = sde;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_update_keyspace_result(system_update_keyspace_result);;;      if (other.isSetSde()) {
        this.sde = new SchemaDisagreementException(other.sde);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;clear();;;      this.sde = null;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getSde();;;public SchemaDisagreementException getSde() {
      return this.sde;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setSde(SchemaDisagreementException);;;public system_update_keyspace_result setSde(SchemaDisagreementException sde) {
      this.sde = sde;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetSde();;;public void unsetSde() {
      this.sde = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetSde();;;public boolean isSetSde() {
      return this.sde != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setSdeIsSet(boolean);;;public void setSdeIsSet(boolean value) {
      if (!value) {
        this.sde = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setFieldValue(_Fields,Object);;;      case SDE:
        if (value == null) {
          unsetSde();
        } else {
          setSde((SchemaDisagreementException)value);
        }
        break;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldValue(_Fields);;;      case SDE:
        return getSde();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSet(_Fields);;;      case SDE:
        return isSetSde();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(system_update_keyspace_result);;;      boolean this_present_sde = true && this.isSetSde();
      boolean that_present_sde = true && that.isSetSde();
      if (this_present_sde || that_present_sde) {
        if (!(this_present_sde && that_present_sde))
          return false;
        if (!this.sde.equals(that.sde))
          return false;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;hashCode();;;      boolean present_sde = true && (isSetSde());
      builder.append(present_sde);
      if (present_sde)
        builder.append(sde);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SDE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.sde = new SchemaDisagreementException();
              this.sde.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSde()) {
        oprot.writeFieldBegin(SDE_FIELD_DESC);
        this.sde.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;toString();;;      if (!first) sb.append(", ");
      sb.append("sde:");
      if (this.sde == null) {
        sb.append("null");
      } else {
        sb.append(this.sde);
      }
      first = false;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CF_DEF
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.cf_def = new CfDef();
              this.cf_def.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.cf_def != null) {
        oprot.writeFieldBegin(CF_DEF_FIELD_DESC);
        this.cf_def.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftId(int);;;          case 2: // SDE
            return SDE;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_update_column_family_result(String,InvalidRequestException,SchemaDisagreementException);;;public system_update_column_family_result(
      String success,
      InvalidRequestException ire,
      SchemaDisagreementException sde)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.sde = sde;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;system_update_column_family_result(system_update_column_family_result);;;      if (other.isSetSde()) {
        this.sde = new SchemaDisagreementException(other.sde);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;clear();;;      this.sde = null;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getSde();;;public SchemaDisagreementException getSde() {
      return this.sde;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setSde(SchemaDisagreementException);;;public system_update_column_family_result setSde(SchemaDisagreementException sde) {
      this.sde = sde;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetSde();;;public void unsetSde() {
      this.sde = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetSde();;;public boolean isSetSde() {
      return this.sde != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setSdeIsSet(boolean);;;public void setSdeIsSet(boolean value) {
      if (!value) {
        this.sde = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setFieldValue(_Fields,Object);;;      case SDE:
        if (value == null) {
          unsetSde();
        } else {
          setSde((SchemaDisagreementException)value);
        }
        break;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldValue(_Fields);;;      case SDE:
        return getSde();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSet(_Fields);;;      case SDE:
        return isSetSde();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(system_update_column_family_result);;;      boolean this_present_sde = true && this.isSetSde();
      boolean that_present_sde = true && that.isSetSde();
      if (this_present_sde || that_present_sde) {
        if (!(this_present_sde && that_present_sde))
          return false;
        if (!this.sde.equals(that.sde))
          return false;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;hashCode();;;      boolean present_sde = true && (isSetSde());
      builder.append(present_sde);
      if (present_sde)
        builder.append(sde);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.success = iprot.readString();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SDE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.sde = new SchemaDisagreementException();
              this.sde.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSde()) {
        oprot.writeFieldBegin(SDE_FIELD_DESC);
        this.sde.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;toString();;;      if (!first) sb.append(", ");
      sb.append("sde:");
      if (this.sde == null) {
        sb.append("null");
      } else {
        sb.append(this.sde);
      }
      first = false;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftId(int);;;public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          case 2: // COMPRESSION
            return COMPRESSION;
          default:
            return null;
        }
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftIdOrThrow(int);;;public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByName(String);;;public static _Fields findByName(String name) {
        return byName.get(name);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;_Fields(short,String);;;_Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getThriftFieldId();;;public short getThriftFieldId() {
        return _thriftId;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldName();;;public String getFieldName() {
        return _fieldName;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;execute_cql_query_args();;;public execute_cql_query_args() {
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;execute_cql_query_args(ByteBuffer,Compression);;;public execute_cql_query_args(
      ByteBuffer query,
      Compression compression)
    {
      this();
      this.query = query;
      this.compression = compression;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;execute_cql_query_args(execute_cql_query_args);;;public execute_cql_query_args(execute_cql_query_args other) {
      if (other.isSetQuery()) {
        this.query = org.apache.thrift.TBaseHelper.copyBinary(other.query);
;
      }
      if (other.isSetCompression()) {
        this.compression = other.compression;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;deepCopy();;;public execute_cql_query_args deepCopy() {
      return new execute_cql_query_args(this);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;clear();;;@Override
    public void clear() {
      this.query = null;
      this.compression = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getQuery();;;public byte[] getQuery() {
      setQuery(org.apache.thrift.TBaseHelper.rightSize(query));
      return query == null ? null : query.array();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;bufferForQuery();;;public ByteBuffer bufferForQuery() {
      return query;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setQuery(byte[]);;;public execute_cql_query_args setQuery(byte[] query) {
      setQuery(query == null ? (ByteBuffer)null : ByteBuffer.wrap(query));
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setQuery(ByteBuffer);;;public execute_cql_query_args setQuery(ByteBuffer query) {
      this.query = query;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetQuery();;;public void unsetQuery() {
      this.query = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetQuery();;;public boolean isSetQuery() {
      return this.query != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setQueryIsSet(boolean);;;public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getCompression();;;public Compression getCompression() {
      return this.compression;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setCompression(Compression);;;public execute_cql_query_args setCompression(Compression compression) {
      this.compression = compression;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetCompression();;;public void unsetCompression() {
      this.compression = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetCompression();;;public boolean isSetCompression() {
      return this.compression != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setCompressionIsSet(boolean);;;public void setCompressionIsSet(boolean value) {
      if (!value) {
        this.compression = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setFieldValue(_Fields,Object);;;public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((ByteBuffer)value);
        }
        break;

      case COMPRESSION:
        if (value == null) {
          unsetCompression();
        } else {
          setCompression((Compression)value);
        }
        break;

      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldValue(_Fields);;;public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      case COMPRESSION:
        return getCompression();

      }
      throw new IllegalStateException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSet(_Fields);;;public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      case COMPRESSION:
        return isSetCompression();
      }
      throw new IllegalStateException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(Object);;;@Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execute_cql_query_args)
        return this.equals((execute_cql_query_args)that);
      return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(execute_cql_query_args);;;public boolean equals(execute_cql_query_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_compression = true && this.isSetCompression();
      boolean that_present_compression = true && that.isSetCompression();
      if (this_present_compression || that_present_compression) {
        if (!(this_present_compression && that_present_compression))
          return false;
        if (!this.compression.equals(that.compression))
          return false;
      }

      return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;hashCode();;;@Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_query = true && (isSetQuery());
      builder.append(present_query);
      if (present_query)
        builder.append(query);

      boolean present_compression = true && (isSetCompression());
      builder.append(present_compression);
      if (present_compression)
        builder.append(compression.getValue());

      return builder.toHashCode();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;compareTo(execute_cql_query_args);;;public int compareTo(execute_cql_query_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      execute_cql_query_args typedOther = (execute_cql_query_args)other;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, typedOther.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetCompression()).compareTo(typedOther.isSetCompression());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompression()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compression, typedOther.compression);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;fieldForId(int);;;public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // QUERY
            if (field.type == org.apache.thrift.protocol.TType.STRING) {
              this.query = iprot.readBinary();
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // COMPRESSION
            if (field.type == org.apache.thrift.protocol.TType.I32) {
              this.compression = Compression.findByValue(iprot.readI32());
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.query != null) {
        oprot.writeFieldBegin(QUERY_FIELD_DESC);
        oprot.writeBinary(this.query);
        oprot.writeFieldEnd();
      }
      if (this.compression != null) {
        oprot.writeFieldBegin(COMPRESSION_FIELD_DESC);
        oprot.writeI32(this.compression.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;toString();;;@Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execute_cql_query_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.query, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("compression:");
      if (this.compression == null) {
        sb.append("null");
      } else {
        sb.append(this.compression);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;validate();;;public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (query == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'query' was not present! Struct: " + toString());
      }
      if (compression == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'compression' was not present! Struct: " + toString());
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftId(int);;;public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // IRE
            return IRE;
          case 2: // UE
            return UE;
          case 3: // TE
            return TE;
          case 4: // SDE
            return SDE;
          default:
            return null;
        }
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByThriftIdOrThrow(int);;;public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;findByName(String);;;public static _Fields findByName(String name) {
        return byName.get(name);
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;_Fields(short,String);;;_Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getThriftFieldId();;;public short getThriftFieldId() {
        return _thriftId;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldName();;;public String getFieldName() {
        return _fieldName;
      }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;execute_cql_query_result();;;public execute_cql_query_result() {
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;execute_cql_query_result(CqlResult,InvalidRequestException,UnavailableException,TimedOutException,SchemaDisagreementException);;;public execute_cql_query_result(
      CqlResult success,
      InvalidRequestException ire,
      UnavailableException ue,
      TimedOutException te,
      SchemaDisagreementException sde)
    {
      this();
      this.success = success;
      this.ire = ire;
      this.ue = ue;
      this.te = te;
      this.sde = sde;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;execute_cql_query_result(execute_cql_query_result);;;public execute_cql_query_result(execute_cql_query_result other) {
      if (other.isSetSuccess()) {
        this.success = new CqlResult(other.success);
      }
      if (other.isSetIre()) {
        this.ire = new InvalidRequestException(other.ire);
      }
      if (other.isSetUe()) {
        this.ue = new UnavailableException(other.ue);
      }
      if (other.isSetTe()) {
        this.te = new TimedOutException(other.te);
      }
      if (other.isSetSde()) {
        this.sde = new SchemaDisagreementException(other.sde);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;deepCopy();;;public execute_cql_query_result deepCopy() {
      return new execute_cql_query_result(this);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;clear();;;@Override
    public void clear() {
      this.success = null;
      this.ire = null;
      this.ue = null;
      this.te = null;
      this.sde = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getSuccess();;;public CqlResult getSuccess() {
      return this.success;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setSuccess(CqlResult);;;public execute_cql_query_result setSuccess(CqlResult success) {
      this.success = success;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetSuccess();;;public void unsetSuccess() {
      this.success = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetSuccess();;;public boolean isSetSuccess() {
      return this.success != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setSuccessIsSet(boolean);;;public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getIre();;;public InvalidRequestException getIre() {
      return this.ire;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setIre(InvalidRequestException);;;public execute_cql_query_result setIre(InvalidRequestException ire) {
      this.ire = ire;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetIre();;;public void unsetIre() {
      this.ire = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetIre();;;public boolean isSetIre() {
      return this.ire != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setIreIsSet(boolean);;;public void setIreIsSet(boolean value) {
      if (!value) {
        this.ire = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getUe();;;public UnavailableException getUe() {
      return this.ue;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setUe(UnavailableException);;;public execute_cql_query_result setUe(UnavailableException ue) {
      this.ue = ue;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetUe();;;public void unsetUe() {
      this.ue = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetUe();;;public boolean isSetUe() {
      return this.ue != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setUeIsSet(boolean);;;public void setUeIsSet(boolean value) {
      if (!value) {
        this.ue = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getTe();;;public TimedOutException getTe() {
      return this.te;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setTe(TimedOutException);;;public execute_cql_query_result setTe(TimedOutException te) {
      this.te = te;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetTe();;;public void unsetTe() {
      this.te = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetTe();;;public boolean isSetTe() {
      return this.te != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setTeIsSet(boolean);;;public void setTeIsSet(boolean value) {
      if (!value) {
        this.te = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getSde();;;public SchemaDisagreementException getSde() {
      return this.sde;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setSde(SchemaDisagreementException);;;public execute_cql_query_result setSde(SchemaDisagreementException sde) {
      this.sde = sde;
      return this;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;unsetSde();;;public void unsetSde() {
      this.sde = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSetSde();;;public boolean isSetSde() {
      return this.sde != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setSdeIsSet(boolean);;;public void setSdeIsSet(boolean value) {
      if (!value) {
        this.sde = null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;setFieldValue(_Fields,Object);;;public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CqlResult)value);
        }
        break;

      case IRE:
        if (value == null) {
          unsetIre();
        } else {
          setIre((InvalidRequestException)value);
        }
        break;

      case UE:
        if (value == null) {
          unsetUe();
        } else {
          setUe((UnavailableException)value);
        }
        break;

      case TE:
        if (value == null) {
          unsetTe();
        } else {
          setTe((TimedOutException)value);
        }
        break;

      case SDE:
        if (value == null) {
          unsetSde();
        } else {
          setSde((SchemaDisagreementException)value);
        }
        break;

      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;getFieldValue(_Fields);;;public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case IRE:
        return getIre();

      case UE:
        return getUe();

      case TE:
        return getTe();

      case SDE:
        return getSde();

      }
      throw new IllegalStateException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;isSet(_Fields);;;public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case IRE:
        return isSetIre();
      case UE:
        return isSetUe();
      case TE:
        return isSetTe();
      case SDE:
        return isSetSde();
      }
      throw new IllegalStateException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(Object);;;@Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof execute_cql_query_result)
        return this.equals((execute_cql_query_result)that);
      return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;equals(execute_cql_query_result);;;public boolean equals(execute_cql_query_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ire = true && this.isSetIre();
      boolean that_present_ire = true && that.isSetIre();
      if (this_present_ire || that_present_ire) {
        if (!(this_present_ire && that_present_ire))
          return false;
        if (!this.ire.equals(that.ire))
          return false;
      }

      boolean this_present_ue = true && this.isSetUe();
      boolean that_present_ue = true && that.isSetUe();
      if (this_present_ue || that_present_ue) {
        if (!(this_present_ue && that_present_ue))
          return false;
        if (!this.ue.equals(that.ue))
          return false;
      }

      boolean this_present_te = true && this.isSetTe();
      boolean that_present_te = true && that.isSetTe();
      if (this_present_te || that_present_te) {
        if (!(this_present_te && that_present_te))
          return false;
        if (!this.te.equals(that.te))
          return false;
      }

      boolean this_present_sde = true && this.isSetSde();
      boolean that_present_sde = true && that.isSetSde();
      if (this_present_sde || that_present_sde) {
        if (!(this_present_sde && that_present_sde))
          return false;
        if (!this.sde.equals(that.sde))
          return false;
      }

      return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;hashCode();;;@Override
    public int hashCode() {
      HashCodeBuilder builder = new HashCodeBuilder();

      boolean present_success = true && (isSetSuccess());
      builder.append(present_success);
      if (present_success)
        builder.append(success);

      boolean present_ire = true && (isSetIre());
      builder.append(present_ire);
      if (present_ire)
        builder.append(ire);

      boolean present_ue = true && (isSetUe());
      builder.append(present_ue);
      if (present_ue)
        builder.append(ue);

      boolean present_te = true && (isSetTe());
      builder.append(present_te);
      if (present_te)
        builder.append(te);

      boolean present_sde = true && (isSetSde());
      builder.append(present_sde);
      if (present_sde)
        builder.append(sde);

      return builder.toHashCode();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;compareTo(execute_cql_query_result);;;public int compareTo(execute_cql_query_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      execute_cql_query_result typedOther = (execute_cql_query_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIre()).compareTo(typedOther.isSetIre());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIre()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ire, typedOther.ire);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUe()).compareTo(typedOther.isSetUe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ue, typedOther.ue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTe()).compareTo(typedOther.isSetTe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.te, typedOther.te);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSde()).compareTo(typedOther.isSetSde());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSde()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sde, typedOther.sde);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;fieldForId(int);;;public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.success = new CqlResult();
              this.success.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // IRE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ire = new InvalidRequestException();
              this.ire.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // UE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.ue = new UnavailableException();
              this.ue.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.te = new TimedOutException();
              this.te.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // SDE
            if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
              this.sde = new SchemaDisagreementException();
              this.sde.read(iprot);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetIre()) {
        oprot.writeFieldBegin(IRE_FIELD_DESC);
        this.ire.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetUe()) {
        oprot.writeFieldBegin(UE_FIELD_DESC);
        this.ue.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetTe()) {
        oprot.writeFieldBegin(TE_FIELD_DESC);
        this.te.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetSde()) {
        oprot.writeFieldBegin(SDE_FIELD_DESC);
        this.sde.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;toString();;;@Override
    public String toString() {
      StringBuilder sb = new StringBuilder("execute_cql_query_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ire:");
      if (this.ire == null) {
        sb.append("null");
      } else {
        sb.append(this.ire);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ue:");
      if (this.ue == null) {
        sb.append("null");
      } else {
        sb.append(this.ue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("te:");
      if (this.te == null) {
        sb.append("null");
      } else {
        sb.append(this.te);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sde:");
      if (this.sde == null) {
        sb.append("null");
      } else {
        sb.append(this.sde);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;validate();;;public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Cassandra;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;findByThriftId(int);;;        case 24: // REPLICATE_ON_WRITE
          return REPLICATE_ON_WRITE;
        case 25: // MERGE_SHARDS_CHANCE
          return MERGE_SHARDS_CHANCE;
        case 26: // KEY_VALIDATION_CLASS
          return KEY_VALIDATION_CLASS;
        case 27: // ROW_CACHE_PROVIDER
          return ROW_CACHE_PROVIDER;
        case 28: // KEY_ALIAS
          return KEY_ALIAS;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;CfDef();;;    this.row_cache_provider = "org.apache.cassandra.cache.ConcurrentLinkedHashCacheProvider";
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;CfDef(CfDef);;;    this.replicate_on_write = other.replicate_on_write;
    this.merge_shards_chance = other.merge_shards_chance;
    if (other.isSetKey_validation_class()) {
      this.key_validation_class = other.key_validation_class;
    }
    if (other.isSetRow_cache_provider()) {
      this.row_cache_provider = other.row_cache_provider;
    }
    if (other.isSetKey_alias()) {
      this.key_alias = org.apache.thrift.TBaseHelper.copyBinary(other.key_alias);
;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;clear();;;    setReplicate_on_writeIsSet(false);
    this.replicate_on_write = false;
    setMerge_shards_chanceIsSet(false);
    this.merge_shards_chance = 0.0;
    this.key_validation_class = null;
    this.row_cache_provider = "org.apache.cassandra.cache.ConcurrentLinkedHashCacheProvider";

    this.key_alias = null;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;isReplicate_on_write();;;public boolean isReplicate_on_write() {
    return this.replicate_on_write;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;setReplicate_on_write(boolean);;;public CfDef setReplicate_on_write(boolean replicate_on_write) {
    this.replicate_on_write = replicate_on_write;
    setReplicate_on_writeIsSet(true);
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;unsetReplicate_on_write();;;public void unsetReplicate_on_write() {
    __isset_bit_vector.clear(__REPLICATE_ON_WRITE_ISSET_ID);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;isSetReplicate_on_write();;;public boolean isSetReplicate_on_write() {
    return __isset_bit_vector.get(__REPLICATE_ON_WRITE_ISSET_ID);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;setReplicate_on_writeIsSet(boolean);;;public void setReplicate_on_writeIsSet(boolean value) {
    __isset_bit_vector.set(__REPLICATE_ON_WRITE_ISSET_ID, value);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;getMerge_shards_chance();;;public double getMerge_shards_chance() {
    return this.merge_shards_chance;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;setMerge_shards_chance(double);;;public CfDef setMerge_shards_chance(double merge_shards_chance) {
    this.merge_shards_chance = merge_shards_chance;
    setMerge_shards_chanceIsSet(true);
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;unsetMerge_shards_chance();;;public void unsetMerge_shards_chance() {
    __isset_bit_vector.clear(__MERGE_SHARDS_CHANCE_ISSET_ID);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;isSetMerge_shards_chance();;;public boolean isSetMerge_shards_chance() {
    return __isset_bit_vector.get(__MERGE_SHARDS_CHANCE_ISSET_ID);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;setMerge_shards_chanceIsSet(boolean);;;public void setMerge_shards_chanceIsSet(boolean value) {
    __isset_bit_vector.set(__MERGE_SHARDS_CHANCE_ISSET_ID, value);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;getKey_validation_class();;;public String getKey_validation_class() {
    return this.key_validation_class;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;setKey_validation_class(String);;;public CfDef setKey_validation_class(String key_validation_class) {
    this.key_validation_class = key_validation_class;
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;unsetKey_validation_class();;;public void unsetKey_validation_class() {
    this.key_validation_class = null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;isSetKey_validation_class();;;public boolean isSetKey_validation_class() {
    return this.key_validation_class != null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;setKey_validation_classIsSet(boolean);;;public void setKey_validation_classIsSet(boolean value) {
    if (!value) {
      this.key_validation_class = null;
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;getRow_cache_provider();;;public String getRow_cache_provider() {
    return this.row_cache_provider;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;setRow_cache_provider(String);;;public CfDef setRow_cache_provider(String row_cache_provider) {
    this.row_cache_provider = row_cache_provider;
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;unsetRow_cache_provider();;;public void unsetRow_cache_provider() {
    this.row_cache_provider = null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;isSetRow_cache_provider();;;public boolean isSetRow_cache_provider() {
    return this.row_cache_provider != null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;setRow_cache_providerIsSet(boolean);;;public void setRow_cache_providerIsSet(boolean value) {
    if (!value) {
      this.row_cache_provider = null;
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;getKey_alias();;;public byte[] getKey_alias() {
    setKey_alias(org.apache.thrift.TBaseHelper.rightSize(key_alias));
    return key_alias == null ? null : key_alias.array();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;bufferForKey_alias();;;public ByteBuffer bufferForKey_alias() {
    return key_alias;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;setKey_alias(byte[]);;;public CfDef setKey_alias(byte[] key_alias) {
    setKey_alias(key_alias == null ? (ByteBuffer)null : ByteBuffer.wrap(key_alias));
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;setKey_alias(ByteBuffer);;;public CfDef setKey_alias(ByteBuffer key_alias) {
    this.key_alias = key_alias;
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;unsetKey_alias();;;public void unsetKey_alias() {
    this.key_alias = null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;isSetKey_alias();;;public boolean isSetKey_alias() {
    return this.key_alias != null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;setKey_aliasIsSet(boolean);;;public void setKey_aliasIsSet(boolean value) {
    if (!value) {
      this.key_alias = null;
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;setFieldValue(_Fields,Object);;;    case REPLICATE_ON_WRITE:
      if (value == null) {
        unsetReplicate_on_write();
      } else {
        setReplicate_on_write((Boolean)value);
      }
      break;

    case MERGE_SHARDS_CHANCE:
      if (value == null) {
        unsetMerge_shards_chance();
      } else {
        setMerge_shards_chance((Double)value);
      }
      break;

    case KEY_VALIDATION_CLASS:
      if (value == null) {
        unsetKey_validation_class();
      } else {
        setKey_validation_class((String)value);
      }
      break;

    case ROW_CACHE_PROVIDER:
      if (value == null) {
        unsetRow_cache_provider();
      } else {
        setRow_cache_provider((String)value);
      }
      break;

    case KEY_ALIAS:
      if (value == null) {
        unsetKey_alias();
      } else {
        setKey_alias((ByteBuffer)value);
      }
      break;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;getFieldValue(_Fields);;;    case REPLICATE_ON_WRITE:
      return new Boolean(isReplicate_on_write());

    case MERGE_SHARDS_CHANCE:
      return new Double(getMerge_shards_chance());

    case KEY_VALIDATION_CLASS:
      return getKey_validation_class();

    case ROW_CACHE_PROVIDER:
      return getRow_cache_provider();

    case KEY_ALIAS:
      return getKey_alias();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;isSet(_Fields);;;    case REPLICATE_ON_WRITE:
      return isSetReplicate_on_write();
    case MERGE_SHARDS_CHANCE:
      return isSetMerge_shards_chance();
    case KEY_VALIDATION_CLASS:
      return isSetKey_validation_class();
    case ROW_CACHE_PROVIDER:
      return isSetRow_cache_provider();
    case KEY_ALIAS:
      return isSetKey_alias();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;equals(CfDef);;;    boolean this_present_replicate_on_write = true && this.isSetReplicate_on_write();
    boolean that_present_replicate_on_write = true && that.isSetReplicate_on_write();
    if (this_present_replicate_on_write || that_present_replicate_on_write) {
      if (!(this_present_replicate_on_write && that_present_replicate_on_write))
        return false;
      if (this.replicate_on_write != that.replicate_on_write)
        return false;
    }

    boolean this_present_merge_shards_chance = true && this.isSetMerge_shards_chance();
    boolean that_present_merge_shards_chance = true && that.isSetMerge_shards_chance();
    if (this_present_merge_shards_chance || that_present_merge_shards_chance) {
      if (!(this_present_merge_shards_chance && that_present_merge_shards_chance))
        return false;
      if (this.merge_shards_chance != that.merge_shards_chance)
        return false;
    }

    boolean this_present_key_validation_class = true && this.isSetKey_validation_class();
    boolean that_present_key_validation_class = true && that.isSetKey_validation_class();
    if (this_present_key_validation_class || that_present_key_validation_class) {
      if (!(this_present_key_validation_class && that_present_key_validation_class))
        return false;
      if (!this.key_validation_class.equals(that.key_validation_class))
        return false;
    }

    boolean this_present_row_cache_provider = true && this.isSetRow_cache_provider();
    boolean that_present_row_cache_provider = true && that.isSetRow_cache_provider();
    if (this_present_row_cache_provider || that_present_row_cache_provider) {
      if (!(this_present_row_cache_provider && that_present_row_cache_provider))
        return false;
      if (!this.row_cache_provider.equals(that.row_cache_provider))
        return false;
    }

    boolean this_present_key_alias = true && this.isSetKey_alias();
    boolean that_present_key_alias = true && that.isSetKey_alias();
    if (this_present_key_alias || that_present_key_alias) {
      if (!(this_present_key_alias && that_present_key_alias))
        return false;
      if (!this.key_alias.equals(that.key_alias))
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;hashCode();;;    boolean present_replicate_on_write = true && (isSetReplicate_on_write());
    builder.append(present_replicate_on_write);
    if (present_replicate_on_write)
      builder.append(replicate_on_write);

    boolean present_merge_shards_chance = true && (isSetMerge_shards_chance());
    builder.append(present_merge_shards_chance);
    if (present_merge_shards_chance)
      builder.append(merge_shards_chance);

    boolean present_key_validation_class = true && (isSetKey_validation_class());
    builder.append(present_key_validation_class);
    if (present_key_validation_class)
      builder.append(key_validation_class);

    boolean present_row_cache_provider = true && (isSetRow_cache_provider());
    builder.append(present_row_cache_provider);
    if (present_row_cache_provider)
      builder.append(row_cache_provider);

    boolean present_key_alias = true && (isSetKey_alias());
    builder.append(present_key_alias);
    if (present_key_alias)
      builder.append(key_alias);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // KEYSPACE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.keyspace = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COLUMN_TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.column_type = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // COMPARATOR_TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.comparator_type = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // SUBCOMPARATOR_TYPE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.subcomparator_type = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // COMMENT
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.comment = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // ROW_CACHE_SIZE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.row_cache_size = iprot.readDouble();
            setRow_cache_sizeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // KEY_CACHE_SIZE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.key_cache_size = iprot.readDouble();
            setKey_cache_sizeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // READ_REPAIR_CHANCE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.read_repair_chance = iprot.readDouble();
            setRead_repair_chanceIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // COLUMN_METADATA
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list29 = iprot.readListBegin();
              this.column_metadata = new ArrayList<ColumnDef>(_list29.size);
              for (int _i30 = 0; _i30 < _list29.size; ++_i30)
              {
                ColumnDef _elem31;
                _elem31 = new ColumnDef();
                _elem31.read(iprot);
                this.column_metadata.add(_elem31);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // GC_GRACE_SECONDS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.gc_grace_seconds = iprot.readI32();
            setGc_grace_secondsIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // DEFAULT_VALIDATION_CLASS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.default_validation_class = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // ID
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.id = iprot.readI32();
            setIdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // MIN_COMPACTION_THRESHOLD
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.min_compaction_threshold = iprot.readI32();
            setMin_compaction_thresholdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 18: // MAX_COMPACTION_THRESHOLD
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.max_compaction_threshold = iprot.readI32();
            setMax_compaction_thresholdIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 19: // ROW_CACHE_SAVE_PERIOD_IN_SECONDS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.row_cache_save_period_in_seconds = iprot.readI32();
            setRow_cache_save_period_in_secondsIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 20: // KEY_CACHE_SAVE_PERIOD_IN_SECONDS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.key_cache_save_period_in_seconds = iprot.readI32();
            setKey_cache_save_period_in_secondsIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 21: // MEMTABLE_FLUSH_AFTER_MINS
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.memtable_flush_after_mins = iprot.readI32();
            setMemtable_flush_after_minsIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 22: // MEMTABLE_THROUGHPUT_IN_MB
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.memtable_throughput_in_mb = iprot.readI32();
            setMemtable_throughput_in_mbIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 23: // MEMTABLE_OPERATIONS_IN_MILLIONS
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.memtable_operations_in_millions = iprot.readDouble();
            setMemtable_operations_in_millionsIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 24: // REPLICATE_ON_WRITE
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.replicate_on_write = iprot.readBool();
            setReplicate_on_writeIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 25: // MERGE_SHARDS_CHANCE
          if (field.type == org.apache.thrift.protocol.TType.DOUBLE) {
            this.merge_shards_chance = iprot.readDouble();
            setMerge_shards_chanceIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 26: // KEY_VALIDATION_CLASS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.key_validation_class = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 27: // ROW_CACHE_PROVIDER
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.row_cache_provider = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 28: // KEY_ALIAS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.key_alias = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.keyspace != null) {
      oprot.writeFieldBegin(KEYSPACE_FIELD_DESC);
      oprot.writeString(this.keyspace);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.column_type != null) {
      if (isSetColumn_type()) {
        oprot.writeFieldBegin(COLUMN_TYPE_FIELD_DESC);
        oprot.writeString(this.column_type);
        oprot.writeFieldEnd();
      }
    }
    if (this.comparator_type != null) {
      if (isSetComparator_type()) {
        oprot.writeFieldBegin(COMPARATOR_TYPE_FIELD_DESC);
        oprot.writeString(this.comparator_type);
        oprot.writeFieldEnd();
      }
    }
    if (this.subcomparator_type != null) {
      if (isSetSubcomparator_type()) {
        oprot.writeFieldBegin(SUBCOMPARATOR_TYPE_FIELD_DESC);
        oprot.writeString(this.subcomparator_type);
        oprot.writeFieldEnd();
      }
    }
    if (this.comment != null) {
      if (isSetComment()) {
        oprot.writeFieldBegin(COMMENT_FIELD_DESC);
        oprot.writeString(this.comment);
        oprot.writeFieldEnd();
      }
    }
    if (isSetRow_cache_size()) {
      oprot.writeFieldBegin(ROW_CACHE_SIZE_FIELD_DESC);
      oprot.writeDouble(this.row_cache_size);
      oprot.writeFieldEnd();
    }
    if (isSetKey_cache_size()) {
      oprot.writeFieldBegin(KEY_CACHE_SIZE_FIELD_DESC);
      oprot.writeDouble(this.key_cache_size);
      oprot.writeFieldEnd();
    }
    if (isSetRead_repair_chance()) {
      oprot.writeFieldBegin(READ_REPAIR_CHANCE_FIELD_DESC);
      oprot.writeDouble(this.read_repair_chance);
      oprot.writeFieldEnd();
    }
    if (this.column_metadata != null) {
      if (isSetColumn_metadata()) {
        oprot.writeFieldBegin(COLUMN_METADATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.column_metadata.size()));
          for (ColumnDef _iter32 : this.column_metadata)
          {
            _iter32.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetGc_grace_seconds()) {
      oprot.writeFieldBegin(GC_GRACE_SECONDS_FIELD_DESC);
      oprot.writeI32(this.gc_grace_seconds);
      oprot.writeFieldEnd();
    }
    if (this.default_validation_class != null) {
      if (isSetDefault_validation_class()) {
        oprot.writeFieldBegin(DEFAULT_VALIDATION_CLASS_FIELD_DESC);
        oprot.writeString(this.default_validation_class);
        oprot.writeFieldEnd();
      }
    }
    if (isSetId()) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(this.id);
      oprot.writeFieldEnd();
    }
    if (isSetMin_compaction_threshold()) {
      oprot.writeFieldBegin(MIN_COMPACTION_THRESHOLD_FIELD_DESC);
      oprot.writeI32(this.min_compaction_threshold);
      oprot.writeFieldEnd();
    }
    if (isSetMax_compaction_threshold()) {
      oprot.writeFieldBegin(MAX_COMPACTION_THRESHOLD_FIELD_DESC);
      oprot.writeI32(this.max_compaction_threshold);
      oprot.writeFieldEnd();
    }
    if (isSetRow_cache_save_period_in_seconds()) {
      oprot.writeFieldBegin(ROW_CACHE_SAVE_PERIOD_IN_SECONDS_FIELD_DESC);
      oprot.writeI32(this.row_cache_save_period_in_seconds);
      oprot.writeFieldEnd();
    }
    if (isSetKey_cache_save_period_in_seconds()) {
      oprot.writeFieldBegin(KEY_CACHE_SAVE_PERIOD_IN_SECONDS_FIELD_DESC);
      oprot.writeI32(this.key_cache_save_period_in_seconds);
      oprot.writeFieldEnd();
    }
    if (isSetMemtable_flush_after_mins()) {
      oprot.writeFieldBegin(MEMTABLE_FLUSH_AFTER_MINS_FIELD_DESC);
      oprot.writeI32(this.memtable_flush_after_mins);
      oprot.writeFieldEnd();
    }
    if (isSetMemtable_throughput_in_mb()) {
      oprot.writeFieldBegin(MEMTABLE_THROUGHPUT_IN_MB_FIELD_DESC);
      oprot.writeI32(this.memtable_throughput_in_mb);
      oprot.writeFieldEnd();
    }
    if (isSetMemtable_operations_in_millions()) {
      oprot.writeFieldBegin(MEMTABLE_OPERATIONS_IN_MILLIONS_FIELD_DESC);
      oprot.writeDouble(this.memtable_operations_in_millions);
      oprot.writeFieldEnd();
    }
    if (isSetReplicate_on_write()) {
      oprot.writeFieldBegin(REPLICATE_ON_WRITE_FIELD_DESC);
      oprot.writeBool(this.replicate_on_write);
      oprot.writeFieldEnd();
    }
    if (isSetMerge_shards_chance()) {
      oprot.writeFieldBegin(MERGE_SHARDS_CHANCE_FIELD_DESC);
      oprot.writeDouble(this.merge_shards_chance);
      oprot.writeFieldEnd();
    }
    if (this.key_validation_class != null) {
      if (isSetKey_validation_class()) {
        oprot.writeFieldBegin(KEY_VALIDATION_CLASS_FIELD_DESC);
        oprot.writeString(this.key_validation_class);
        oprot.writeFieldEnd();
      }
    }
    if (this.row_cache_provider != null) {
      if (isSetRow_cache_provider()) {
        oprot.writeFieldBegin(ROW_CACHE_PROVIDER_FIELD_DESC);
        oprot.writeString(this.row_cache_provider);
        oprot.writeFieldEnd();
      }
    }
    if (this.key_alias != null) {
      if (isSetKey_alias()) {
        oprot.writeFieldBegin(KEY_ALIAS_FIELD_DESC);
        oprot.writeBinary(this.key_alias);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;toString();;;    if (isSetReplicate_on_write()) {
      if (!first) sb.append(", ");
      sb.append("replicate_on_write:");
      sb.append(this.replicate_on_write);
      first = false;
    }
    if (isSetMerge_shards_chance()) {
      if (!first) sb.append(", ");
      sb.append("merge_shards_chance:");
      sb.append(this.merge_shards_chance);
      first = false;
    }
    if (isSetKey_validation_class()) {
      if (!first) sb.append(", ");
      sb.append("key_validation_class:");
      if (this.key_validation_class == null) {
        sb.append("null");
      } else {
        sb.append(this.key_validation_class);
      }
      first = false;
    }
    if (isSetRow_cache_provider()) {
      if (!first) sb.append(", ");
      sb.append("row_cache_provider:");
      if (this.row_cache_provider == null) {
        sb.append("null");
      } else {
        sb.append(this.row_cache_provider);
      }
      first = false;
    }
    if (isSetKey_alias()) {
      if (!first) sb.append(", ");
      sb.append("key_alias:");
      if (this.key_alias == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.key_alias, sb);
      }
      first = false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CfDef;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Column;Column(ByteBuffer);;;public Column(
    ByteBuffer name)
  {
    this();
    this.name = name;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Column;bufferForName();;;public ByteBuffer bufferForName() {
    return name;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Column;bufferForValue();;;public ByteBuffer bufferForValue() {
    return value;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Column;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // VALUE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.value = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TIMESTAMP
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.timestamp = iprot.readI64();
            setTimestampIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TTL
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.ttl = iprot.readI32();
            setTtlIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Column;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeBinary(this.name);
      oprot.writeFieldEnd();
    }
    if (this.value != null) {
      if (isSetValue()) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeBinary(this.value);
        oprot.writeFieldEnd();
      }
    }
    if (isSetTimestamp()) {
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(this.timestamp);
      oprot.writeFieldEnd();
    }
    if (isSetTtl()) {
      oprot.writeFieldBegin(TTL_FIELD_DESC);
      oprot.writeI32(this.ttl);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Column;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Column;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnDef;bufferForName();;;public ByteBuffer bufferForName() {
    return name;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnDef;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // VALIDATION_CLASS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.validation_class = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // INDEX_TYPE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.index_type = IndexType.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // INDEX_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.index_name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnDef;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeBinary(this.name);
      oprot.writeFieldEnd();
    }
    if (this.validation_class != null) {
      oprot.writeFieldBegin(VALIDATION_CLASS_FIELD_DESC);
      oprot.writeString(this.validation_class);
      oprot.writeFieldEnd();
    }
    if (this.index_type != null) {
      if (isSetIndex_type()) {
        oprot.writeFieldBegin(INDEX_TYPE_FIELD_DESC);
        oprot.writeI32(this.index_type.getValue());
        oprot.writeFieldEnd();
      }
    }
    if (this.index_name != null) {
      if (isSetIndex_name()) {
        oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
        oprot.writeString(this.index_name);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnDef;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnDef;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;findByThriftId(int);;;        case 3: // COUNTER_COLUMN
          return COUNTER_COLUMN;
        case 4: // COUNTER_SUPER_COLUMN
          return COUNTER_SUPER_COLUMN;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;ColumnOrSuperColumn(ColumnOrSuperColumn);;;    if (other.isSetCounter_column()) {
      this.counter_column = new CounterColumn(other.counter_column);
    }
    if (other.isSetCounter_super_column()) {
      this.counter_super_column = new CounterSuperColumn(other.counter_super_column);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;clear();;;    this.counter_column = null;
    this.counter_super_column = null;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;getCounter_column();;;public CounterColumn getCounter_column() {
    return this.counter_column;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;setCounter_column(CounterColumn);;;public ColumnOrSuperColumn setCounter_column(CounterColumn counter_column) {
    this.counter_column = counter_column;
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;unsetCounter_column();;;public void unsetCounter_column() {
    this.counter_column = null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;isSetCounter_column();;;public boolean isSetCounter_column() {
    return this.counter_column != null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;setCounter_columnIsSet(boolean);;;public void setCounter_columnIsSet(boolean value) {
    if (!value) {
      this.counter_column = null;
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;getCounter_super_column();;;public CounterSuperColumn getCounter_super_column() {
    return this.counter_super_column;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;setCounter_super_column(CounterSuperColumn);;;public ColumnOrSuperColumn setCounter_super_column(CounterSuperColumn counter_super_column) {
    this.counter_super_column = counter_super_column;
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;unsetCounter_super_column();;;public void unsetCounter_super_column() {
    this.counter_super_column = null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;isSetCounter_super_column();;;public boolean isSetCounter_super_column() {
    return this.counter_super_column != null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;setCounter_super_columnIsSet(boolean);;;public void setCounter_super_columnIsSet(boolean value) {
    if (!value) {
      this.counter_super_column = null;
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;setFieldValue(_Fields,Object);;;    case COUNTER_COLUMN:
      if (value == null) {
        unsetCounter_column();
      } else {
        setCounter_column((CounterColumn)value);
      }
      break;

    case COUNTER_SUPER_COLUMN:
      if (value == null) {
        unsetCounter_super_column();
      } else {
        setCounter_super_column((CounterSuperColumn)value);
      }
      break;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;getFieldValue(_Fields);;;    case COUNTER_COLUMN:
      return getCounter_column();

    case COUNTER_SUPER_COLUMN:
      return getCounter_super_column();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;isSet(_Fields);;;    case COUNTER_COLUMN:
      return isSetCounter_column();
    case COUNTER_SUPER_COLUMN:
      return isSetCounter_super_column();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;equals(ColumnOrSuperColumn);;;    boolean this_present_counter_column = true && this.isSetCounter_column();
    boolean that_present_counter_column = true && that.isSetCounter_column();
    if (this_present_counter_column || that_present_counter_column) {
      if (!(this_present_counter_column && that_present_counter_column))
        return false;
      if (!this.counter_column.equals(that.counter_column))
        return false;
    }

    boolean this_present_counter_super_column = true && this.isSetCounter_super_column();
    boolean that_present_counter_super_column = true && that.isSetCounter_super_column();
    if (this_present_counter_super_column || that_present_counter_super_column) {
      if (!(this_present_counter_super_column && that_present_counter_super_column))
        return false;
      if (!this.counter_super_column.equals(that.counter_super_column))
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;hashCode();;;    boolean present_counter_column = true && (isSetCounter_column());
    builder.append(present_counter_column);
    if (present_counter_column)
      builder.append(counter_column);

    boolean present_counter_super_column = true && (isSetCounter_super_column());
    builder.append(present_counter_super_column);
    if (present_counter_super_column)
      builder.append(counter_super_column);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // COLUMN
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.column = new Column();
            this.column.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SUPER_COLUMN
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.super_column = new SuperColumn();
            this.super_column.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COUNTER_COLUMN
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.counter_column = new CounterColumn();
            this.counter_column.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // COUNTER_SUPER_COLUMN
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.counter_super_column = new CounterSuperColumn();
            this.counter_super_column.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.column != null) {
      if (isSetColumn()) {
        oprot.writeFieldBegin(COLUMN_FIELD_DESC);
        this.column.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.super_column != null) {
      if (isSetSuper_column()) {
        oprot.writeFieldBegin(SUPER_COLUMN_FIELD_DESC);
        this.super_column.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.counter_column != null) {
      if (isSetCounter_column()) {
        oprot.writeFieldBegin(COUNTER_COLUMN_FIELD_DESC);
        this.counter_column.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.counter_super_column != null) {
      if (isSetCounter_super_column()) {
        oprot.writeFieldBegin(COUNTER_SUPER_COLUMN_FIELD_DESC);
        this.counter_super_column.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;toString();;;    if (isSetCounter_column()) {
      if (!first) sb.append(", ");
      sb.append("counter_column:");
      if (this.counter_column == null) {
        sb.append("null");
      } else {
        sb.append(this.counter_column);
      }
      first = false;
    }
    if (isSetCounter_super_column()) {
      if (!first) sb.append(", ");
      sb.append("counter_super_column:");
      if (this.counter_super_column == null) {
        sb.append("null");
      } else {
        sb.append(this.counter_super_column);
      }
      first = false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnOrSuperColumn;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnParent;bufferForSuper_column();;;public ByteBuffer bufferForSuper_column() {
    return super_column;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnParent;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 3: // COLUMN_FAMILY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.column_family = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SUPER_COLUMN
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.super_column = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnParent;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.column_family != null) {
      oprot.writeFieldBegin(COLUMN_FAMILY_FIELD_DESC);
      oprot.writeString(this.column_family);
      oprot.writeFieldEnd();
    }
    if (this.super_column != null) {
      if (isSetSuper_column()) {
        oprot.writeFieldBegin(SUPER_COLUMN_FIELD_DESC);
        oprot.writeBinary(this.super_column);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnParent;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnParent;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnPath;bufferForSuper_column();;;public ByteBuffer bufferForSuper_column() {
    return super_column;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnPath;bufferForColumn();;;public ByteBuffer bufferForColumn() {
    return column;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnPath;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 3: // COLUMN_FAMILY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.column_family = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SUPER_COLUMN
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.super_column = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // COLUMN
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.column = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnPath;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.column_family != null) {
      oprot.writeFieldBegin(COLUMN_FAMILY_FIELD_DESC);
      oprot.writeString(this.column_family);
      oprot.writeFieldEnd();
    }
    if (this.super_column != null) {
      if (isSetSuper_column()) {
        oprot.writeFieldBegin(SUPER_COLUMN_FIELD_DESC);
        oprot.writeBinary(this.super_column);
        oprot.writeFieldEnd();
      }
    }
    if (this.column != null) {
      if (isSetColumn()) {
        oprot.writeFieldBegin(COLUMN_FIELD_DESC);
        oprot.writeBinary(this.column);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnPath;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\ColumnPath;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Compression;Compression(int);;;private Compression(int value) {
    this.value = value;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Compression;getValue();;;public int getValue() {
    return value;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Compression;findByValue(int);;;public static Compression findByValue(int value) { 
    switch (value) {
      case 1:
        return GZIP;
      case 2:
        return NONE;
      default:
        return null;
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;findByThriftId(int);;;public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // VALUE
          return VALUE;
        default:
          return null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;findByThriftIdOrThrow(int);;;public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;findByName(String);;;public static _Fields findByName(String name) {
      return byName.get(name);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;_Fields(short,String);;;_Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;getThriftFieldId();;;public short getThriftFieldId() {
      return _thriftId;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;getFieldName();;;public String getFieldName() {
      return _fieldName;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;CounterColumn();;;public CounterColumn() {
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;CounterColumn(ByteBuffer,long);;;public CounterColumn(
    ByteBuffer name,
    long value)
  {
    this();
    this.name = name;
    this.value = value;
    setValueIsSet(true);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;CounterColumn(CounterColumn);;;public CounterColumn(CounterColumn other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetName()) {
      this.name = org.apache.thrift.TBaseHelper.copyBinary(other.name);
;
    }
    this.value = other.value;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;deepCopy();;;public CounterColumn deepCopy() {
    return new CounterColumn(this);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;clear();;;@Override
  public void clear() {
    this.name = null;
    setValueIsSet(false);
    this.value = 0;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;getName();;;public byte[] getName() {
    setName(org.apache.thrift.TBaseHelper.rightSize(name));
    return name == null ? null : name.array();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;bufferForName();;;public ByteBuffer bufferForName() {
    return name;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;setName(byte[]);;;public CounterColumn setName(byte[] name) {
    setName(name == null ? (ByteBuffer)null : ByteBuffer.wrap(name));
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;setName(ByteBuffer);;;public CounterColumn setName(ByteBuffer name) {
    this.name = name;
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;unsetName();;;public void unsetName() {
    this.name = null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;isSetName();;;public boolean isSetName() {
    return this.name != null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;setNameIsSet(boolean);;;public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;getValue();;;public long getValue() {
    return this.value;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;setValue(long);;;public CounterColumn setValue(long value) {
    this.value = value;
    setValueIsSet(true);
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;unsetValue();;;public void unsetValue() {
    __isset_bit_vector.clear(__VALUE_ISSET_ID);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;isSetValue();;;public boolean isSetValue() {
    return __isset_bit_vector.get(__VALUE_ISSET_ID);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;setValueIsSet(boolean);;;public void setValueIsSet(boolean value) {
    __isset_bit_vector.set(__VALUE_ISSET_ID, value);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;setFieldValue(_Fields,Object);;;public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((ByteBuffer)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((Long)value);
      }
      break;

    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;getFieldValue(_Fields);;;public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case VALUE:
      return new Long(getValue());

    }
    throw new IllegalStateException();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;isSet(_Fields);;;public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case VALUE:
      return isSetValue();
    }
    throw new IllegalStateException();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;equals(Object);;;@Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CounterColumn)
      return this.equals((CounterColumn)that);
    return false;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;equals(CounterColumn);;;public boolean equals(CounterColumn that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_value = true;
    boolean that_present_value = true;
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (this.value != that.value)
        return false;
    }

    return true;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;hashCode();;;@Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_value = true;
    builder.append(present_value);
    if (present_value)
      builder.append(value);

    return builder.toHashCode();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;compareTo(CounterColumn);;;public int compareTo(CounterColumn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CounterColumn typedOther = (CounterColumn)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;fieldForId(int);;;public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // VALUE
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.value = iprot.readI64();
            setValueIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetValue()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeBinary(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(VALUE_FIELD_DESC);
    oprot.writeI64(this.value);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;toString();;;@Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CounterColumn(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.name, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("value:");
    sb.append(this.value);
    first = false;
    sb.append(")");
    return sb.toString();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;validate();;;public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'value' because it's a primitive and you chose the non-beans generator.
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterColumn;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;findByThriftId(int);;;public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // COLUMNS
          return COLUMNS;
        default:
          return null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;findByThriftIdOrThrow(int);;;public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;findByName(String);;;public static _Fields findByName(String name) {
      return byName.get(name);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;_Fields(short,String);;;_Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;getThriftFieldId();;;public short getThriftFieldId() {
      return _thriftId;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;getFieldName();;;public String getFieldName() {
      return _fieldName;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;CounterSuperColumn();;;public CounterSuperColumn() {
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;CounterSuperColumn(ByteBuffer,List<CounterColumn>);;;public CounterSuperColumn(
    ByteBuffer name,
    List<CounterColumn> columns)
  {
    this();
    this.name = name;
    this.columns = columns;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;CounterSuperColumn(CounterSuperColumn);;;public CounterSuperColumn(CounterSuperColumn other) {
    if (other.isSetName()) {
      this.name = org.apache.thrift.TBaseHelper.copyBinary(other.name);
;
    }
    if (other.isSetColumns()) {
      List<CounterColumn> __this__columns = new ArrayList<CounterColumn>();
      for (CounterColumn other_element : other.columns) {
        __this__columns.add(new CounterColumn(other_element));
      }
      this.columns = __this__columns;
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;deepCopy();;;public CounterSuperColumn deepCopy() {
    return new CounterSuperColumn(this);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;clear();;;@Override
  public void clear() {
    this.name = null;
    this.columns = null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;getName();;;public byte[] getName() {
    setName(org.apache.thrift.TBaseHelper.rightSize(name));
    return name == null ? null : name.array();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;bufferForName();;;public ByteBuffer bufferForName() {
    return name;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;setName(byte[]);;;public CounterSuperColumn setName(byte[] name) {
    setName(name == null ? (ByteBuffer)null : ByteBuffer.wrap(name));
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;setName(ByteBuffer);;;public CounterSuperColumn setName(ByteBuffer name) {
    this.name = name;
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;unsetName();;;public void unsetName() {
    this.name = null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;isSetName();;;public boolean isSetName() {
    return this.name != null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;setNameIsSet(boolean);;;public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;getColumnsSize();;;public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;getColumnsIterator();;;public java.util.Iterator<CounterColumn> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;addToColumns(CounterColumn);;;public void addToColumns(CounterColumn elem) {
    if (this.columns == null) {
      this.columns = new ArrayList<CounterColumn>();
    }
    this.columns.add(elem);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;getColumns();;;public List<CounterColumn> getColumns() {
    return this.columns;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;setColumns(List<CounterColumn>);;;public CounterSuperColumn setColumns(List<CounterColumn> columns) {
    this.columns = columns;
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;unsetColumns();;;public void unsetColumns() {
    this.columns = null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;isSetColumns();;;public boolean isSetColumns() {
    return this.columns != null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;setColumnsIsSet(boolean);;;public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;setFieldValue(_Fields,Object);;;public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((ByteBuffer)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((List<CounterColumn>)value);
      }
      break;

    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;getFieldValue(_Fields);;;public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case COLUMNS:
      return getColumns();

    }
    throw new IllegalStateException();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;isSet(_Fields);;;public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case COLUMNS:
      return isSetColumns();
    }
    throw new IllegalStateException();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;equals(Object);;;@Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CounterSuperColumn)
      return this.equals((CounterSuperColumn)that);
    return false;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;equals(CounterSuperColumn);;;public boolean equals(CounterSuperColumn that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    return true;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;hashCode();;;@Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_name = true && (isSetName());
    builder.append(present_name);
    if (present_name)
      builder.append(name);

    boolean present_columns = true && (isSetColumns());
    builder.append(present_columns);
    if (present_columns)
      builder.append(columns);

    return builder.toHashCode();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;compareTo(CounterSuperColumn);;;public int compareTo(CounterSuperColumn other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CounterSuperColumn typedOther = (CounterSuperColumn)other;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, typedOther.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;fieldForId(int);;;public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // COLUMNS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list4 = iprot.readListBegin();
              this.columns = new ArrayList<CounterColumn>(_list4.size);
              for (int _i5 = 0; _i5 < _list4.size; ++_i5)
              {
                CounterColumn _elem6;
                _elem6 = new CounterColumn();
                _elem6.read(iprot);
                this.columns.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeBinary(this.name);
      oprot.writeFieldEnd();
    }
    if (this.columns != null) {
      oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.columns.size()));
        for (CounterColumn _iter7 : this.columns)
        {
          _iter7.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;toString();;;@Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CounterSuperColumn(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.name, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columns:");
    if (this.columns == null) {
      sb.append("null");
    } else {
      sb.append(this.columns);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;validate();;;public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (name == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
    }
    if (columns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' was not present! Struct: " + toString());
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CounterSuperColumn;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;findByThriftId(int);;;public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // ROWS
          return ROWS;
        case 3: // NUM
          return NUM;
        default:
          return null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;findByThriftIdOrThrow(int);;;public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;findByName(String);;;public static _Fields findByName(String name) {
      return byName.get(name);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;_Fields(short,String);;;_Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;getThriftFieldId();;;public short getThriftFieldId() {
      return _thriftId;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;getFieldName();;;public String getFieldName() {
      return _fieldName;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;CqlResult();;;public CqlResult() {
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;CqlResult(CqlResultType);;;public CqlResult(
    CqlResultType type)
  {
    this();
    this.type = type;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;CqlResult(CqlResult);;;public CqlResult(CqlResult other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetRows()) {
      List<CqlRow> __this__rows = new ArrayList<CqlRow>();
      for (CqlRow other_element : other.rows) {
        __this__rows.add(new CqlRow(other_element));
      }
      this.rows = __this__rows;
    }
    this.num = other.num;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;deepCopy();;;public CqlResult deepCopy() {
    return new CqlResult(this);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;clear();;;@Override
  public void clear() {
    this.type = null;
    this.rows = null;
    setNumIsSet(false);
    this.num = 0;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;getType();;;public CqlResultType getType() {
    return this.type;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;setType(CqlResultType);;;public CqlResult setType(CqlResultType type) {
    this.type = type;
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;unsetType();;;public void unsetType() {
    this.type = null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;isSetType();;;public boolean isSetType() {
    return this.type != null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;setTypeIsSet(boolean);;;public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;getRowsSize();;;public int getRowsSize() {
    return (this.rows == null) ? 0 : this.rows.size();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;getRowsIterator();;;public java.util.Iterator<CqlRow> getRowsIterator() {
    return (this.rows == null) ? null : this.rows.iterator();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;addToRows(CqlRow);;;public void addToRows(CqlRow elem) {
    if (this.rows == null) {
      this.rows = new ArrayList<CqlRow>();
    }
    this.rows.add(elem);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;getRows();;;public List<CqlRow> getRows() {
    return this.rows;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;setRows(List<CqlRow>);;;public CqlResult setRows(List<CqlRow> rows) {
    this.rows = rows;
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;unsetRows();;;public void unsetRows() {
    this.rows = null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;isSetRows();;;public boolean isSetRows() {
    return this.rows != null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;setRowsIsSet(boolean);;;public void setRowsIsSet(boolean value) {
    if (!value) {
      this.rows = null;
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;getNum();;;public int getNum() {
    return this.num;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;setNum(int);;;public CqlResult setNum(int num) {
    this.num = num;
    setNumIsSet(true);
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;unsetNum();;;public void unsetNum() {
    __isset_bit_vector.clear(__NUM_ISSET_ID);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;isSetNum();;;public boolean isSetNum() {
    return __isset_bit_vector.get(__NUM_ISSET_ID);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;setNumIsSet(boolean);;;public void setNumIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_ISSET_ID, value);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;setFieldValue(_Fields,Object);;;public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((CqlResultType)value);
      }
      break;

    case ROWS:
      if (value == null) {
        unsetRows();
      } else {
        setRows((List<CqlRow>)value);
      }
      break;

    case NUM:
      if (value == null) {
        unsetNum();
      } else {
        setNum((Integer)value);
      }
      break;

    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;getFieldValue(_Fields);;;public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case ROWS:
      return getRows();

    case NUM:
      return new Integer(getNum());

    }
    throw new IllegalStateException();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;isSet(_Fields);;;public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case ROWS:
      return isSetRows();
    case NUM:
      return isSetNum();
    }
    throw new IllegalStateException();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;equals(Object);;;@Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CqlResult)
      return this.equals((CqlResult)that);
    return false;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;equals(CqlResult);;;public boolean equals(CqlResult that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_rows = true && this.isSetRows();
    boolean that_present_rows = true && that.isSetRows();
    if (this_present_rows || that_present_rows) {
      if (!(this_present_rows && that_present_rows))
        return false;
      if (!this.rows.equals(that.rows))
        return false;
    }

    boolean this_present_num = true && this.isSetNum();
    boolean that_present_num = true && that.isSetNum();
    if (this_present_num || that_present_num) {
      if (!(this_present_num && that_present_num))
        return false;
      if (this.num != that.num)
        return false;
    }

    return true;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;hashCode();;;@Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_type = true && (isSetType());
    builder.append(present_type);
    if (present_type)
      builder.append(type.getValue());

    boolean present_rows = true && (isSetRows());
    builder.append(present_rows);
    if (present_rows)
      builder.append(rows);

    boolean present_num = true && (isSetNum());
    builder.append(present_num);
    if (present_num)
      builder.append(num);

    return builder.toHashCode();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;compareTo(CqlResult);;;public int compareTo(CqlResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CqlResult typedOther = (CqlResult)other;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRows()).compareTo(typedOther.isSetRows());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRows()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rows, typedOther.rows);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNum()).compareTo(typedOther.isSetNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num, typedOther.num);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;fieldForId(int);;;public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TYPE
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.type = CqlResultType.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ROWS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list46 = iprot.readListBegin();
              this.rows = new ArrayList<CqlRow>(_list46.size);
              for (int _i47 = 0; _i47 < _list46.size; ++_i47)
              {
                CqlRow _elem48;
                _elem48 = new CqlRow();
                _elem48.read(iprot);
                this.rows.add(_elem48);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // NUM
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.num = iprot.readI32();
            setNumIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type.getValue());
      oprot.writeFieldEnd();
    }
    if (this.rows != null) {
      if (isSetRows()) {
        oprot.writeFieldBegin(ROWS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.rows.size()));
          for (CqlRow _iter49 : this.rows)
          {
            _iter49.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetNum()) {
      oprot.writeFieldBegin(NUM_FIELD_DESC);
      oprot.writeI32(this.num);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;toString();;;@Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CqlResult(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (isSetRows()) {
      if (!first) sb.append(", ");
      sb.append("rows:");
      if (this.rows == null) {
        sb.append("null");
      } else {
        sb.append(this.rows);
      }
      first = false;
    }
    if (isSetNum()) {
      if (!first) sb.append(", ");
      sb.append("num:");
      sb.append(this.num);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;validate();;;public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (type == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'type' was not present! Struct: " + toString());
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResult;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResultType;CqlResultType(int);;;private CqlResultType(int value) {
    this.value = value;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResultType;getValue();;;public int getValue() {
    return value;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlResultType;findByValue(int);;;public static CqlResultType findByValue(int value) { 
    switch (value) {
      case 1:
        return ROWS;
      case 2:
        return VOID;
      case 3:
        return INT;
      default:
        return null;
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;findByThriftId(int);;;public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY
          return KEY;
        case 2: // COLUMNS
          return COLUMNS;
        default:
          return null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;findByThriftIdOrThrow(int);;;public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;findByName(String);;;public static _Fields findByName(String name) {
      return byName.get(name);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;_Fields(short,String);;;_Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;getThriftFieldId();;;public short getThriftFieldId() {
      return _thriftId;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;getFieldName();;;public String getFieldName() {
      return _fieldName;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;CqlRow();;;public CqlRow() {
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;CqlRow(ByteBuffer,List<Column>);;;public CqlRow(
    ByteBuffer key,
    List<Column> columns)
  {
    this();
    this.key = key;
    this.columns = columns;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;CqlRow(CqlRow);;;public CqlRow(CqlRow other) {
    if (other.isSetKey()) {
      this.key = org.apache.thrift.TBaseHelper.copyBinary(other.key);
;
    }
    if (other.isSetColumns()) {
      List<Column> __this__columns = new ArrayList<Column>();
      for (Column other_element : other.columns) {
        __this__columns.add(new Column(other_element));
      }
      this.columns = __this__columns;
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;deepCopy();;;public CqlRow deepCopy() {
    return new CqlRow(this);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;clear();;;@Override
  public void clear() {
    this.key = null;
    this.columns = null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;getKey();;;public byte[] getKey() {
    setKey(org.apache.thrift.TBaseHelper.rightSize(key));
    return key == null ? null : key.array();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;bufferForKey();;;public ByteBuffer bufferForKey() {
    return key;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;setKey(byte[]);;;public CqlRow setKey(byte[] key) {
    setKey(key == null ? (ByteBuffer)null : ByteBuffer.wrap(key));
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;setKey(ByteBuffer);;;public CqlRow setKey(ByteBuffer key) {
    this.key = key;
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;unsetKey();;;public void unsetKey() {
    this.key = null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;isSetKey();;;public boolean isSetKey() {
    return this.key != null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;setKeyIsSet(boolean);;;public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;getColumnsSize();;;public int getColumnsSize() {
    return (this.columns == null) ? 0 : this.columns.size();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;getColumnsIterator();;;public java.util.Iterator<Column> getColumnsIterator() {
    return (this.columns == null) ? null : this.columns.iterator();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;addToColumns(Column);;;public void addToColumns(Column elem) {
    if (this.columns == null) {
      this.columns = new ArrayList<Column>();
    }
    this.columns.add(elem);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;getColumns();;;public List<Column> getColumns() {
    return this.columns;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;setColumns(List<Column>);;;public CqlRow setColumns(List<Column> columns) {
    this.columns = columns;
    return this;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;unsetColumns();;;public void unsetColumns() {
    this.columns = null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;isSetColumns();;;public boolean isSetColumns() {
    return this.columns != null;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;setColumnsIsSet(boolean);;;public void setColumnsIsSet(boolean value) {
    if (!value) {
      this.columns = null;
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;setFieldValue(_Fields,Object);;;public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((ByteBuffer)value);
      }
      break;

    case COLUMNS:
      if (value == null) {
        unsetColumns();
      } else {
        setColumns((List<Column>)value);
      }
      break;

    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;getFieldValue(_Fields);;;public Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY:
      return getKey();

    case COLUMNS:
      return getColumns();

    }
    throw new IllegalStateException();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;isSet(_Fields);;;public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case KEY:
      return isSetKey();
    case COLUMNS:
      return isSetColumns();
    }
    throw new IllegalStateException();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;equals(Object);;;@Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CqlRow)
      return this.equals((CqlRow)that);
    return false;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;equals(CqlRow);;;public boolean equals(CqlRow that) {
    if (that == null)
      return false;

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_columns = true && this.isSetColumns();
    boolean that_present_columns = true && that.isSetColumns();
    if (this_present_columns || that_present_columns) {
      if (!(this_present_columns && that_present_columns))
        return false;
      if (!this.columns.equals(that.columns))
        return false;
    }

    return true;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;hashCode();;;@Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    boolean present_key = true && (isSetKey());
    builder.append(present_key);
    if (present_key)
      builder.append(key);

    boolean present_columns = true && (isSetColumns());
    builder.append(present_columns);
    if (present_columns)
      builder.append(columns);

    return builder.toHashCode();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;compareTo(CqlRow);;;public int compareTo(CqlRow other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    CqlRow typedOther = (CqlRow)other;

    lastComparison = Boolean.valueOf(isSetKey()).compareTo(typedOther.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, typedOther.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetColumns()).compareTo(typedOther.isSetColumns());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetColumns()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.columns, typedOther.columns);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;fieldForId(int);;;public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // KEY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.key = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // COLUMNS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list42 = iprot.readListBegin();
              this.columns = new ArrayList<Column>(_list42.size);
              for (int _i43 = 0; _i43 < _list42.size; ++_i43)
              {
                Column _elem44;
                _elem44 = new Column();
                _elem44.read(iprot);
                this.columns.add(_elem44);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.key != null) {
      oprot.writeFieldBegin(KEY_FIELD_DESC);
      oprot.writeBinary(this.key);
      oprot.writeFieldEnd();
    }
    if (this.columns != null) {
      oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.columns.size()));
        for (Column _iter45 : this.columns)
        {
          _iter45.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;toString();;;@Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CqlRow(");
    boolean first = true;

    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.key, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("columns:");
    if (this.columns == null) {
      sb.append("null");
    } else {
      sb.append(this.columns);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;validate();;;public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (key == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'key' was not present! Struct: " + toString());
    }
    if (columns == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'columns' was not present! Struct: " + toString());
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\CqlRow;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Deletion;bufferForSuper_column();;;public ByteBuffer bufferForSuper_column() {
    return super_column;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Deletion;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TIMESTAMP
          if (field.type == org.apache.thrift.protocol.TType.I64) {
            this.timestamp = iprot.readI64();
            setTimestampIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SUPER_COLUMN
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.super_column = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PREDICATE
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.predicate = new SlicePredicate();
            this.predicate.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Deletion;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (isSetTimestamp()) {
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(this.timestamp);
      oprot.writeFieldEnd();
    }
    if (this.super_column != null) {
      if (isSetSuper_column()) {
        oprot.writeFieldBegin(SUPER_COLUMN_FIELD_DESC);
        oprot.writeBinary(this.super_column);
        oprot.writeFieldEnd();
      }
    }
    if (this.predicate != null) {
      if (isSetPredicate()) {
        oprot.writeFieldBegin(PREDICATE_FIELD_DESC);
        this.predicate.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Deletion;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Deletion;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\IndexClause;bufferForStart_key();;;public ByteBuffer bufferForStart_key() {
    return start_key;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\IndexClause;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // EXPRESSIONS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
              this.expressions = new ArrayList<IndexExpression>(_list12.size);
              for (int _i13 = 0; _i13 < _list12.size; ++_i13)
              {
                IndexExpression _elem14;
                _elem14 = new IndexExpression();
                _elem14.read(iprot);
                this.expressions.add(_elem14);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // START_KEY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.start_key = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COUNT
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.count = iprot.readI32();
            setCountIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetCount()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\IndexClause;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.expressions != null) {
      oprot.writeFieldBegin(EXPRESSIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.expressions.size()));
        for (IndexExpression _iter15 : this.expressions)
        {
          _iter15.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.start_key != null) {
      oprot.writeFieldBegin(START_KEY_FIELD_DESC);
      oprot.writeBinary(this.start_key);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(COUNT_FIELD_DESC);
    oprot.writeI32(this.count);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\IndexClause;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\IndexClause;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\IndexExpression;bufferForColumn_name();;;public ByteBuffer bufferForColumn_name() {
    return column_name;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\IndexExpression;bufferForValue();;;public ByteBuffer bufferForValue() {
    return value;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\IndexExpression;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // COLUMN_NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.column_name = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // OP
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.op = IndexOperator.findByValue(iprot.readI32());
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // VALUE
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.value = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\IndexExpression;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.column_name != null) {
      oprot.writeFieldBegin(COLUMN_NAME_FIELD_DESC);
      oprot.writeBinary(this.column_name);
      oprot.writeFieldEnd();
    }
    if (this.op != null) {
      oprot.writeFieldBegin(OP_FIELD_DESC);
      oprot.writeI32(this.op.getValue());
      oprot.writeFieldEnd();
    }
    if (this.value != null) {
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeBinary(this.value);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\IndexExpression;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\IndexExpression;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\InvalidRequestException;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // WHY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.why = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\InvalidRequestException;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.why != null) {
      oprot.writeFieldBegin(WHY_FIELD_DESC);
      oprot.writeString(this.why);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\InvalidRequestException;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\InvalidRequestException;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KeyCount;bufferForKey();;;public ByteBuffer bufferForKey() {
    return key;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KeyCount;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // KEY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.key = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // COUNT
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.count = iprot.readI32();
            setCountIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetCount()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KeyCount;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.key != null) {
      oprot.writeFieldBegin(KEY_FIELD_DESC);
      oprot.writeBinary(this.key);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(COUNT_FIELD_DESC);
    oprot.writeI32(this.count);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KeyCount;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KeyCount;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KeyRange;bufferForStart_key();;;public ByteBuffer bufferForStart_key() {
    return start_key;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KeyRange;bufferForEnd_key();;;public ByteBuffer bufferForEnd_key() {
    return end_key;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KeyRange;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // START_KEY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.start_key = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // END_KEY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.end_key = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // START_TOKEN
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.start_token = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // END_TOKEN
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.end_token = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // COUNT
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.count = iprot.readI32();
            setCountIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetCount()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KeyRange;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.start_key != null) {
      if (isSetStart_key()) {
        oprot.writeFieldBegin(START_KEY_FIELD_DESC);
        oprot.writeBinary(this.start_key);
        oprot.writeFieldEnd();
      }
    }
    if (this.end_key != null) {
      if (isSetEnd_key()) {
        oprot.writeFieldBegin(END_KEY_FIELD_DESC);
        oprot.writeBinary(this.end_key);
        oprot.writeFieldEnd();
      }
    }
    if (this.start_token != null) {
      if (isSetStart_token()) {
        oprot.writeFieldBegin(START_TOKEN_FIELD_DESC);
        oprot.writeString(this.start_token);
        oprot.writeFieldEnd();
      }
    }
    if (this.end_token != null) {
      if (isSetEnd_token()) {
        oprot.writeFieldBegin(END_TOKEN_FIELD_DESC);
        oprot.writeString(this.end_token);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldBegin(COUNT_FIELD_DESC);
    oprot.writeI32(this.count);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KeyRange;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KeyRange;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KeySlice;bufferForKey();;;public ByteBuffer bufferForKey() {
    return key;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KeySlice;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // KEY
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.key = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // COLUMNS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
              this.columns = new ArrayList<ColumnOrSuperColumn>(_list16.size);
              for (int _i17 = 0; _i17 < _list16.size; ++_i17)
              {
                ColumnOrSuperColumn _elem18;
                _elem18 = new ColumnOrSuperColumn();
                _elem18.read(iprot);
                this.columns.add(_elem18);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KeySlice;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.key != null) {
      oprot.writeFieldBegin(KEY_FIELD_DESC);
      oprot.writeBinary(this.key);
      oprot.writeFieldEnd();
    }
    if (this.columns != null) {
      oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.columns.size()));
        for (ColumnOrSuperColumn _iter19 : this.columns)
        {
          _iter19.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KeySlice;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KeySlice;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KsDef;KsDef(String,String,List<CfDef>);;;public KsDef(
    String name,
    String strategy_class,
    List<CfDef> cf_defs)
  {
    this();
    this.name = name;
    this.strategy_class = strategy_class;
    this.cf_defs = cf_defs;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KsDef;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STRATEGY_CLASS
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.strategy_class = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // STRATEGY_OPTIONS
          if (field.type == org.apache.thrift.protocol.TType.MAP) {
            {
              org.apache.thrift.protocol.TMap _map33 = iprot.readMapBegin();
              this.strategy_options = new HashMap<String,String>(2*_map33.size);
              for (int _i34 = 0; _i34 < _map33.size; ++_i34)
              {
                String _key35;
                String _val36;
                _key35 = iprot.readString();
                _val36 = iprot.readString();
                this.strategy_options.put(_key35, _val36);
              }
              iprot.readMapEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // REPLICATION_FACTOR
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.replication_factor = iprot.readI32();
            setReplication_factorIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CF_DEFS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
              this.cf_defs = new ArrayList<CfDef>(_list37.size);
              for (int _i38 = 0; _i38 < _list37.size; ++_i38)
              {
                CfDef _elem39;
                _elem39 = new CfDef();
                _elem39.read(iprot);
                this.cf_defs.add(_elem39);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KsDef;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.strategy_class != null) {
      oprot.writeFieldBegin(STRATEGY_CLASS_FIELD_DESC);
      oprot.writeString(this.strategy_class);
      oprot.writeFieldEnd();
    }
    if (this.strategy_options != null) {
      if (isSetStrategy_options()) {
        oprot.writeFieldBegin(STRATEGY_OPTIONS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, this.strategy_options.size()));
          for (Map.Entry<String, String> _iter40 : this.strategy_options.entrySet())
          {
            oprot.writeString(_iter40.getKey());
            oprot.writeString(_iter40.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (isSetReplication_factor()) {
      oprot.writeFieldBegin(REPLICATION_FACTOR_FIELD_DESC);
      oprot.writeI32(this.replication_factor);
      oprot.writeFieldEnd();
    }
    if (this.cf_defs != null) {
      oprot.writeFieldBegin(CF_DEFS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.cf_defs.size()));
        for (CfDef _iter41 : this.cf_defs)
        {
          _iter41.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KsDef;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\KsDef;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Mutation;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // COLUMN_OR_SUPERCOLUMN
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.column_or_supercolumn = new ColumnOrSuperColumn();
            this.column_or_supercolumn.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // DELETION
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.deletion = new Deletion();
            this.deletion.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Mutation;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.column_or_supercolumn != null) {
      if (isSetColumn_or_supercolumn()) {
        oprot.writeFieldBegin(COLUMN_OR_SUPERCOLUMN_FIELD_DESC);
        this.column_or_supercolumn.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    if (this.deletion != null) {
      if (isSetDeletion()) {
        oprot.writeFieldBegin(DELETION_FIELD_DESC);
        this.deletion.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Mutation;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\Mutation;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\NotFoundException;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\NotFoundException;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\NotFoundException;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\NotFoundException;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;findByThriftId(int);;;public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        default:
          return null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;findByThriftIdOrThrow(int);;;public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;findByName(String);;;public static _Fields findByName(String name) {
      return byName.get(name);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;_Fields(short,String);;;_Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;getThriftFieldId();;;public short getThriftFieldId() {
      return _thriftId;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;getFieldName();;;public String getFieldName() {
      return _fieldName;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;SchemaDisagreementException();;;public SchemaDisagreementException() {
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;SchemaDisagreementException(SchemaDisagreementException);;;public SchemaDisagreementException(SchemaDisagreementException other) {
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;deepCopy();;;public SchemaDisagreementException deepCopy() {
    return new SchemaDisagreementException(this);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;clear();;;@Override
  public void clear() {
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;setFieldValue(_Fields,Object);;;public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;getFieldValue(_Fields);;;public Object getFieldValue(_Fields field) {
    switch (field) {
    }
    throw new IllegalStateException();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;isSet(_Fields);;;public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    }
    throw new IllegalStateException();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;equals(Object);;;@Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SchemaDisagreementException)
      return this.equals((SchemaDisagreementException)that);
    return false;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;equals(SchemaDisagreementException);;;public boolean equals(SchemaDisagreementException that) {
    if (that == null)
      return false;

    return true;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;hashCode();;;@Override
  public int hashCode() {
    HashCodeBuilder builder = new HashCodeBuilder();

    return builder.toHashCode();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;compareTo(SchemaDisagreementException);;;public int compareTo(SchemaDisagreementException other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SchemaDisagreementException typedOther = (SchemaDisagreementException)other;

    return 0;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;fieldForId(int);;;public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;toString();;;@Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SchemaDisagreementException(");
    boolean first = true;

    sb.append(")");
    return sb.toString();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;validate();;;public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SchemaDisagreementException;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SlicePredicate;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // COLUMN_NAMES
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
              this.column_names = new ArrayList<ByteBuffer>(_list8.size);
              for (int _i9 = 0; _i9 < _list8.size; ++_i9)
              {
                ByteBuffer _elem10;
                _elem10 = iprot.readBinary();
                this.column_names.add(_elem10);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SLICE_RANGE
          if (field.type == org.apache.thrift.protocol.TType.STRUCT) {
            this.slice_range = new SliceRange();
            this.slice_range.read(iprot);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SlicePredicate;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.column_names != null) {
      if (isSetColumn_names()) {
        oprot.writeFieldBegin(COLUMN_NAMES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.column_names.size()));
          for (ByteBuffer _iter11 : this.column_names)
          {
            oprot.writeBinary(_iter11);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.slice_range != null) {
      if (isSetSlice_range()) {
        oprot.writeFieldBegin(SLICE_RANGE_FIELD_DESC);
        this.slice_range.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SlicePredicate;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SlicePredicate;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SliceRange;bufferForStart();;;public ByteBuffer bufferForStart() {
    return start;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SliceRange;bufferForFinish();;;public ByteBuffer bufferForFinish() {
    return finish;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SliceRange;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // START
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.start = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FINISH
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.finish = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // REVERSED
          if (field.type == org.apache.thrift.protocol.TType.BOOL) {
            this.reversed = iprot.readBool();
            setReversedIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // COUNT
          if (field.type == org.apache.thrift.protocol.TType.I32) {
            this.count = iprot.readI32();
            setCountIsSet(true);
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    if (!isSetReversed()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'reversed' was not found in serialized data! Struct: " + toString());
    }
    if (!isSetCount()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'count' was not found in serialized data! Struct: " + toString());
    }
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SliceRange;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.start != null) {
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeBinary(this.start);
      oprot.writeFieldEnd();
    }
    if (this.finish != null) {
      oprot.writeFieldBegin(FINISH_FIELD_DESC);
      oprot.writeBinary(this.finish);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(REVERSED_FIELD_DESC);
    oprot.writeBool(this.reversed);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(COUNT_FIELD_DESC);
    oprot.writeI32(this.count);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SliceRange;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SliceRange;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SuperColumn;bufferForName();;;public ByteBuffer bufferForName() {
    return name;
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SuperColumn;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // NAME
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.name = iprot.readBinary();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // COLUMNS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
              this.columns = new ArrayList<Column>(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                Column _elem2;
                _elem2 = new Column();
                _elem2.read(iprot);
                this.columns.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SuperColumn;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeBinary(this.name);
      oprot.writeFieldEnd();
    }
    if (this.columns != null) {
      oprot.writeFieldBegin(COLUMNS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, this.columns.size()));
        for (Column _iter3 : this.columns)
        {
          _iter3.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SuperColumn;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\SuperColumn;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\TimedOutException;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\TimedOutException;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\TimedOutException;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\TimedOutException;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\TokenRange;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // START_TOKEN
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.start_token = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // END_TOKEN
          if (field.type == org.apache.thrift.protocol.TType.STRING) {
            this.end_token = iprot.readString();
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ENDPOINTS
          if (field.type == org.apache.thrift.protocol.TType.LIST) {
            {
              org.apache.thrift.protocol.TList _list20 = iprot.readListBegin();
              this.endpoints = new ArrayList<String>(_list20.size);
              for (int _i21 = 0; _i21 < _list20.size; ++_i21)
              {
                String _elem22;
                _elem22 = iprot.readString();
                this.endpoints.add(_elem22);
              }
              iprot.readListEnd();
            }
          } else { 
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\TokenRange;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.start_token != null) {
      oprot.writeFieldBegin(START_TOKEN_FIELD_DESC);
      oprot.writeString(this.start_token);
      oprot.writeFieldEnd();
    }
    if (this.end_token != null) {
      oprot.writeFieldBegin(END_TOKEN_FIELD_DESC);
      oprot.writeString(this.end_token);
      oprot.writeFieldEnd();
    }
    if (this.endpoints != null) {
      oprot.writeFieldBegin(ENDPOINTS_FIELD_DESC);
      {
        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, this.endpoints.size()));
        for (String _iter23 : this.endpoints)
        {
          oprot.writeString(_iter23);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\TokenRange;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\TokenRange;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\UnavailableException;read(org.apache.thrift.protocol.TProtocol);;;public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    org.apache.thrift.protocol.TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == org.apache.thrift.protocol.TType.STOP) { 
        break;
      }
      switch (field.id) {
        default:
          org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\UnavailableException;write(org.apache.thrift.protocol.TProtocol);;;public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\UnavailableException;writeObject(java.io.ObjectOutputStream);;;private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\interface\thrift\gen-java\org\apache\cassandra\thrift\UnavailableException;readObject(java.io.ObjectInputStream);;;private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingCache;AutoSavingCache(ICache<K,V>,String,String,ColumnFamilyStore.CacheType);;;public AutoSavingCache(ICache<K, V> cache, String tableName, String cfName, ColumnFamilyStore.CacheType cacheType)
    {
        super(cache, tableName, cfName + cacheType);
        this.tableName = tableName;
        this.cfName = cfName;
        this.cacheType = cacheType;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingCache;translateKey(K);;;public abstract ByteBuffer translateKey(K key);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingCache;getConfiguredCacheSize(CFMetaData);;;public abstract double getConfiguredCacheSize(CFMetaData cfm);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingCache;getAdjustedCacheSize(long);;;public int getAdjustedCacheSize(long expectedKeys)
    {
        CFMetaData cfm = DatabaseDescriptor.getCFMetaData(tableName, cfName);
        return (int)Math.min(FBUtilities.absoluteFromFraction(getConfiguredCacheSize(cfm), expectedKeys), Integer.MAX_VALUE);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingCache;getCachePath();;;public File getCachePath()
    {
        return DatabaseDescriptor.getSerializedCachePath(tableName, cfName, cacheType);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingCache;getWriter();;;public Writer getWriter()
    {
        return new Writer(tableName, cfName);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingCache;scheduleSaving(int);;;public void scheduleSaving(int savePeriodInSeconds)
    {
        if (saveTask != null)
        {
            saveTask.cancel(false); // Do not interrupt an in-progress save
            saveTask = null;
        }
        if (savePeriodInSeconds > 0)
        {
            Runnable runnable = new WrappedRunnable()
            {
                public void runMayThrow()
                {
                    submitWrite();
                }
            };
            saveTask = StorageService.tasks.scheduleWithFixedDelay(runnable,
                                                                   savePeriodInSeconds,
                                                                   savePeriodInSeconds,
                                                                   TimeUnit.SECONDS);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingCache;submitWrite();;;public Future<?> submitWrite()
    {
        return CompactionManager.instance.submitCacheWrite(getWriter());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingCache;readSaved();;;public Set<DecoratedKey> readSaved()
    {
        File path = getCachePath();
        Set<DecoratedKey> keys = new TreeSet<DecoratedKey>();
        if (path.exists())
        {
            DataInputStream in = null;
            try
            {
                long start = System.currentTimeMillis();

                logger.info(String.format("reading saved cache %s", path));
                in = new DataInputStream(new BufferedInputStream(new FileInputStream(path)));
                while (in.available() > 0)
                {
                    int size = in.readInt();
                    byte[] bytes = new byte[size];
                    in.readFully(bytes);
                    ByteBuffer buffer = ByteBuffer.wrap(bytes);
                    DecoratedKey key;
                    try
                    {
                        key = StorageService.getPartitioner().decorateKey(buffer);
                    }
                    catch (Exception e)
                    {
                        logger.info(String.format("unable to read entry #%s from saved cache %s; skipping remaining entries",
                                                  keys.size(), path.getAbsolutePath()), e);
                        break;
                    }
                    keys.add(key);
                }
                if (logger.isDebugEnabled())
                    logger.debug(String.format("completed reading (%d ms; %d keys) saved cache %s",
                                               System.currentTimeMillis() - start, keys.size(), path));
            }
            catch (IOException ioe)
            {
                logger.warn(String.format("error reading saved cache %s", path.getAbsolutePath()), ioe);
            }
            finally
            {
                FileUtils.closeQuietly(in);
            }
        }
        return keys;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingCache;updateCacheSize(long);;;public void updateCacheSize(long keys)
    {
        if (!isCapacitySetManually())
        {
            int cacheSize = getAdjustedCacheSize(keys);
            if (cacheSize != getCapacity())
            {
                // update cache size for the new volume
                if (logger.isDebugEnabled())
                    logger.debug(cacheType + " capacity for " + cfName + " is " + cacheSize);
                updateCapacity(cacheSize);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingCache;reduceCacheSize();;;public void reduceCacheSize()
    {
        if (getCapacity() > 0)
        {
            int newCapacity = (int) (DatabaseDescriptor.getReduceCacheCapacityTo() * size());
            logger.warn(String.format("Reducing %s %s capacity from %d to %s to reduce memory pressure",
                                      cfName, cacheType, getCapacity(), newCapacity));
            setCapacity(newCapacity);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingCache;Writer(String,String);;;private Writer(String ksname, String cfname)
        {
            keys = getKeySet();
            long bytes = 0;
            for (K key : keys)
                bytes += translateKey(key).remaining();
            // an approximation -- the keyset can change while saving
            estimatedTotalBytes = bytes;
            CompactionType type;

            if (cacheType.equals(ColumnFamilyStore.CacheType.KEY_CACHE_TYPE)) 
                type = CompactionType.KEY_CACHE_SAVE;
            else if (cacheType.equals(ColumnFamilyStore.CacheType.ROW_CACHE_TYPE))
                type = CompactionType.ROW_CACHE_SAVE;
            else
                type = CompactionType.UNKNOWN;

            info = new CompactionInfo(ksname,
                                      cfname,
                                      type,
                                      0,
                                      estimatedTotalBytes);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingCache;getCompactionInfo();;;public CompactionInfo getCompactionInfo()
        {
            long bytesWritten = this.bytesWritten;
            // keyset can change in size, thus totalBytes can too
            return info.forProgress(bytesWritten,
                                    Math.max(bytesWritten, estimatedTotalBytes));
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingCache;saveCache();;;public void saveCache() throws IOException
        {
            long start = System.currentTimeMillis();
            File path = getCachePath();

            if (keys.size() == 0 || estimatedTotalBytes == 0)
            {
                logger.debug("Deleting {} (cache is empty)");
                path.delete();
                return;
            }

            logger.debug("Saving {}", path);
            File tmpFile = File.createTempFile(path.getName(), null, path.getParentFile());

            BufferedRandomAccessFile out = new BufferedRandomAccessFile(tmpFile, "rw", BufferedRandomAccessFile.DEFAULT_BUFFER_SIZE, true);
            try
            {
                for (K key : keys)
                {
                    ByteBuffer bytes = translateKey(key);
                    ByteBufferUtil.writeWithLength(bytes, out);
                    bytesWritten += bytes.remaining();
                }
            }
            finally
            {
                out.close();
            }

            path.delete(); // ignore error if it didn't exist
            if (!tmpFile.renameTo(path))
                throw new IOException("Unable to rename " + tmpFile + " to " + path);
            logger.info(String.format("Saved %s (%d items) in %d ms",
                        path.getName(), keys.size(), (System.currentTimeMillis() - start)));
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingKeyCache;AutoSavingKeyCache(ICache<K,V>,String,String);;;public AutoSavingKeyCache(ICache<K, V> cache, String tableName, String cfName)
    {
        super(cache, tableName, cfName, ColumnFamilyStore.CacheType.KEY_CACHE_TYPE);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingKeyCache;getConfiguredCacheSize(CFMetaData);;;@Override
    public double getConfiguredCacheSize(CFMetaData cfm)
    {
        return cfm == null ? CFMetaData.DEFAULT_KEY_CACHE_SIZE : cfm.getKeyCacheSize();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingKeyCache;translateKey(K);;;@Override
    public ByteBuffer translateKey(K key)
    {
        return key.right.key;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingRowCache;AutoSavingRowCache(ICache<K,V>,String,String);;;public AutoSavingRowCache(ICache<K, V> cache, String tableName, String cfName)
    {
        super(cache, tableName, cfName, ColumnFamilyStore.CacheType.ROW_CACHE_TYPE);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingRowCache;getConfiguredCacheSize(CFMetaData);;;@Override
    public double getConfiguredCacheSize(CFMetaData cfm)
    {
        return cfm == null ? CFMetaData.DEFAULT_ROW_CACHE_SIZE : cfm.getRowCacheSize();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\AutoSavingRowCache;translateKey(K);;;@Override
    public ByteBuffer translateKey(K key)
    {
        return key.key;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ConcurrentLinkedHashCache;ConcurrentLinkedHashCache(ConcurrentLinkedHashMap<K,V>);;;public ConcurrentLinkedHashCache(ConcurrentLinkedHashMap<K, V> map)
    {
        this.map = map;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ConcurrentLinkedHashCache;create(int);;;public static <K, V> ConcurrentLinkedHashCache<K, V> create(int capacity)
    {
        ConcurrentLinkedHashMap<K, V> map = new ConcurrentLinkedHashMap.Builder<K, V>()
                                            .weigher(Weighers.<V>singleton())
                                            .initialCapacity(capacity)
                                            .maximumWeightedCapacity(capacity)
                                            .concurrencyLevel(DEFAULT_CONCURENCY_LEVEL)
                                            .build();
        return new ConcurrentLinkedHashCache<K, V>(map);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ConcurrentLinkedHashCache;capacity();;;public int capacity()
    {
        return map.capacity();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ConcurrentLinkedHashCache;setCapacity(int);;;public void setCapacity(int capacity)
    {
        map.setCapacity(capacity);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ConcurrentLinkedHashCache;isEmpty();;;public boolean isEmpty()
    {
        return map.isEmpty();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ConcurrentLinkedHashCache;size();;;public int size()
    {
        return map.size();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ConcurrentLinkedHashCache;clear();;;public void clear()
    {
        map.clear();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ConcurrentLinkedHashCache;get(K);;;public V get(K key)
    {
        return map.get(key);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ConcurrentLinkedHashCache;put(K,V);;;public void put(K key, V value)
    {
        map.put(key, value);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ConcurrentLinkedHashCache;remove(K);;;public void remove(K key)
    {
        map.remove(key);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ConcurrentLinkedHashCache;keySet();;;public Set<K> keySet()
    {
        return map.keySet();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ConcurrentLinkedHashCache;isPutCopying();;;public boolean isPutCopying()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ConcurrentLinkedHashCacheProvider;create(int);;;public ICache<DecoratedKey, ColumnFamily> create(int capacity)
    {
        return ConcurrentLinkedHashCache.create(capacity);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\FreeableMemory;FreeableMemory(long);;;public FreeableMemory(long size)
    {
        super(size);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\FreeableMemory;free();;;public void free()
    {
        assert peer != 0;
        super.finalize(); // calls free and sets peer to zero
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\FreeableMemory;finalize();;;@Override
    protected void finalize()
    {
        if (peer != 0)
            super.finalize();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\FreeableMemory;getValidByte(long);;;public byte getValidByte(long offset)
    {
        assert peer != 0;
        return super.getByte(offset);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ICache;capacity();;;public int capacity();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ICache;setCapacity(int);;;public void setCapacity(int capacity);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ICache;put(K,V);;;public void put(K key, V value);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ICache;get(K);;;public V get(K key);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ICache;remove(K);;;public void remove(K key);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ICache;size();;;public int size();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ICache;clear();;;public void clear();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ICache;keySet();;;public Set<K> keySet();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\ICache;isPutCopying();;;public boolean isPutCopying();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCache;InstrumentingCache(ICache<K,V>,String,String);;;public InstrumentingCache(ICache<K, V> map, String table, String name)
    {
        this.map = map;
        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();
        try
        {
            ObjectName mbeanName = new ObjectName("org.apache.cassandra.db:type=Caches,keyspace=" + table + ",cache=" + name);
            // unregister any previous, as this may be a replacement.
            if (mbs.isRegistered(mbeanName))
                mbs.unregisterMBean(mbeanName);
            mbs.registerMBean(this, mbeanName);
        }
        catch (Exception e)
        {
            throw new RuntimeException(e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCache;put(K,V);;;public void put(K key, V value)
    {
        map.put(key, value);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCache;get(K);;;public V get(K key)
    {
        V v = map.get(key);
        requests.incrementAndGet();
        if (v != null)
            hits.incrementAndGet();
        return v;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCache;getInternal(K);;;public V getInternal(K key)
    {
        return map.get(key);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCache;remove(K);;;public void remove(K key)
    {
        map.remove(key);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCache;getCapacity();;;public int getCapacity()
    {
        return map.capacity();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCache;isCapacitySetManually();;;public boolean isCapacitySetManually()
    {
        return capacitySetManually;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCache;updateCapacity(int);;;public void updateCapacity(int capacity)
    {
        map.setCapacity(capacity);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCache;setCapacity(int);;;public void setCapacity(int capacity)
    {
        updateCapacity(capacity);
        capacitySetManually = true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCache;size();;;public int size()
    {
        return map.size();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCache;getHits();;;public long getHits()
    {
        return hits.get();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCache;getRequests();;;public long getRequests()
    {
        return requests.get();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCache;getRecentHitRate();;;public double getRecentHitRate()
    {
        long r = requests.get();
        long h = hits.get();
        try
        {
            return ((double)(h - lastHits.get())) / (r - lastRequests.get());
        }
        finally
        {
            lastRequests.set(r);
            lastHits.set(h);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCache;clear();;;public void clear()
    {
        map.clear();
        requests.set(0);
        hits.set(0);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCache;getKeySet();;;public Set<K> getKeySet()
    {
        return map.keySet();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCache;isPutCopying();;;public boolean isPutCopying()
    {
        return map.isPutCopying();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCacheMBean;getCapacity();;;public int getCapacity();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCacheMBean;setCapacity(int);;;public void setCapacity(int capacity);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCacheMBean;size();;;public int size();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCacheMBean;getRequests();;;public long getRequests();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCacheMBean;getHits();;;public long getHits();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\InstrumentingCacheMBean;getRecentHitRate();;;public double getRecentHitRate();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\IRowCacheProvider;create(int);;;public ICache<DecoratedKey, ColumnFamily> create(int capacity);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\SerializingCache;SerializingCache(int,ICompactSerializer3<V>);;;public SerializingCache(int capacity, ICompactSerializer3<V> serializer)
    {
        this.serializer = serializer;

        EvictionListener<K,FreeableMemory> listener = new EvictionListener<K, FreeableMemory>()
        {
            public void onEviction(K k, FreeableMemory mem)
            {
                mem.free();
            }
        };
        this.map = new ConcurrentLinkedHashMap.Builder<K, FreeableMemory>()
                   .weigher(Weighers.<FreeableMemory>singleton())
                   .initialCapacity(capacity)
                   .maximumWeightedCapacity(capacity)
                   .concurrencyLevel(DEFAULT_CONCURENCY_LEVEL)
                   .listener(listener)
                   .build();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\SerializingCache;deserialize(FreeableMemory);;;private V deserialize(FreeableMemory mem)
    {
        try
        {
            return serializer.deserialize(new MemoryInputStream(mem));
        }
        catch (IOException e)
        {
            logger.debug("Cannot fetch in memory data, we will failback to read from disk ", e);
            return null;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\SerializingCache;serialize(V);;;private FreeableMemory serialize(V value)
    {
        long serializedSize = serializer.serializedSize(value);
        if (serializedSize > Integer.MAX_VALUE)
            throw new IllegalArgumentException("Unable to allocate " + serializedSize + " bytes");

        FreeableMemory freeableMemory;
        try
        {
            freeableMemory = new FreeableMemory(serializedSize);
        }
        catch (OutOfMemoryError e)
        {
            return null;
        }

        try
        {
            serializer.serialize(value, new DataOutputStream(new MemoryOutputStream(freeableMemory)));
        }
        catch (IOException e)
        {
            throw new IOError(e);
        }
        return freeableMemory;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\SerializingCache;capacity();;;public int capacity()
    {
        return map.capacity();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\SerializingCache;setCapacity(int);;;public void setCapacity(int capacity)
    {
        map.setCapacity(capacity);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\SerializingCache;isEmpty();;;public boolean isEmpty()
    {
        return map.isEmpty();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\SerializingCache;size();;;public int size()
    {
        return map.size();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\SerializingCache;clear();;;public void clear()
    {
        map.clear();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\SerializingCache;get(Object);;;public V get(Object key)
    {
        FreeableMemory mem = map.get(key);
        if (mem == null)
            return null;
        return deserialize(mem);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\SerializingCache;put(K,V);;;public void put(K key, V value)
    {
        FreeableMemory mem = serialize(value);
        if (mem == null)
            return; // out of memory.  never mind.

        FreeableMemory old = map.put(key, mem);
        if (old != null)
            old.free();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\SerializingCache;remove(K);;;public void remove(K key)
    {
        FreeableMemory mem = map.remove(key);
        if (mem != null)
            mem.free();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\SerializingCache;keySet();;;public Set<K> keySet()
    {
        return map.keySet();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\SerializingCache;isPutCopying();;;public boolean isPutCopying()
    {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\SerializingCacheProvider;SerializingCacheProvider();;;public SerializingCacheProvider() throws ConfigurationException
    {
        try
        {
            Memory.class.getName();
        }
        catch (NoClassDefFoundError e)
        {
            throw new ConfigurationException("Cannot intialize SerializationCache without JNA in the class path");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cache\SerializingCacheProvider;create(int);;;public ICache<DecoratedKey, ColumnFamily> create(int capacity)
    {
        return new SerializingCache<DecoratedKey, ColumnFamily>(capacity, ColumnFamily.serializer());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;CliClient(CliSessionState,Cassandra.Client);;;        help = getHelp();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;getHelp();;;private CliUserHelp getHelp()
    {
        final InputStream is =  CliClient.class.getClassLoader().getResourceAsStream("org/apache/cassandra/cli/CliHelp.yaml");
        assert is != null;

        try
        {
            final Constructor constructor = new Constructor(CliUserHelp.class);
            TypeDescription desc = new TypeDescription(CliUserHelp.class);
            desc.putListPropertyType("commands", CliCommandHelp.class);
            final Yaml yaml = new Yaml(new Loader(constructor));
            return (CliUserHelp)yaml.load(is);
        }
        finally
        {
            try
            {
                is.close();
            }
            catch (IOException e)
            {
                throw new IOError(e);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;printBanner();;;public void printBanner()
    {
        sessionState.out.println(help.banner);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;executeCLIStatement(String);;;                case CliParser.NODE_THRIFT_INCR:
                    executeIncr(tree, 1L);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;executeCLIStatement(String);;;                case CliParser.NODE_THRIFT_DECR:
                    executeIncr(tree, -1L);
                    break;
                case CliParser.NODE_DROP_INDEX:
                    executeDropIndex(tree);
                    break;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;executeCLIStatement(String);;;        catch (SchemaDisagreementException e)
        {
            throw new RuntimeException("schema does not match across nodes, (try again later).");
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;executeHelp(Tree);;;private void executeHelp(Tree tree)
    {
        if (tree.getChildCount() > 0)
        {
            String token = tree.getChild(0).getText();
            for (CliCommandHelp ch : help.commands)
            {
                if (token.equals(ch.name))
                {
                    sessionState.out.println(ch.help);
                    break;
                }
            }
        }
        else
        {
            sessionState.out.println(help.help);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;doSlice(String,ByteBuffer,String,byte[],int);;;        List<ColumnOrSuperColumn> columns = thriftClient.get_slice(key, parent, predicate, consistencyLevel);
        AbstractType validator;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;doSlice(String,ByteBuffer,String,byte[],int);;;            else if (cosc.isSetCounter_super_column())
            {
                CounterSuperColumn superColumn = cosc.counter_super_column;

                sessionState.out.printf("=> (super_column=%s,", formatColumnName(keyspace, columnFamily, superColumn.name));
                for (CounterColumn col : superColumn.getColumns())
                {
                    sessionState.out.printf("%n     (counter=%s, value=%s)", formatSubcolumnName(keyspace, columnFamily, col.name), col.value);
                }
                sessionState.out.println(")");
            }
            else // cosc.isSetCounter_column()
            {
                CounterColumn column = cosc.counter_column;
                String formattedName = isSuperCF
                                       ? formatSubcolumnName(keyspace, columnFamily, column.name)
                                       : formatColumnName(keyspace, columnFamily, column.name);

                sessionState.out.printf("=> (counter=%s, value=%s)%n", formattedName, column.value);
            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;getFormatType(String);;;private AbstractType getFormatType(String compareWith)
    {
        Function function;
        
        try
        {
            function = Function.valueOf(compareWith.toUpperCase());
        }
        catch (IllegalArgumentException e)
        {
            try
            {
                return FBUtilities.getComparator(compareWith);
            }
            catch (ConfigurationException ce)
            {
                StringBuilder errorMessage = new StringBuilder("Unknown comparator '" + compareWith + "'. ");
                errorMessage.append("Available functions: ");
                throw new RuntimeException(errorMessage.append(Function.getFunctionNames()).toString());
            }
        }

        return function.getValidator();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;executeGet(Tree);;;
        if (isCounterCF(cfDef))
        {
            doGetCounter(key, path);
            return;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;doGetCounter(ByteBuffer,ColumnPath);;;private void doGetCounter(ByteBuffer key, ColumnPath path)
            throws TException, NotFoundException, InvalidRequestException, UnavailableException, TimedOutException, IllegalAccessException, InstantiationException, ClassNotFoundException, NoSuchFieldException
    {
        boolean isSuper = path.super_column != null;

        CounterColumn column;
        try
        {
            column = thriftClient.get(key, path, consistencyLevel).counter_column;
        }
        catch (NotFoundException e)
        {
            sessionState.out.println("Value was not found");
            return;
        }

        String formattedColumnName = isSuper
                                     ? formatSubcolumnName(keySpace, path.column_family, column.name)
                                     : formatColumnName(keySpace, path.column_family, column.name);

        // print results
        sessionState.out.printf("=> (counter=%s, value=%d)%n",
                                formattedColumnName,
                                column.value);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;executeIncr(Tree,long);;;private void executeIncr(Tree statement, long multiplier)
            throws TException, NotFoundException, InvalidRequestException, UnavailableException, TimedOutException, IllegalAccessException, InstantiationException, ClassNotFoundException, NoSuchFieldException
    {
        if (!CliMain.isConnected() || !hasKeySpace())
            return;

        Tree columnFamilySpec = statement.getChild(0);

        String columnFamily = CliCompiler.getColumnFamily(columnFamilySpec, keyspacesMap.get(keySpace).cf_defs);
        ByteBuffer key = getKeyAsBytes(columnFamily, columnFamilySpec.getChild(1));
        int columnSpecCnt = CliCompiler.numColumnSpecifiers(columnFamilySpec);
        CfDef cfDef = getCfDef(columnFamily);
        boolean isSuper = cfDef.column_type.equals("Super");
        
        byte[] superColumnName = null;
        ByteBuffer columnName;

        // table.cf['key']['column'] -- incr standard
        if (columnSpecCnt == 1)
        {
            columnName = getColumnName(columnFamily, columnFamilySpec.getChild(2));
        }
        // table.cf['key']['column']['column'] -- incr super
        else if (columnSpecCnt == 2)
        {
            superColumnName = getColumnName(columnFamily, columnFamilySpec.getChild(2)).array();
            columnName = getSubColumnName(columnFamily, columnFamilySpec.getChild(3));
        }
        // The parser groks an arbitrary number of these so it is possible to get here.
        else
        {
            sessionState.out.println("Invalid row, super column, or column specification.");
            return;
        }

        ColumnParent parent = new ColumnParent(columnFamily);
        if(superColumnName != null)
            parent.setSuper_column(superColumnName);

        long value = 1L;

        // children count = 3 mean that we have by in arguments
        if (statement.getChildCount() == 2)
        {
            String byValue = statement.getChild(1).getText();

            try
            {
                value = Long.parseLong(byValue);
            }
            catch (NumberFormatException e)
            {
                sessionState.err.println(String.format("'%s' is an invalid value, should be an integer.", byValue));
                return;
            }
            catch (Exception e)
            {
                throw new RuntimeException(e.getMessage());
            }
        }

        CounterColumn columnToInsert = new CounterColumn(columnName, multiplier * value);

        // do the insert
        thriftClient.add(key, parent, columnToInsert, consistencyLevel);
        sessionState.out.printf("Value %s%n", multiplier < 0 ? "decremented." : "incremented.");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;updateKsDefAttributes(Tree,KsDef);;;        // using default snitch options if strategy is NetworkTopologyStrategy and no options were set.
        if (ksDef.getStrategy_class().contains(".NetworkTopologyStrategy"))
        {
            Map<String, String> currentStrategyOptions = ksDef.getStrategy_options();

            // adding default data center from SimpleSnitch
            if (currentStrategyOptions == null || currentStrategyOptions.isEmpty())
            {
                SimpleSnitch snitch = new SimpleSnitch();
                Map<String, String> options = new HashMap<String, String>();

                try
                {
                    options.put(snitch.getDatacenter(InetAddress.getLocalHost()), "1");
                }
                catch (UnknownHostException e)
                {
                    throw new RuntimeException(e.getMessage());
                }

                ksDef.setStrategy_options(options);
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;updateCfDefAttributes(Tree,CfDef);;;            case REPLICATE_ON_WRITE:
                cfDef.setReplicate_on_write(Boolean.parseBoolean(mValue));
                break;
            case ROW_CACHE_PROVIDER:
                cfDef.setRow_cache_provider(mValue);
                break;
            case KEY_VALIDATION_CLASS:
                cfDef.setKey_validation_class(CliUtils.unescapeSQLString(mValue));
                break;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;executeDropIndex(Tree);;;private void executeDropIndex(Tree statement)
    {
        if (!CliMain.isConnected() || !hasKeySpace())
            return;

        // getColumnFamily will check if CF exists for us
        String columnFamily = CliCompiler.getColumnFamily(statement, keyspacesMap.get(keySpace).cf_defs);
        String rawColumName = statement.getChild(1).getText();

        CfDef cfDef = getCfDef(columnFamily);

        ByteBuffer columnName = columnNameAsBytes(rawColumName, cfDef);

        boolean foundColumn = false;

        for (ColumnDef column : cfDef.getColumn_metadata())
        {
            if (column.name.equals(columnName))
            {
                foundColumn = true;

                if (column.getIndex_type() == null)
                    throw new RuntimeException(String.format("Column '%s' does not have an index.", rawColumName));

                column.setIndex_name(null);
                column.setIndex_type(null);
            }
        }

        if (!foundColumn)
            throw new RuntimeException(String.format("Column '%s' definition was not found in ColumnFamily '%s'.",
                                                     rawColumName,
                                                     columnFamily));

        try
        {
            String mySchemaVersion = thriftClient.system_update_column_family(cfDef);
            sessionState.out.println(mySchemaVersion);
            validateSchemaIsSettled(mySchemaVersion);
            keyspacesMap.put(keySpace, thriftClient.describe_keyspace(keySpace));
        }
        catch (InvalidRequestException e)
        {
            System.err.println(e.why);
        }
        catch (Exception e)
        {
            throw new RuntimeException(e.getMessage(), e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;executeAssumeStatement(Tree);;;        // making string representation look property e.g. o.a.c.db.marshal.UTF8Type
        defaultType = comparator.getClass().getName();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;describeKeySpace(String,KsDef);;;                if (cf_def.key_validation_class != null)
                    sessionState.out.printf("      Key Validation Class: %s%n", cf_def.key_validation_class);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;describeKeySpace(String,KsDef);;;                sessionState.out.printf("      Replicate on write: %s%n", cf_def.replicate_on_write);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;printSliceList(CfDef,List<KeySlice>);;;                else if (columnOrSuperColumn.counter_column != null)
                {
                    CounterColumn col = columnOrSuperColumn.counter_column;

                    sessionState.out.printf("=> (counter=%s, value=%s)%n", formatColumnName(keySpace, columnFamilyName, col.name), col.value);
                }
                else if (columnOrSuperColumn.counter_super_column != null)
                {
                    CounterSuperColumn superCol = columnOrSuperColumn.counter_super_column;
                    sessionState.out.printf("=> (super_column=%s,", formatColumnName(keySpace, columnFamilyName, superCol.name));

                    for (CounterColumn col : superCol.columns)
                    {
                        sessionState.out.printf("%n     (counter=%s, value=%s)", formatSubcolumnName(keySpace, columnFamilyName, col.name), col.value);
                    }

                    sessionState.out.println(")");
                }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;formatSubcolumnName(String,String,ByteBuffer);;;private String formatSubcolumnName(String keyspace, String columnFamily, ByteBuffer name)
            throws NotFoundException, TException, IllegalAccessException, InstantiationException, NoSuchFieldException
    {
        return getFormatType(getCfDef(keyspace, columnFamily).subcomparator_type).getString(name);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;formatColumnName(String,String,ByteBuffer);;;private String formatColumnName(String keyspace, String columnFamily, ByteBuffer name)
            throws NotFoundException, TException, IllegalAccessException, InstantiationException, NoSuchFieldException
    {
        return getFormatType(getCfDef(keyspace, columnFamily).comparator_type).getString(name);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;getKeyComparatorForCF(String);;;private AbstractType getKeyComparatorForCF(String columnFamily)
    {
        AbstractType keyComparator = cfKeysComparators.get(columnFamily);

        if (keyComparator == null)
        {
            String defaultValidationClass = getCfDef(columnFamily).getKey_validation_class();
            assert defaultValidationClass != null;
            keyComparator = getFormatType(defaultValidationClass);
        }

        return keyComparator;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cli\CliClient;isCounterCF(CfDef);;;private boolean isCounterCF(CfDef cfdef)
    {
        String defaultValidator = cfdef.default_validation_class;
        if (defaultValidator != null && !defaultValidator.isEmpty())
        {
            return (getFormatType(defaultValidator) instanceof CounterColumnType);
        }
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\client\RingCache;RingCache(String,IPartitioner<?>,String,int);;;public RingCache(String keyspace, IPartitioner<?> partitioner, String addresses, int port) throws IOException
    {
        for (String seed : addresses.split(","))
            seeds_.add(seed);
        this.port_ = port;
        this.keyspace = keyspace;
        this.partitioner_ = partitioner;
        refreshEndpointMap();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\concurrent\Stage;getJmxType();;;            case REPLICATE_ON_WRITE:
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;comment(String);;;public CFMetaData comment(String prop) { comment = enforceCommentNotNull(prop); return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;rowCacheSize(double);;;public CFMetaData rowCacheSize(double prop) {rowCacheSize = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;keyCacheSize(double);;;public CFMetaData keyCacheSize(double prop) {keyCacheSize = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;readRepairChance(double);;;public CFMetaData readRepairChance(double prop) {readRepairChance = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;replicateOnWrite(boolean);;;public CFMetaData replicateOnWrite(boolean prop) {replicateOnWrite = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;gcGraceSeconds(int);;;public CFMetaData gcGraceSeconds(int prop) {gcGraceSeconds = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;defaultValidator(AbstractType);;;public CFMetaData defaultValidator(AbstractType prop) {defaultValidator = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;keyValidator(AbstractType);;;public CFMetaData keyValidator(AbstractType prop) {keyValidator = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;minCompactionThreshold(int);;;public CFMetaData minCompactionThreshold(int prop) {minCompactionThreshold = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;maxCompactionThreshold(int);;;public CFMetaData maxCompactionThreshold(int prop) {maxCompactionThreshold = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;rowCacheSavePeriod(int);;;public CFMetaData rowCacheSavePeriod(int prop) {rowCacheSavePeriodInSeconds = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;keyCacheSavePeriod(int);;;public CFMetaData keyCacheSavePeriod(int prop) {keyCacheSavePeriodInSeconds = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;memTime(int);;;public CFMetaData memTime(int prop) {memtableFlushAfterMins = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;memSize(int);;;public CFMetaData memSize(int prop) {memtableThroughputInMb = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;memOps(double);;;public CFMetaData memOps(double prop) {memtableOperationsInMillions = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;mergeShardsChance(double);;;public CFMetaData mergeShardsChance(double prop) {mergeShardsChance = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;keyAlias(ByteBuffer);;;public CFMetaData keyAlias(ByteBuffer prop) {keyAlias = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;columnMetadata(Map<ByteBuffer,ColumnDefinition>);;;public CFMetaData columnMetadata(Map<ByteBuffer,ColumnDefinition> prop) {column_metadata = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;rowCacheProvider(IRowCacheProvider);;;public CFMetaData rowCacheProvider(IRowCacheProvider prop) { rowCacheProvider = prop; return this;}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;CFMetaData(String,String,ColumnFamilyType,AbstractType,AbstractType);;;public CFMetaData(String keyspace, String name, ColumnFamilyType type, AbstractType comp, AbstractType subcc)
    {
        this(keyspace, name, type, comp, subcc, nextId());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;CFMetaData(String,String,ColumnFamilyType,AbstractType,AbstractType,int);;;private CFMetaData(String keyspace, String name, ColumnFamilyType type, AbstractType comp, AbstractType subcc, int id)
    {
        // Final fields must be set in constructor
        ksName = keyspace;
        cfName = name;
        cfType = type;
        comparator = comp;
        subcolumnComparator = enforceSubccDefault(type, subcc);

        // System cfs have specific ids, and copies of old CFMDs need
        //  to copy over the old id.
        cfId = id;

        this.init();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;enforceSubccDefault(ColumnFamilyType,AbstractType);;;private AbstractType enforceSubccDefault(ColumnFamilyType cftype, AbstractType subcc)
    {
        return (subcc == null) && (cftype == ColumnFamilyType.Super) ? BytesType.instance : subcc;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;enforceCommentNotNull(CharSequence);;;private static String enforceCommentNotNull (CharSequence comment)
    {
        return (comment == null) ? "" : comment.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;init();;;private void init()
    {
        // Set a bunch of defaults
        rowCacheSize                 = DEFAULT_ROW_CACHE_SIZE;
        keyCacheSize                 = DEFAULT_KEY_CACHE_SIZE;
        readRepairChance             = DEFAULT_READ_REPAIR_CHANCE;
        replicateOnWrite             = DEFAULT_REPLICATE_ON_WRITE;
        gcGraceSeconds               = DEFAULT_GC_GRACE_SECONDS;
        minCompactionThreshold       = DEFAULT_MIN_COMPACTION_THRESHOLD;
        maxCompactionThreshold       = DEFAULT_MAX_COMPACTION_THRESHOLD;
        memtableFlushAfterMins       = DEFAULT_MEMTABLE_LIFETIME_IN_MINS;
        memtableThroughputInMb       = DEFAULT_MEMTABLE_THROUGHPUT_IN_MB;
        memtableOperationsInMillions = DEFAULT_MEMTABLE_OPERATIONS_IN_MILLIONS;
        mergeShardsChance            = DEFAULT_MERGE_SHARDS_CHANCE;
        try
        {
            rowCacheProvider             = FBUtilities.newCacheProvider(DEFAULT_ROW_CACHE_PROVIDER);
        }
        catch (ConfigurationException e)
        {
            throw new AssertionError(e); // the default provider should not error out
        }

        // Defaults strange or simple enough to not need a DEFAULT_T for
        defaultValidator = BytesType.instance;
        keyValidator = BytesType.instance;
        comment = "";
        keyAlias = null; // This qualifies as a 'strange default'.
        column_metadata = new HashMap<ByteBuffer,ColumnDefinition>();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;newSystemMetadata(String,int,String,AbstractType,AbstractType,int);;;private static CFMetaData newSystemMetadata(String cfName, int cfId, String comment, AbstractType comparator, AbstractType subcc, int memtableThroughPutInMB)
    {
        ColumnFamilyType type = subcc == null ? ColumnFamilyType.Standard : ColumnFamilyType.Super;
        CFMetaData newCFMD = new CFMetaData(Table.SYSTEM_TABLE, cfName, type, comparator,  subcc, cfId);

        return newCFMD.comment(comment)
                      .keyCacheSize(0.01)
                      .readRepairChance(0)
                      .gcGraceSeconds(0)
                      .memSize(memtableThroughPutInMB)
                      .memOps(sizeMemtableOperations(memtableThroughPutInMB))
                      .mergeShardsChance(0.0)
                      .rowCacheSavePeriod(0)
                      .keyCacheSavePeriod(0);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;copyOpts(CFMetaData,CFMetaData);;;private static CFMetaData copyOpts(CFMetaData newCFMD, CFMetaData oldCFMD)
    {
        return newCFMD.comment(oldCFMD.comment)
                      .rowCacheSize(oldCFMD.rowCacheSize)
                      .keyCacheSize(oldCFMD.keyCacheSize)
                      .readRepairChance(oldCFMD.readRepairChance)
                      .replicateOnWrite(oldCFMD.replicateOnWrite)
                      .gcGraceSeconds(oldCFMD.gcGraceSeconds)
                      .defaultValidator(oldCFMD.defaultValidator)
                      .minCompactionThreshold(oldCFMD.minCompactionThreshold)
                      .maxCompactionThreshold(oldCFMD.maxCompactionThreshold)
                      .rowCacheSavePeriod(oldCFMD.rowCacheSavePeriodInSeconds)
                      .keyCacheSavePeriod(oldCFMD.keyCacheSavePeriodInSeconds)
                      .memTime(oldCFMD.memtableFlushAfterMins)
                      .memSize(oldCFMD.memtableThroughputInMb)
                      .memOps(oldCFMD.memtableOperationsInMillions)
                      .columnMetadata(oldCFMD.column_metadata);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;deflate();;;        cf.replicate_on_write = replicateOnWrite;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;deflate();;;        cf.merge_shards_chance = mergeShardsChance;
        cf.key_alias = keyAlias;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;deflate();;;        cf.row_cache_provider = new Utf8(rowCacheProvider.getClass().getName());
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;inflate(org.apache.cassandra.db.migration.avro.CfDef);;;public static CFMetaData inflate(org.apache.cassandra.db.migration.avro.CfDef cf)
    {
        AbstractType comparator;
        AbstractType subcolumnComparator = null;
        AbstractType validator;
        AbstractType keyValidator;

        try
        {
            comparator = DatabaseDescriptor.getComparator(cf.comparator_type.toString());
            if (cf.subcomparator_type != null)
                subcolumnComparator = DatabaseDescriptor.getComparator(cf.subcomparator_type);
            validator = DatabaseDescriptor.getComparator(cf.default_validation_class);
            keyValidator = DatabaseDescriptor.getComparator(cf.key_validation_class);
        }
        catch (Exception ex)
        {
            throw new RuntimeException("Could not inflate CFMetaData for " + cf, ex);
        }
        Map<ByteBuffer, ColumnDefinition> column_metadata = new TreeMap<ByteBuffer, ColumnDefinition>(BytesType.instance);
        for (ColumnDef aColumn_metadata : cf.column_metadata)
        {
            ColumnDefinition cd = ColumnDefinition.inflate(aColumn_metadata);
            column_metadata.put(cd.name, cd);
        }

        CFMetaData newCFMD = new CFMetaData(cf.keyspace.toString(),
                                            cf.name.toString(),
                                            ColumnFamilyType.create(cf.column_type.toString()),
                                            comparator,
                                            subcolumnComparator,
                                            cf.id);

        // When we pull up an old avro CfDef which doesn't have these arguments,
        //  it doesn't default them correctly. Without explicit defaulting,
        //  grandfathered metadata becomes wrong or causes crashes.
        //  Isn't AVRO supposed to handle stuff like this?
        if (cf.min_compaction_threshold != null) { newCFMD.minCompactionThreshold(cf.min_compaction_threshold); }
        if (cf.max_compaction_threshold != null) { newCFMD.maxCompactionThreshold(cf.max_compaction_threshold); }
        if (cf.row_cache_save_period_in_seconds != null) { newCFMD.rowCacheSavePeriod(cf.row_cache_save_period_in_seconds); }
        if (cf.key_cache_save_period_in_seconds != null) { newCFMD.keyCacheSavePeriod(cf.key_cache_save_period_in_seconds); }
        if (cf.memtable_flush_after_mins != null) { newCFMD.memTime(cf.memtable_flush_after_mins); }
        if (cf.memtable_throughput_in_mb != null) { newCFMD.memSize(cf.memtable_throughput_in_mb); }
        if (cf.memtable_operations_in_millions != null) { newCFMD.memOps(cf.memtable_operations_in_millions); }
        if (cf.merge_shards_chance != null) { newCFMD.mergeShardsChance(cf.merge_shards_chance); }
        if (cf.row_cache_provider != null)
        {
            try
            {
                newCFMD.rowCacheProvider(FBUtilities.newCacheProvider(cf.row_cache_provider.toString()));
            }
            catch (ConfigurationException e)
            {
                throw new RuntimeException(e);
            }
        }
        if (cf.key_alias != null) { newCFMD.keyAlias(cf.key_alias); }

        return newCFMD.comment(cf.comment.toString())
                      .rowCacheSize(cf.row_cache_size)
                      .keyCacheSize(cf.key_cache_size)
                      .readRepairChance(cf.read_repair_chance)
                      .replicateOnWrite(cf.replicate_on_write)
                      .gcGraceSeconds(cf.gc_grace_seconds)
                      .defaultValidator(validator)
                      .keyValidator(keyValidator)
                      .columnMetadata(column_metadata);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;getMergeShardsChance();;;public double getMergeShardsChance()
    {
        return readRepairChance;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;getReplicateOnWrite();;;public boolean getReplicateOnWrite()
    {
        return replicateOnWrite;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;getKeyValidator();;;public AbstractType getKeyValidator()
    {
        return keyValidator;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;getRowCacheProvider();;;public IRowCacheProvider getRowCacheProvider()
    {
        return rowCacheProvider;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;getKeyName();;;public ByteBuffer getKeyName()
    {
        return keyAlias == null ? DEFAULT_KEY_NAME : keyAlias;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;getComparatorFor(ByteBuffer);;;public AbstractType getComparatorFor(ByteBuffer superColumnName)
    {
        return superColumnName == null ? comparator : subcolumnComparator;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;equals(Object);public boolean equals(Object obj) ;;public boolean equals(Object obj)
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;equals(Object);;;            .append(replicateOnWrite, rhs.replicateOnWrite)
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;equals(Object);;;            .append(defaultValidator, rhs.defaultValidator)
            .append(keyValidator, rhs.keyValidator)
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;equals(Object);;;            .append(mergeShardsChance, rhs.mergeShardsChance)
            .append(keyAlias, rhs.keyAlias)
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;hashCode();;;            .append(replicateOnWrite)
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;hashCode();;;            .append(keyValidator)
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;hashCode();;;            .append(mergeShardsChance)
            .append(keyAlias)
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;applyImplicitDefaults(org.apache.cassandra.thrift.CfDef);;;        if (!cf_def.isSetComment())
            cf_def.setComment("");
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;applyImplicitDefaults(org.apache.cassandra.thrift.CfDef);;;        if (!cf_def.isSetMerge_shards_chance())
            cf_def.setMerge_shards_chance(CFMetaData.DEFAULT_MERGE_SHARDS_CHANCE);
        if (!cf_def.isSetRow_cache_provider())
            cf_def.setRow_cache_provider(CFMetaData.DEFAULT_ROW_CACHE_PROVIDER);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;fromThrift(org.apache.cassandra.thrift.CfDef);;;public static CFMetaData fromThrift(org.apache.cassandra.thrift.CfDef cf_def) throws InvalidRequestException, ConfigurationException
    {
        ColumnFamilyType cfType = ColumnFamilyType.create(cf_def.column_type);
        if (cfType == null)
        {
          throw new InvalidRequestException("Invalid column type " + cf_def.column_type);
        }

        applyImplicitDefaults(cf_def);

        validateMinMaxCompactionThresholds(cf_def);
        validateMemtableSettings(cf_def);

        CFMetaData newCFMD = new CFMetaData(cf_def.keyspace,
                                            cf_def.name,
                                            cfType,
                                            DatabaseDescriptor.getComparator(cf_def.comparator_type),
                                            cf_def.subcomparator_type == null ? null : DatabaseDescriptor.getComparator(cf_def.subcomparator_type));

        if (cf_def.isSetGc_grace_seconds()) { newCFMD.gcGraceSeconds(cf_def.gc_grace_seconds); }
        if (cf_def.isSetMin_compaction_threshold()) { newCFMD.minCompactionThreshold(cf_def.min_compaction_threshold); }
        if (cf_def.isSetMax_compaction_threshold()) { newCFMD.maxCompactionThreshold(cf_def.max_compaction_threshold); }
        if (cf_def.isSetRow_cache_save_period_in_seconds()) { newCFMD.rowCacheSavePeriod(cf_def.row_cache_save_period_in_seconds); }
        if (cf_def.isSetKey_cache_save_period_in_seconds()) { newCFMD.keyCacheSavePeriod(cf_def.key_cache_save_period_in_seconds); }
        if (cf_def.isSetMemtable_flush_after_mins()) { newCFMD.memTime(cf_def.memtable_flush_after_mins); }
        if (cf_def.isSetMemtable_throughput_in_mb()) { newCFMD.memSize(cf_def.memtable_throughput_in_mb); }
        if (cf_def.isSetMemtable_operations_in_millions()) { newCFMD.memOps(cf_def.memtable_operations_in_millions); }
        if (cf_def.isSetMerge_shards_chance()) { newCFMD.mergeShardsChance(cf_def.merge_shards_chance); }
        if (cf_def.isSetRow_cache_provider()) { newCFMD.rowCacheProvider(FBUtilities.newCacheProvider(cf_def.row_cache_provider)); }
        if (cf_def.isSetKey_alias()) { newCFMD.keyAlias(cf_def.key_alias); }
        if (cf_def.isSetKey_validation_class()) { newCFMD.keyValidator(DatabaseDescriptor.getComparator(cf_def.key_validation_class)); }

        return newCFMD.comment(cf_def.comment)
                      .rowCacheSize(cf_def.row_cache_size)
                      .keyCacheSize(cf_def.key_cache_size)
                      .readRepairChance(cf_def.read_repair_chance)
                      .replicateOnWrite(cf_def.replicate_on_write)
                      .defaultValidator(DatabaseDescriptor.getComparator(cf_def.default_validation_class))
                      .keyValidator(DatabaseDescriptor.getComparator(cf_def.key_validation_class))
                      .columnMetadata(ColumnDefinition.fromColumnDef(cf_def.column_metadata));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;apply(org.apache.cassandra.db.migration.avro.CfDef);;;public void apply(org.apache.cassandra.db.migration.avro.CfDef cf_def) throws ConfigurationException
    {
        // validate
        if (!cf_def.id.equals(cfId))
            throw new ConfigurationException("ids do not match.");
        if (!cf_def.keyspace.toString().equals(ksName))
            throw new ConfigurationException("keyspaces do not match.");
        if (!cf_def.name.toString().equals(cfName))
            throw new ConfigurationException("names do not match.");
        if (!cf_def.column_type.toString().equals(cfType.name()))
            throw new ConfigurationException("types do not match.");
        if (comparator != DatabaseDescriptor.getComparator(cf_def.comparator_type))
            throw new ConfigurationException("comparators do not match.");
        if (cf_def.subcomparator_type == null || cf_def.subcomparator_type.equals(""))
        {
            if (subcolumnComparator != null)
                throw new ConfigurationException("subcolumncomparators do not match.");
            // else, it's null and we're good.
        }
        else if (subcolumnComparator != DatabaseDescriptor.getComparator(cf_def.subcomparator_type))
            throw new ConfigurationException("subcolumncomparators do not match.");

        validateMinMaxCompactionThresholds(cf_def);
        validateMemtableSettings(cf_def);
        validateAliasCompares(cf_def);

        comment = enforceCommentNotNull(cf_def.comment);
        rowCacheSize = cf_def.row_cache_size;
        keyCacheSize = cf_def.key_cache_size;
        readRepairChance = cf_def.read_repair_chance;
        replicateOnWrite = cf_def.replicate_on_write;
        gcGraceSeconds = cf_def.gc_grace_seconds;
        defaultValidator = DatabaseDescriptor.getComparator(cf_def.default_validation_class);
        keyValidator = DatabaseDescriptor.getComparator(cf_def.key_validation_class);
        minCompactionThreshold = cf_def.min_compaction_threshold;
        maxCompactionThreshold = cf_def.max_compaction_threshold;
        rowCacheSavePeriodInSeconds = cf_def.row_cache_save_period_in_seconds;
        keyCacheSavePeriodInSeconds = cf_def.key_cache_save_period_in_seconds;
        memtableFlushAfterMins = cf_def.memtable_flush_after_mins;
        memtableThroughputInMb = cf_def.memtable_throughput_in_mb;
        memtableOperationsInMillions = cf_def.memtable_operations_in_millions;
        mergeShardsChance = cf_def.merge_shards_chance;
        if (cf_def.row_cache_provider != null)
            rowCacheProvider = FBUtilities.newCacheProvider(cf_def.row_cache_provider.toString());
        keyAlias = cf_def.key_alias;

        // adjust column definitions. figure out who is coming and going.
        Set<ByteBuffer> toRemove = new HashSet<ByteBuffer>();
        Set<ByteBuffer> newColumns = new HashSet<ByteBuffer>();
        Set<org.apache.cassandra.db.migration.avro.ColumnDef> toAdd = new HashSet<org.apache.cassandra.db.migration.avro.ColumnDef>();
        for (org.apache.cassandra.db.migration.avro.ColumnDef def : cf_def.column_metadata)
        {
            newColumns.add(def.name);
            if (!column_metadata.containsKey(def.name))
                toAdd.add(def);
        }
        for (ByteBuffer name : column_metadata.keySet())
            if (!newColumns.contains(name))
                toRemove.add(name);
        
        // remove the ones leaving.
        for (ByteBuffer indexName : toRemove)
            column_metadata.remove(indexName);
        // update the ones staying
        for (org.apache.cassandra.db.migration.avro.ColumnDef def : cf_def.column_metadata)
        {
            ColumnDefinition oldDef = column_metadata.get(def.name);
            if (oldDef == null)
                continue;
            oldDef.setValidator(DatabaseDescriptor.getComparator(def.validation_class));
            oldDef.setIndexType(def.index_type == null ? null : org.apache.cassandra.thrift.IndexType.valueOf(def.index_type.name()));
            oldDef.setIndexName(def.index_name == null ? null : def.index_name.toString());
        }
        // add the new ones coming in.
        for (org.apache.cassandra.db.migration.avro.ColumnDef def : toAdd)
        {
            AbstractType dValidClass = DatabaseDescriptor.getComparator(def.validation_class);
            ColumnDefinition cd = new ColumnDefinition(def.name, 
                                                       dValidClass,
                                                       def.index_type == null ? null : org.apache.cassandra.thrift.IndexType.valueOf(def.index_type.toString()), 
                                                       def.index_name == null ? null : def.index_name.toString());
            column_metadata.put(cd.name, cd);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;convertToThrift(CFMetaData);;;        def.setReplicate_on_write(cfm.replicateOnWrite);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;convertToThrift(CFMetaData);;;        def.setMerge_shards_chance(cfm.mergeShardsChance);
        def.setKey_alias(cfm.getKeyName());
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;convertToAvro(CFMetaData);;;        def.replicate_on_write = cfm.replicateOnWrite;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;convertToAvro(org.apache.cassandra.thrift.CfDef);;;        newDef.key_validation_class = def.getKey_validation_class();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;convertToAvro(org.apache.cassandra.thrift.CfDef);;;        newDef.replicate_on_write = def.isReplicate_on_write();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;validateMinMaxCompactionThresholds(org.apache.cassandra.db.migration.avro.CfDef);;;public static void validateMinMaxCompactionThresholds(org.apache.cassandra.db.migration.avro.CfDef cf_def) throws ConfigurationException
    {
        if (cf_def.min_compaction_threshold != null && cf_def.max_compaction_threshold != null)
        {
            if ((cf_def.min_compaction_threshold > cf_def.max_compaction_threshold) &&
                    cf_def.max_compaction_threshold != 0)
            {
                throw new ConfigurationException("min_compaction_threshold cannot be greater than max_compaction_threshold");
            }
        }
        else if (cf_def.min_compaction_threshold != null)
        {
            if (cf_def.min_compaction_threshold > DEFAULT_MAX_COMPACTION_THRESHOLD)
            {
                throw new ConfigurationException("min_compaction_threshold cannot be greather than max_compaction_threshold (default " +
                                                  DEFAULT_MAX_COMPACTION_THRESHOLD + ")");
            }
        }
        else if (cf_def.max_compaction_threshold != null)
        {
            if (cf_def.max_compaction_threshold < DEFAULT_MIN_COMPACTION_THRESHOLD && cf_def.max_compaction_threshold != 0) {
                throw new ConfigurationException("max_compaction_threshold cannot be less than min_compaction_threshold");
            }
        }
        else
        {
            //Defaults are valid.
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;validateMemtableSettings(org.apache.cassandra.db.migration.avro.CfDef);;;public static void validateMemtableSettings(org.apache.cassandra.db.migration.avro.CfDef cf_def) throws ConfigurationException
    {
        if (cf_def.memtable_flush_after_mins != null)
            DatabaseDescriptor.validateMemtableFlushPeriod(cf_def.memtable_flush_after_mins);
        if (cf_def.memtable_throughput_in_mb != null)
            DatabaseDescriptor.validateMemtableThroughput(cf_def.memtable_throughput_in_mb);
        if (cf_def.memtable_operations_in_millions != null)
            DatabaseDescriptor.validateMemtableOperations(cf_def.memtable_operations_in_millions);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;validateAliasCompares(org.apache.cassandra.db.migration.avro.CfDef);;;public static void validateAliasCompares(org.apache.cassandra.db.migration.avro.CfDef cf_def) throws ConfigurationException
    {
        AbstractType comparator = DatabaseDescriptor.getComparator(cf_def.comparator_type);
        if (cf_def.key_alias != null)
            comparator.validate(cf_def.key_alias);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;getColumnDefinition(ByteBuffer);;;public ColumnDefinition getColumnDefinition(ByteBuffer name)
    {
        return column_metadata.get(name);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;toString();;;            .append("replicateOnWrite", replicateOnWrite)
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;toString();;;            .append("keyValidator", keyValidator)
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\CFMetaData;toString();;;            .append("mergeShardsChance", mergeShardsChance)
            .append("keyAlias", keyAlias)
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\ColumnDefinition;ColumnDefinition(ByteBuffer,AbstractType,IndexType,String);;;public ColumnDefinition(ByteBuffer name, AbstractType validator, IndexType index_type, String index_name)
    {
        this.name = name;
        this.index_type = index_type;
        this.index_name = index_name;
        this.validator = validator;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\ColumnDefinition;inflate(org.apache.cassandra.db.migration.avro.ColumnDef);;;public static ColumnDefinition inflate(org.apache.cassandra.db.migration.avro.ColumnDef cd)
    {
        IndexType index_type = cd.index_type == null ? null :
            Enum.valueOf(IndexType.class, cd.index_type.name());
        String index_name = cd.index_name == null ? null : cd.index_name.toString();
        try
        {
            AbstractType validatorType = DatabaseDescriptor.getComparator(cd.validation_class);
            return new ColumnDefinition(cd.name, validatorType, index_type, index_name);
        }
        catch (ConfigurationException e)
        {
            throw new RuntimeException(e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\ColumnDefinition;fromColumnDef(org.apache.cassandra.db.migration.avro.ColumnDef);;;public static ColumnDefinition fromColumnDef(org.apache.cassandra.db.migration.avro.ColumnDef avroColumnDef) throws ConfigurationException
    {
        validateIndexType(avroColumnDef);
        AbstractType validatorType = DatabaseDescriptor.getComparator(avroColumnDef.validation_class);
        return new ColumnDefinition(avroColumnDef.name,
                validatorType,
                IndexType.valueOf(avroColumnDef.index_type == null ? D_COLDEF_INDEXTYPE : avroColumnDef.index_type.name()),
                avroColumnDef.index_name == null ? D_COLDEF_INDEXNAME : avroColumnDef.index_name.toString());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\ColumnDefinition;validateIndexType(org.apache.cassandra.db.migration.avro.ColumnDef);;;public static void validateIndexType(org.apache.cassandra.db.migration.avro.ColumnDef avroColumnDef) throws ConfigurationException
    {
        if ((avroColumnDef.index_name != null) && (avroColumnDef.index_type == null))
            throw new ConfigurationException("index_name cannot be set if index_type is not also set");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\DatabaseDescriptor;getConcurrentReplicators();;;public static int getConcurrentReplicators()
    {
        return conf.concurrent_replicates;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\DatabaseDescriptor;getConcurrentCompactors();;;public static int getConcurrentCompactors()
    {
        return conf.concurrent_compactors;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\DatabaseDescriptor;getCompactionThroughputMbPerSec();;;public static int getCompactionThroughputMbPerSec()
    {
        return conf.compaction_throughput_mb_per_sec;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\DatabaseDescriptor;setCompactionThroughputMbPerSec(int);;;public static void setCompactionThroughputMbPerSec(int value)
    {
        conf.compaction_throughput_mb_per_sec = value;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\DatabaseDescriptor;getDataFileLocationForTable(String,long);;;        logger.debug("expected data files size is {}; largest free partition has {} bytes free",
                     expectedCompactedFileSize, maxFreeDisk);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\DatabaseDescriptor;getSerializedCachePath(String,String,ColumnFamilyStore.CacheType);;;public static File getSerializedCachePath(String ksName, String cfName, ColumnFamilyStore.CacheType cacheType)
    {
        return new File(conf.saved_caches_directory + File.separator + ksName + "-" + cfName + "-" + cacheType);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\DatabaseDescriptor;getEncryptionOptions();;;public static EncryptionOptions getEncryptionOptions()
    {
        return conf.encryption_options;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\DatabaseDescriptor;getTotalMemtableSpaceInMB();;;public static int getTotalMemtableSpaceInMB()
    {
        // should only be called if estimatesRealMemtableSize() is true
        assert conf.memtable_total_space_in_mb > 0;
        return conf.memtable_total_space_in_mb;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\DatabaseDescriptor;estimatesRealMemtableSize();;;public static boolean estimatesRealMemtableSize()
    {
        return conf.memtable_total_space_in_mb > 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\KSMetaData;KSMetaData(String,Class<?extendsAbstractReplicationStrategy>,Map<String,String>,CFMetaData);;;public KSMetaData(String name, Class<? extends AbstractReplicationStrategy> strategyClass, Map<String, String> strategyOptions, CFMetaData... cfDefs)
    {
        this.name = name;
        this.strategyClass = strategyClass == null ? NetworkTopologyStrategy.class : strategyClass;
        this.strategyOptions = strategyOptions;
        Map<String, CFMetaData> cfmap = new HashMap<String, CFMetaData>();
        for (CFMetaData cfm : cfDefs)
            cfmap.put(cfm.cfName, cfm);
        this.cfMetaData = Collections.unmodifiableMap(cfmap);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\KSMetaData;forwardsCompatibleOptions(KsDef);;;public static Map<String, String> forwardsCompatibleOptions(KsDef ks_def)
    {
        Map<String, String> options;
        if (ks_def.isSetReplication_factor())
        {
            options = new HashMap<String, String>(ks_def.strategy_options == null ? Collections.<String, String>emptyMap() : ks_def.strategy_options);
            options.put("replication_factor", String.valueOf(ks_def.replication_factor));
        }
        else
        {
            options = ks_def.strategy_options;
        }
        return options;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\KSMetaData;inflate(org.apache.cassandra.db.migration.avro.KsDef);;;public static KSMetaData inflate(org.apache.cassandra.db.migration.avro.KsDef ks)
    {
        Class<AbstractReplicationStrategy> repStratClass;
        try
        {
            String strategyClassName = convertOldStrategyName(ks.strategy_class.toString());
            repStratClass = (Class<AbstractReplicationStrategy>)Class.forName(strategyClassName);
        }
        catch (Exception ex)
        {
            throw new RuntimeException("Could not create ReplicationStrategy of type " + ks.strategy_class, ex);
        }

        Map<String, String> strategyOptions = new HashMap<String, String>();
        if (ks.strategy_options != null)
        {
            for (Map.Entry<CharSequence, CharSequence> e : ks.strategy_options.entrySet())
            {
                strategyOptions.put(e.getKey().toString(), e.getValue().toString());
            }
        }
        if (ks.replication_factor != null)
            strategyOptions.put("replication_factor", ks.replication_factor.toString());

        int cfsz = ks.cf_defs.size();
        CFMetaData[] cfMetaData = new CFMetaData[cfsz];
        Iterator<org.apache.cassandra.db.migration.avro.CfDef> cfiter = ks.cf_defs.iterator();
        for (int i = 0; i < cfsz; i++)
            cfMetaData[i] = CFMetaData.inflate(cfiter.next());

        return new KSMetaData(ks.name.toString(), repStratClass, strategyOptions, cfMetaData);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\KSMetaData;optsWithRF(Integer);;;public static Map<String,String> optsWithRF(final Integer rf)
    {
        Map<String, String> ret = new HashMap<String,String>();
        ret.put("replication_factor", rf.toString());
        return ret;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\KSMetaData;fromThrift(KsDef,CFMetaData);;;public static KSMetaData fromThrift(KsDef ksd, CFMetaData... cfDefs) throws ConfigurationException
    {
        return new KSMetaData(ksd.name,
                              AbstractReplicationStrategy.getClass(ksd.strategy_class),
                              forwardsCompatibleOptions(ksd),
                              cfDefs);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\KSMetaData;toThrift(KSMetaData);;;public static KsDef toThrift(KSMetaData ksm)
    {
        List<CfDef> cfDefs = new ArrayList<CfDef>();
        for (CFMetaData cfm : ksm.cfMetaData().values())
            cfDefs.add(CFMetaData.convertToThrift(cfm));
        KsDef ksdef = new KsDef(ksm.name, ksm.strategyClass.getName(), cfDefs);
        ksdef.setStrategy_options(ksm.strategyOptions);
        if (ksm.strategyOptions != null && ksm.strategyOptions.containsKey("replication_factor"))
            ksdef.setReplication_factor(Integer.parseInt(ksm.strategyOptions.get("replication_factor")));
        return ksdef;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\config\SeedProviderDef;SeedProviderDef(LinkedHashMap);;;public SeedProviderDef(LinkedHashMap p)
    {
        class_name = (String)p.get("class_name");
        parameters = (Map<String, String>)((List)p.get("parameters")).get(0);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CQLStatement;CQLStatement(StatementType,Object);;;public CQLStatement(StatementType type, Object statement)
    {
        this.type = type;
        this.statement = statement;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateColumnFamilyStatement;CreateColumnFamilyStatement(String);;;public CreateColumnFamilyStatement(String name)
    {
        this.name = name;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateColumnFamilyStatement;validate();;;private void validate() throws InvalidRequestException
    {
        // Column family name
        if (!name.matches("\\w+"))
            throw new InvalidRequestException(String.format("\"%s\" is not a valid column family name", name));
        
        // Catch the case where someone passed a kwarg that is not recognized.
        Set<String> keywordsFound = new HashSet<String>(properties.keySet());
        keywordsFound.removeAll(keywords);
        
        for (String bogus : keywordsFound)
            throw new InvalidRequestException(bogus + " is not a valid keyword argument for CREATE COLUMNFAMILY");
        
        // Validate min/max compaction thresholds
        Integer minCompaction = getPropertyInt(KW_MINCOMPACTIONTHRESHOLD, null);
        Integer maxCompaction = getPropertyInt(KW_MAXCOMPACTIONTHRESHOLD, null);
        
        if ((minCompaction != null) && (maxCompaction != null))     // Both min and max are set
        {
            if ((minCompaction > maxCompaction) && (maxCompaction != 0))
                throw new InvalidRequestException(String.format("%s cannot be larger than %s",
                                                                KW_MINCOMPACTIONTHRESHOLD,
                                                                KW_MAXCOMPACTIONTHRESHOLD));
        }
        else if (minCompaction != null)     // Only the min threshold is set
        {
            if (minCompaction > CFMetaData.DEFAULT_MAX_COMPACTION_THRESHOLD)
                throw new InvalidRequestException(String.format("%s cannot be larger than %s, (default %s)",
                                                                KW_MINCOMPACTIONTHRESHOLD,
                                                                KW_MAXCOMPACTIONTHRESHOLD,
                                                                CFMetaData.DEFAULT_MAX_COMPACTION_THRESHOLD));
        }
        else if (maxCompaction != null)     // Only the max threshold is set
        {
            if ((maxCompaction < CFMetaData.DEFAULT_MIN_COMPACTION_THRESHOLD) && (maxCompaction != 0))
                throw new InvalidRequestException(String.format("%s cannot be smaller than %s, (default %s)",
                                                                KW_MAXCOMPACTIONTHRESHOLD,
                                                                KW_MINCOMPACTIONTHRESHOLD,
                                                                CFMetaData.DEFAULT_MIN_COMPACTION_THRESHOLD));
        }
        
        // Validate memtable settings
        Integer memMins = getPropertyInt(KW_MEMTABLEFLUSHINMINS, null);
        Integer memMb = getPropertyInt(KW_MEMTABLESIZEINMB, null);
        Double memOps = getPropertyDouble(KW_MEMTABLEOPSINMILLIONS, null);
        
        if ((memMins != null) && (memMins <= 0))
            throw new InvalidRequestException(String.format("%s must be non-negative and greater than zero",
                                                            KW_MEMTABLEFLUSHINMINS));
        if ((memMb != null) && (memMb <= 0))
            throw new InvalidRequestException(String.format("%s must be non-negative and greater than zero",
                                                            KW_MEMTABLESIZEINMB));
        if ((memOps != null) && (memOps <=0))
            throw new InvalidRequestException(String.format("%s must be non-negative and greater than zero",
                                                            KW_MEMTABLEOPSINMILLIONS));
        
        // Ensure that exactly one key has been specified.
        if (keyValidator.size() < 1)
            throw new InvalidRequestException("You must specify a PRIMARY KEY");
        else if (keyValidator.size() > 1)
            throw new InvalidRequestException("You may only specify one PRIMARY KEY");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateColumnFamilyStatement;addColumn(Term,String);;;public void addColumn(Term term, String comparator)
    {
        columns.put(term, comparator);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateColumnFamilyStatement;setKeyType(String);;;public void setKeyType(String validator)
    {
        keyValidator.add(validator);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateColumnFamilyStatement;getKeyType();;;public String getKeyType()
    {
        return keyValidator.get(0);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateColumnFamilyStatement;addProperty(String,String);;;public void addProperty(String name, String value)
    {
        properties.put(name, value);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateColumnFamilyStatement;getName();;;public String getName()
    {
        return name;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateColumnFamilyStatement;getColumns(AbstractType<?>);;;private Map<ByteBuffer, ColumnDefinition> getColumns(AbstractType<?> comparator) throws InvalidRequestException
    {
        Map<ByteBuffer, ColumnDefinition> columnDefs = new HashMap<ByteBuffer, ColumnDefinition>();
        
        for (Map.Entry<Term, String> col : columns.entrySet())
        {
            try
            {
                ByteBuffer columnName = col.getKey().getByteBuffer(comparator);
                String validatorClassName = comparators.containsKey(col.getValue()) ? comparators.get(col.getValue()) : col.getValue();
                AbstractType<?> validator = DatabaseDescriptor.getComparator(validatorClassName);
                columnDefs.put(columnName, new ColumnDefinition(columnName, validator, null, null));
            }
            catch (ConfigurationException e)
            {
                InvalidRequestException ex = new InvalidRequestException(e.toString());
                ex.initCause(e);
                throw ex;
            }
        }
        
        return columnDefs;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateColumnFamilyStatement;getCFMetaData(String);;;public CFMetaData getCFMetaData(String keyspace) throws InvalidRequestException
    {
        validate();

        CFMetaData newCFMD;
        try
        {
            /* If not comparator/validator is not specified, default to text (BytesType is the wrong default for CQL
             * since it uses hex terms).  If the value specified is not found in the comparators map, assume the user
             * knows what they are doing (a custom comparator/validator for example), and pass it on as-is.
             */
            String comparatorString = (comparators.get(getPropertyString(KW_COMPARATOR, "text")) != null)
                                      ? comparators.get(getPropertyString(KW_COMPARATOR, "text"))
                                      : getPropertyString(KW_COMPARATOR, "text");
            String validatorString = (comparators.get(getPropertyString(KW_DEFAULTVALIDATION, "text")) != null)
                                     ? comparators.get(getPropertyString(KW_DEFAULTVALIDATION, "text"))
                                     : getPropertyString(KW_DEFAULTVALIDATION, "text");
            AbstractType<?> comparator = DatabaseDescriptor.getComparator(comparatorString);

            newCFMD = new CFMetaData(keyspace,
                                     name,
                                     ColumnFamilyType.Standard,
                                     comparator,
                                     null);

            newCFMD.comment(properties.get(KW_COMMENT))
                   .rowCacheSize(getPropertyDouble(KW_ROWCACHESIZE, CFMetaData.DEFAULT_ROW_CACHE_SIZE))
                   .keyCacheSize(getPropertyDouble(KW_KEYCACHESIZE, CFMetaData.DEFAULT_KEY_CACHE_SIZE))
                   .readRepairChance(getPropertyDouble(KW_READREPAIRCHANCE, CFMetaData.DEFAULT_READ_REPAIR_CHANCE))
                   .replicateOnWrite(getPropertyBoolean(KW_REPLICATEONWRITE, CFMetaData.DEFAULT_REPLICATE_ON_WRITE))
                   .gcGraceSeconds(getPropertyInt(KW_GCGRACESECONDS, CFMetaData.DEFAULT_GC_GRACE_SECONDS))
                   .defaultValidator(DatabaseDescriptor.getComparator(validatorString))
                   .minCompactionThreshold(getPropertyInt(KW_MINCOMPACTIONTHRESHOLD, CFMetaData.DEFAULT_MIN_COMPACTION_THRESHOLD))
                   .maxCompactionThreshold(getPropertyInt(KW_MAXCOMPACTIONTHRESHOLD, CFMetaData.DEFAULT_MAX_COMPACTION_THRESHOLD))
                   .rowCacheSavePeriod(getPropertyInt(KW_ROWCACHESAVEPERIODSECS, CFMetaData.DEFAULT_ROW_CACHE_SAVE_PERIOD_IN_SECONDS))
                   .keyCacheSavePeriod(getPropertyInt(KW_KEYCACHESAVEPERIODSECS, CFMetaData.DEFAULT_KEY_CACHE_SAVE_PERIOD_IN_SECONDS))
                   .memTime(getPropertyInt(KW_MEMTABLEFLUSHINMINS, CFMetaData.DEFAULT_MEMTABLE_LIFETIME_IN_MINS))
                   .memSize(getPropertyInt(KW_MEMTABLESIZEINMB, CFMetaData.DEFAULT_MEMTABLE_THROUGHPUT_IN_MB))
                   .memOps(getPropertyDouble(KW_MEMTABLEOPSINMILLIONS, CFMetaData.DEFAULT_MEMTABLE_OPERATIONS_IN_MILLIONS))
                   .mergeShardsChance(0.0)
                   .columnMetadata(getColumns(comparator))
                   .keyValidator(DatabaseDescriptor.getComparator(comparators.get(getKeyType())))
                   .rowCacheProvider(FBUtilities.newCacheProvider(getPropertyString(KW_ROW_CACHE_PROVIDER, CFMetaData.DEFAULT_ROW_CACHE_PROVIDER)));
        }
        catch (ConfigurationException e)
        {
            throw new InvalidRequestException(e.toString());
        }
        return newCFMD;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateColumnFamilyStatement;getPropertyString(String,String);;;private String getPropertyString(String key, String defaultValue)
    {
        String value = properties.get(key);
        return value != null ? value : defaultValue;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateColumnFamilyStatement;getPropertyBoolean(String,Boolean);;;private Boolean getPropertyBoolean(String key, Boolean defaultValue) throws InvalidRequestException
    {
        String value = properties.get(key);
        return (value == null) ? defaultValue : value.toLowerCase().matches("(1|true|yes)");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateColumnFamilyStatement;getPropertyDouble(String,Double);;;private Double getPropertyDouble(String key, Double defaultValue) throws InvalidRequestException
    {
        Double result;
        String value = properties.get(key);
        
        if (value == null)
            result = defaultValue;
        else
        {
            try
            {
                result = Double.parseDouble(value);
            }
            catch (NumberFormatException e)
            {
                throw new InvalidRequestException(String.format("%s not valid for \"%s\"", value, key));
            }
        }
        return result;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateColumnFamilyStatement;getPropertyInt(String,Integer);;;private Integer getPropertyInt(String key, Integer defaultValue) throws InvalidRequestException
    {
        Integer result;
        String value = properties.get(key);
        
        if (value == null)
            result = defaultValue;
        else
        {
            try
            {
                result = Integer.parseInt(value);
            }
            catch (NumberFormatException e)
            {
                throw new InvalidRequestException(String.format("%s not valid for \"%s\"", value, key));
            }
        }
        return result;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateIndexStatement;CreateIndexStatement(String,String,Term);;;public CreateIndexStatement(String indexName, String columnFamily, Term columnName)
    {
        this.indexName = indexName;
        this.columnFamily = columnFamily;
        this.columnName = columnName;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateIndexStatement;getColumnFamily();;;public String getColumnFamily()
    {
        return columnFamily;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateIndexStatement;getColumnName();;;public Term getColumnName()
    {
        return columnName;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateIndexStatement;getIndexName();;;public String getIndexName()
    {
        return indexName;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateKeyspaceStatement;CreateKeyspaceStatement(String,Map<String,String>);;;public CreateKeyspaceStatement(String name, Map<String, String> attrs)
    {
        this.name = name;
        this.attrs = attrs;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateKeyspaceStatement;validate();;;public void validate() throws InvalidRequestException
    {
        // keyspace name
        if (!name.matches("\\w+"))
            throw new InvalidRequestException(String.format("\"%s\" is not a valid keyspace name", name));
        
        // required
        if (!attrs.containsKey("strategy_class"))
            throw new InvalidRequestException("missing required argument \"strategy_class\"");
        strategyClass = attrs.get("strategy_class");
        
        // optional
        for (String key : attrs.keySet())
            if ((key.contains(":")) && (key.startsWith("strategy_options")))
                strategyOptions.put(key.split(":")[1], attrs.get(key));

        // trial run to let ARS validate class + per-class options
        try
        {
            AbstractReplicationStrategy.createReplicationStrategy(name,
                                                                  AbstractReplicationStrategy.getClass(strategyClass),
                                                                  StorageService.instance.getTokenMetadata(),
                                                                  DatabaseDescriptor.getEndpointSnitch(),
                                                                  strategyOptions);
        }
        catch (ConfigurationException e)
        {
            throw new InvalidRequestException(e.getMessage());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateKeyspaceStatement;getName();;;public String getName()
    {
        return name;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateKeyspaceStatement;getStrategyClass();;;public String getStrategyClass()
    {
        return strategyClass;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\CreateKeyspaceStatement;getStrategyOptions();;;public Map<String, String> getStrategyOptions()
    {
        return strategyOptions;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\DeleteStatement;getColumns();;;public List<Term> getColumns()
    {
        return columns;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\DeleteStatement;getKeys();;;public List<Term> getKeys()
    {
        return keys;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\DeleteStatement;toString();;;public String toString()
    {
        return String.format("DeleteStatement(columns=%s, columnFamily=%s, consistency=%s keys=%s)",
                             columns,
                             columnFamily,
                             cLevel,
                             keys);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\QueryProcessor;getColumnNames(SelectStatement,CFMetaData);;;private static List<ByteBuffer> getColumnNames(SelectStatement select, CFMetaData metadata) throws InvalidRequestException
    {
        String keyString = getKeyString(metadata);
        List<ByteBuffer> columnNames = new ArrayList<ByteBuffer>();
        for (Term column : select.getColumnNames())
        {
            // skip the key for the slice op; we'll add it to the resultset in extractThriftColumns
            if (!column.getText().equalsIgnoreCase(keyString))
                columnNames.add(column.getByteBuffer(metadata.comparator));
        }
        return columnNames;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\QueryProcessor;multiRangeSlice(String,SelectStatement);;;private static List<org.apache.cassandra.db.Row> multiRangeSlice(String keyspace, SelectStatement select)
    throws TimedOutException, UnavailableException, InvalidRequestException
    {
        List<org.apache.cassandra.db.Row> rows;
        IPartitioner<?> p = StorageService.getPartitioner();

        AbstractType<?> keyType = DatabaseDescriptor.getCFMetaData(keyspace,
                                                                   select.getColumnFamily()).getKeyValidator();

        ByteBuffer startKey = (select.getKeyStart() != null)
                               ? select.getKeyStart().getByteBuffer(keyType)
                               : (new Term()).getByteBuffer();

        ByteBuffer finishKey = (select.getKeyFinish() != null)
                                ? select.getKeyFinish().getByteBuffer(keyType)
                                : (new Term()).getByteBuffer();

        Token startToken = p.getToken(startKey), finishToken = p.getToken(finishKey);
        if (startToken.compareTo(finishToken) > 0 && !finishToken.equals(p.getMinimumToken()))
        {
            if (p instanceof RandomPartitioner)
                throw new InvalidRequestException("Start key's md5 sorts after end key's md5. This is not allowed; you probably should not specify end key at all, under RandomPartitioner");
            else
                throw new InvalidRequestException("Start key must sort before (or equal to) finish key in your partitioner!");
        }
        AbstractBounds bounds = new Bounds(startToken, finishToken);
        
        CFMetaData metadata = validateColumnFamily(keyspace, select.getColumnFamily(), false);
        // XXX: Our use of Thrift structs internally makes me Sad. :(
        SlicePredicate thriftSlicePredicate = slicePredicateFromSelect(select, metadata);
        validateSlicePredicate(metadata, thriftSlicePredicate);

        int limit = select.isKeyRange() && select.getKeyStart() != null
                  ? select.getNumRecords() + 1
                  : select.getNumRecords();

        try
        {
            rows = StorageProxy.getRangeSlice(new RangeSliceCommand(keyspace,
                                                                    select.getColumnFamily(),
                                                                    null,
                                                                    thriftSlicePredicate,
                                                                    bounds,
                                                                    limit),
                                                                    select.getConsistencyLevel());
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
        catch (org.apache.cassandra.thrift.UnavailableException e)
        {
            throw new UnavailableException();
        }
        catch (TimeoutException e)
        {
            throw new TimedOutException();
        }

        // if start key was set and relation was "greater than"
        if (select.getKeyStart() != null && !select.includeStartKey())
        {
            if (rows.get(0).key.key.equals(startKey))
                rows.remove(0);
        }

        // if finish key was set and relation was "less than"
        if (select.getKeyFinish() != null && !select.includeFinishKey())
        {
            int lastIndex = rows.size() - 1;
            if (rows.get(lastIndex).key.key.equals(finishKey))
                rows.remove(lastIndex);
        }

        return rows.subList(0, select.getNumRecords() < rows.size() ? select.getNumRecords() : rows.size());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\QueryProcessor;getIndexedSlices(String,SelectStatement);;;private static List<org.apache.cassandra.db.Row> getIndexedSlices(String keyspace, SelectStatement select)
    throws TimedOutException, UnavailableException, InvalidRequestException
    {
        CFMetaData metadata = validateColumnFamily(keyspace, select.getColumnFamily(), false);
        // XXX: Our use of Thrift structs internally (still) makes me Sad. :~(
        SlicePredicate thriftSlicePredicate = slicePredicateFromSelect(select, metadata);
        validateSlicePredicate(metadata, thriftSlicePredicate);
        
        List<IndexExpression> expressions = new ArrayList<IndexExpression>();
        for (Relation columnRelation : select.getColumnRelations())
        {
            // Left and right side of relational expression encoded according to comparator/validator.
            ByteBuffer entity = columnRelation.getEntity().getByteBuffer(metadata.comparator);
            ByteBuffer value = columnRelation.getValue().getByteBuffer(select.getValueValidator(keyspace, entity));
            
            expressions.add(new IndexExpression(entity,
                                                IndexOperator.valueOf(columnRelation.operator().toString()),
                                                value));
        }
        
        AbstractType<?> keyType = DatabaseDescriptor.getCFMetaData(keyspace,
                                                                   select.getColumnFamily()).getKeyValidator();
        ByteBuffer startKey = (!select.isKeyRange()) ? (new Term()).getByteBuffer() : select.getKeyStart().getByteBuffer(keyType);
        IndexClause thriftIndexClause = new IndexClause(expressions, startKey, select.getNumRecords());
        
        List<org.apache.cassandra.db.Row> rows;
        try
        {
            rows = StorageProxy.scan(keyspace,
                                     select.getColumnFamily(),
                                     thriftIndexClause,
                                     thriftSlicePredicate,
                                     select.getConsistencyLevel());
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
        catch (TimeoutException e)
        {
            throw new TimedOutException();
        }
        
        return rows;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\QueryProcessor;slicePredicateFromSelect(SelectStatement,CFMetaData);;;private static SlicePredicate slicePredicateFromSelect(SelectStatement select, CFMetaData metadata)
    throws InvalidRequestException
    {
        SlicePredicate thriftSlicePredicate = new SlicePredicate();
        
        if (select.isColumnRange() || select.getColumnNames().size() == 0)
        {
            SliceRange sliceRange = new SliceRange();
            sliceRange.start = select.getColumnStart().getByteBuffer(metadata.comparator);
            sliceRange.finish = select.getColumnFinish().getByteBuffer(metadata.comparator);
            sliceRange.reversed = select.isColumnsReversed();
            sliceRange.count = select.getColumnsLimit();
            thriftSlicePredicate.slice_range = sliceRange;
        }
        else
        {
            thriftSlicePredicate.column_names = getColumnNames(select, metadata);
        }
        
        return thriftSlicePredicate;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\QueryProcessor;applyMigrationOnStage(Migration);;;private static void applyMigrationOnStage(final Migration m) throws InvalidRequestException
    {
        Future<?> f = StageManager.getStage(Stage.MIGRATION).submit(new Callable<Object>()
        {
            public Object call() throws Exception
            {
                m.apply();
                m.announce();
                return null;
            }
        });
        try
        {
            f.get();
        }
        catch (InterruptedException e)
        {
            throw new RuntimeException(e);
        }
        catch (ExecutionException e)
        {
            // this means call() threw an exception. deal with it directly.
            if (e.getCause() != null)
            {
                InvalidRequestException ex = new InvalidRequestException(e.getCause().getMessage());
                ex.initCause(e.getCause());
                throw ex;
            }
            else
            {
                InvalidRequestException ex = new InvalidRequestException(e.getMessage());
                ex.initCause(e);
                throw ex;
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\QueryProcessor;validateColumnNames(Iterable<ByteBuffer>);;;private static void validateColumnNames(Iterable<ByteBuffer> columns)
    throws InvalidRequestException
    {
        for (ByteBuffer name : columns)
        {
            if (name.remaining() > IColumn.MAX_NAME_LENGTH)
                throw new InvalidRequestException(String.format("column name is too long (%s > %s)",
                                                                name.remaining(),
                                                                IColumn.MAX_NAME_LENGTH));
            if (name.remaining() == 0)
                throw new InvalidRequestException("zero-length column name");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\QueryProcessor;validateSlicePredicate(CFMetaData,SlicePredicate);;;private static void validateSlicePredicate(CFMetaData metadata, SlicePredicate predicate)
    throws InvalidRequestException
    {
        if (predicate.slice_range != null)
            validateSliceRange(metadata, predicate.slice_range);
        else
            validateColumnNames(predicate.column_names);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\QueryProcessor;validateSliceRange(CFMetaData,SliceRange);;;private static void validateSliceRange(CFMetaData metadata, SliceRange range)
    throws InvalidRequestException
    {
        validateSliceRange(metadata, range.start, range.finish, range.reversed);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\QueryProcessor;validateSliceRange(CFMetaData,ByteBuffer,ByteBuffer,boolean);;;private static void validateSliceRange(CFMetaData metadata, ByteBuffer start, ByteBuffer finish, boolean reversed)
    throws InvalidRequestException
    {
        AbstractType<?> comparator = metadata.getComparatorFor(null);
        Comparator<ByteBuffer> orderedComparator = reversed ? comparator.reverseComparator: comparator;
        if (start.remaining() > 0 && finish.remaining() > 0 && orderedComparator.compare(start, finish) > 0)
            throw new InvalidRequestException("range finish must come after start in traversal order");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\QueryProcessor;validateSchemaAgreement();;;private static void validateSchemaAgreement() throws SchemaDisagreementException
    {
        // unreachable hosts don't count towards disagreement
        Map<String, List<String>> versions = Maps.filterKeys(StorageProxy.describeSchemaVersions(),
                                                             Predicates.not(Predicates.equalTo(StorageProxy.UNREACHABLE)));
        if (versions.size() > 1)
            throw new SchemaDisagreementException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\QueryProcessor;extractThriftColumns(SelectStatement,CFMetaData,Row);;;private static List<Column> extractThriftColumns(SelectStatement select, CFMetaData metadata, Row row)
    {
        List<Column> thriftColumns = new ArrayList<Column>();
        if (select.isColumnRange())
        {
            if (select.isWildcard())
            {
                // prepend key
                thriftColumns.add(new Column(metadata.getKeyName()).setValue(row.key.key).setTimestamp(-1));
            }

            // preserve comparator order
            for (IColumn c : row.cf.getSortedColumns())
            {
                if (c.isMarkedForDelete())
                    continue;
                thriftColumns.add(new Column(c.name()).setValue(c.value()).setTimestamp(c.timestamp()));
            }
        }
        else
        {
            String keyString = getKeyString(metadata);

            // order columns in the order they were asked for
            for (Term term : select.getColumnNames())
            {
                if (term.getText().equalsIgnoreCase(keyString))
                {
                    // preserve case of key as it was requested
                    ByteBuffer requestedKey = ByteBufferUtil.bytes(term.getText());
                    thriftColumns.add(new Column(requestedKey).setValue(row.key.key).setTimestamp(-1));
                    continue;
                }

                ByteBuffer name;
                try
                {
                    name = term.getByteBuffer(metadata.comparator);
                }
                catch (InvalidRequestException e)
                {
                    throw new AssertionError(e);
                }
                IColumn c = row.cf.getColumn(name);
                if (c == null || c.isMarkedForDelete())
                    thriftColumns.add(new Column().setName(name));
                else
                    thriftColumns.add(new Column(c.name()).setValue(c.value()).setTimestamp(c.timestamp()));
            }
        }
        return thriftColumns;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\QueryProcessor;getKeyString(CFMetaData);;;private static String getKeyString(CFMetaData metadata)
    {
        String keyString;
        try
        {
            keyString = ByteBufferUtil.string(metadata.getKeyName());
        }
        catch (CharacterCodingException e)
        {
            throw new AssertionError(e);
        }
        return keyString;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\QueryProcessor;getStatement(String);;;private static CQLStatement getStatement(String queryStr) throws InvalidRequestException, RecognitionException
    {
        // Lexer and parser
        CharStream stream = new ANTLRStringStream(queryStr);
        CqlLexer lexer = new CqlLexer(stream);
        TokenStream tokenStream = new CommonTokenStream(lexer);
        CqlParser parser = new CqlParser(tokenStream);
        
        // Parse the query string to a statement instance
        CQLStatement statement = parser.query();
        
        // The lexer and parser queue up any errors they may have encountered
        // along the way, if necessary, we turn them into exceptions here.
        lexer.throwLastRecognitionError();
        parser.throwLastRecognitionError();
        
        return statement;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Relation;Relation(Term,String,Term);;;public Relation(Term entity, String type, Term value)
    {
        if (entity.getText().toUpperCase().equals("KEY"))
            this.entityType = EntityType.KEY;
        
        this.entity = entity;
        this.relationType = RelationType.forString(type);
        this.value = value;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Relation;isKey();;;public boolean isKey()
    {
        return entityType.equals(EntityType.KEY);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Relation;isColumn();;;public boolean isColumn()
    {
        return entityType.equals(EntityType.COLUMN);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Relation;operator();;;public RelationType operator()
    {
        return relationType;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Relation;getEntity();;;public Term getEntity()
    {
        return entity;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Relation;getValue();;;public Term getValue()
    {
        return value;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Relation;toString();;;public String toString()
    {
        return String.format("Relation(%s, %s,nnn %s)", entity, relationType, value);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Relation;forString(String);;;public static RelationType forString(String s)
    {
        if (s.equals("="))
            return EQ;
        else if (s.equals("<"))
            return LT;
        else if (s.equals("<="))
            return LTE;
        else if (s.equals(">="))
            return GTE;
        else if (s.equals(">"))
            return GT;
        
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectExpression;SelectExpression(Term,Term,int,boolean,boolean);;;public SelectExpression(Term start, Term finish, int count, boolean reverse, boolean wildcard)
    {
        this.start = start;
        this.finish = finish;
        numColumns = count;
        reverseColumns = reverse;
        this.wildcard = wildcard;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectExpression;SelectExpression(Term,int,boolean);;;public SelectExpression(Term first, int count, boolean reverse)
    {
        wildcard = false;
        columns = new ArrayList<Term>();
        columns.add(first);
        numColumns = count;
        reverseColumns = reverse;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectExpression;and(Term);;;public void and(Term addTerm)
    {
        assert !isColumnRange();    // Not possible when invoked by parser
        columns.add(addTerm);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectExpression;isColumnRange();;;public boolean isColumnRange()
    {
        return (start != null);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectExpression;isColumnList();;;public boolean isColumnList()
    {
        return !isColumnRange();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectExpression;getColumnsLimit();;;public int getColumnsLimit()
    {
        return numColumns;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectExpression;isColumnsReversed();;;public boolean isColumnsReversed()
    {
        return reverseColumns;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectExpression;setColumnsReversed(boolean);;;public void setColumnsReversed(boolean reversed)
    {
        reverseColumns = reversed;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectExpression;setColumnsLimit(int);;;public void setColumnsLimit(int limit)
    {
        numColumns = limit;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectExpression;getStart();;;public Term getStart()
    {
        return start;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectExpression;getFinish();;;public Term getFinish()
    {
        return finish;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectExpression;getColumns();;;public List<Term> getColumns()
    {
        return columns;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectExpression;isWildcard();;;public boolean isWildcard()
    {
        return wildcard;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;SelectStatement(SelectExpression,boolean,String,ConsistencyLevel,WhereClause,int);;;public SelectStatement(SelectExpression expression, boolean isCountOper, String columnFamily,
            ConsistencyLevel cLevel, WhereClause clause, int numRecords)
    {
        this.expression = expression;
        this.isCountOper = isCountOper;
        this.columnFamily = columnFamily;
        this.cLevel = cLevel;
        this.clause = (clause != null) ? clause : new WhereClause();
        this.numRecords = numRecords;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;isKeyRange();;;public boolean isKeyRange()
    {
        return clause.isKeyRange();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;getKeys();;;public List<Term> getKeys()
    {
        return clause.getKeys();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;getKeyStart();;;public Term getKeyStart()
    {
        return clause.getStartKey();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;getKeyFinish();;;public Term getKeyFinish()
    {
        return clause.getFinishKey();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;getColumnRelations();;;public List<Relation> getColumnRelations()
    {
        return clause.getColumnRelations();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;isColumnRange();;;public boolean isColumnRange()
    {
        return expression.isColumnRange();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;isWildcard();;;public boolean isWildcard()
    {
        return expression.isWildcard();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;getColumnNames();;;public List<Term> getColumnNames()
    {
        return expression.getColumns();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;getColumnStart();;;public Term getColumnStart()
    {
        return expression.getStart();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;getColumnFinish();;;public Term getColumnFinish()
    {
        return expression.getFinish();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;getColumnFamily();;;public String getColumnFamily()
    {
        return columnFamily;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;isColumnsReversed();;;public boolean isColumnsReversed()
    {
        return expression.isColumnsReversed();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;getConsistencyLevel();;;public ConsistencyLevel getConsistencyLevel()
    {
        return cLevel;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;getNumRecords();;;public int getNumRecords()
    {
        return numRecords;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;getColumnsLimit();;;public int getColumnsLimit()
    {
        return expression.getColumnsLimit();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;isCountOperation();;;public boolean isCountOperation()
    {
        return isCountOper;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;includeStartKey();;;public boolean includeStartKey()
    {
        return clause.includeStartKey();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;includeFinishKey();;;public boolean includeFinishKey()
    {
        return clause.includeFinishKey();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;getComparator(String);;;public AbstractType getComparator(String keyspace)
    {
        return DatabaseDescriptor.getComparator(keyspace, columnFamily);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\SelectStatement;getValueValidator(String,ByteBuffer);;;public AbstractType getValueValidator(String keyspace, ByteBuffer column)
    {
        return DatabaseDescriptor.getValueValidator(keyspace, columnFamily, column);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Term;Term(String,int);;;public Term(String text, int type)
    {
        this.text = text == null ? "" : text;
        this.type = TermType.forInt(type);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Term;Term(String,TermType);;;public Term(String text, TermType type)
    {
        this.text = text == null ? "" : text;
        this.type = type;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Term;Term();;;protected Term()
    {
        this.text = "";
        this.type = TermType.STRING;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Term;getText();;;public String getText()
    {
        return text;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Term;getByteBuffer(AbstractType<?>);;;public ByteBuffer getByteBuffer(AbstractType<?> validator) throws InvalidRequestException
    {
        try
        {
            return validator.fromString(text);
        }
        catch (MarshalException e)
        {
            throw new InvalidRequestException(e.getMessage());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Term;getByteBuffer();;;public ByteBuffer getByteBuffer() throws InvalidRequestException
    {
        switch (type)
        {
            case STRING:
                return AsciiType.instance.fromString(text);
            case INTEGER: 
                return IntegerType.instance.fromString(text);
            case UUID:
                // we specifically want the Lexical class here, not "UUIDType," because we're supposed to have
                // a uuid-shaped string here, and UUIDType also accepts integer or date strings (and turns them into version 1 uuids).
                return LexicalUUIDType.instance.fromString(text);
        }
        
        // FIXME: handle scenario that should never happen
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Term;getType();;;public TermType getType()
    {
        return type;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Term;toString();;;public String toString()
    {
        return String.format("Term(%s, type=%s)", getText(), type);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\Term;forInt(int);;;static TermType forInt(int type)
    {
        if ((type == CqlParser.STRING_LITERAL) || (type == CqlParser.IDENT))
            return STRING;
        else if (type == CqlParser.INTEGER)
            return INTEGER;
        else if (type == CqlParser.UUID)
            return UUID;
        
        // FIXME: handled scenario that should never occur.
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\UpdateStatement;getConsistencyLevel();;;public ConsistencyLevel getConsistencyLevel()
    {
        return (cLevel != null) ? cLevel : defaultConsistency;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\UpdateStatement;isSetConsistencyLevel();;;public boolean isSetConsistencyLevel()
    {
        return (cLevel != null);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\UpdateStatement;getColumnFamily();;;public String getColumnFamily()
    {
        return columnFamily;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\UpdateStatement;getColumns();;;public Map<Term, Term> getColumns() throws InvalidRequestException
    {
        // Created from an UPDATE
        if (columns != null)
            return columns;
        
        // Created from an INSERT
        
        // Don't hate, validate.
        if (columnNames.size() != columnValues.size())
            throw new InvalidRequestException("unmatched column names/values");
        if (columnNames.size() < 1)
            throw new InvalidRequestException("no columns specified for INSERT");
        
        columns = new HashMap<Term, Term>();
        
        for (int i = 0; i < columnNames.size(); i++)
            columns.put(columnNames.get(i), columnValues.get(i));
        
        return columns;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\UpdateStatement;getKeyType(String);;;public AbstractType<?> getKeyType(String keyspace)
    {
        return DatabaseDescriptor.getCFMetaData(keyspace, columnFamily).getKeyValidator();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\UpdateStatement;getComparator(String);;;public AbstractType<?> getComparator(String keyspace)
    {
        return DatabaseDescriptor.getComparator(keyspace, columnFamily);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\UpdateStatement;getValueValidator(String,ByteBuffer);;;public AbstractType<?> getValueValidator(String keyspace, ByteBuffer column)
    {
        return DatabaseDescriptor.getValueValidator(keyspace, columnFamily, column);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\WhereClause;WhereClause(Relation);;;public WhereClause(Relation firstRelation)
    {
        and(firstRelation);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\WhereClause;WhereClause();;;public WhereClause()
    {
        
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\WhereClause;and(Relation);;;public void and(Relation relation)
    {
        if ((relation != null) && relation.isKey())
        {
            if (relation.operator().equals(RelationType.EQ))
                keys.add(relation.getValue());
            else if ((relation.operator().equals(RelationType.GT) || relation.operator().equals(RelationType.GTE)))
            {
                startKey = relation.getValue();
                includeStartKey = relation.operator().equals(RelationType.GTE);
            }
            else if ((relation.operator().equals(RelationType.LT) || relation.operator().equals(RelationType.LTE)))
            {
                finishKey = relation.getValue();
                includeFinishKey = relation.operator().equals(RelationType.LTE);
            }
            
        }
        else
            columns.add(relation);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\WhereClause;getColumnRelations();;;public List<Relation> getColumnRelations()
    {
        return columns;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\WhereClause;isKeyRange();;;public boolean isKeyRange()
    {
        return startKey != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\WhereClause;isKeyList();;;public boolean isKeyList()
    {
        return !isKeyRange();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\WhereClause;getStartKey();;;public Term getStartKey()
    {
        return startKey;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\WhereClause;getFinishKey();;;public Term getFinishKey()
    {
        return finishKey;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\WhereClause;getKeys();;;public List<Term> getKeys()
    {
        return keys;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\WhereClause;includeStartKey();;;public boolean includeStartKey()
    {
        return includeStartKey;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\cql\WhereClause;includeFinishKey();;;public boolean includeFinishKey()
    {
        return includeFinishKey;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\BinaryMemtable;writeSortedContents(List<DecoratedKey>,ReplayPosition);;;private SSTableReader writeSortedContents(List<DecoratedKey> sortedKeys, ReplayPosition context) throws IOException
    {
        logger.info("Writing " + this);
        SSTableWriter writer = cfs.createFlushWriter(sortedKeys.size(), DatabaseDescriptor.getBMTThreshold(), context);

        for (DecoratedKey key : sortedKeys)
        {
            ByteBuffer bytes = columnFamilies.get(key);
            assert bytes.remaining() > 0;
            writer.append(key, bytes);
        }
        SSTableReader sstable = writer.closeAndOpenReader();
        logger.info("Completed flushing " + writer.getFilename());
        return sstable;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\BinaryMemtable;flushAndSignal(CountDownLatch,ExecutorService,ExecutorService,ReplayPosition);;;public void flushAndSignal(final CountDownLatch latch, ExecutorService sorter, final ExecutorService writer, final ReplayPosition context)
    {
        sorter.execute(new Runnable()
        {
            public void run()
            {
                final List<DecoratedKey> sortedKeys = getSortedKeys();
                writer.execute(new WrappedRunnable()
                {
                    public void runMayThrow() throws IOException
                    {
                        cfs.addSSTable(writeSortedContents(sortedKeys, context));
                        latch.countDown();
                    }
                });
            }
        });
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Column;serializationFlags();;;public int serializationFlags()
    {
        return 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Column;localCopy(ColumnFamilyStore);;;public IColumn localCopy(ColumnFamilyStore cfs)
    {
        return new Column(cfs.internOrCopy(name), ByteBufferUtil.clone(value), timestamp);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamily;ColumnFamily(CFMetaData);;;public ColumnFamily(CFMetaData cfm)
    {
        assert cfm != null;
        this.cfm = cfm;
        columnSerializer = cfm.cfType == ColumnFamilyType.Standard ? Column.serializer() : SuperColumn.serializer(cfm.subcolumnComparator);
        columns = new ConcurrentSkipListMap<ByteBuffer, IColumn>(cfm.comparator);
     }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamily;getType();;;public ColumnFamilyType getType()
    {
        return cfm.cfType;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamily;addColumn(QueryPath,ByteBuffer,long,int);;;        assert !metadata().getDefaultValidator().isCommutative();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamily;addCounter(QueryPath,long);;;public void addCounter(QueryPath path, long value)
    {
        assert path.columnName != null : path;
        addColumn(path.superColumnName, new CounterUpdateColumn(path.columnName, value, System.currentTimeMillis()));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamily;serializedSize();;;public long serializedSize()
    {
        int size = boolSize_ // bool
                 + intSize_ // id
                 + intSize_ // local deletion time
                 + longSize_ // client deltion time
                 + intSize_; // column count
        for (IColumn column : columns.values())
            size += column.serializedSize();
        return size;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilySerializer;deserialize(DataInput,boolean,boolean);;;public ColumnFamily deserialize(DataInput dis, boolean intern, boolean fromRemote) throws IOException
    {
        if (!dis.readBoolean())
            return null;

        // create a ColumnFamily based on the cf id
        int cfId = dis.readInt();
        if (CFMetaData.getCF(cfId) == null)
            throw new UnserializableColumnFamilyException("Couldn't find cfId=" + cfId, cfId);
        ColumnFamily cf = ColumnFamily.create(cfId);
        deserializeFromSSTableNoColumns(cf, dis);
        deserializeColumns(dis, cf, intern, fromRemote);
        return cf;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilySerializer;deserializeColumns(DataInput,ColumnFamily,boolean,boolean);;;public void deserializeColumns(DataInput dis, ColumnFamily cf, boolean intern, boolean fromRemote) throws IOException
    {
        int size = dis.readInt();
        ColumnFamilyStore interner = intern ? Table.open(CFMetaData.getCF(cf.id()).left).getColumnFamilyStore(cf.id()) : null;
        for (int i = 0; i < size; ++i)
        {
            IColumn column = cf.getColumnSerializer().deserialize(dis, interner, fromRemote, (int) (System.currentTimeMillis() / 1000));
            cf.addColumn(column);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilySerializer;deserializeFromSSTableNoColumns(ColumnFamily,DataInput);    {        ;;    {
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilySerializer;serializedSize(ColumnFamily);;;public long serializedSize(ColumnFamily cf)
    {
        return cf.serializedSize();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;CacheType(String);;;private CacheType(String name)
        {
            this.name = name;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;toString();;;@Override
        public String toString()
        {
            return name;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;ColumnFamilyStore(Table,String,IPartitioner,int,CFMetaData);;;        ICache<Pair<Descriptor, DecoratedKey>, Long> kc = ConcurrentLinkedHashCache.create(0);
        keyCache = new AutoSavingKeyCache<Pair<Descriptor, DecoratedKey>, Long>(kc, table.name, columnFamilyName);
        ICache<DecoratedKey, ColumnFamily> rc = metadata.getRowCacheProvider().create(0);        
        rowCache = new AutoSavingRowCache<DecoratedKey, ColumnFamily>(rc, table.name, columnFamilyName);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;scrubDataDirectories(String,String);;;        logger.info("Removing compacted SSTable files (see http://wiki.apache.org/cassandra/MemtableSSTable)");
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;initCaches();;;public void initCaches()
    {
        long start = System.currentTimeMillis();
        // results are sorted on read (via treeset) because there are few reads and many writes and reads only happen at startup
        for (DecoratedKey key : rowCache.readSaved())
            cacheRow(key);
        if (rowCache.size() > 0)
            logger.info(String.format("completed loading (%d ms; %d keys) row cache for %s.%s",
                                      System.currentTimeMillis()-start,
                                      rowCache.size(),
                                      table.name,
                                      columnFamily));

        scheduleCacheSaving(metadata.getRowCacheSavePeriodInSeconds(), metadata.getKeyCacheSavePeriodInSeconds());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;updateRowCache(DecoratedKey,ColumnFamily);;;public void updateRowCache(DecoratedKey key, ColumnFamily columnFamily)
    {
        if (rowCache.isPutCopying())
        {
            invalidateCachedRow(key);
        }
        else
        {
            ColumnFamily cachedRow = getRawCachedRow(key);
            if (cachedRow != null)
                cachedRow.addAll(columnFamily);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;isKeyInRemainingSSTables(DecoratedKey,Set<?extendsSSTable>);;;public boolean isKeyInRemainingSSTables(DecoratedKey key, Set<? extends SSTable> sstablesToIgnore)
    {
        for (SSTableReader sstable : data.getSSTables())
        {
            if (!sstablesToIgnore.contains(sstable) && sstable.getBloomFilter().isPresent(key.key))
                return true;
        }
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;forceCleanup(NodeId.OneShotRenewer);;;public void forceCleanup(NodeId.OneShotRenewer renewer) throws ExecutionException, InterruptedException
    {
        CompactionManager.instance.performCleanup(ColumnFamilyStore.this, renewer);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;replaceFlushed(Memtable,SSTableReader);;;void replaceFlushed(Memtable memtable, SSTableReader sstable)
    {
        data.replaceFlushed(memtable, sstable);
        CompactionManager.instance.submitMinorIfNeeded(this);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;submitFlush(IFlushable,CountDownLatch,ReplayPosition);;;void submitFlush(IFlushable flushable, CountDownLatch latch, ReplayPosition context)
    {
        logger.info("Enqueuing flush of {}", flushable);
        flushable.flushAndSignal(latch, flushSorter, flushWriter, context);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;getTotalMemtableLiveSize();;;public long getTotalMemtableLiveSize()
    {
        long total = 0;
        for (ColumnFamilyStore cfs : concatWithIndexes())
            total += cfs.getMemtableThreadSafe().getLiveSize();
        return total;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;getDataTracker();;;DataTracker getDataTracker()
    {
        return data;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;cacheRow(DecoratedKey);;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;getTopLevelColumns(QueryFilter,int);;;            int sstablesToIterate = 0;
            DataTracker.View currentView = data.getView();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;getTopLevelColumns(QueryFilter,int);                    ;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;getTopLevelColumns(QueryFilter,int);;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;getTopLevelColumns(QueryFilter,int);          
                     ;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;getTopLevelColumns(QueryFilter,int);          
            ;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;getRangeSlice(ByteBuffer,AbstractBounds,int,IFilter);;;        int gcBefore = (int)(System.currentTimeMillis() / 1000) - metadata.getGcGraceSeconds();

        DataTracker.View currentView = data.getView();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;getRangeSlice(ByteBuffer,AbstractBounds,int,IFilter);            boolean first = true; ;;            boolean first = true;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;keySamples(Range);;;public Iterable<DecoratedKey> keySamples(Range range)
    {
        Collection<SSTableReader> sstables = getSSTables();
        Iterable<DecoratedKey>[] samples = new Iterable[sstables.size()];
        int i = 0;
        for (SSTableReader sstable: sstables)
        {
            samples[i++] = sstable.getKeySamples(range);
        }
        return Iterables.concat(samples);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;updateCacheSizes();;;public synchronized void updateCacheSizes()
    {
        long keys = estimateKeys();
        keyCache.updateCacheSize(keys);
        rowCache.updateCacheSize(keys);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;intern(ByteBuffer);;;private ByteBuffer intern(ByteBuffer name)
    {
        ByteBuffer internedName = internedNames.get(name);
        if (internedName == null)
        {
            internedName = ByteBufferUtil.clone(name);
            ByteBuffer concurrentName = internedNames.putIfAbsent(internedName, internedName);
            if (concurrentName != null)
                internedName = concurrentName;
        }
        return internedName;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;internOrCopy(ByteBuffer);;;public ByteBuffer internOrCopy(ByteBuffer name)
    {
        if (internedNames.size() >= INTERN_CUTOFF)
            return ByteBufferUtil.clone(name);

        return intern(name);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;maybeIntern(ByteBuffer);;;public ByteBuffer maybeIntern(ByteBuffer name)
    {
        if (internedNames.size() >= INTERN_CUTOFF)
            return name;

        return intern(name);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;createFlushWriter(long,long,ReplayPosition);;;public SSTableWriter createFlushWriter(long estimatedRows, long estimatedSize, ReplayPosition context) throws IOException
    {
        return new SSTableWriter(getFlushPath(estimatedSize, Descriptor.CURRENT_VERSION), estimatedRows, metadata, partitioner, context);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnFamilyStore;createCompactionWriter(long,String,Collection<SSTableReader>);;;public SSTableWriter createCompactionWriter(long estimatedRows, String location, Collection<SSTableReader> sstables) throws IOException
    {
        ReplayPosition rp = ReplayPosition.getReplayPosition(sstables);
        return new SSTableWriter(getTempSSTablePath(location), estimatedRows, metadata, partitioner, rp);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnIndexer;writeBloomFilter(DataOutput,BloomFilter);;;        bufOut.flush();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnSerializer;deserialize(DataInput,ColumnFamilyStore,boolean);;;public Column deserialize(DataInput dis, ColumnFamilyStore interner, boolean fromRemote) throws IOException
    {
        return deserialize(dis, interner, fromRemote, (int) (System.currentTimeMillis() / 1000));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ColumnSerializer;deserialize(DataInput,ColumnFamilyStore,boolean,int);;;public Column deserialize(DataInput dis, ColumnFamilyStore interner, boolean fromRemote, int expireBefore) throws IOException
    {
        ByteBuffer name = ByteBufferUtil.readWithShortLength(dis);
        if (name.remaining() <= 0)
            throw new CorruptColumnException("invalid column name length " + name.remaining());
        if (interner != null)
            name = interner.maybeIntern(name);

        int b = dis.readUnsignedByte();
        if ((b & COUNTER_MASK) != 0)
        {
            long timestampOfLastDelete = dis.readLong();
            long ts = dis.readLong();
            ByteBuffer value = ByteBufferUtil.readWithLength(dis);
            if (fromRemote)
                value = CounterContext.instance().clearAllDelta(value);
            return new CounterColumn(name, value, ts, timestampOfLastDelete);
        }
        else if ((b & EXPIRATION_MASK) != 0)
        {
            int ttl = dis.readInt();
            int expiration = dis.readInt();
            long ts = dis.readLong();
            ByteBuffer value = ByteBufferUtil.readWithLength(dis);
            if (expiration < expireBefore)
            {
                // the column is now expired, we can safely return a simple
                // tombstone
                ByteBuffer bytes = ByteBuffer.allocate(4);
                bytes.putInt(expiration);
                bytes.rewind();
                return new DeletedColumn(name, bytes, ts);
            }
            else
            {
                return new ExpiringColumn(name, value, ts, ttl, expiration);
            }
        }
        else
        {
            long ts = dis.readLong();
            ByteBuffer value = ByteBufferUtil.readWithLength(dis);
            return (b & COUNTER_UPDATE_MASK) != 0
                   ? new CounterUpdateColumn(name, value, ts)
                   : ((b & DELETION_MASK) == 0
                      ? new Column(name, value, ts)
                      : new DeletedColumn(name, value, ts));
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;submitMinorIfNeeded(ColumnFamilyStore);;;                    int gcBefore = cfs.isIndex() ? Integer.MAX_VALUE : getDefaultGcBefore(cfs);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;performCleanup(ColumnFamilyStore,NodeId.OneShotRenewer);;;public void performCleanup(final ColumnFamilyStore cfStore, final NodeId.OneShotRenewer renewer) throws InterruptedException, ExecutionException
    {
        Callable<Object> runnable = new Callable<Object>()
        {
            public Object call() throws IOException
            {
                // acquire the write lock to schedule all sstables
                compactionLock.writeLock().lock();
                try 
                {
                    if (cfStore.isInvalid())
                        return this;
                    Collection<SSTableReader> tocleanup = cfStore.getDataTracker().markCompacting(cfStore.getSSTables(), 1, Integer.MAX_VALUE);
                    if (tocleanup == null || tocleanup.isEmpty())
                        return this;
                    try
                    {
                        // downgrade the lock acquisition
                        compactionLock.readLock().lock();
                        compactionLock.writeLock().unlock();
                        try
                        {
                            doCleanupCompaction(cfStore, tocleanup, renewer);
                        }
                        finally
                        {
                            compactionLock.readLock().unlock();
                        }
                    }
                    finally
                    {
                        cfStore.getDataTracker().unmarkCompacting(tocleanup);
                    }
                    return this;
                }
                finally 
                {
                    // we probably already downgraded
                    if (compactionLock.writeLock().isHeldByCurrentThread())
                        compactionLock.writeLock().unlock();
                }
            }
        };
        executor.submit(runnable).get();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;submitMajor(ColumnFamilyStore,long,int);                finally ;;                finally
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;submitUserDefined(ColumnFamilyStore,Collection<Descriptor>,int);;;                    // attempt to schedule the set
                    else if ((sstables = cfs.getDataTracker().markCompacting(sstables, 1, Integer.MAX_VALUE)) != null)
                    {
                        String location = cfs.table.getDataFileLocation(1);
                        // success: perform the compaction
                        try
                        {
                            doCompactionWithoutSizeEstimation(cfs, sstables, gcBefore, location);
                        }
                        finally
                        {
                            cfs.getDataTracker().unmarkCompacting(sstables);
                        }
                    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;doCompaction(ColumnFamilyStore,Collection<SSTableReader>,int);;;            String compactionFileLocation = table.getDataFileLocation(cfs.getExpectedCompactedFileSize(smallerSSTables));
            if (compactionFileLocation != null)
                return doCompactionWithoutSizeEstimation(cfs, smallerSSTables, gcBefore, compactionFileLocation);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;doCompactionWithoutSizeEstimation(ColumnFamilyStore,Collection<SSTableReader>,int,String);;;int doCompactionWithoutSizeEstimation(ColumnFamilyStore cfs, Collection<SSTableReader> sstables, int gcBefore, String compactionFileLocation) throws IOException
    {
        // The collection of sstables passed may be empty (but not null); even if
        // it is not empty, it may compact down to nothing if all rows are deleted.
        assert sstables != null;

        Table table = cfs.table;
        if (DatabaseDescriptor.isSnapshotBeforeCompaction())
            table.snapshot(System.currentTimeMillis() + "-" + "compact-" + cfs.columnFamily);

        // sanity check: all sstables must belong to the same cfs
        for (SSTableReader sstable : sstables)
            assert sstable.descriptor.cfname.equals(cfs.columnFamily);

        // new sstables from flush can be added during a compaction, but only the compaction can remove them,
        // so in our single-threaded compaction world this is a valid way of determining if we're compacting
        // all the sstables (that existed when we started)
        boolean major = cfs.isCompleteSSTables(sstables);
        CompactionType type = major
                            ? CompactionType.MAJOR
                            : CompactionType.MINOR;
        logger.info("Compacting {}: {}", type, sstables);

        long startTime = System.currentTimeMillis();
        long totalkeysWritten = 0;

        // TODO the int cast here is potentially buggy
        int expectedBloomFilterSize = Math.max(DatabaseDescriptor.getIndexInterval(), (int)SSTableReader.getApproximateKeyCount(sstables));
        if (logger.isDebugEnabled())
          logger.debug("Expected bloom filter size : " + expectedBloomFilterSize);

        SSTableWriter writer;
        CompactionController controller = new CompactionController(cfs, sstables, major, gcBefore, false);
        CompactionIterator ci = new CompactionIterator(type, sstables, controller); // retain a handle so we can call close()
        Iterator<AbstractCompactedRow> nni = new FilterIterator(ci, PredicateUtils.notNullPredicate());
        Map<DecoratedKey, Long> cachedKeys = new HashMap<DecoratedKey, Long>();

        executor.beginCompaction(ci);
        try
        {
            if (!nni.hasNext())
            {
                // don't mark compacted in the finally block, since if there _is_ nondeleted data,
                // we need to sync it (via closeAndOpen) first, so there is no period during which
                // a crash could cause data loss.
                cfs.markCompacted(sstables);
                return 0;
            }

            writer = cfs.createCompactionWriter(expectedBloomFilterSize, compactionFileLocation, sstables);
            while (nni.hasNext())
            {
                AbstractCompactedRow row = nni.next();
                long position = writer.append(row);
                totalkeysWritten++;

                if (DatabaseDescriptor.getPreheatKeyCache())
                {
                    for (SSTableReader sstable : sstables)
                    {
                        if (sstable.getCachedPosition(row.key) != null)
                        {
                            cachedKeys.put(row.key, position);
                            break;
                        }
                    }
                }
            }
        }
        finally
        {
            ci.close();
            executor.finishCompaction(ci);
        }

        SSTableReader ssTable = writer.closeAndOpenReader(getMaxDataAge(sstables));
        cfs.replaceCompactedSSTables(sstables, Arrays.asList(ssTable));
        for (Entry<DecoratedKey, Long> entry : cachedKeys.entrySet()) // empty if preheat is off
            ssTable.cacheKey(entry.getKey(), entry.getValue());
        submitMinorIfNeeded(cfs);

        long dTime = System.currentTimeMillis() - startTime;
        long startsize = SSTable.getTotalBytes(sstables);
        long endsize = ssTable.length();
        double ratio = (double)endsize / (double)startsize;
        logger.info(String.format("Compacted to %s.  %,d to %,d (~%d%% of original) bytes for %,d keys.  Time: %,dms.",
                                  writer.getFilename(), startsize, endsize, (int) (ratio * 100), totalkeysWritten, dTime));
        return sstables.size();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;doScrub(ColumnFamilyStore,Collection<SSTableReader>);;;private void doScrub(ColumnFamilyStore cfs, Collection<SSTableReader> sstables) throws IOException
    {
        assert !cfs.isIndex();

        for (final SSTableReader sstable : sstables)
        {
            logger.info("Scrubbing " + sstable);

            // Calculate the expected compacted filesize
            String compactionFileLocation = cfs.table.getDataFileLocation(sstable.length());
            if (compactionFileLocation == null)
                throw new IOException("disk full");
            int expectedBloomFilterSize = Math.max(DatabaseDescriptor.getIndexInterval(),
                                                   (int)(SSTableReader.getApproximateKeyCount(Arrays.asList(sstable))));

            // loop through each row, deserializing to check for damage.
            // we'll also loop through the index at the same time, using the position from the index to recover if the
            // row header (key or data size) is corrupt. (This means our position in the index file will be one row
            // "ahead" of the data file.)
            final BufferedRandomAccessFile dataFile = BufferedRandomAccessFile.getUncachingReader(sstable.getFilename());
            String indexFilename = sstable.descriptor.filenameFor(Component.PRIMARY_INDEX);
            BufferedRandomAccessFile indexFile = BufferedRandomAccessFile.getUncachingReader(indexFilename);
            ByteBuffer nextIndexKey = ByteBufferUtil.readWithShortLength(indexFile);
            {
                // throw away variable so we don't have a side effect in the assert
                long firstRowPositionFromIndex = indexFile.readLong();
                assert firstRowPositionFromIndex == 0 : firstRowPositionFromIndex;
            }

            SSTableWriter writer = maybeCreateWriter(cfs, compactionFileLocation, expectedBloomFilterSize, null, Collections.singletonList(sstable));
            executor.beginCompaction(new ScrubInfo(dataFile, sstable));
            int goodRows = 0, badRows = 0, emptyRows = 0;

            while (!dataFile.isEOF())
            {
                long rowStart = dataFile.getFilePointer();
                if (logger.isDebugEnabled())
                    logger.debug("Reading row at " + rowStart);

                DecoratedKey key = null;
                long dataSize = -1;
                try
                {
                    key = SSTableReader.decodeKey(sstable.partitioner, sstable.descriptor, ByteBufferUtil.readWithShortLength(dataFile));
                    dataSize = sstable.descriptor.hasIntRowSize ? dataFile.readInt() : dataFile.readLong();
                    if (logger.isDebugEnabled())
                        logger.debug(String.format("row %s is %s bytes", ByteBufferUtil.bytesToHex(key.key), dataSize));
                }
                catch (Throwable th)
                {
                    throwIfFatal(th);
                    // check for null key below
                }

                ByteBuffer currentIndexKey = nextIndexKey;
                long nextRowPositionFromIndex;
                try
                {
                    nextIndexKey = indexFile.isEOF() ? null : ByteBufferUtil.readWithShortLength(indexFile);
                    nextRowPositionFromIndex = indexFile.isEOF() ? dataFile.length() : indexFile.readLong();
                }
                catch (Throwable th)
                {
                    logger.warn("Error reading index file", th);
                    nextIndexKey = null;
                    nextRowPositionFromIndex = dataFile.length();
                }

                long dataStart = dataFile.getFilePointer();
                long dataStartFromIndex = currentIndexKey == null
                                        ? -1
                                        : rowStart + 2 + currentIndexKey.remaining() + (sstable.descriptor.hasIntRowSize ? 4 : 8);
                long dataSizeFromIndex = nextRowPositionFromIndex - dataStartFromIndex;
                assert currentIndexKey != null || indexFile.isEOF();
                if (logger.isDebugEnabled() && currentIndexKey != null)
                    logger.debug(String.format("Index doublecheck: row %s is %s bytes", ByteBufferUtil.bytesToHex(currentIndexKey),  dataSizeFromIndex));

                writer.mark();
                try
                {
                    if (key == null)
                        throw new IOError(new IOException("Unable to read row key from data file"));
                    if (dataSize > dataFile.length())
                        throw new IOError(new IOException("Impossible row size " + dataSize));
                    SSTableIdentityIterator row = new SSTableIdentityIterator(sstable, dataFile, key, dataStart, dataSize, true);
                    AbstractCompactedRow compactedRow = getCompactedRow(row, sstable.descriptor, true);
                    if (compactedRow.isEmpty())
                    {
                        emptyRows++;
                    }
                    else
                    {
                        writer.append(compactedRow);
                        goodRows++;
                    }
                    if (!key.key.equals(currentIndexKey) || dataStart != dataStartFromIndex)
                        logger.warn("Row scrubbed successfully but index file contains a different key or row size; consider rebuilding the index as described in http://www.mail-archive.com/user@cassandra.apache.org/msg03325.html");
                }
                catch (Throwable th)
                {
                    throwIfFatal(th);
                    logger.warn("Non-fatal error reading row (stacktrace follows)", th);
                    writer.reset();

                    if (currentIndexKey != null
                        && (key == null || !key.key.equals(currentIndexKey) || dataStart != dataStartFromIndex || dataSize != dataSizeFromIndex))
                    {
                        logger.info(String.format("Retrying from row index; data is %s bytes starting at %s",
                                                  dataSizeFromIndex, dataStartFromIndex));
                        key = SSTableReader.decodeKey(sstable.partitioner, sstable.descriptor, currentIndexKey);
                        try
                        {
                            SSTableIdentityIterator row = new SSTableIdentityIterator(sstable, dataFile, key, dataStartFromIndex, dataSizeFromIndex, true);
                            AbstractCompactedRow compactedRow = getCompactedRow(row, sstable.descriptor, true);
                            if (compactedRow.isEmpty())
                            {
                                emptyRows++;
                            }
                            else
                            {
                                writer.append(compactedRow);
                                goodRows++;
                            }
                        }
                        catch (Throwable th2)
                        {
                            throwIfFatal(th2);
                            logger.warn("Retry failed too.  Skipping to next row (retry's stacktrace follows)", th2);
                            writer.reset();
                            dataFile.seek(nextRowPositionFromIndex);
                            badRows++;
                        }
                    }
                    else
                    {
                        logger.warn("Row at " + dataStart + " is unreadable; skipping to next");
                        if (currentIndexKey != null)
                            dataFile.seek(nextRowPositionFromIndex);
                        badRows++;
                    }
                }
            }

            if (writer.getFilePointer() > 0)
            {
                SSTableReader newSstable = writer.closeAndOpenReader(sstable.maxDataAge);
                cfs.replaceCompactedSSTables(Arrays.asList(sstable), Arrays.asList(newSstable));
                logger.info("Scrub of " + sstable + " complete: " + goodRows + " rows in new sstable and " + emptyRows + " empty (tombstoned) rows dropped");
                if (badRows > 0)
                    logger.warn("Unable to recover " + badRows + " rows that were skipped.  You can attempt manual recovery from the pre-scrub snapshot.  You can also run nodetool repair to transfer the data from a healthy replica, if any");
            }
            else
            {
                cfs.markCompacted(Arrays.asList(sstable));
                if (badRows > 0)
                    logger.warn("No valid rows found while scrubbing " + sstable + "; it is marked for deletion now. If you want to attempt manual recovery, you can find a copy in the pre-scrub snapshot");
                else
                    logger.info("Scrub of " + sstable + " complete; looks like all " + emptyRows + " rows were tombstoned");
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;doCleanupCompaction(ColumnFamilyStore,Collection<SSTableReader>,NodeId.OneShotRenewer);;;private void doCleanupCompaction(ColumnFamilyStore cfs, Collection<SSTableReader> sstables, NodeId.OneShotRenewer renewer) throws IOException
    {
        assert !cfs.isIndex();
        Table table = cfs.table;
        Collection<Range> ranges = StorageService.instance.getLocalRanges(table.name);
        boolean isCommutative = cfs.metadata.getDefaultValidator().isCommutative();
        if (ranges.isEmpty())
        {
            logger.info("Cleanup cannot run before a node has joined the ring");
            return;
        }

        for (SSTableReader sstable : sstables)
        {
            long startTime = System.currentTimeMillis();
            long totalkeysWritten = 0;

            int expectedBloomFilterSize = Math.max(DatabaseDescriptor.getIndexInterval(),
                                                   (int)(SSTableReader.getApproximateKeyCount(Arrays.asList(sstable))));
            if (logger.isDebugEnabled())
              logger.debug("Expected bloom filter size : " + expectedBloomFilterSize);

            SSTableWriter writer = null;
            try
            {
                logger.info("Cleaning up " + sstable);
                // Calculate the expected compacted filesize
                long expectedRangeFileSize = cfs.getExpectedCompactedFileSize(Arrays.asList(sstable)) / 2;
                String compactionFileLocation = table.getDataFileLocation(expectedRangeFileSize);
                if (compactionFileLocation == null)
                    throw new IOException("disk full");

                SSTableScanner scanner = sstable.getDirectScanner(CompactionIterator.FILE_BUFFER_SIZE);
                SortedSet<ByteBuffer> indexedColumns = cfs.getIndexedColumns();
                CleanupInfo ci = new CleanupInfo(sstable, scanner);
                executor.beginCompaction(ci);
                try
                {
                    while (scanner.hasNext())
                    {
                        SSTableIdentityIterator row = (SSTableIdentityIterator) scanner.next();
                        if (Range.isTokenInRanges(row.getKey().token, ranges))
                        {
                            writer = maybeCreateWriter(cfs, compactionFileLocation, expectedBloomFilterSize, writer, Collections.singletonList(sstable));
                            writer.append(getCompactedRow(row, sstable.descriptor, false));
                            totalkeysWritten++;
                        }
                        else
                        {
                            cfs.invalidateCachedRow(row.getKey());
                            if (!indexedColumns.isEmpty() || isCommutative)
                            {
                                while (row.hasNext())
                                {
                                    IColumn column = row.next();
                                    if (column instanceof CounterColumn)
                                        renewer.maybeRenew((CounterColumn) column);
                                    if (indexedColumns.contains(column.name()))
                                        Table.cleanupIndexEntry(cfs, row.getKey().key, column);
                                }
                            }
                        }
                    }
                }
                finally
                {
                    scanner.close();
                    executor.finishCompaction(ci);
                }
            }
            finally
            {
                cfs.getDataTracker().unmarkCompacting(Arrays.asList(sstable));
            }

            List<SSTableReader> results = new ArrayList<SSTableReader>();
            if (writer != null)
            {
                SSTableReader newSstable = writer.closeAndOpenReader(sstable.maxDataAge);
                results.add(newSstable);

                String format = "Cleaned up to %s.  %,d to %,d (~%d%% of original) bytes for %,d keys.  Time: %,dms.";
                long dTime = System.currentTimeMillis() - startTime;
                long startsize = sstable.length();
                long endsize = newSstable.length();
                double ratio = (double)endsize / (double)startsize;
                logger.info(String.format(format, writer.getFilename(), startsize, endsize, (int)(ratio*100), totalkeysWritten, dTime));
            }

            // flush to ensure we don't lose the tombstones on a restart, since they are not commitlog'd
            for (ByteBuffer columnName : cfs.getIndexedColumns())
            {
                try
                {
                    cfs.getIndexedColumnFamilyStore(columnName).forceBlockingFlush();
                }
                catch (ExecutionException e)
                {
                    throw new RuntimeException(e);
                }
                catch (InterruptedException e)
                {
                    throw new AssertionError(e);
                }
            }
            cfs.replaceCompactedSSTables(Arrays.asList(sstable), results);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;getCompactedRow(SSTableIdentityIterator,Descriptor,boolean);;;private AbstractCompactedRow getCompactedRow(SSTableIdentityIterator row, Descriptor descriptor, boolean forceDeserialize)
    {
        if (descriptor.isLatestVersion && !forceDeserialize)
            return new EchoedRow(row);

        return row.dataSize > DatabaseDescriptor.getInMemoryCompactionLimit()
               ? new LazilyCompactedRow(CompactionController.getBasicController(forceDeserialize), Arrays.asList(row))
               : new PrecompactedRow(CompactionController.getBasicController(forceDeserialize), Arrays.asList(row));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;maybeCreateWriter(ColumnFamilyStore,String,int,SSTableWriter,Collection<SSTableReader>);;;private SSTableWriter maybeCreateWriter(ColumnFamilyStore cfs, String compactionFileLocation, int expectedBloomFilterSize, SSTableWriter writer, Collection<SSTableReader> sstables)
            throws IOException
    {
        if (writer == null)
        {
            FileUtils.createDirectory(compactionFileLocation);
            writer = cfs.createCompactionWriter(expectedBloomFilterSize, compactionFileLocation, sstables);
        }
        return writer;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;doValidationCompaction(ColumnFamilyStore,AntiEntropyService.Validator);;;            executor.finishCompaction(ci);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;submitSSTableBuild(Descriptor,OperationType);;;public Future<SSTableReader> submitSSTableBuild(final Descriptor desc, OperationType type)
    {
        // invalid descriptions due to missing or dropped CFS are handled by SSTW and StreamInSession.
        final SSTableWriter.Builder builder = SSTableWriter.createBuilder(desc, type);
        Callable<SSTableReader> callable = new Callable<SSTableReader>()
        {
            public SSTableReader call() throws IOException
            {
                compactionLock.readLock().lock();
                try
                {
                    executor.beginCompaction(builder);
                    try
                    {
                        return builder.build();
                    }
                    finally
                    {
                        executor.finishCompaction(builder);
                    }
                }
                finally
                {
                    compactionLock.readLock().unlock();
                }
            }
        };
        return executor.submit(callable);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;submitCacheWrite(AutoSavingCache.Writer);;;public Future<?> submitCacheWrite(final AutoSavingCache.Writer writer)
    {
        Runnable runnable = new WrappedRunnable()
        {
            public void runMayThrow() throws IOException
            {
                if (!AutoSavingCache.flushInProgress.compareAndSet(false, true))
                {
                    logger.debug("Cache flushing was already in progress: skipping {}", writer.getCompactionInfo());
                    return;
                }
                try
                {
                    executor.beginCompaction(writer);
                    try
                    {
                        writer.saveCache();
                    }
                    finally
                    {
                        executor.finishCompaction(writer);
                    }
                }
                finally
                {
                    AutoSavingCache.flushInProgress.set(false);
                }
            }
        };
        return executor.submit(runnable);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;ValidationCompactionIterator(ColumnFamilyStore,Range);;;public ValidationCompactionIterator(ColumnFamilyStore cfs, Range range) throws IOException
        {
            super(CompactionType.VALIDATION,
                  getCollatingIterator(cfs.getSSTables(), range),
                  new CompactionController(cfs, cfs.getSSTables(), true, getDefaultGcBefore(cfs), false));
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;getCollatingIterator(Iterable<SSTableReader>,Range);;;protected static CollatingIterator getCollatingIterator(Iterable<SSTableReader> sstables, Range range) throws IOException
        {
            CollatingIterator iter = FBUtilities.getCollatingIterator();
            for (SSTableReader sstable : sstables)
            {
                iter.addIterator(sstable.getDirectScanner(FILE_BUFFER_SIZE, range));
            }
            return iter;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;getActiveCompactions();;;public int getActiveCompactions()
    {
        return executor.getActiveCount();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;getThreadCount();;;private static int getThreadCount()
        {
            return Math.max(1, DatabaseDescriptor.getConcurrentCompactors());
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;beginCompaction(CompactionInfo.Holder);;;void beginCompaction(CompactionInfo.Holder ci)
        {
            compactions.add(ci);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;finishCompaction(CompactionInfo.Holder);;;void finishCompaction(CompactionInfo.Holder ci)
        {
            compactions.remove(ci);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;getCompactions();;;public List<CompactionInfo.Holder> getCompactions()
        {
            return new ArrayList<CompactionInfo.Holder>(compactions);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;getCompactions();;;public List<CompactionInfo> getCompactions()
    {
        List<CompactionInfo> out = new ArrayList<CompactionInfo>();
        for (CompactionInfo.Holder ci : executor.getCompactions())
            out.add(ci.getCompactionInfo());
        return out;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;getCompactionSummary();;;public List<String> getCompactionSummary()
    {
        List<String> out = new ArrayList<String>();
        for (CompactionInfo.Holder ci : executor.getCompactions())
            out.add(ci.getCompactionInfo().toString());
        return out;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;getCompactionInfo();;;public CompactionInfo getCompactionInfo()
        {
            try
            {
                return new CompactionInfo(sstable.descriptor.ksname,
                                          sstable.descriptor.cfname,
                                          CompactionType.CLEANUP,
                                          scanner.getFilePointer(),
                                          scanner.getFileLength());
            }
            catch (Exception e)
            {
                throw new RuntimeException();
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManager;getCompactionInfo();;;public CompactionInfo getCompactionInfo()
        {
            try
            {
                return new CompactionInfo(sstable.descriptor.ksname,
                                          sstable.descriptor.cfname,
                                          CompactionType.SCRUB,
                                          dataFile.getFilePointer(),
                                          dataFile.length());
            }
            catch (Exception e)
            {
                throw new RuntimeException();
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManagerMBean;getCompactions();;;public List<CompactionInfo> getCompactions();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CompactionManagerMBean;getCompactionSummary();;;public List<String> getCompactionSummary();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;CounterColumn(ByteBuffer,long,long);;;public CounterColumn(ByteBuffer name, long value, long timestamp)
    {
        this(name, contextManager.create(value), timestamp);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;CounterColumn(ByteBuffer,long,long,long);;;public CounterColumn(ByteBuffer name, long value, long timestamp, long timestampOfLastDelete)
    {
        this(name, contextManager.create(value), timestamp, timestampOfLastDelete);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;CounterColumn(ByteBuffer,ByteBuffer,long);;;public CounterColumn(ByteBuffer name, ByteBuffer value, long timestamp)
    {
        this(name, value, timestamp, Long.MIN_VALUE);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;CounterColumn(ByteBuffer,ByteBuffer,long,long);;;public CounterColumn(ByteBuffer name, ByteBuffer value, long timestamp, long timestampOfLastDelete)
    {
        super(name, value, timestamp);
        this.timestampOfLastDelete = timestampOfLastDelete;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;timestampOfLastDelete();;;public long timestampOfLastDelete()
    {
        return timestampOfLastDelete;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;total();;;public long total()
    {
        return contextManager.total(value);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;size();;;@Override
    public int size()
    {
        /*
         * A counter column adds to a Column :
         *  + 8 bytes for timestampOfLastDelete
         */
        return super.size() + DBConstants.tsSize_;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;diff(IColumn);;;@Override
    public IColumn diff(IColumn column)
    {
        assert column instanceof CounterColumn : "Wrong class type.";

        if (timestamp() < column.timestamp())
            return column;
        if (timestampOfLastDelete() < ((CounterColumn)column).timestampOfLastDelete())
            return column;
        ContextRelationship rel = contextManager.diff(column.value(), value());
        if (ContextRelationship.GREATER_THAN == rel || ContextRelationship.DISJOINT == rel)
            return column;
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;updateDigest(MessageDigest);;;@Override
    public void updateDigest(MessageDigest digest)
    {
        digest.update(name.duplicate());
        // We don't take the deltas into account in a digest
        contextManager.updateDigest(digest, value);
        DataOutputBuffer buffer = new DataOutputBuffer();
        try
        {
            buffer.writeLong(timestamp);
            buffer.writeByte(serializationFlags());
            buffer.writeLong(timestampOfLastDelete);
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
        digest.update(buffer.getData(), 0, buffer.getLength());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;reconcile(IColumn);;;@Override
    public IColumn reconcile(IColumn column)
    {
        assert (column instanceof CounterColumn) || (column instanceof DeletedColumn) : "Wrong class type.";

        if (column.isMarkedForDelete()) // live + tombstone: track last tombstone
        {
            if (timestamp() < column.timestamp()) // live < tombstone
            {
                return column;
            }
            // live last delete >= tombstone
            if (timestampOfLastDelete() >= column.timestamp())
            {
                return this;
            }
            // live last delete < tombstone
            return new CounterColumn(name(), value(), timestamp(), column.timestamp());
        }
        // live < live last delete
        if (timestamp() < ((CounterColumn)column).timestampOfLastDelete())
            return column;
        // live last delete > live
        if (timestampOfLastDelete() > column.timestamp())
            return this;
        // live + live: merge clocks; update value
        return new CounterColumn(
            name(),
            contextManager.merge(value(), column.value()),
            Math.max(timestamp(), column.timestamp()),
            Math.max(timestampOfLastDelete(), ((CounterColumn)column).timestampOfLastDelete()));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;equals(Object);;;@Override
    public boolean equals(Object o)
    {
        // super.equals() returns false if o is not a CounterColumn
        return super.equals(o) && timestampOfLastDelete == ((CounterColumn)o).timestampOfLastDelete;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;hashCode();;;@Override
    public int hashCode()
    {
        int result = super.hashCode();
        result = 31 * result + (int)(timestampOfLastDelete ^ (timestampOfLastDelete >>> 32));
        return result;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;localCopy(ColumnFamilyStore);;;@Override
    public IColumn localCopy(ColumnFamilyStore cfs)
    {
        return new CounterColumn(cfs.internOrCopy(name), ByteBufferUtil.clone(value), timestamp, timestampOfLastDelete);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;getString(AbstractType);;;@Override
    public String getString(AbstractType comparator)
    {
        StringBuilder sb = new StringBuilder();
        sb.append(comparator.getString(name));
        sb.append(":");
        sb.append(isMarkedForDelete());
        sb.append(":");
        sb.append(contextManager.toString(value));
        sb.append("@");
        sb.append(timestamp());
        sb.append("!");
        sb.append(timestampOfLastDelete);
        return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;serializationFlags();;;@Override
    public int serializationFlags()
    {
        return ColumnSerializer.COUNTER_MASK;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;validateFields(CFMetaData);;;@Override
    public void validateFields(CFMetaData metadata) throws MarshalException
    {
        validateName(metadata);
        // We cannot use the value validator as for other columns as the CounterColumnType validate a long,
        // which is not the internal representation of counters
        contextManager.validateContext(value());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;hasNodeId(NodeId);;;public boolean hasNodeId(NodeId id)
    {
        return contextManager.hasNodeId(value(), id);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;computeOldShardMerger();;;public CounterColumn computeOldShardMerger()
    {
        ByteBuffer bb = contextManager.computeOldShardMerger(value(), NodeId.getOldLocalNodeIds());
        if (bb == null)
            return null;
        else
            return new CounterColumn(name(), bb, timestamp(), timestampOfLastDelete);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;removeOldShards(int);;;private CounterColumn removeOldShards(int gcBefore)
    {
        ByteBuffer bb = contextManager.removeOldShards(value(), gcBefore);
        if (bb == value())
            return this;
        else
        {
            return new CounterColumn(name(), bb, timestamp(), timestampOfLastDelete);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterColumn;removeOldShards(ColumnFamily,int);;;public static void removeOldShards(ColumnFamily cf, int gcBefore)
    {
        if (!cf.isSuper())
        {
            for (Map.Entry<ByteBuffer, IColumn> entry : cf.getColumnsMap().entrySet())
            {
                ByteBuffer cname = entry.getKey();
                IColumn c = entry.getValue();
                if (!(c instanceof CounterColumn))
                    continue;
                CounterColumn cleaned = ((CounterColumn) c).removeOldShards(gcBefore);
                if (cleaned != c)
                {
                    cf.remove(cname);
                    cf.addColumn(cleaned);
                }
            }
        }
        else
        {
            for (Map.Entry<ByteBuffer, IColumn> entry : cf.getColumnsMap().entrySet())
            {
                SuperColumn c = (SuperColumn) entry.getValue();
                for (IColumn subColumn : c.getSubColumns())
                {
                    if (!(subColumn instanceof CounterColumn))
                        continue;
                    CounterColumn cleaned = ((CounterColumn) subColumn).removeOldShards(gcBefore);
                    if (cleaned != subColumn)
                    {
                        c.remove(subColumn.name());
                        c.addColumn(cleaned);
                    }
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;CounterMutation(RowMutation,ConsistencyLevel);;;public CounterMutation(RowMutation rowMutation, ConsistencyLevel consistency)
    {
        this.rowMutation = rowMutation;
        this.consistency = consistency;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;getTable();;;public String getTable()
    {
        return rowMutation.getTable();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;key();;;public ByteBuffer key()
    {
        return rowMutation.key();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;rowMutation();;;public RowMutation rowMutation()
    {
        return rowMutation;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;consistency();;;public ConsistencyLevel consistency()
    {
        return consistency;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;serializer();;;public static CounterMutationSerializer serializer()
    {
        return serializer;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;makeReplicationMutation();;;public RowMutation makeReplicationMutation() throws IOException
    {
        List<ReadCommand> readCommands = new LinkedList<ReadCommand>();
        for (ColumnFamily columnFamily : rowMutation.getColumnFamilies())
        {
            if (!columnFamily.metadata().getReplicateOnWrite())
                continue;
            addReadCommandFromColumnFamily(rowMutation.getTable(), rowMutation.key(), columnFamily, readCommands);
        }

        // create a replication RowMutation
        RowMutation replicationMutation = new RowMutation(rowMutation.getTable(), rowMutation.key());
        for (ReadCommand readCommand : readCommands)
        {
            Table table = Table.open(readCommand.table);
            Row row = readCommand.getRow(table);
            if (row == null || row.cf == null)
                continue;

            row = mergeOldShards(readCommand.table, row);
            replicationMutation.add(row.cf);
        }
        return replicationMutation;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;addReadCommandFromColumnFamily(String,ByteBuffer,ColumnFamily,List<ReadCommand>);;;private void addReadCommandFromColumnFamily(String table, ByteBuffer key, ColumnFamily columnFamily, List<ReadCommand> commands)
    {
        // CF type: regular
        if (!columnFamily.isSuper())
        {
            QueryPath queryPath = new QueryPath(columnFamily.metadata().cfName);
            commands.add(new SliceByNamesReadCommand(table, key, queryPath, columnFamily.getColumnNames()));
        }
        else
        {
            // CF type: super
            for (IColumn superColumn : columnFamily.getSortedColumns())
            {
                QueryPath queryPath = new QueryPath(columnFamily.metadata().cfName, superColumn.name());

                // construct set of sub-column names
                Collection<IColumn> subColumns = superColumn.getSubColumns();
                Collection<ByteBuffer> subColNames = new HashSet<ByteBuffer>(subColumns.size());
                for (IColumn subCol : subColumns)
                {
                    subColNames.add(subCol.name());
                }

                commands.add(new SliceByNamesReadCommand(table, key, queryPath, subColNames));
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;mergeOldShards(String,Row);;;private Row mergeOldShards(String table, Row row) throws IOException
    {
        ColumnFamily cf = row.cf;
        // random check for merging to allow lessening the performance impact
        if (cf.metadata().getMergeShardsChance() > random.get().nextDouble())
        {
            ColumnFamily merger = computeShardMerger(cf);
            if (merger != null)
            {
                RowMutation localMutation = new RowMutation(table, row.key.key);
                localMutation.add(merger);
                localMutation.apply();

                cf.addAll(merger);
            }
        }
        return row;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;computeShardMerger(ColumnFamily);;;private ColumnFamily computeShardMerger(ColumnFamily cf)
    {
        ColumnFamily merger = null;

        // CF type: regular
        if (!cf.isSuper())
        {
            for (IColumn column : cf.getSortedColumns())
            {
                if (!(column instanceof CounterColumn))
                    continue;
                IColumn c = ((CounterColumn)column).computeOldShardMerger();
                if (c != null)
                {
                    if (merger == null)
                        merger = cf.cloneMeShallow();
                    merger.addColumn(c);
                }
            }
        }
        else // CF type: super
        {
            for (IColumn superColumn : cf.getSortedColumns())
            {
                IColumn mergerSuper = null;
                for (IColumn column : superColumn.getSubColumns())
                {
                    if (!(column instanceof CounterColumn))
                        continue;
                    IColumn c = ((CounterColumn)column).computeOldShardMerger();
                    if (c != null)
                    {
                        if (mergerSuper == null)
                            mergerSuper = ((SuperColumn)superColumn).cloneMeShallow();
                        mergerSuper.addColumn(c);
                    }
                }
                if (mergerSuper != null)
                {
                    if (merger == null)
                        merger = cf.cloneMeShallow();
                    merger.addColumn(mergerSuper);
                }
            }
        }
        return merger;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;makeMutationMessage(int);;;public Message makeMutationMessage(int version) throws IOException
    {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(bos);
        serializer().serialize(this, dos, version);
        return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.COUNTER_MUTATION, bos.toByteArray(), version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;shouldReplicateOnWrite();;;public boolean shouldReplicateOnWrite()
    {
        for (ColumnFamily cf : rowMutation.getColumnFamilies())
            if (cf.metadata().getReplicateOnWrite())
                return true;
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;apply();;;public void apply() throws IOException
    {
        // We need to transform all CounterUpdateColumn to CounterColumn and we need to deepCopy. Both are done 
        // below since CUC.asCounterColumn() does a deep copy.
        RowMutation rm = new RowMutation(rowMutation.getTable(), ByteBufferUtil.clone(rowMutation.key()));
        Table table = Table.open(rm.getTable());

        for (ColumnFamily cf_ : rowMutation.getColumnFamilies())
        {
            ColumnFamily cf = cf_.cloneMeShallow();
            ColumnFamilyStore cfs = table.getColumnFamilyStore(cf.id());
            for (IColumn column : cf_.getColumnsMap().values())
            {
                cf.addColumn(column.localCopy(cfs));
            }
            rm.add(cf);
        }
        rm.apply();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;toString();;;@Override
    public String toString()
    {
        return toString(false);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;toString(boolean);;;public String toString(boolean shallow)
    {
        StringBuilder buff = new StringBuilder("CounterMutation(");
        buff.append(rowMutation.toString(shallow));
        buff.append(", ").append(consistency.toString());
        return buff.append(")").toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;serialize(CounterMutation,DataOutputStream,int);;;public void serialize(CounterMutation cm, DataOutputStream dos, int version) throws IOException
    {
        RowMutation.serializer().serialize(cm.rowMutation(), dos, version);
        dos.writeUTF(cm.consistency().name());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutation;deserialize(DataInputStream,int);;;public CounterMutation deserialize(DataInputStream dis, int version) throws IOException
    {
        RowMutation rm = RowMutation.serializer().deserialize(dis, version);
        ConsistencyLevel consistency = Enum.valueOf(ConsistencyLevel.class, dis.readUTF());
        return new CounterMutation(rm, consistency);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterMutationVerbHandler;doVerb(Message,String);;;public void doVerb(Message message, String id)
    {
        byte[] bytes = message.getMessageBody();
        ByteArrayInputStream buffer = new ByteArrayInputStream(bytes);

        try
        {
            DataInputStream is = new DataInputStream(buffer);
            CounterMutation cm = CounterMutation.serializer().deserialize(is, message.getVersion());
            if (logger.isDebugEnabled())
              logger.debug("Applying forwarded " + cm);

            String localDataCenter = DatabaseDescriptor.getEndpointSnitch().getDatacenter(FBUtilities.getLocalAddress());
            StorageProxy.applyCounterMutationOnLeader(cm, localDataCenter).get();
            WriteResponse response = new WriteResponse(cm.getTable(), cm.key(), true);
            Message responseMessage = WriteResponse.makeWriteResponseMessage(message, response);
            MessagingService.instance().sendReply(responseMessage, id, message.getFrom());
        }
        catch (UnavailableException e)
        {
            // We check for UnavailableException in the coordinator not. It is
            // hence reasonable to let the coordinator timeout in the very
            // unlikely case we arrive here
        }
        catch (TimeoutException e)
        {
            // The coordinator node will have timeout itself so we let that goes
        }
        catch (IOException e)
        {
            logger.error("Error in counter mutation", e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterUpdateColumn;CounterUpdateColumn(ByteBuffer,long,long);;;public CounterUpdateColumn(ByteBuffer name, long value, long timestamp)
    {
        this(name, ByteBufferUtil.bytes(value), timestamp);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterUpdateColumn;CounterUpdateColumn(ByteBuffer,ByteBuffer,long);;;public CounterUpdateColumn(ByteBuffer name, ByteBuffer value, long timestamp)
    {
        super(name, value, timestamp);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterUpdateColumn;delta();;;public long delta()
    {
        return value().getLong(value().position());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterUpdateColumn;diff(IColumn);;;@Override
    public IColumn diff(IColumn column)
    {
        // Diff is used during reads, but we should never read those columns
        throw new UnsupportedOperationException("This operation is unsupported on CounterUpdateColumn.");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterUpdateColumn;reconcile(IColumn);;;@Override
    public IColumn reconcile(IColumn column)
    {
        // The only time this could happen is if a batchAdd ships two
        // increment for the same column. Hence we simply sums the delta.

        assert (column instanceof CounterUpdateColumn) || (column instanceof DeletedColumn) : "Wrong class type.";

        // tombstones take precedence
        if (column.isMarkedForDelete())
            return timestamp() > column.timestamp() ? this : column;

        // neither is tombstoned
        CounterUpdateColumn c = (CounterUpdateColumn)column;
        return new CounterUpdateColumn(name(), delta() + c.delta(), Math.max(timestamp(), c.timestamp()));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterUpdateColumn;serializationFlags();;;@Override
    public int serializationFlags()
    {
        return ColumnSerializer.COUNTER_UPDATE_MASK;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\CounterUpdateColumn;localCopy(ColumnFamilyStore);;;@Override
    public CounterColumn localCopy(ColumnFamilyStore cfs)
    {
        return new CounterColumn(cfs.internOrCopy(name),
                                 CounterContext.instance().create(delta()),
                                 timestamp(),
                                 Long.MIN_VALUE);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;DataTracker(ColumnFamilyStore);;;public DataTracker(ColumnFamilyStore cfstore)
    {
        this.cfstore = cfstore;
        this.view = new AtomicReference<View>();
        this.init();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getMemtable();;;public Memtable getMemtable()
    {
        return view.get().memtable;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getMemtablesPendingFlush();;;public Set<Memtable> getMemtablesPendingFlush()
    {
        return view.get().memtablesPendingFlush;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getSSTables();;;public Set<SSTableReader> getSSTables()
    {
        return view.get().sstables;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getView();;;public View getView()
    {
        return view.get();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;switchMemtable();;;public Memtable switchMemtable()
    {
        // atomically change the current memtable
        Memtable newMemtable = new Memtable(cfstore);
        Memtable toFlushMemtable;
        View currentView, newView;
        do
        {
            currentView = view.get();
            toFlushMemtable = currentView.memtable;
            newView = currentView.switchMemtable(newMemtable);
        }
        while (!view.compareAndSet(currentView, newView));

        return toFlushMemtable;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;renewMemtable();;;public void renewMemtable()
    {
        Memtable newMemtable = new Memtable(cfstore);
        View currentView, newView;
        do
        {
            currentView = view.get();
            newView = currentView.renewMemtable(newMemtable);
        }
        while (!view.compareAndSet(currentView, newView));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;replaceFlushed(Memtable,SSTableReader);;;public void replaceFlushed(Memtable memtable, SSTableReader sstable)
    {
        View currentView, newView;
        do
        {
            currentView = view.get();
            newView = currentView.replaceFlushed(memtable, sstable);
        }
        while (!view.compareAndSet(currentView, newView));

        addNewSSTablesSize(Arrays.asList(sstable));
        cfstore.updateCacheSizes();

        incrementallyBackup(sstable);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;incrementallyBackup(SSTableReader);;;public void incrementallyBackup(SSTableReader sstable)
    {
        if (DatabaseDescriptor.incrementalBackupsEnabled())
        {
            File keyspaceDir = new File(sstable.getFilename()).getParentFile();
            File backupsDir = new File(keyspaceDir, "backups");
            try
            {
                if (!backupsDir.exists() && !backupsDir.mkdirs())
                    throw new IOException("Unable to create " + backupsDir);
                sstable.createLinks(backupsDir.getCanonicalPath());
            }
            catch (IOException e)
            {
                throw new IOError(e);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;markCompacting(Collection<SSTableReader>,int,int);;;public Set<SSTableReader> markCompacting(Collection<SSTableReader> tomark, int min, int max)
    {
        if (max < min || max < 1)
            return null;
        View currentView, newView;
        Set<SSTableReader> subset = null;
        // order preserving set copy of the input
        Set<SSTableReader> remaining = new LinkedHashSet<SSTableReader>(tomark);
        do
        {
            currentView = view.get();

            // find the subset that is active and not already compacting
            remaining.removeAll(currentView.compacting);
            remaining.retainAll(currentView.sstables);
            if (remaining.size() < min)
                // cannot meet the min threshold
                return null;

            // cap the newly compacting items into a subset set
            subset = new HashSet<SSTableReader>();
            Iterator<SSTableReader> iter = remaining.iterator();
            for (int added = 0; added < max && iter.hasNext(); added++)
                subset.add(iter.next());

            newView = currentView.markCompacting(subset);
        }
        while (!view.compareAndSet(currentView, newView));
        return subset;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;unmarkCompacting(Collection<SSTableReader>);;;public void unmarkCompacting(Collection<SSTableReader> unmark)
    {
        View currentView, newView;
        do
        {
            currentView = view.get();
            newView = currentView.unmarkCompacting(unmark);
        }
        while (!view.compareAndSet(currentView, newView));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;markCompacted(Collection<SSTableReader>);;;public void markCompacted(Collection<SSTableReader> sstables)
    {
        replace(sstables, Collections.<SSTableReader>emptyList());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;replaceCompactedSSTables(Collection<SSTableReader>,Iterable<SSTableReader>);;;public void replaceCompactedSSTables(Collection<SSTableReader> sstables, Iterable<SSTableReader> replacements)
    {
        replace(sstables, replacements);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;addSSTables(Collection<SSTableReader>);;;public void addSSTables(Collection<SSTableReader> sstables)
    {
        replace(Collections.<SSTableReader>emptyList(), sstables);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;addStreamedSSTable(SSTableReader);;;public void addStreamedSSTable(SSTableReader sstable)
    {
        addSSTables(Arrays.asList(sstable));
        incrementallyBackup(sstable);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;removeAllSSTables();;;public void removeAllSSTables()
    {
        replace(getSSTables(), Collections.<SSTableReader>emptyList());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;init();;;void init()
    {
        view.set(new View(new Memtable(cfstore),
                          Collections.<Memtable>emptySet(),
                          Collections.<SSTableReader>emptySet(),
                          Collections.<SSTableReader>emptySet()));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;replace(Collection<SSTableReader>,Iterable<SSTableReader>);;;private void replace(Collection<SSTableReader> oldSSTables, Iterable<SSTableReader> replacements)
    {
        View currentView, newView;
        do
        {
            currentView = view.get();
            newView = currentView.replace(oldSSTables, replacements);
        }
        while (!view.compareAndSet(currentView, newView));

        addNewSSTablesSize(replacements);
        removeOldSSTablesSize(oldSSTables);

        cfstore.updateCacheSizes();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;addNewSSTablesSize(Iterable<SSTableReader>);;;private void addNewSSTablesSize(Iterable<SSTableReader> newSSTables)
    {
        for (SSTableReader sstable : newSSTables)
        {
            assert sstable.getKeySamples() != null;
            if (logger.isDebugEnabled())
                logger.debug(String.format("adding %s to list of files tracked for %s.%s",
                            sstable.descriptor, cfstore.table.name, cfstore.getColumnFamilyName()));
            long size = sstable.bytesOnDisk();
            liveSize.addAndGet(size);
            totalSize.addAndGet(size);
            sstable.setTrackedBy(this);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;removeOldSSTablesSize(Iterable<SSTableReader>);;;private void removeOldSSTablesSize(Iterable<SSTableReader> oldSSTables)
    {
        for (SSTableReader sstable : oldSSTables)
        {
            if (logger.isDebugEnabled())
                logger.debug(String.format("removing %s from list of files tracked for %s.%s",
                            sstable.descriptor, cfstore.table.name, cfstore.getColumnFamilyName()));
            sstable.markCompacted();
            liveSize.addAndGet(-sstable.bytesOnDisk());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getKeyCache();;;public AutoSavingCache<Pair<Descriptor,DecoratedKey>,Long> getKeyCache()
    {
        return cfstore.getKeyCache();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getLiveSize();;;public long getLiveSize()
    {
        return liveSize.get();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getTotalSize();;;public long getTotalSize()
    {
        return totalSize.get();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;spaceReclaimed(long);;;public void spaceReclaimed(long size)
    {
        totalSize.addAndGet(-size);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;estimatedKeys();;;public long estimatedKeys()
    {
        long n = 0;
        for (SSTableReader sstable : getSSTables())
        {
            n += sstable.estimatedKeys();
        }
        return n;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getEstimatedRowSizeHistogram();;;public long[] getEstimatedRowSizeHistogram()
    {
        long[] histogram = new long[90];

        for (SSTableReader sstable : getSSTables())
        {
            long[] rowSize = sstable.getEstimatedRowSize().getBuckets(false);

            for (int i = 0; i < histogram.length; i++)
                histogram[i] += rowSize[i];
        }

        return histogram;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getEstimatedColumnCountHistogram();;;public long[] getEstimatedColumnCountHistogram()
    {
        long[] histogram = new long[90];

        for (SSTableReader sstable : getSSTables())
        {
            long[] columnSize = sstable.getEstimatedColumnCount().getBuckets(false);

            for (int i = 0; i < histogram.length; i++)
                histogram[i] += columnSize[i];
        }

        return histogram;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getMinRowSize();;;public long getMinRowSize()
    {
        long min = 0;
        for (SSTableReader sstable : getSSTables())
        {
            if (min == 0 || sstable.getEstimatedRowSize().min() < min)
                min = sstable.getEstimatedRowSize().min();
        }
        return min;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getMaxRowSize();;;public long getMaxRowSize()
    {
        long max = 0;
        for (SSTableReader sstable : getSSTables())
        {
            if (sstable.getEstimatedRowSize().max() > max)
                max = sstable.getEstimatedRowSize().max();
        }
        return max;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getMeanRowSize();;;public long getMeanRowSize()
    {
        long sum = 0;
        long count = 0;
        for (SSTableReader sstable : getSSTables())
        {
            sum += sstable.getEstimatedRowSize().mean();
            count++;
        }
        return count > 0 ? sum / count : 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getMeanColumns();;;public int getMeanColumns()
    {
        long sum = 0;
        int count = 0;
        for (SSTableReader sstable : getSSTables())
        {
            sum += sstable.getEstimatedColumnCount().mean();
            count++;
        }
        return count > 0 ? (int) (sum / count) : 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getBloomFilterFalsePositives();;;public long getBloomFilterFalsePositives()
    {
        long count = 0L;
        for (SSTableReader sstable: getSSTables())
        {
            count += sstable.getBloomFilterFalsePositiveCount();
        }
        return count;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getRecentBloomFilterFalsePositives();;;public long getRecentBloomFilterFalsePositives()
    {
        long count = 0L;
        for (SSTableReader sstable: getSSTables())
        {
            count += sstable.getRecentBloomFilterFalsePositiveCount();
        }
        return count;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getBloomFilterFalseRatio();;;public double getBloomFilterFalseRatio()
    {
        long falseCount = 0L;
        long trueCount = 0L;
        for (SSTableReader sstable: getSSTables())
        {
            falseCount += sstable.getBloomFilterFalsePositiveCount();
            trueCount += sstable.getBloomFilterTruePositiveCount();
        }
        if (falseCount == 0L && trueCount == 0L)
            return 0d;
        return (double) falseCount / (trueCount + falseCount);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;getRecentBloomFilterFalseRatio();;;public double getRecentBloomFilterFalseRatio()
    {
        long falseCount = 0L;
        long trueCount = 0L;
        for (SSTableReader sstable: getSSTables())
        {
            falseCount += sstable.getRecentBloomFilterFalsePositiveCount();
            trueCount += sstable.getRecentBloomFilterTruePositiveCount();
        }
        if (falseCount == 0L && trueCount == 0L)
            return 0d;
        return (double) falseCount / (trueCount + falseCount);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;View(Memtable,Set<Memtable>,Set<SSTableReader>,Set<SSTableReader>);;;public View(Memtable memtable, Set<Memtable> pendingFlush, Set<SSTableReader> sstables, Set<SSTableReader> compacting)
        {
            this.memtable = memtable;
            this.memtablesPendingFlush = Collections.unmodifiableSet(pendingFlush);
            this.sstables = Collections.unmodifiableSet(sstables);
            this.compacting = Collections.unmodifiableSet(compacting);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;switchMemtable(Memtable);;;public View switchMemtable(Memtable newMemtable)
        {
            Set<Memtable> newPending = new HashSet<Memtable>(memtablesPendingFlush);
            newPending.add(memtable);
            return new View(newMemtable, newPending, sstables, compacting);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;renewMemtable(Memtable);;;public View renewMemtable(Memtable newMemtable)
        {
            return new View(newMemtable, memtablesPendingFlush, sstables, compacting);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;replaceFlushed(Memtable,SSTableReader);;;public View replaceFlushed(Memtable flushedMemtable, SSTableReader newSSTable)
        {
            Set<Memtable> newPendings = new HashSet<Memtable>(memtablesPendingFlush);
            Set<SSTableReader> newSSTables = new HashSet<SSTableReader>(sstables);
            newPendings.remove(flushedMemtable);
            newSSTables.add(newSSTable);
            return new View(memtable, newPendings, newSSTables, compacting);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;replace(Collection<SSTableReader>,Iterable<SSTableReader>);;;public View replace(Collection<SSTableReader> oldSSTables, Iterable<SSTableReader> replacements)
        {
            Set<SSTableReader> sstablesNew = new HashSet<SSTableReader>(sstables);
            Iterables.addAll(sstablesNew, replacements);
            sstablesNew.removeAll(oldSSTables);
            return new View(memtable, memtablesPendingFlush, sstablesNew, compacting);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;markCompacting(Collection<SSTableReader>);;;public View markCompacting(Collection<SSTableReader> tomark)
        {
            Set<SSTableReader> compactingNew = new HashSet<SSTableReader>(compacting);
            compactingNew.addAll(tomark);
            return new View(memtable, memtablesPendingFlush, sstables, compactingNew);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DataTracker;unmarkCompacting(Collection<SSTableReader>);;;public View unmarkCompacting(Collection<SSTableReader> tounmark)
        {
            Set<SSTableReader> compactingNew = new HashSet<SSTableReader>(compacting);
            compactingNew.removeAll(tounmark);
            return new View(memtable, memtablesPendingFlush, sstables, compactingNew);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DeletedColumn;reconcile(IColumn);;;@Override
    public IColumn reconcile(IColumn column)
    {
        if (column instanceof DeletedColumn)
            return super.reconcile(column);
        return column.reconcile(this);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DeletedColumn;localCopy(ColumnFamilyStore);;;@Override
    public IColumn localCopy(ColumnFamilyStore cfs)
    {
        return new DeletedColumn(cfs.internOrCopy(name), ByteBufferUtil.clone(value), timestamp);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\DeletedColumn;serializationFlags();;;@Override
    public int serializationFlags()
    {
        return ColumnSerializer.DELETION_MASK;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ExpiringColumn;localCopy(ColumnFamilyStore);;;@Override
    public IColumn localCopy(ColumnFamilyStore cfs)
    {
        return new ExpiringColumn(cfs.internOrCopy(name), ByteBufferUtil.clone(value), timestamp, timeToLive, localExpirationTime);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ExpiringColumn;serializationFlags();;;@Override
    public int serializationFlags()
    {
        return ColumnSerializer.EXPIRATION_MASK;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\IColumn;serializationFlags();;;public int serializationFlags();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\IColumn;localCopy(ColumnFamilyStore);;;IColumn localCopy(ColumnFamilyStore cfs);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\IColumnContainer;remove(ByteBuffer);;;public void remove(ByteBuffer columnName);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\IColumnContainer;getSortedColumns();;;public Collection<IColumn> getSortedColumns();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\IFlushable;flushAndSignal(CountDownLatch,ExecutorService,ExecutorService,ReplayPosition);;;public void flushAndSignal(CountDownLatch condition, ExecutorService sorter, ExecutorService writer, ReplayPosition context);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\IMutation;getTable();;;public String getTable();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\IMutation;key();;;public ByteBuffer key();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\IMutation;toString(boolean);;;public String toString(boolean shallow);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\IndexScanCommand;getMessage(Integer);;;public Message getMessage(Integer version)
    {
        DataOutputBuffer dob = new DataOutputBuffer();
        try
        {
            serializer.serialize(this, dob);
        }
        catch (IOException e)
        {
            throw new IOError(e);
        }
        return new Message(FBUtilities.getLocalAddress(),
                           StorageService.Verb.INDEX_SCAN,
                           Arrays.copyOf(dob.getData(), dob.getLength()),
                           version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Memtable;Memtable(ColumnFamilyStore);;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Memtable;getLiveSize();;;public long getLiveSize()
    {
        // 25% fudge factor
        return (long) (currentThroughput.get() * cfs.liveRatio * 1.25);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Memtable;getSerializedSize();;;public long getSerializedSize()
    {
        return currentThroughput.get();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Memtable;getOperations();;;public long getOperations()
    {
        return currentOperations.get();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Memtable;updateLiveRatio();;;public void updateLiveRatio()
    {
        if (!MemoryMeter.isInitialized())
        {
            // hack for openjdk.  we log a warning about this in the startup script too.
            logger.warn("MemoryMeter uninitialized (jamm not specified as java agent); assuming liveRatio of 10.0.  Usually this means cassandra-env.sh disabled jamm because you are using a buggy JRE; upgrade to the Sun JRE instead");
            cfs.liveRatio = 10.0;
            return;
        }

        Runnable runnable = new Runnable()
        {
            public void run()
            {
                activelyMeasuring = Memtable.this;

                long start = System.currentTimeMillis();
                // ConcurrentSkipListMap has cycles, so measureDeep will have to track a reference to EACH object it visits.
                // So to reduce the memory overhead of doing a measurement, we break it up to row-at-a-time.
                long deepSize = meter.measure(columnFamilies);
                int objects = 0;
                for (Map.Entry<DecoratedKey, ColumnFamily> entry : columnFamilies.entrySet())
                {
                    deepSize += meter.measureDeep(entry.getKey()) + meter.measureDeep(entry.getValue());
                    objects += entry.getValue().getColumnCount();
                }
                double newRatio = (double) deepSize / currentThroughput.get();

                if (newRatio < MIN_SANE_LIVE_RATIO)
                {
                    logger.warn("setting live ratio to minimum of 1.0 instead of {}", newRatio);
                    newRatio = MIN_SANE_LIVE_RATIO;
                }
                if (newRatio > MAX_SANE_LIVE_RATIO)
                {
                    logger.warn("setting live ratio to maximum of 64 instead of {}", newRatio);
                    newRatio = MAX_SANE_LIVE_RATIO;
                }
                cfs.liveRatio = Math.max(cfs.liveRatio, newRatio);

                logger.info("{} liveRatio is {} (just-counted was {}).  calculation took {}ms for {} columns",
                            new Object[]{ cfs, cfs.liveRatio, newRatio, System.currentTimeMillis() - start, objects });
                activelyMeasuring = null;
            }
        };

        try
        {
            meterExecutor.submit(runnable);
        }
        catch (RejectedExecutionException e)
        {
            logger.debug("Meter thread is busy; skipping liveRatio update for {}", cfs);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Memtable;writeSortedContents(ReplayPosition);;;private SSTableReader writeSortedContents(ReplayPosition context) throws IOException
    {
        logger.info("Writing " + this);

        long keySize = 0;
        for (DecoratedKey key : columnFamilies.keySet())
            keySize += key.key.remaining();
        long estimatedSize = (long) ((keySize // index entries
                                      + keySize // keys in data file
                                      + currentThroughput.get()) // data
                                     * 1.2); // bloom filter and row index overhead
        SSTableWriter writer = cfs.createFlushWriter(columnFamilies.size(), estimatedSize, context);

        // (we can't clear out the map as-we-go to free up memory,
        //  since the memtable is being used for queries in the "pending flush" category)
        for (Map.Entry<DecoratedKey, ColumnFamily> entry : columnFamilies.entrySet())
            writer.append(entry.getKey(), entry.getValue());

        SSTableReader ssTable = writer.closeAndOpenReader();
        logger.info(String.format("Completed flushing %s (%d bytes)",
                                  ssTable.getFilename(), new File(ssTable.getFilename()).length()));
        return ssTable;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Memtable;flushAndSignal(CountDownLatch,ExecutorService,ExecutorService,ReplayPosition);;;public void flushAndSignal(final CountDownLatch latch, ExecutorService sorter, final ExecutorService writer, final ReplayPosition context)
    {
        writer.execute(new WrappedRunnable()
        {
            public void runMayThrow() throws IOException
            {
                cfs.flushLock.lock();
                try
                {
                    if (!cfs.isDropped())
                    {
                        SSTableReader sstable = writeSortedContents(context);
                        cfs.replaceFlushed(Memtable.this, sstable);
                    }
                }
                finally
                {
                    cfs.flushLock.unlock();
                }
                latch.countDown();
            }
        });
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\MemtableAllocator;clone(ByteBuffer);;;public ByteBuffer clone(ByteBuffer buffer)
    {
        assert buffer != null;

        // satisfy large allocations directly from JVM since they don't cause fragmentation
        // as badly, and fill up our regions quickly
        if (buffer.remaining() > MAX_CLONED_SIZE)
            return ByteBufferUtil.clone(buffer);

        while (true)
        {
            Region region = getRegion();

            // Try to allocate from this region
            ByteBuffer cloned = region.allocate(buffer.remaining());
            if (cloned != null)
            {
                cloned.mark();
                cloned.put(buffer.duplicate());
                cloned.reset();
                return cloned;
            }

            // not enough space!
            tryRetireRegion(region);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\MemtableAllocator;tryRetireRegion(Region);;;private void tryRetireRegion(Region region)
    {
        if (currentRegion.compareAndSet(region, null))
        {
            filledRegions.add(region);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\MemtableAllocator;getRegion();;;private Region getRegion()
    {
        while (true)
        {
            // Try to get the region
            Region region = currentRegion.get();
            if (region != null)
                return region;

            // No current region, so we want to allocate one. We race
            // against other allocators to CAS in an uninitialized region
            // (which is cheap to allocate)
            region = new Region(REGION_SIZE);
            if (currentRegion.compareAndSet(null, region))
            {
                // we won race - now we need to actually do the expensive allocation step
                region.init();
                return region;
            }
            // someone else won race - that's fine, we'll try to grab theirs
            // in the next iteration of the loop.
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\MemtableAllocator;Region(int);;;private Region(int size)
        {
            this.size = size;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\MemtableAllocator;init();;;public void init()
        {
            assert nextFreeOffset.get() == UNINITIALIZED;
            data = ByteBuffer.allocate(size);
            assert data.remaining() == data.capacity();
            // Mark that it's ready for use
            boolean initted = nextFreeOffset.compareAndSet(UNINITIALIZED, 0);
            // We should always succeed the above CAS since only one thread calls init()!
            Preconditions.checkState(initted, "Multiple threads tried to init same region");
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\MemtableAllocator;allocate(int);;;public ByteBuffer allocate(int size)
        {
            while (true)
            {
                int oldOffset = nextFreeOffset.get();
                if (oldOffset == UNINITIALIZED)
                {
                    // The region doesn't have its data allocated yet.
                    // Since we found this in currentRegion, we know that whoever
                    // CAS-ed it there is allocating it right now. So spin-loop
                    // shouldn't spin long!
                    Thread.yield();
                    continue;
                }

                if (oldOffset + size > data.capacity()) // capacity == remaining
                    return null;

                // Try to atomically claim this region
                if (nextFreeOffset.compareAndSet(oldOffset, oldOffset + size))
                {
                    // we got the alloc
                    allocCount.incrementAndGet();
                    return (ByteBuffer) data.duplicate().position(oldOffset);
                }
                // we raced and lost alloc, try again
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\MemtableAllocator;toString();;;@Override
        public String toString()
        {
            return "Region@" + System.identityHashCode(this) +
                   " allocs=" + allocCount.get() + "waste=" +
                   (data.capacity() - nextFreeOffset.get());
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\MeteredFlusher;run();;;public void run()
    {
        // first, find how much memory non-active memtables are using
        Memtable activelyMeasuring = Memtable.activelyMeasuring;
        long flushingBytes = activelyMeasuring == null ? 0 : activelyMeasuring.getLiveSize();
        flushingBytes += countFlushingBytes();

        // next, flush CFs using more than 1 / (maximum number of memtables it could have in the pipeline)
        // of the total size allotted.  Then, flush other CFs in order of size if necessary.
        long liveBytes = 0;
        try
        {
            for (ColumnFamilyStore cfs : ColumnFamilyStore.all())
            {
                long size = cfs.getTotalMemtableLiveSize();
                int maxInFlight = (int) Math.ceil((double) (1 // live memtable
                                                            + 1 // potentially a flushed memtable being counted by jamm
                                                            + DatabaseDescriptor.getFlushWriters()
                                                            + DatabaseDescriptor.getFlushQueueSize())
                                                  / (1 + cfs.getIndexedColumns().size()));
                if (size > (DatabaseDescriptor.getTotalMemtableSpaceInMB() * 1048576L - flushingBytes) / maxInFlight)
                {
                    logger.info("flushing high-traffic column family {}", cfs);
                    cfs.forceFlush();
                }
                else
                {
                    liveBytes += size;
                }
            }

            if (flushingBytes + liveBytes <= DatabaseDescriptor.getTotalMemtableSpaceInMB() * 1048576L)
                return;

            logger.info("estimated {} bytes used by all memtables pre-flush", liveBytes);

            // sort memtables by size
            List<ColumnFamilyStore> sorted = new ArrayList<ColumnFamilyStore>();
            Iterables.addAll(sorted, ColumnFamilyStore.all());
            Collections.sort(sorted, new Comparator<ColumnFamilyStore>()
            {
                public int compare(ColumnFamilyStore o1, ColumnFamilyStore o2)
                {
                    long size1 = o1.getTotalMemtableLiveSize();
                    long size2 = o2.getTotalMemtableLiveSize();
                    if (size1 < size2)
                        return -1;
                    if (size1 > size2)
                        return 1;
                    return 0;
                }
            });

            // flush largest first until we get below our threshold.
            // although it looks like liveBytes + flushingBytes will stay a constant, it will not if flushes finish
            // while we loop, which is especially likely to happen if the flush queue fills up (so further forceFlush calls block)
            while (true)
            {
                flushingBytes = countFlushingBytes();
                if (liveBytes + flushingBytes <= DatabaseDescriptor.getTotalMemtableSpaceInMB() * 1048576L || sorted.isEmpty())
                    break;

                ColumnFamilyStore cfs = sorted.remove(sorted.size() - 1);
                long size = cfs.getTotalMemtableLiveSize();
                logger.info("flushing {} to free up {} bytes", cfs, size);
                liveBytes -= size;
                cfs.forceFlush();
            }
        }
        finally
        {
            logger.trace("memtable memory usage is {} bytes with {} live", liveBytes + flushingBytes, liveBytes);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\MeteredFlusher;countFlushingBytes();;;private long countFlushingBytes()
    {
        long flushingBytes = 0;
        for (ColumnFamilyStore cfs : ColumnFamilyStore.all())
        {
            for (Memtable memtable : cfs.getMemtablesPendingFlush())
                flushingBytes += memtable.getLiveSize();
        }
        return flushingBytes;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\RangeSliceCommand;getMessage(Integer);;;public Message getMessage(Integer version) throws IOException
    {
        DataOutputBuffer dob = new DataOutputBuffer();
        serializer.serialize(this, dob, version);
        return new Message(FBUtilities.getLocalAddress(),
                           StorageService.Verb.RANGE_SLICE,
                           Arrays.copyOf(dob.getData(), dob.getLength()), version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\RangeSliceCommand;serialize(RangeSliceCommand,DataOutputStream,int);;;public void serialize(RangeSliceCommand sliceCommand, DataOutputStream dos, int version) throws IOException
    {
        dos.writeUTF(sliceCommand.keyspace);
        dos.writeUTF(sliceCommand.column_family);
        ByteBuffer sc = sliceCommand.super_column;
        dos.writeInt(sc == null ? 0 : sc.remaining());
        if (sc != null)
            ByteBufferUtil.write(sc, dos);

        TSerializer ser = new TSerializer(new TBinaryProtocol.Factory());
        FBUtilities.serialize(ser, sliceCommand.predicate, dos);
        AbstractBounds.serializer().serialize(sliceCommand.range, dos);
        dos.writeInt(sliceCommand.max_keys);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\RangeSliceCommand;deserialize(DataInputStream,int);;;public RangeSliceCommand deserialize(DataInputStream dis, int version) throws IOException
    {
        String keyspace = dis.readUTF();
        String column_family = dis.readUTF();

        int scLength = dis.readInt();
        ByteBuffer super_column = null;
        if (scLength > 0)
            super_column = ByteBuffer.wrap(readBuf(scLength, dis));

        TDeserializer dser = new TDeserializer(new TBinaryProtocol.Factory());
        SlicePredicate pred = new SlicePredicate();
        FBUtilities.deserialize(dser, pred, dis);

        AbstractBounds range = AbstractBounds.serializer().deserialize(dis);
        int max_keys = dis.readInt();
        return new RangeSliceCommand(keyspace, column_family, super_column, pred, range, max_keys);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\RangeSliceReply;read(byte[],int);;;public static RangeSliceReply read(byte[] body, int version) throws IOException
    {
        ByteArrayInputStream bufIn = new ByteArrayInputStream(body);
        DataInputStream dis = new DataInputStream(bufIn);
        int rowCount = dis.readInt();
        List<Row> rows = new ArrayList<Row>(rowCount);
        for (int i = 0; i < rowCount; i++)
        {
            rows.add(Row.serializer().deserialize(dis, version));
        }
        return new RangeSliceReply(rows);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ReadCommand;getMessage(Integer);;;public Message getMessage(Integer version) throws IOException
    {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(bos);
        ReadCommand.serializer().serialize(this, dos, version);
        return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.READ, bos.toByteArray(), version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ReadCommand;serialize(ReadCommand,DataOutputStream,int);;;public void serialize(ReadCommand rm, DataOutputStream dos, int version) throws IOException
    {
        dos.writeByte(rm.commandType);
        ReadCommandSerializer ser = CMD_SERIALIZER_MAP.get(rm.commandType);
        ser.serialize(rm, dos, version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ReadCommand;deserialize(DataInputStream,int);;;public ReadCommand deserialize(DataInputStream dis, int version) throws IOException
    {
        byte msgType = dis.readByte();
        return CMD_SERIALIZER_MAP.get(msgType).deserialize(dis, version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ReadResponse;serialize(ReadResponse,DataOutputStream,int);;;public void serialize(ReadResponse rm, DataOutputStream dos, int version) throws IOException
	{
        dos.writeInt(rm.isDigestQuery() ? rm.digest().remaining() : 0);
        ByteBuffer buffer = rm.isDigestQuery() ? rm.digest() : ByteBufferUtil.EMPTY_BYTE_BUFFER;
        ByteBufferUtil.write(buffer, dos);
        dos.writeBoolean(rm.isDigestQuery());

        if (!rm.isDigestQuery())
        {
            Row.serializer().serialize(rm.row(), dos, version);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\ReadResponse;deserialize(DataInputStream,int);;;public ReadResponse deserialize(DataInputStream dis, int version) throws IOException
    {
        byte[] digest = null;
        int digestSize = dis.readInt();
        if (digestSize > 0)
        {
            digest = new byte[digestSize];
            dis.readFully(digest, 0, digestSize);
        }
        boolean isDigest = dis.readBoolean();
        assert isDigest == digestSize > 0;

        Row row = null;
        if (!isDigest)
        {
            // This is coming from a remote host
            row = Row.serializer().deserialize(dis, version, true);
        }

        return isDigest ? new ReadResponse(ByteBuffer.wrap(digest)) : new ReadResponse(row);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Row;Row(DecoratedKey<?>,ColumnFamily);;;public Row(DecoratedKey<?> key, ColumnFamily cf)
    {
        assert key != null;
        // cf may be null, indicating no data
        this.key = key;
        this.cf = cf;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Row;serialize(Row,DataOutputStream,int);;;public void serialize(Row row, DataOutputStream dos, int version) throws IOException
    {
        ByteBufferUtil.writeWithShortLength(row.key.key, dos);
        ColumnFamily.serializer().serialize(row.cf, dos);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Row;deserialize(DataInputStream,int,boolean);;;public Row deserialize(DataInputStream dis, int version, boolean fromRemote) throws IOException
    {
        return new Row(StorageService.getPartitioner().decorateKey(ByteBufferUtil.readWithShortLength(dis)),
                       ColumnFamily.serializer().deserialize(dis, false, fromRemote));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Row;deserialize(DataInputStream,int);;;public Row deserialize(DataInputStream dis, int version) throws IOException
    {
        return deserialize(dis, version, false);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\RowMutation;addCounter(QueryPath,long);;;public void addCounter(QueryPath path, long value)
    {
        Integer id = CFMetaData.getId(table_, path.columnFamilyName);
        ColumnFamily columnFamily = modifications_.get(id);
        if (columnFamily == null)
        {
            columnFamily = ColumnFamily.create(table_, path.columnFamilyName);
            modifications_.put(id, columnFamily);
        }
        columnFamily.addCounter(path, value);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\RowMutation;getMessage(Integer);;;public Message getMessage(Integer version) throws IOException
    {
        return makeRowMutationMessage(StorageService.Verb.MUTATION, version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\RowMutation;makeRowMutationMessage(StorageService.Verb,int);;;public Message makeRowMutationMessage(StorageService.Verb verb, int version) throws IOException
    {
        return new Message(FBUtilities.getLocalAddress(), verb, getSerializedBuffer(version), version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\RowMutation;getSerializedBuffer(int);;;public synchronized byte[] getSerializedBuffer(int version) throws IOException
    {
        byte[] preserializedBuffer = preserializedBuffers.get(version);
        if (preserializedBuffer == null)
        {
            ByteArrayOutputStream bout = new ByteArrayOutputStream();
            DataOutputStream dout = new DataOutputStream(bout);
            RowMutation.serializer().serialize(this, dout, version);
            dout.close();
            preserializedBuffer = bout.toByteArray();
            preserializedBuffers.put(version, preserializedBuffer);
        }
        return preserializedBuffer;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\RowMutation;addColumnOrSuperColumn(String,ColumnOrSuperColumn);;;public void addColumnOrSuperColumn(String cfName, ColumnOrSuperColumn cosc)
    {
        if (cosc.super_column != null)
        {
            for (org.apache.cassandra.thrift.Column column : cosc.super_column.columns)
            {
                add(new QueryPath(cfName, cosc.super_column.name, column.name), column.value, column.timestamp, column.ttl);
            }
        }
        else if (cosc.column != null)
        {
            add(new QueryPath(cfName, null, cosc.column.name), cosc.column.value, cosc.column.timestamp, cosc.column.ttl);
        }
        else if (cosc.counter_super_column != null)
        {
            for (org.apache.cassandra.thrift.CounterColumn column : cosc.counter_super_column.columns)
            {
                addCounter(new QueryPath(cfName, cosc.counter_super_column.name, column.name), column.value);
            }
        }
        else // cosc.counter_column != null
        {
            addCounter(new QueryPath(cfName, null, cosc.counter_column.name), cosc.counter_column.value);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\RowMutation;deleteColumnOrSuperColumn(String,Deletion);;;public void deleteColumnOrSuperColumn(String cfName, Deletion del)
    {
        if (del.predicate != null && del.predicate.column_names != null)
        {
            for(ByteBuffer c : del.predicate.column_names)
            {
                if (del.super_column == null && DatabaseDescriptor.getColumnFamilyType(table_, cfName) == ColumnFamilyType.Super)
                    delete(new QueryPath(cfName, c), del.timestamp);
                else
                    delete(new QueryPath(cfName, del.super_column, c), del.timestamp);
            }
        }
        else
        {
            delete(new QueryPath(cfName, del.super_column), del.timestamp);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\RowMutation;fromBytes(byte[],int);;;static RowMutation fromBytes(byte[] raw, int version) throws IOException
    {
        RowMutation rm = serializer_.deserialize(new DataInputStream(new ByteArrayInputStream(raw)), version);
        rm.preserializedBuffers.put(version, raw);
        return rm;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\RowMutation;localCopy();;;public RowMutation localCopy()
    {
        RowMutation rm = new RowMutation(table_, ByteBufferUtil.clone(key_));

        Table table = Table.open(table_);
        for (Map.Entry<Integer, ColumnFamily> entry : modifications_.entrySet())
        {
            ColumnFamily cf = entry.getValue().cloneMeShallow();
            ColumnFamilyStore cfs = table.getColumnFamilyStore(cf.id());
            for (Map.Entry<ByteBuffer, IColumn> ce : entry.getValue().getColumnsMap().entrySet())
                cf.addColumn(ce.getValue().localCopy(cfs));
            rm.modifications_.put(entry.getKey(), cf);
        }

        return rm;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\RowMutation;serialize(RowMutation,DataOutputStream,int);;;public void serialize(RowMutation rm, DataOutputStream dos, int version) throws IOException
        {
            dos.writeUTF(rm.getTable());
            ByteBufferUtil.writeWithShortLength(rm.key(), dos);

            /* serialize the modifications_ in the mutation */
            int size = rm.modifications_.size();
            dos.writeInt(size);
            if (size > 0)
            {
                for (Map.Entry<Integer,ColumnFamily> entry : rm.modifications_.entrySet())
                {
                    dos.writeInt(entry.getKey());
                    ColumnFamily.serializer().serialize(entry.getValue(), dos);
                }
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\RowMutation;deserialize(DataInputStream,int,boolean);;;public RowMutation deserialize(DataInputStream dis, int version, boolean fromRemote) throws IOException
        {
            String table = dis.readUTF();
            ByteBuffer key = ByteBufferUtil.readWithShortLength(dis);
            Map<Integer, ColumnFamily> modifications = new HashMap<Integer, ColumnFamily>();
            int size = dis.readInt();
            for (int i = 0; i < size; ++i)
            {
                Integer cfid = Integer.valueOf(dis.readInt());
                ColumnFamily cf = ColumnFamily.serializer().deserialize(dis, true, fromRemote);
                modifications.put(cfid, cf);
            }
            return new RowMutation(table, key, modifications);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\RowMutation;deserialize(DataInputStream,int);;;public RowMutation deserialize(DataInputStream dis, int version) throws IOException
        {
            return deserialize(dis, version, true);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\SliceByNamesReadCommand;serialize(ReadCommand,DataOutputStream,int);;;@Override
    public void serialize(ReadCommand rm, DataOutputStream dos, int version) throws IOException
    {
        SliceByNamesReadCommand realRM = (SliceByNamesReadCommand)rm;
        dos.writeBoolean(realRM.isDigestQuery());
        dos.writeUTF(realRM.table);
        ByteBufferUtil.writeWithShortLength(realRM.key, dos);
        realRM.queryPath.serialize(dos);
        dos.writeInt(realRM.columnNames.size());
        if (realRM.columnNames.size() > 0)
        {
            for (ByteBuffer cName : realRM.columnNames)
            {
                ByteBufferUtil.writeWithShortLength(cName, dos);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\SliceByNamesReadCommand;deserialize(DataInputStream,int);;;@Override
    public ReadCommand deserialize(DataInputStream dis, int version) throws IOException
    {
        boolean isDigest = dis.readBoolean();
        String table = dis.readUTF();
        ByteBuffer key = ByteBufferUtil.readWithShortLength(dis);
        QueryPath columnParent = QueryPath.deserialize(dis);

        int size = dis.readInt();
        List<ByteBuffer> columns = new ArrayList<ByteBuffer>();
        for (int i = 0; i < size; ++i)
        {
            columns.add(ByteBufferUtil.readWithShortLength(dis));
        }
        SliceByNamesReadCommand rm = new SliceByNamesReadCommand(table, key, columnParent, columns);
        rm.setDigestQuery(isDigest);
        return rm;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\SliceFromReadCommand;serialize(ReadCommand,DataOutputStream,int);;;@Override
    public void serialize(ReadCommand rm, DataOutputStream dos, int version) throws IOException
    {
        SliceFromReadCommand realRM = (SliceFromReadCommand)rm;
        dos.writeBoolean(realRM.isDigestQuery());
        dos.writeUTF(realRM.table);
        ByteBufferUtil.writeWithShortLength(realRM.key, dos);
        realRM.queryPath.serialize(dos);
        ByteBufferUtil.writeWithShortLength(realRM.start, dos);
        ByteBufferUtil.writeWithShortLength(realRM.finish, dos);
        dos.writeBoolean(realRM.reversed);
        dos.writeInt(realRM.count);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\SliceFromReadCommand;deserialize(DataInputStream,int);;;@Override
    public ReadCommand deserialize(DataInputStream dis, int version) throws IOException
    {
        boolean isDigest = dis.readBoolean();
        SliceFromReadCommand rm = new SliceFromReadCommand(dis.readUTF(),
                                                           ByteBufferUtil.readWithShortLength(dis),
                                                           QueryPath.deserialize(dis),
                                                           ByteBufferUtil.readWithShortLength(dis),
                                                           ByteBufferUtil.readWithShortLength(dis),
                                                           dis.readBoolean(),
                                                           dis.readInt());
        rm.setDigestQuery(isDigest);
        return rm;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\SuperColumn;getSortedColumns();;;public Collection<IColumn> getSortedColumns()
    {
        return getSubColumns();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\SuperColumn;shallowCopy();;;public IColumn shallowCopy()
    {
        SuperColumn sc = new SuperColumn(ByteBufferUtil.clone(name_), this.getComparator());
        sc.localDeletionTime = localDeletionTime;
        sc.markedForDeleteAt = markedForDeleteAt;
        return sc;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\SuperColumn;localCopy(ColumnFamilyStore);;;public IColumn localCopy(ColumnFamilyStore cfs)
    {
        // we don't try to intern supercolumn names, because if we're using Cassandra correctly it's almost
        // certainly just going to pollute our interning map with unique, dynamic values
        SuperColumn sc = new SuperColumn(ByteBufferUtil.clone(name_), this.getComparator());
        sc.localDeletionTime = localDeletionTime;
        sc.markedForDeleteAt = markedForDeleteAt;
        
        for(Map.Entry<ByteBuffer, IColumn> c : columns_.entrySet())
        {
            sc.addColumn(c.getValue().localCopy(cfs));
        }

        return sc;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\SuperColumn;serializationFlags();;;public int serializationFlags()
    {
        throw new UnsupportedOperationException("Super columns don't have a serialization mask");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\SuperColumn;deserialize(DataInput,ColumnFamilyStore);;;public IColumn deserialize(DataInput dis, ColumnFamilyStore interner) throws IOException
    {
        return deserialize(dis, interner, false);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\SuperColumn;deserialize(DataInput,ColumnFamilyStore,boolean);;;public IColumn deserialize(DataInput dis, ColumnFamilyStore interner, boolean fromRemote) throws IOException
    {
        return deserialize(dis, interner, fromRemote, (int)(System.currentTimeMillis() / 1000));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\SuperColumn;deserialize(DataInput,ColumnFamilyStore,boolean,int);;;public IColumn deserialize(DataInput dis, ColumnFamilyStore interner, boolean fromRemote, int expireBefore) throws IOException
    {
        ByteBuffer name = ByteBufferUtil.readWithShortLength(dis);
        int localDeleteTime = dis.readInt();
        if (localDeleteTime != Integer.MIN_VALUE && localDeleteTime <= 0)
        {
            throw new IOException("Invalid localDeleteTime read: " + localDeleteTime);
        }
        long markedForDeleteAt = dis.readLong();

        /* read the number of columns */
        int size = dis.readInt();
        ColumnSerializer serializer = Column.serializer();
        ColumnSortedMap preSortedMap = new ColumnSortedMap(comparator, serializer, dis, interner, size, fromRemote, expireBefore);
        SuperColumn superColumn = new SuperColumn(name, new ConcurrentSkipListMap<ByteBuffer,IColumn>(preSortedMap));
        if (localDeleteTime != Integer.MIN_VALUE && localDeleteTime <= 0)
        {
            throw new IOException("Invalid localDeleteTime read: " + localDeleteTime);
        }
        superColumn.markForDeleteAt(localDeleteTime, markedForDeleteAt);
        return superColumn;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\SystemTable;getCurrentLocalNodeId();;;public static NodeId getCurrentLocalNodeId()
    {
        ByteBuffer id = null;
        Table table = Table.open(Table.SYSTEM_TABLE);
        QueryFilter filter = QueryFilter.getIdentityFilter(decorate(CURRENT_LOCAL_NODE_ID_KEY),
                new QueryPath(NODE_ID_CF));
        ColumnFamily cf = table.getColumnFamilyStore(NODE_ID_CF).getColumnFamily(filter);
        if (cf != null)
        {
            assert cf.getColumnCount() <= 1;
            if (cf.getColumnCount() > 0)
                id = cf.iterator().next().name();
        }
        if (id != null)
        {
            return NodeId.wrap(id);
        }
        else
        {
            return null;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\SystemTable;writeCurrentLocalNodeId(NodeId,NodeId);;;public static void writeCurrentLocalNodeId(NodeId oldNodeId, NodeId newNodeId)
    {
        long now = System.currentTimeMillis();
        ByteBuffer ip = ByteBuffer.wrap(FBUtilities.getLocalAddress().getAddress());

        ColumnFamily cf = ColumnFamily.create(Table.SYSTEM_TABLE, NODE_ID_CF);
        cf.addColumn(new Column(newNodeId.bytes(), ip, now));
        ColumnFamily cf2 = cf.cloneMe();
        if (oldNodeId != null)
        {
            cf2.addColumn(new DeletedColumn(oldNodeId.bytes(), (int) (now / 1000), now));
        }
        RowMutation rmCurrent = new RowMutation(Table.SYSTEM_TABLE, CURRENT_LOCAL_NODE_ID_KEY);
        RowMutation rmAll = new RowMutation(Table.SYSTEM_TABLE, ALL_LOCAL_NODE_ID_KEY);
        rmCurrent.add(cf2);
        rmAll.add(cf);
        try
        {
            rmCurrent.apply();
            rmAll.apply();
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\SystemTable;getOldLocalNodeIds();;;public static List<NodeId.NodeIdRecord> getOldLocalNodeIds()
    {
        List<NodeId.NodeIdRecord> l = new ArrayList<NodeId.NodeIdRecord>();

        Table table = Table.open(Table.SYSTEM_TABLE);
        QueryFilter filter = QueryFilter.getIdentityFilter(decorate(ALL_LOCAL_NODE_ID_KEY),
                new QueryPath(NODE_ID_CF));
        ColumnFamily cf = table.getColumnFamilyStore(NODE_ID_CF).getColumnFamily(filter);

        NodeId previous = null;
        for (IColumn c : cf.getReverseSortedColumns())
        {
            if (previous != null)
                l.add(new NodeId.NodeIdRecord(previous, c.timestamp()));

            // this will ignore the last column on purpose since it is the
            // current local node id
            previous = NodeId.wrap(c.name());
        }
        return l;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Table;getColumnFamilyStore(Integer);;;public ColumnFamilyStore getColumnFamilyStore(Integer id)
    {
        ColumnFamilyStore cfs = columnFamilyStores.get(id);
        if (cfs == null)
            throw new IllegalArgumentException("Unknown CF " + id);
        return cfs;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Table;forceCleanup(NodeId.OneShotRenewer);;;public void forceCleanup(NodeId.OneShotRenewer renewer) throws IOException, ExecutionException, InterruptedException
    {
        if (name.equals(SYSTEM_TABLE))
            throw new UnsupportedOperationException("Cleanup of the system table is neither necessary nor wise");

        // Sort the column families in order of SSTable size, so cleanup of smaller CFs
        // can free up space for larger ones
        List<ColumnFamilyStore> sortedColumnFamilies = new ArrayList<ColumnFamilyStore>(columnFamilyStores.values());
        Collections.sort(sortedColumnFamilies, new Comparator<ColumnFamilyStore>()
        {
            // Compare first on size and, if equal, sort by name (arbitrary & deterministic).
            public int compare(ColumnFamilyStore cf1, ColumnFamilyStore cf2)
            {
                long diff = (cf1.getTotalDiskSpaceUsed() - cf2.getTotalDiskSpaceUsed());
                if (diff > 0)
                    return 1;
                if (diff < 0)
                    return -1;
                return cf1.columnFamily.compareTo(cf2.columnFamily);
            }
        });

        // Cleanup in sorted order to free up space for the larger ones
        for (ColumnFamilyStore cfs : sortedColumnFamilies)
            cfs.forceCleanup(renewer);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Table;snapshotExists(String);;;public boolean snapshotExists(String snapshotName)
    {
        for (String dataDirPath : DatabaseDescriptor.getAllDataFileLocations())
        {
            String snapshotPath = dataDirPath + File.separator + name + File.separator + SNAPSHOT_SUBDIR_NAME + File.separator + snapshotName;
            File snapshot = new File(snapshotPath);
            if (snapshot.exists())
            {
                return true;
            }
        }
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Table;clearSnapshot(String);;;public void clearSnapshot(String tag) throws IOException
    {
        for (String dataDirPath : DatabaseDescriptor.getAllDataFileLocations())
        {
            // If tag is empty we will delete the entire snapshot directory
            String snapshotPath = dataDirPath + File.separator + name + File.separator + SNAPSHOT_SUBDIR_NAME + File.separator + tag;
            File snapshotDir = new File(snapshotPath);
            if (snapshotDir.exists())
            {
                if (logger.isDebugEnabled())
                    logger.debug("Removing snapshot directory " + snapshotPath);
                FileUtils.deleteRecursive(snapshotDir);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Table;Table(String);;;        assert ksm != null : "Unknown keyspace " + table;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Table;apply(RowMutation,boolean);;;public void apply(RowMutation mutation, boolean writeCommitLog) throws IOException
    {
        List<Memtable> memtablesToFlush = Collections.emptyList();
        if (logger.isDebugEnabled())
            logger.debug("applying mutation of row {}", ByteBufferUtil.bytesToHex(mutation.key()));

        // write the mutation to the commitlog and memtables
        switchLock.readLock().lock();
        try
        {
            if (writeCommitLog)
                CommitLog.instance.add(mutation);
        
            DecoratedKey<?> key = StorageService.getPartitioner().decorateKey(mutation.key());
            for (ColumnFamily cf : mutation.getColumnFamilies())
            {
                ColumnFamilyStore cfs = columnFamilyStores.get(cf.id());
                if (cfs == null)
                {
                    logger.error("Attempting to mutate non-existant column family " + cf.id());
                    continue;
                }

                SortedSet<ByteBuffer> mutatedIndexedColumns = null;
                for (ByteBuffer column : cfs.getIndexedColumns())
                {
                    if (cf.getColumnNames().contains(column) || cf.isMarkedForDelete())
                    {
                        if (mutatedIndexedColumns == null)
                            mutatedIndexedColumns = new TreeSet<ByteBuffer>();
                        mutatedIndexedColumns.add(column);
                        if (logger.isDebugEnabled())
                        {
                            // can't actually use validator to print value here, because we overload value
                            // for deletion timestamp as well (which may not be a well-formed value for the column type)
                            ByteBuffer value = cf.getColumn(column) == null ? null : cf.getColumn(column).value(); // may be null on row-level deletion
                            logger.debug(String.format("mutating indexed column %s value %s",
                                                       cf.getComparator().getString(column),
                                                       value == null ? "null" : ByteBufferUtil.bytesToHex(value)));
                        }
                    }
                }

                synchronized (indexLockFor(mutation.key()))
                {
                    ColumnFamily oldIndexedColumns = null;
                    if (mutatedIndexedColumns != null)
                    {
                        // with the raw data CF, we can just apply every update in any order and let
                        // read-time resolution throw out obsolete versions, thus avoiding read-before-write.
                        // but for indexed data we need to make sure that we're not creating index entries
                        // for obsolete writes.
                        oldIndexedColumns = readCurrentIndexedColumns(key, cfs, mutatedIndexedColumns);
                        logger.debug("Pre-mutation index row is {}", oldIndexedColumns);
                        ignoreObsoleteMutations(cf, mutatedIndexedColumns, oldIndexedColumns);
                    }

                    Memtable fullMemtable = cfs.apply(key, cf);
                    if (fullMemtable != null)
                        memtablesToFlush = addFullMemtable(memtablesToFlush, fullMemtable);

                    if (mutatedIndexedColumns != null)
                    {
                        // ignore full index memtables -- we flush those when the "master" one is full
                        applyIndexUpdates(mutation.key(), cf, cfs, mutatedIndexedColumns, oldIndexedColumns);
                    }
                }
            }
        }
        finally
        {
            switchLock.readLock().unlock();
        }

        // flush memtables that got filled up outside the readlock (maybeSwitchMemtable acquires writeLock).
        // usually mTF will be empty and this will be a no-op.
        for (Memtable memtable : memtablesToFlush)
            memtable.cfs.maybeSwitchMemtable(memtable, writeCommitLog);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Table;readCurrentIndexedColumns(DecoratedKey<?>,ColumnFamilyStore,SortedSet<ByteBuffer>);;;private static ColumnFamily readCurrentIndexedColumns(DecoratedKey<?> key, ColumnFamilyStore cfs, SortedSet<ByteBuffer> mutatedIndexedColumns)
    {
        QueryFilter filter = QueryFilter.getNamesFilter(key, new QueryPath(cfs.getColumnFamilyName()), mutatedIndexedColumns);
        return cfs.getColumnFamily(filter);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Table;getCompactionInfo();;;public CompactionInfo getCompactionInfo()
        {
            return new CompactionInfo(cfs.table.name,
                                      cfs.columnFamily,
                                      CompactionType.INDEX_BUILD,
                                      iter.getTotalBytes(),
                                      iter.getBytesRead());
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Table;toString();    public String toString() {;;    public String toString()
    {
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\TruncateResponse;serialize(TruncateResponse,DataOutputStream,int);;;public void serialize(TruncateResponse tr, DataOutputStream dos, int version) throws IOException
        {
            dos.writeUTF(tr.keyspace);
            dos.writeUTF(tr.columnFamily);
            dos.writeBoolean(tr.success);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\TruncateResponse;deserialize(DataInputStream,int);;;public TruncateResponse deserialize(DataInputStream dis, int version) throws IOException
        {
            String keyspace = dis.readUTF();
            String columnFamily = dis.readUTF();
            boolean success = dis.readBoolean();
            return new TruncateResponse(keyspace, columnFamily, success);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Truncation;getMessage(Integer);;;public Message getMessage(Integer version) throws IOException
    {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(bos);
        serializer().serialize(this, dos, version);
        return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.TRUNCATE, bos.toByteArray(), version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Truncation;serialize(Truncation,DataOutputStream,int);;;public void serialize(Truncation t, DataOutputStream dos, int version) throws IOException
    {
        dos.writeUTF(t.keyspace);
        dos.writeUTF(t.columnFamily);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\Truncation;deserialize(DataInputStream,int);;;public Truncation deserialize(DataInputStream dis, int version) throws IOException
    {
        String keyspace = dis.readUTF();
        String columnFamily = dis.readUTF();
        return new Truncation(keyspace, columnFamily);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\WriteResponse;serialize(WriteResponse,DataOutputStream,int);;;public void serialize(WriteResponse wm, DataOutputStream dos, int version) throws IOException
        {
            dos.writeUTF(wm.table());
            ByteBufferUtil.writeWithShortLength(wm.key(), dos);
            dos.writeBoolean(wm.isSuccess());
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\WriteResponse;deserialize(DataInputStream,int);;;public WriteResponse deserialize(DataInputStream dis, int version) throws IOException
        {
            String table = dis.readUTF();
            ByteBuffer key = ByteBufferUtil.readWithShortLength(dis);
            boolean status = dis.readBoolean();
            return new WriteResponse(table, key, status);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\CommitLog;recover(File[]);;;            final long segment = CommitLogSegment.idFromFilename(file.getName());
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\CommitLog;recover(File[]);;;            assert reader.length() <= Integer.MAX_VALUE;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\CommitLog;recover(File[]);;;                                    replayedCount.incrementAndGet();
                                }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\CommitLog;recover(File[]);;;
        return replayedCount.get();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\CommitLog;add(RowMutation);;;public void add(RowMutation rowMutation) throws IOException
    {
        executor.add(new LogRecordAdder(rowMutation));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\CommitLog;discardCompletedSegments(Integer,ReplayPosition);;;public void discardCompletedSegments(final Integer cfId, final ReplayPosition context) throws IOException
    {
        Callable task = new Callable()
        {
            public Object call() throws IOException
            {
                discardCompletedSegmentsInternal(context, cfId);
                return null;
            }
        };
        try
        {
            executor.submit(task).get();
        }
        catch (InterruptedException e)
        {
            throw new RuntimeException(e);
        }
        catch (ExecutionException e)
        {
            throw new RuntimeException(e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\CommitLog;discardCompletedSegmentsInternal(ReplayPosition,Integer);;;private void discardCompletedSegmentsInternal(ReplayPosition context, Integer id) throws IOException
    {
        if (logger.isDebugEnabled())
            logger.debug("discard completed log segments for " + context + ", column family " + id + ".");

        /*
         * Loop through all the commit log files in the history. Now process
         * all files that are older than the one in the context. For each of
         * these files the header needs to modified by resetting the dirty
         * bit corresponding to the flushed CF.
        */
        Iterator<CommitLogSegment> iter = segments.iterator();
        while (iter.hasNext())
        {
            CommitLogSegment segment = iter.next();
            if (segment.id == context.segment)
            {
                // we can't just mark the segment where the flush happened clean,
                // since there may have been writes to it between when the flush
                // started and when it finished.
                segment.turnOn(id);
                break;
            }

            segment.turnOff(id);
            if (segment.isSafeToDelete() && iter.hasNext())
            {
                logger.info("Discarding obsolete commit log:" + segment);
                segment.close();
                DeletionService.executeDelete(segment.getPath());
                // usually this will be the first (remaining) segment, but not always, if segment A contains
                // writes to a CF that is unflushed but is followed by segment B whose CFs are all flushed.
                iter.remove();
            }
            else
            {
                if (logger.isDebugEnabled())
                    logger.debug("Not safe to delete commit log " + segment + "; dirty is " + segment.dirtyString() + "; hasNext: " + iter.hasNext());
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\CommitLog;LogRecordAdder(RowMutation);;;LogRecordAdder(RowMutation rm)
        {
            this.rowMutation = rm;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\CommitLogSegment;idFromFilename(String);;;public static long idFromFilename(String filename)
    {
        Matcher matcher = COMMIT_LOG_FILE_PATTERN.matcher(filename);
        try
        {
            if (matcher.matches())
                return Long.valueOf(matcher.group(1));
            else
                return -1L;
        }
        catch (NumberFormatException e)
        {
            return -1L;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\CommitLogSegment;write(RowMutation);;;public ReplayPosition write(RowMutation rowMutation) throws IOException
    {
        long currentPosition = -1L;
        try
        {
            currentPosition = logWriter.getFilePointer();
            assert currentPosition <= Integer.MAX_VALUE;
            ReplayPosition cLogCtx = new ReplayPosition(id, (int) currentPosition);

            // write mutation, w/ checksum on the size and data
            Checksum checksum = new CRC32();
            byte[] serializedRow = rowMutation.getSerializedBuffer(MessagingService.version_);
            checksum.update(serializedRow.length);
            logWriter.writeInt(serializedRow.length);
            logWriter.writeLong(checksum.getValue());
            logWriter.write(serializedRow);
            checksum.update(serializedRow, 0, serializedRow.length);
            logWriter.writeLong(checksum.getValue());

            return cLogCtx;
        }
        catch (IOException e)
        {
            if (currentPosition != -1)
                logWriter.seek(currentPosition);
            throw e;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\CommitLogSegment;getName();;;public String getName()
    {
        return logWriter.getPath().substring(logWriter.getPath().lastIndexOf(File.separator) + 1);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\CommitLogSegment;turnOn(Integer);;;void turnOn(Integer cfId)
    {
        cfDirty.add(cfId);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\CommitLogSegment;turnOff(Integer);;;void turnOff(Integer cfId)
    {
        cfDirty.remove(cfId);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\CommitLogSegment;dirtyString();;;String dirtyString()
    {
        StringBuilder sb = new StringBuilder();
        for (Integer cfId : cfDirty)
            sb.append(DatabaseDescriptor.getCFMetaData(cfId).cfName).append(" (").append(cfId).append("), ");
        return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\CommitLogSegment;isSafeToDelete();;;boolean isSafeToDelete()
    {
        return cfDirty.isEmpty();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\ReplayPosition;getReplayPosition(Iterable<?extendsSSTable>);;;public static ReplayPosition getReplayPosition(Iterable<? extends SSTable> sstables)
    {
        if (Iterables.isEmpty(sstables))
            return NONE;

        Function<SSTable, ReplayPosition> f = new Function<SSTable, ReplayPosition>()
        {
            public ReplayPosition apply(SSTable sstable)
            {
                return sstable.replayPosition;
            }
        };
        Ordering<ReplayPosition> ordering = Ordering.from(ReplayPosition.comparator);
        return ordering.max(Iterables.transform(sstables, f));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\ReplayPosition;ReplayPosition(long,int);;;public ReplayPosition(long segment, int position)
    {
        this.segment = segment;
        assert position >= 0;
        this.position = position;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\ReplayPosition;compareTo(ReplayPosition);;;public int compareTo(ReplayPosition other)
    {
        return comparator.compare(this, other);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\ReplayPosition;equals(Object);;;@Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        ReplayPosition that = (ReplayPosition) o;

        if (position != that.position) return false;
        return segment == that.segment;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\ReplayPosition;hashCode();;;@Override
    public int hashCode()
    {
        int result = (int) (segment ^ (segment >>> 32));
        result = 31 * result + position;
        return result;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\ReplayPosition;toString();;;@Override
    public String toString()
    {
        return "ReplayPosition(" +
               "segmentId=" + segment +
               ", position=" + position +
               ')';
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\ReplayPosition;serialize(ReplayPosition,DataOutput);;;public void serialize(ReplayPosition rp, DataOutput dos) throws IOException
        {
            dos.writeLong(rp.segment);
            dos.writeInt(rp.position);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\commitlog\ReplayPosition;deserialize(DataInput);;;public ReplayPosition deserialize(DataInput dis) throws IOException
        {
            return new ReplayPosition(dis.readLong(), dis.readInt());
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;instance();;;public static CounterContext instance()
    {
        return LazyHolder.counterContext;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;create(long);;;public ByteBuffer create(long value)
    {
        ByteBuffer context = ByteBuffer.allocate(HEADER_SIZE_LENGTH + HEADER_ELT_LENGTH + STEP_LENGTH);
        // The first (and only) elt is a delta
        context.putShort(0, (short)1);
        context.putShort(HEADER_SIZE_LENGTH, (short)0);
        writeElementAtOffset(context, HEADER_SIZE_LENGTH + HEADER_ELT_LENGTH, NodeId.getLocalId(), 1L, value);
        return context;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;create(NodeId,long,long,boolean);;;public ByteBuffer create(NodeId id, long clock, long value, boolean isDelta)
    {
        ByteBuffer context = ByteBuffer.allocate(HEADER_SIZE_LENGTH + (isDelta ? HEADER_ELT_LENGTH : 0) + STEP_LENGTH);
        context.putShort(0, (short)(isDelta ? 1 : 0));
        if (isDelta)
        {
            context.putShort(HEADER_SIZE_LENGTH, (short)0);
        }
        writeElementAtOffset(context, HEADER_SIZE_LENGTH + (isDelta ? HEADER_ELT_LENGTH : 0), id, clock, value);
        return context;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;writeElementAtOffset(ByteBuffer,int,NodeId,long,long);;;private static void writeElementAtOffset(ByteBuffer context, int offset, NodeId id, long clock, long count)
    {
        ByteBufferUtil.arrayCopy(id.bytes(), id.bytes().position(), context, offset, NodeId.LENGTH);
        context.putLong(offset + NodeId.LENGTH, clock);
        context.putLong(offset + NodeId.LENGTH + CLOCK_LENGTH, count);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;headerLength(ByteBuffer);;;private static int headerLength(ByteBuffer context)
    {
        return HEADER_SIZE_LENGTH + context.getShort(context.position()) * HEADER_ELT_LENGTH;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;compareId(ByteBuffer,int,ByteBuffer,int);;;private static int compareId(ByteBuffer bb1, int pos1, ByteBuffer bb2, int pos2)
    {
        return ByteBufferUtil.compareSubArrays(bb1, pos1, bb2, pos2, NodeId.LENGTH);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;diff(ByteBuffer,ByteBuffer);;;public ContextRelationship diff(ByteBuffer left, ByteBuffer right)
    {
        ContextRelationship relationship = ContextRelationship.EQUAL;
        ContextState leftState = new ContextState(left, headerLength(left));
        ContextState rightState = new ContextState(right, headerLength(right));

        while (leftState.hasRemaining() && rightState.hasRemaining())
        {
            // compare id bytes
            int compareId = leftState.compareIdTo(rightState);
            if (compareId == 0)
            {
                long leftClock  = leftState.getClock();
                long rightClock = rightState.getClock();

                // advance
                leftState.moveToNext();
                rightState.moveToNext();

                // process clock comparisons
                if (leftClock == rightClock)
                {
                    continue;
                }
                else if ((leftClock >= 0 && rightClock > 0 && leftClock > rightClock)
                      || (leftClock < 0 && (rightClock > 0 || leftClock < rightClock)))
                {
                    if (relationship == ContextRelationship.EQUAL)
                    {
                        relationship = ContextRelationship.GREATER_THAN;
                    }
                    else if (relationship == ContextRelationship.GREATER_THAN)
                    {
                        continue;
                    }
                    else
                    {
                        // relationship == ContextRelationship.LESS_THAN
                        return ContextRelationship.DISJOINT;
                    }
                }
                else
                {
                    if (relationship == ContextRelationship.EQUAL)
                    {
                        relationship = ContextRelationship.LESS_THAN;
                    }
                    else if (relationship == ContextRelationship.GREATER_THAN)
                    {
                        return ContextRelationship.DISJOINT;
                    }
                    else
                    {
                        // relationship == ContextRelationship.LESS_THAN
                        continue;
                    }
                }
            }
            else if (compareId > 0)
            {
                // only advance the right context
                rightState.moveToNext();

                if (relationship == ContextRelationship.EQUAL)
                {
                    relationship = ContextRelationship.LESS_THAN;
                }
                else if (relationship == ContextRelationship.GREATER_THAN)
                {
                    return ContextRelationship.DISJOINT;
                }
                else
                {
                    // relationship == ContextRelationship.LESS_THAN
                    continue;
                }
            }
            else // compareId < 0
            {
                // only advance the left context
                leftState.moveToNext();

                if (relationship == ContextRelationship.EQUAL)
                {
                    relationship = ContextRelationship.GREATER_THAN;
                }
                else if (relationship == ContextRelationship.GREATER_THAN)
                {
                    continue;
                }
                else
                // relationship == ContextRelationship.LESS_THAN
                {
                    return ContextRelationship.DISJOINT;
                }
            }
        }

        // check final lengths
        if (leftState.hasRemaining())
        {
            if (relationship == ContextRelationship.EQUAL)
            {
                return ContextRelationship.GREATER_THAN;
            }
            else if (relationship == ContextRelationship.LESS_THAN)
            {
                return ContextRelationship.DISJOINT;
            }
        }
        else if (rightState.hasRemaining())
        {
            if (relationship == ContextRelationship.EQUAL)
            {
                return ContextRelationship.LESS_THAN;
            }
            else if (relationship == ContextRelationship.GREATER_THAN)
            {
                return ContextRelationship.DISJOINT;
            }
        }

        return relationship;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;merge(ByteBuffer,ByteBuffer);;;public ByteBuffer merge(ByteBuffer left, ByteBuffer right)
    {
        ContextState leftState = new ContextState(left, headerLength(left));
        ContextState rightState = new ContextState(right, headerLength(right));

        // Compute size of result
        int mergedHeaderLength = HEADER_SIZE_LENGTH;
        int mergedBodyLength = 0;

        while (leftState.hasRemaining() && rightState.hasRemaining())
        {
            int cmp = leftState.compareIdTo(rightState);
            if (cmp == 0)
            {
                mergedBodyLength += STEP_LENGTH;
                if (leftState.isDelta() || rightState.isDelta())
                    mergedHeaderLength += HEADER_ELT_LENGTH;
                leftState.moveToNext();
                rightState.moveToNext();
            }
            else if (cmp > 0)
            {
                mergedBodyLength += STEP_LENGTH;
                if (rightState.isDelta())
                    mergedHeaderLength += HEADER_ELT_LENGTH;
                rightState.moveToNext();
            }
            else // cmp < 0
            {
                mergedBodyLength += STEP_LENGTH;
                if (leftState.isDelta())
                    mergedHeaderLength += HEADER_ELT_LENGTH;
                leftState.moveToNext();
            }
        }
        mergedHeaderLength += leftState.remainingHeaderLength() + rightState.remainingHeaderLength();
        mergedBodyLength += leftState.remainingBodyLength() + rightState.remainingBodyLength();

        // Do the actual merge
        ByteBuffer merged = ByteBuffer.allocate(mergedHeaderLength + mergedBodyLength);
        merged.putShort(merged.position(), (short) ((mergedHeaderLength - HEADER_SIZE_LENGTH) / HEADER_ELT_LENGTH));
        ContextState mergedState = new ContextState(merged, mergedHeaderLength);
        leftState.reset();
        rightState.reset();
        while (leftState.hasRemaining() && rightState.hasRemaining())
        {
            int cmp = leftState.compareIdTo(rightState);
            if (cmp == 0)
            {
                if (leftState.isDelta() || rightState.isDelta())
                {
                    // Local id and at least one is a delta
                    if (leftState.isDelta() && rightState.isDelta())
                    {
                        // both delta, sum
                        long clock = leftState.getClock() + rightState.getClock();
                        long count = leftState.getCount() + rightState.getCount();
                        mergedState.writeElement(leftState.getNodeId(), clock, count, true);
                    }
                    else
                    {
                        // Only one have delta, keep that one
                        (leftState.isDelta() ? leftState : rightState).copyTo(mergedState);
                    }
                }
                else
                {
                    long leftClock = leftState.getClock();
                    long rightClock = rightState.getClock();
                    if ((leftClock >= 0 && rightClock > 0 && leftClock >= rightClock)
                     || (leftClock < 0 && (rightClock > 0 || leftClock < rightClock)))
                        leftState.copyTo(mergedState);
                    else
                        rightState.copyTo(mergedState);
                }
                rightState.moveToNext();
                leftState.moveToNext();
            }
            else if (cmp > 0)
            {
                rightState.copyTo(mergedState);
                rightState.moveToNext();
            }
            else // cmp < 0
            {
                leftState.copyTo(mergedState);
                leftState.moveToNext();
            }
        }
        while (leftState.hasRemaining())
        {
            leftState.copyTo(mergedState);
            leftState.moveToNext();
        }
        while (rightState.hasRemaining())
        {
            rightState.copyTo(mergedState);
            rightState.moveToNext();
        }

        return merged;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;toString(ByteBuffer);;;public String toString(ByteBuffer context)
    {
        ContextState state = new ContextState(context, headerLength(context));
        StringBuilder sb = new StringBuilder();
        sb.append("[");

        while (state.hasRemaining())
        {
            if (state.elementIdx() > 0)
            {
                sb.append(",");
            }
            sb.append("{");
            sb.append(state.getNodeId().toString()).append(", ");
            sb.append(state.getClock()).append(", ");;
            sb.append(state.getCount());
            sb.append("}");
            if (state.isDelta())
            {
                sb.append("*");
            }
            state.moveToNext();
        }

        sb.append("]");
        return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;total(ByteBuffer);;;public long total(ByteBuffer context)
    {
        long total = 0L;

        // we could use a ContextState but it is easy enough that we avoid the object creation
        for (int offset = context.position() + headerLength(context); offset < context.limit(); offset += STEP_LENGTH)
        {
            long count = context.getLong(offset + NodeId.LENGTH + CLOCK_LENGTH);
            total += count;
        }

        return total;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;clearAllDelta(ByteBuffer);;;public ByteBuffer clearAllDelta(ByteBuffer context)
    {
        int headerLength = headerLength(context);
        if (headerLength == 0)
            return context;

        ByteBuffer cleaned = ByteBuffer.allocate(context.remaining() - headerLength + HEADER_SIZE_LENGTH);
        cleaned.putShort(cleaned.position(), (short)0);
        ByteBufferUtil.arrayCopy(
                context,
                context.position() + headerLength,
                cleaned,
                cleaned.position() + HEADER_SIZE_LENGTH,
                context.remaining() - headerLength);
        return cleaned;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;validateContext(ByteBuffer);;;public void validateContext(ByteBuffer context) throws MarshalException
    {
        int headerLength = headerLength(context);
        if (headerLength < 0 || (context.remaining() - headerLength) %  STEP_LENGTH != 0)
            throw new MarshalException("Invalid size for a counter context");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;updateDigest(MessageDigest,ByteBuffer);;;public void updateDigest(MessageDigest message, ByteBuffer context)
    {
        int hlength = headerLength(context);
        ByteBuffer dup = context.duplicate();
        dup.position(context.position() + hlength);
        message.update(dup);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;hasNodeId(ByteBuffer,NodeId);;;public boolean hasNodeId(ByteBuffer context, NodeId id)
    {
        // we could use a ContextState but it is easy enough that we avoid the object creation
        for (int offset = context.position() + headerLength(context); offset < context.limit(); offset += STEP_LENGTH)
        {
            if (id.equals(NodeId.wrap(context, offset)))
            {
                return true;
            }
        }
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;computeOldShardMerger(ByteBuffer,List<NodeId.NodeIdRecord>);;;public ByteBuffer computeOldShardMerger(ByteBuffer context, List<NodeId.NodeIdRecord> oldIds)
    {
        long now = System.currentTimeMillis();
        int hlength = headerLength(context);

        // Don't bother if we know we can't find what we are looking for
        if (oldIds.size() < 2
         || now - oldIds.get(0).timestamp < MIN_MERGE_DELAY
         || now - oldIds.get(1).timestamp < MIN_MERGE_DELAY
         || context.remaining() - hlength < 2 * STEP_LENGTH)
            return null;

        Iterator<NodeId.NodeIdRecord> recordIterator = oldIds.iterator();
        NodeId.NodeIdRecord currRecord = recordIterator.next();

        ContextState state = new ContextState(context, hlength);
        ContextState foundState = null;

        while (state.hasRemaining() && currRecord != null)
        {
            if (now - currRecord.timestamp < MIN_MERGE_DELAY)
                return context;

            int c = state.getNodeId().compareTo(currRecord.id);
            if (c == 0)
            {
                if (foundState == null)
                {
                    // We found a canditate for being merged
                    if (state.getClock() < 0)
                        return null;

                    foundState = state.duplicate();
                    currRecord = recordIterator.hasNext() ? recordIterator.next() : null;
                    state.moveToNext();
                }
                else
                {
                    // Found someone to merge it to
                    int nbDelta = foundState.isDelta() ? 1 : 0;
                    nbDelta += state.isDelta() ? 1 : 0;
                    ContextState merger = ContextState.allocate(2, nbDelta);

                    long fclock = foundState.getClock();
                    long fcount = foundState.getCount();
                    long clock = state.getClock();
                    long count = state.getCount();

                    if (foundState.isDelta())
                        merger.writeElement(foundState.getNodeId(), -now - fclock, -fcount, true);
                    else
                        merger.writeElement(foundState.getNodeId(), -now, 0);

                    if (state.isDelta())
                        merger.writeElement(state.getNodeId(), fclock + clock, fcount, true);
                    else
                        merger.writeElement(state.getNodeId(), fclock + clock, fcount + count);

                    return merger.context;
                }
            }
            else if (c < 0) // nodeid < record
            {
                state.moveToNext();
            }
            else // c > 0, nodeid > record
            {
                currRecord = recordIterator.hasNext() ? recordIterator.next() : null;
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;removeOldShards(ByteBuffer,int);;;public ByteBuffer removeOldShards(ByteBuffer context, int gcBefore)
    {
        int hlength = headerLength(context);
        ContextState state = new ContextState(context, hlength);
        int removedBodySize = 0, removedHeaderSize = 0;
        while (state.hasRemaining())
        {
            long clock = state.getClock();
            if (clock < 0 && -((int)(clock / 1000)) < gcBefore)
            {
                assert state.getCount() == 0;
                removedBodySize += STEP_LENGTH;
                if (state.isDelta())
                    removedHeaderSize += HEADER_ELT_LENGTH;
            }
            state.moveToNext();
        }

        if (removedBodySize == 0)
            return context;

        int newSize = context.remaining() - removedHeaderSize - removedBodySize;
        int newHlength = hlength - removedHeaderSize;
        ByteBuffer cleanedContext = ByteBuffer.allocate(newSize);
        cleanedContext.putShort(cleanedContext.position(), (short) ((newHlength - HEADER_SIZE_LENGTH) / HEADER_ELT_LENGTH));
        ContextState cleaned = new ContextState(cleanedContext, newHlength);

        state.reset();
        while (state.hasRemaining())
        {
            long clock = state.getClock();
            if (clock > 0 || -((int)(clock / 1000)) >= gcBefore)
            {
                state.copyTo(cleaned);
            }
            state.moveToNext();
        }
        return cleanedContext;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;ContextState(ByteBuffer,int);;;public ContextState(ByteBuffer context, int headerLength)
        {
            this(context, headerLength, HEADER_SIZE_LENGTH, headerLength, false);
            updateIsDelta();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;ContextState(ByteBuffer);;;public ContextState(ByteBuffer context)
        {
            this(context, headerLength(context));
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;ContextState(ByteBuffer,int,int,int,boolean);;;private ContextState(ByteBuffer context, int headerLength, int headerOffset, int bodyOffset, boolean currentIsDelta)
        {
            this.context = context;
            this.headerLength = headerLength;
            this.headerOffset = headerOffset;
            this.bodyOffset = bodyOffset;
            this.currentIsDelta = currentIsDelta;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;isDelta();;;public boolean isDelta()
        {
            return currentIsDelta;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;updateIsDelta();;;private void updateIsDelta()
        {
            currentIsDelta = (headerOffset < headerLength) && context.getShort(context.position() + headerOffset) == (short) elementIdx();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;hasRemaining();;;public boolean hasRemaining()
        {
            return bodyOffset < context.remaining();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;remainingHeaderLength();;;public int remainingHeaderLength()
        {
            return headerLength - headerOffset;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;remainingBodyLength();;;public int remainingBodyLength()
        {
            return context.remaining() - bodyOffset;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;moveToNext();;;public void moveToNext()
        {
            bodyOffset += STEP_LENGTH;
            if (currentIsDelta)
            {
                headerOffset += HEADER_ELT_LENGTH;
            }
            updateIsDelta();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;copyTo(ContextState);;;public void copyTo(ContextState other)
        {
            ByteBufferUtil.arrayCopy(context, context.position() + bodyOffset, other.context, other.context.position() + other.bodyOffset, STEP_LENGTH);
            if (currentIsDelta)
            {
                other.context.putShort(other.context.position() + other.headerOffset, (short) other.elementIdx());
            }
            other.currentIsDelta = currentIsDelta;
            other.moveToNext();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;compareIdTo(ContextState);;;public int compareIdTo(ContextState other)
        {
            return compareId(context, context.position() + bodyOffset, other.context, other.context.position() + other.bodyOffset);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;reset();;;public void reset()
        {
            this.headerOffset = HEADER_SIZE_LENGTH;
            this.bodyOffset = headerLength;
            updateIsDelta();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;getNodeId();;;public NodeId getNodeId()
        {
            return NodeId.wrap(context, context.position() + bodyOffset);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;getClock();;;public long getClock()
        {
            return context.getLong(context.position() + bodyOffset + NodeId.LENGTH);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;getCount();;;public long getCount()
        {
            return context.getLong(context.position() + bodyOffset + NodeId.LENGTH + CLOCK_LENGTH);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;writeElement(NodeId,long,long,boolean);;;public void writeElement(NodeId id, long clock, long count, boolean isDelta)
        {
            writeElementAtOffset(context, context.position() + bodyOffset, id, clock, count);
            if (isDelta)
            {
                context.putShort(context.position() + headerOffset, (short)elementIdx());
            }
            currentIsDelta = isDelta;
            moveToNext();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;writeElement(NodeId,long,long);;;public void writeElement(NodeId id, long clock, long count)
        {
            writeElement(id, clock, count, false);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;elementIdx();;;public int elementIdx()
        {
            return (bodyOffset - headerLength) / STEP_LENGTH;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;duplicate();;;public ContextState duplicate()
        {
            return new ContextState(context, headerLength, headerOffset, bodyOffset, currentIsDelta);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\CounterContext;allocate(int,int);;;public static ContextState allocate(int elementCount, int deltaCount)
        {
            assert deltaCount <= elementCount;
            int hlength = HEADER_SIZE_LENGTH + deltaCount * HEADER_ELT_LENGTH;
            ByteBuffer context = ByteBuffer.allocate(hlength + elementCount * STEP_LENGTH);
            context.putShort(0, (short)deltaCount);
            return new ContextState(context, hlength);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\IContext;diff(ByteBuffer,ByteBuffer);;;public ContextRelationship diff(ByteBuffer left, ByteBuffer right);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\IContext;merge(ByteBuffer,ByteBuffer);;;public ByteBuffer merge(ByteBuffer left, ByteBuffer right);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\context\IContext;toString(ByteBuffer);;;public String toString(ByteBuffer context);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractCommutativeType;isCommutative();;;public boolean isCommutative()
    {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractCommutativeType;compose(ByteBuffer);;;public Long compose(ByteBuffer bytes)
    {
        return CounterContext.instance().total(bytes);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractCommutativeType;decompose(Long);;;public ByteBuffer decompose(Long value)
    {
        return ByteBufferUtil.bytes(value);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractCommutativeType;createColumn(ByteBuffer,ByteBuffer,long);;;public abstract Column createColumn(ByteBuffer name, ByteBuffer value, long timestamp);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractCommutativeType;getType();;;public Class<Long> getType()
    {
        return Long.class;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractCommutativeType;isSigned();;;public boolean isSigned()
    {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractCommutativeType;isCaseSensitive();;;public boolean isCaseSensitive()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractCommutativeType;isCurrency();;;public boolean isCurrency()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractCommutativeType;getPrecision(Long);;;public int getPrecision(Long obj)
    {
        return obj.toString().length();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractCommutativeType;getScale(Long);;;public int getScale(Long obj)
    {
        return 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractCommutativeType;getJdbcType();;;public int getJdbcType()
    {
        return Types.INTEGER;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractCommutativeType;needsQuotes();;;public boolean needsQuotes()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractType;toString(T);;;public abstract String toString(T t);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractType;isCommutative();;;public boolean isCommutative()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractType;getType();;;public abstract Class<T> getType();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractType;isSigned();;;public abstract boolean isSigned();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractType;isCaseSensitive();;;public abstract boolean isCaseSensitive();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractType;isCurrency();;;public abstract boolean isCurrency();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractType;getPrecision(T);;;public abstract int getPrecision(T obj);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractType;getScale(T);;;public abstract int getScale(T obj);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractType;getJdbcType();;;public abstract int getJdbcType();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractType;needsQuotes();;;public abstract boolean needsQuotes();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractUUIDType;getType();;;public Class<UUID> getType()
    {
        return UUID.class;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractUUIDType;isSigned();;;public boolean isSigned()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractUUIDType;isCaseSensitive();;;public boolean isCaseSensitive()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractUUIDType;isCurrency();;;public boolean isCurrency()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractUUIDType;getPrecision(UUID);;;public int getPrecision(UUID obj)
    {
        return -1;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractUUIDType;getScale(UUID);;;public int getScale(UUID obj)
    {
        return -1;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractUUIDType;getJdbcType();;;public int getJdbcType()
    {
        return Types.OTHER;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AbstractUUIDType;needsQuotes();;;public boolean needsQuotes()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AsciiType;toString(String);;;public String toString(String s)
    {
        return s;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AsciiType;getType();;;public Class<String> getType()
    {
        return String.class;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AsciiType;isSigned();;;public boolean isSigned()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AsciiType;isCaseSensitive();;;public boolean isCaseSensitive()
    {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AsciiType;isCurrency();;;public boolean isCurrency()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AsciiType;getPrecision(String);;;public int getPrecision(String obj)
    {
        return -1;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AsciiType;getScale(String);;;public int getScale(String obj)
    {
        return -1;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AsciiType;getJdbcType();;;public int getJdbcType()
    {
        return Types.VARCHAR;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\AsciiType;needsQuotes();;;public boolean needsQuotes()
    {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\BytesType;bytesCompare(ByteBuffer,ByteBuffer);;;              
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\BytesType;toString(ByteBuffer);;;public String toString(ByteBuffer byteBuffer)
    {
        return getString(byteBuffer);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\BytesType;getType();;;public Class<ByteBuffer> getType()
    {
        return ByteBuffer.class;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\BytesType;isSigned();;;public boolean isSigned()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\BytesType;isCaseSensitive();;;public boolean isCaseSensitive()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\BytesType;isCurrency();;;public boolean isCurrency()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\BytesType;getPrecision(ByteBuffer);;;public int getPrecision(ByteBuffer obj)
    {
        return -1;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\BytesType;getScale(ByteBuffer);;;public int getScale(ByteBuffer obj)
    {
        return -1;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\BytesType;getJdbcType();;;public int getJdbcType()
    {
        return Types.BINARY;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\BytesType;needsQuotes();;;public boolean needsQuotes()
    {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\CounterColumnType;CounterColumnType();;;CounterColumnType() {}
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\CounterColumnType;compare(ByteBuffer,ByteBuffer);;;public int compare(ByteBuffer o1, ByteBuffer o2)
    {
        if (o1 == null)
            return null == o2 ?  0 : -1;

        return ByteBufferUtil.compareUnsigned(o1, o2);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\CounterColumnType;getString(ByteBuffer);;;public String getString(ByteBuffer bytes)
    {
        return ByteBufferUtil.bytesToHex(bytes);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\CounterColumnType;toString(Long);;;public String toString(Long l)
    {
        return l.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\CounterColumnType;createColumn(ByteBuffer,ByteBuffer,long);;;public Column createColumn(ByteBuffer name, ByteBuffer value, long timestamp)
    {
        return new CounterUpdateColumn(name, value, timestamp);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\CounterColumnType;fromString(String);;;public ByteBuffer fromString(String source)
    {
        return ByteBufferUtil.hexToBytes(source);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\CounterColumnType;validate(ByteBuffer);;;public void validate(ByteBuffer bytes) throws MarshalException
    {
        if (bytes.remaining() != 8 && bytes.remaining() != 0)
            throw new MarshalException(String.format("Expected 8 or 0 byte long (%d)", bytes.remaining()));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\IntegerType;toString(BigInteger);;;public String toString(BigInteger bi)
    {
        return bi.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\IntegerType;fromString(String);;;        // Return an empty ByteBuffer for an empty string.
        if (source.isEmpty())
            return ByteBufferUtil.EMPTY_BYTE_BUFFER;
        
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\IntegerType;getType();;;public Class<BigInteger> getType()
    {
        return BigInteger.class;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\IntegerType;isSigned();;;public boolean isSigned()
    {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\IntegerType;isCaseSensitive();;;public boolean isCaseSensitive()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\IntegerType;isCurrency();;;public boolean isCurrency()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\IntegerType;getPrecision(BigInteger);;;public int getPrecision(BigInteger obj)
    {
        return obj.toString().length();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\IntegerType;getScale(BigInteger);;;public int getScale(BigInteger obj)
    {
        return 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\IntegerType;getJdbcType();;;public int getJdbcType()
    {
        return Types.BIGINT;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\IntegerType;needsQuotes();;;public boolean needsQuotes()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LexicalUUIDType;toString(UUID);;;public String toString(UUID uuid)
    {
        return uuid.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LexicalUUIDType;getType();;;public Class<UUID> getType()
    {
        return UUID.class;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LocalByPartionerType;toString(ByteBuffer);;;public String toString(ByteBuffer bb)
    {
        return getString(bb);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LocalByPartionerType;getType();;;public Class<ByteBuffer> getType()
    {
        return ByteBuffer.class;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LocalByPartionerType;isSigned();;;public boolean isSigned()
    {
        throw new UnsupportedOperationException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LocalByPartionerType;isCaseSensitive();;;public boolean isCaseSensitive()
    {
        throw new UnsupportedOperationException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LocalByPartionerType;isCurrency();;;public boolean isCurrency()
    {
        throw new UnsupportedOperationException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LocalByPartionerType;getPrecision(ByteBuffer);;;public int getPrecision(ByteBuffer obj)
    {
        throw new UnsupportedOperationException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LocalByPartionerType;getScale(ByteBuffer);;;public int getScale(ByteBuffer obj)
    {
        throw new UnsupportedOperationException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LocalByPartionerType;getJdbcType();;;public int getJdbcType()
    {
        throw new UnsupportedOperationException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LocalByPartionerType;needsQuotes();;;public boolean needsQuotes()
    {
        throw new UnsupportedOperationException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LongType;getString(ByteBuffer);        ;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LongType;toString(Long);;;public String toString(Long l)
    {
        return l.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LongType;fromString(String);;;        // Return an empty ByteBuffer for an empty string.
        if (source.isEmpty())
            return ByteBufferUtil.EMPTY_BYTE_BUFFER;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LongType;getType();;;public Class<Long> getType()
    {
        return Long.class;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LongType;isSigned();;;public boolean isSigned()
    {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LongType;isCaseSensitive();;;public boolean isCaseSensitive()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LongType;isCurrency();;;public boolean isCurrency()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LongType;getPrecision(Long);;;public int getPrecision(Long obj)
    {
        return obj.toString().length();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LongType;getScale(Long);;;public int getScale(Long obj)
    {
        return 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LongType;getJdbcType();;;public int getJdbcType()
    {
        return Types.INTEGER;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\LongType;needsQuotes();;;public boolean needsQuotes()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\TimeUUIDType;toString(UUID);;;public String toString(UUID uuid)
    {
        return uuid.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\TimeUUIDType;getType();;;public Class<UUID> getType()
    {
        return UUID.class;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UTF8Type;toString(String);;;public String toString(String s)
    {
        return s;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UTF8Type;getType();;;public Class<String> getType()
    {
        return String.class;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UTF8Type;isSigned();;;public boolean isSigned()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UTF8Type;isCaseSensitive();;;public boolean isCaseSensitive()
    {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UTF8Type;isCurrency();;;public boolean isCurrency()
    {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UTF8Type;getPrecision(String);;;public int getPrecision(String obj)
    {
        return -1;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UTF8Type;getScale(String);;;public int getScale(String obj)
    {
        return -1;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UTF8Type;getJdbcType();;;public int getJdbcType()
    {
        return Types.VARCHAR;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UTF8Type;needsQuotes();;;public boolean needsQuotes()
    {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UUIDType;UUIDType();;;UUIDType()
    {
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UUIDType;compare(ByteBuffer,ByteBuffer);;;public int compare(ByteBuffer b1, ByteBuffer b2)
    {

        // Compare for length

        if ((b1 == null) || (b1.remaining() < 16))
        {
            return ((b2 == null) || (b2.remaining() < 16)) ? 0 : -1;
        }
        if ((b2 == null) || (b2.remaining() < 16))
        {
            return 1;
        }

        int s1 = b1.arrayOffset() + b1.position();
        byte[] o1 = b1.array();

        int s2 = b2.arrayOffset() + b2.position();
        byte[] o2 = b2.array();

        if (o1.length == s1)
        {
            return o2.length == s2 ? 0 : -1;
        }
        if (o2.length == s2)
        {
            return 1;
        }

        // Compare versions

        int v1 = (o1[s1 + 6] >> 4) & 0x0f;
        int v2 = (o2[s2 + 6] >> 4) & 0x0f;

        if (v1 != v2)
        {
            return v1 - v2;
        }

        // Compare timestamps for version 1

        if (v1 == 1)
        {
            // if both time-based, compare as timestamps
            int c = compareTimestampBytes(s1, o1, s2, o2);
            if (c != 0)
            {
                return c;
            }
        }

        // Compare the two byte arrays starting from the first
        // byte in the sequence until an inequality is
        // found. This should provide equivalent results
        // to the comparison performed by the RFC 4122
        // Appendix A - Sample Implementation.
        // Note: java.util.UUID.compareTo is not a lexical
        // comparison

        for (int i = 0; i < 16; i++)
        {
            int c = ((o1[s1 + i]) & 0xFF) - ((o2[s2 + i]) & 0xFF);
            if (c != 0)
            {
                return c;
            }
        }

        return 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UUIDType;compareTimestampBytes(int,byte[],int,byte[]);;;private static int compareTimestampBytes(int s1, byte[] o1, int s2,
            byte[] o2)
    {
        int d = (o1[s1 + 6] & 0xF) - (o2[s2 + 6] & 0xF);
        if (d != 0)
        {
            return d;
        }
        d = (o1[s1 + 7] & 0xFF) - (o2[s2 + 7] & 0xFF);
        if (d != 0)
        {
            return d;
        }
        d = (o1[s1 + 4] & 0xFF) - (o2[s2 + 4] & 0xFF);
        if (d != 0)
        {
            return d;
        }
        d = (o1[s1 + 5] & 0xFF) - (o2[s2 + 5] & 0xFF);
        if (d != 0)
        {
            return d;
        }
        d = (o1[s1 + 0] & 0xFF) - (o2[s2 + 0] & 0xFF);
        if (d != 0)
        {
            return d;
        }
        d = (o1[s1 + 1] & 0xFF) - (o2[s2 + 1] & 0xFF);
        if (d != 0)
        {
            return d;
        }
        d = (o1[s1 + 2] & 0xFF) - (o2[s2 + 2] & 0xFF);
        if (d != 0)
        {
            return d;
        }
        return (o1[s1 + 3] & 0xFF) - (o2[s2 + 3] & 0xFF);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UUIDType;compose(ByteBuffer);;;public UUID compose(ByteBuffer bytes)
    {

        bytes = bytes.slice();
        if (bytes.remaining() < 16)
            return new UUID(0, 0);
        return new UUID(bytes.getLong(), bytes.getLong());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UUIDType;toString(UUID);;;public String toString(UUID uuid)
    {
        return uuid.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UUIDType;getType();;;public Class<UUID> getType()
    {
        return UUID.class;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UUIDType;validate(ByteBuffer);;;public void validate(ByteBuffer bytes)
    {
        if ((bytes.remaining() != 0) && (bytes.remaining() != 16))
        {
            throw new MarshalException("UUIDs must be exactly 16 bytes");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UUIDType;getString(ByteBuffer);;;public String getString(ByteBuffer bytes)
    {
        if (bytes.remaining() == 0)
        {
            return "";
        }
        if (bytes.remaining() != 16)
        {
            throw new MarshalException("UUIDs must be exactly 16 bytes");
        }
        UUID uuid = compose(bytes);
        return uuid.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UUIDType;decompose(UUID);;;public ByteBuffer decompose(UUID value)
    {
        return ByteBuffer.wrap(UUIDGen.decompose(value));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\marshal\UUIDType;fromString(String);;;@Override
    public ByteBuffer fromString(String source) throws MarshalException
    {
        // Return an empty ByteBuffer for an empty string.
        if (source.isEmpty())
            return ByteBufferUtil.EMPTY_BYTE_BUFFER;

        ByteBuffer idBytes = null;

        // ffffffff-ffff-ffff-ffff-ffffffffff
        if (TimeUUIDType.regexPattern.matcher(source).matches())
        {
            UUID uuid;
            try
            {
                uuid = UUID.fromString(source);
                idBytes = ByteBuffer.wrap(UUIDGen.decompose(uuid));
            }
            catch (IllegalArgumentException e)
            {
                throw new MarshalException(String.format("unable to make UUID from '%s'", source), e);
            }
        }
        else if (source.toLowerCase().equals("now"))
        {
            idBytes = ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress())));
        }
        // Milliseconds since epoch?
        else if (source.matches("^\\d+$"))
        {
            try
            {
                idBytes = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(Long.parseLong(source)));
            }
            catch (NumberFormatException e)
            {
                throw new MarshalException(String.format("unable to make version 1 UUID from '%s'", source), e);
            }
        }
        // Last chance, attempt to parse as date-time string
        else
        {
            try
            {
                long timestamp = DateUtils.parseDate(source, TimeUUIDType.iso8601Patterns).getTime();
                idBytes = ByteBuffer.wrap(UUIDGen.getTimeUUIDBytes(timestamp));
            }
            catch (ParseException e1)
            {
                throw new MarshalException(String.format("unable to coerce '%s' to version 1 UUID", source), e1);
            }
        }

        return idBytes;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\migration\Migration;deserialize(ByteBuffer,int);;;public static Migration deserialize(ByteBuffer bytes, int version) throws IOException
    {
        // deserialize
        org.apache.cassandra.db.migration.avro.Migration mi = SerDeUtils.deserializeWithSchema(bytes, new org.apache.cassandra.db.migration.avro.Migration());

        // create an instance of the migration subclass
        Migration migration;
        try
        {
            Class migrationClass = Class.forName(mi.classname.toString());
            Constructor migrationConstructor = migrationClass.getDeclaredConstructor();
            migrationConstructor.setAccessible(true);
            migration = (Migration)migrationConstructor.newInstance();
        }
        catch (Exception e)
        {
            throw new RuntimeException("Invalid migration class: " + mi.classname.toString(), e);
        }
        
        // super inflate
        migration.lastVersion = UUIDGen.getUUID(ByteBuffer.wrap(mi.old_version.bytes()));
        migration.newVersion = UUIDGen.getUUID(ByteBuffer.wrap(mi.new_version.bytes()));
        try
        {
            migration.rm = RowMutation.serializer().deserialize(SerDeUtils.createDataInputStream(mi.row_mutation), version);
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
        // sub inflate
        migration.subinflate(mi);
        return migration;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\db\migration\UpdateColumnFamily;UpdateColumnFamily(org.apache.cassandra.db.migration.avro.CfDef);;;public UpdateColumnFamily(org.apache.cassandra.db.migration.avro.CfDef cf_def) throws ConfigurationException, IOException
    {
        super(UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress()), DatabaseDescriptor.getDefsVersion());
        
        KSMetaData ksm = DatabaseDescriptor.getTableDefinition(cf_def.keyspace.toString());
        if (ksm == null)
            throw new ConfigurationException("No such keyspace: " + cf_def.keyspace.toString());
        if (cf_def.column_metadata != null)
        {
            for (ColumnDef entry : cf_def.column_metadata)
            {
                if (entry.index_name != null && !Migration.isLegalName(entry.index_name.toString()))
                    throw new ConfigurationException("Invalid index name: " + entry.index_name);
            }
        }

        CFMetaData oldCfm = DatabaseDescriptor.getCFMetaData(CFMetaData.getId(cf_def.keyspace.toString(), cf_def.name.toString()));
        
        // create a copy of the old CF meta data. Apply new settings on top of it.
        this.metadata = CFMetaData.inflate(oldCfm.deflate());
        this.metadata.apply(cf_def);
        
        // create a copy of the old KS meta data. Use it to create a RowMutation that gets applied to schema and migrations.
        KSMetaData newKsMeta = KSMetaData.inflate(ksm.deflate());
        newKsMeta.cfMetaData().get(cf_def.name.toString()).apply(cf_def);
        rm = Migration.makeDefinitionMutation(newKsMeta, null, newVersion);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\dht\Range;differenceToFetch(Range);;;public Set<Range> differenceToFetch(Range rhs)
    {
        Set<Range> difference = new HashSet<Range>();

        int comparisonAC = Range.compare(left, rhs.left);

        if (comparisonAC == 0) // (A, B] & (A, C]
        {
            if (Range.compare(right, rhs.right) < 0) // B < C
            {
                difference.add(new Range(right, rhs.right));
            }
        }
        else if (comparisonAC > 0) // (A, B] & (C, D]  where C < A (A > C)
        {
            difference.add(new Range(rhs.left, left)); // first interval will be (C, A]

            if (Range.compare(rhs.right, right) > 0) // D > B
            {
                difference.add(new Range(rhs.right, right)); // (D, B]
            }
        }
        else // (A, B] & (C, D] where C > A (mean that comparisonAC < 0)
        {
            Token newLeft = (Range.compare(rhs.left, right) > 0) ? rhs.left : right; // C > B ? (C, D] : (B, D]
            difference.add(new Range(newLeft, rhs.right));
        }

        return difference;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\EndpointState;markAlive();;;void markAlive()
    {
        isAlive = true;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\EndpointState;markDead();;;void markDead()
    {        
        isAlive = false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\EndpointState;serialize(EndpointState,DataOutputStream,int);;;public void serialize(EndpointState epState, DataOutputStream dos, int version) throws IOException
    {
        /* serialize the HeartBeatState */
        HeartBeatState hbState = epState.getHeartBeatState();
        HeartBeatState.serializer().serialize(hbState, dos, version);

        /* serialize the map of ApplicationState objects */
        int size = epState.applicationState.size();
        dos.writeInt(size);
        for (Map.Entry<ApplicationState, VersionedValue> entry : epState.applicationState.entrySet())
        {
            VersionedValue value = entry.getValue();
            if (value != null)
            {
                dos.writeInt(entry.getKey().ordinal());
                VersionedValue.serializer.serialize(value, dos, version);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\EndpointState;deserialize(DataInputStream,int);;;public EndpointState deserialize(DataInputStream dis, int version) throws IOException
    {
        HeartBeatState hbState = HeartBeatState.serializer().deserialize(dis, version);
        EndpointState epState = new EndpointState(hbState);

        int appStateSize = dis.readInt();
        for ( int i = 0; i < appStateSize; ++i )
        {
            if ( dis.available() == 0 )
            {
                break;
            }

            int key = dis.readInt();
            VersionedValue value = VersionedValue.serializer.deserialize(dis, version);
            epState.addApplicationState(Gossiper.STATES[key], value);
        }
        return epState;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\GossipDigest;serialize(GossipDigest,DataOutputStream,int);;;public void serialize(GossipDigest gDigest, DataOutputStream dos, int version) throws IOException
    {        
        CompactEndpointSerializationHelper.serialize(gDigest.endpoint, dos);
        dos.writeInt(gDigest.generation);
        dos.writeInt(gDigest.maxVersion);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\GossipDigest;deserialize(DataInputStream,int);;;public GossipDigest deserialize(DataInputStream dis, int version) throws IOException
    {
        InetAddress endpoint = CompactEndpointSerializationHelper.deserialize(dis);
        int generation = dis.readInt();
        int maxVersion = dis.readInt();
        return new GossipDigest(endpoint, generation, maxVersion);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\GossipDigestAck2Message;serialize(GossipDigestAck2Message,DataOutputStream,int);;;public void serialize(GossipDigestAck2Message gDigestAck2Message, DataOutputStream dos, int version) throws IOException
    {
        /* Use the EndpointState */
        EndpointStatesSerializationHelper.serialize(gDigestAck2Message.epStateMap_, dos, version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\GossipDigestAck2Message;deserialize(DataInputStream,int);;;public GossipDigestAck2Message deserialize(DataInputStream dis, int version) throws IOException
    {
        Map<InetAddress, EndpointState> epStateMap = EndpointStatesSerializationHelper.deserialize(dis, version);
        return new GossipDigestAck2Message(epStateMap);        
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\GossipDigestAckMessage;serialize(GossipDigestAckMessage,DataOutputStream,int);;;public void serialize(GossipDigestAckMessage gDigestAckMessage, DataOutputStream dos, int version) throws IOException
    {
        GossipDigestSerializationHelper.serialize(gDigestAckMessage.gDigestList_, dos, version);
        dos.writeBoolean(true); // 0.6 compatibility
        EndpointStatesSerializationHelper.serialize(gDigestAckMessage.epStateMap_, dos, version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\GossipDigestAckMessage;deserialize(DataInputStream,int);;;public GossipDigestAckMessage deserialize(DataInputStream dis, int version) throws IOException
    {
        List<GossipDigest> gDigestList = GossipDigestSerializationHelper.deserialize(dis, version);
        dis.readBoolean(); // 0.6 compatibility
        Map<InetAddress, EndpointState> epStateMap = EndpointStatesSerializationHelper.deserialize(dis, version);
        return new GossipDigestAckMessage(gDigestList, epStateMap);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\GossipDigestSynMessage;serialize(List<GossipDigest>,DataOutputStream,int);;;static void serialize(List<GossipDigest> gDigestList, DataOutputStream dos, int version) throws IOException
    {
        dos.writeInt(gDigestList.size());
        for ( GossipDigest gDigest : gDigestList )
        {
            GossipDigest.serializer().serialize( gDigest, dos, version);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\GossipDigestSynMessage;deserialize(DataInputStream,int);;;static List<GossipDigest> deserialize(DataInputStream dis, int version) throws IOException
    {
        int size = dis.readInt();            
        List<GossipDigest> gDigests = new ArrayList<GossipDigest>(size);
        
        for ( int i = 0; i < size; ++i )
        {
            assert dis.available() > 0;
            gDigests.add(GossipDigest.serializer().deserialize(dis, version));                
        }        
        return gDigests;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\GossipDigestSynMessage;serialize(Map<InetAddress,EndpointState>,DataOutputStream,int);;;static void serialize(Map<InetAddress, EndpointState> epStateMap, DataOutputStream dos, int version) throws IOException
    {
        dos.writeInt(epStateMap.size());
        for (Entry<InetAddress, EndpointState> entry : epStateMap.entrySet())
        {
            InetAddress ep = entry.getKey();
            CompactEndpointSerializationHelper.serialize(ep, dos);
            EndpointState.serializer().serialize(entry.getValue(), dos, version);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\GossipDigestSynMessage;deserialize(DataInputStream,int);;;static Map<InetAddress, EndpointState> deserialize(DataInputStream dis, int version) throws IOException
    {
        int size = dis.readInt();            
        Map<InetAddress, EndpointState> epStateMap = new HashMap<InetAddress, EndpointState>(size);

        for ( int i = 0; i < size; ++i )
        {
            assert dis.available() > 0;
            InetAddress ep = CompactEndpointSerializationHelper.deserialize(dis);
            EndpointState epState = EndpointState.serializer().deserialize(dis, version);
            epStateMap.put(ep, epState);
        }
        return epStateMap;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\GossipDigestSynMessage;serialize(GossipDigestSynMessage,DataOutputStream,int);;;public void serialize(GossipDigestSynMessage gDigestSynMessage, DataOutputStream dos, int version) throws IOException
    {    
        dos.writeUTF(gDigestSynMessage.clusterId_);
        GossipDigestSerializationHelper.serialize(gDigestSynMessage.gDigests_, dos, version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\GossipDigestSynMessage;deserialize(DataInputStream,int);;;public GossipDigestSynMessage deserialize(DataInputStream dis, int version) throws IOException
    {
        String clusterId = dis.readUTF();
        List<GossipDigest> gDigests = GossipDigestSerializationHelper.deserialize(dis, version);
        return new GossipDigestSynMessage(clusterId, gDigests);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\GossipDigestSynVerbHandler;doVerb(Message,String);;;            if (logger_.isTraceEnabled())
            {
                StringBuilder sb = new StringBuilder();
                for ( GossipDigest gDigest : gDigestList )
                {
                    sb.append(gDigest);
                    sb.append(" ");
                }
                logger_.trace("Gossip syn digests are : " + sb.toString());
            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\Gossiper;makeRandomGossipDigest(List<GossipDigest>);;;            gDigests.add(new GossipDigest(endpoint, generation, maxVersion));
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\Gossiper;makeGossipDigestSynMessage(List<GossipDigest>,int);;;Message makeGossipDigestSynMessage(List<GossipDigest> gDigests, int version) throws IOException
    {
        GossipDigestSynMessage gDigestMessage = new GossipDigestSynMessage(DatabaseDescriptor.getClusterName(), gDigests);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream( bos );
        GossipDigestSynMessage.serializer().serialize(gDigestMessage, dos, version);
        return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.GOSSIP_DIGEST_SYN, bos.toByteArray(), version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\Gossiper;makeGossipDigestAckMessage(GossipDigestAckMessage,int);;;Message makeGossipDigestAckMessage(GossipDigestAckMessage gDigestAckMessage, int version) throws IOException
    {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(bos);
        GossipDigestAckMessage.serializer().serialize(gDigestAckMessage, dos, version);
        return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.GOSSIP_DIGEST_ACK, bos.toByteArray(), version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\Gossiper;makeGossipDigestAck2Message(GossipDigestAck2Message,int);;;Message makeGossipDigestAck2Message(GossipDigestAck2Message gDigestAck2Message, int version) throws IOException
    {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(bos);
        GossipDigestAck2Message.serializer().serialize(gDigestAck2Message, dos, version);
        return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.GOSSIP_DIGEST_ACK2, bos.toByteArray(), version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\Gossiper;sendGossip(MessageProducer,Set<InetAddress>);;;private boolean sendGossip(MessageProducer prod, Set<InetAddress> epSet)
    {
        int size = epSet.size();
        /* Generate a random number from 0 -> size */
        List<InetAddress> liveEndpoints = new ArrayList<InetAddress>(epSet);
        int index = (size == 1) ? 0 : random.nextInt(size);
        InetAddress to = liveEndpoints.get(index);
        if (logger.isTraceEnabled())
            logger.trace("Sending a GossipDigestSynMessage to {} ...", to);
        try
        {
            MessagingService.instance().sendOneWay(prod.getMessage(getVersion(to)), to);
        }
        catch (IOException ex)
        {
            throw new IOError(ex);
        }        
        return seeds.contains(to);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\Gossiper;doGossipToLiveMember(MessageProducer);;;private boolean doGossipToLiveMember(MessageProducer prod)
    {
        int size = liveEndpoints.size();
        if ( size == 0 )
            return false;
        return sendGossip(prod, liveEndpoints);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\Gossiper;doGossipToUnreachableMember(MessageProducer);;;private void doGossipToUnreachableMember(MessageProducer prod)
    {
        double liveEndpointCount = liveEndpoints.size();
        double unreachableEndpointCount = unreachableEndpoints.size();
        if ( unreachableEndpointCount > 0 )
        {
            /* based on some probability */
            double prob = unreachableEndpointCount / (liveEndpointCount + 1);
            double randDbl = random.nextDouble();
            if ( randDbl < prob )
                sendGossip(prod, unreachableEndpoints.keySet());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\Gossiper;doGossipToSeed(MessageProducer);;;private void doGossipToSeed(MessageProducer prod)
    {
        int size = seeds.size();
        if ( size > 0 )
        {
            if ( size == 1 && seeds.contains(FBUtilities.getLocalAddress()) )
            {
                return;
            }

            if ( liveEndpoints.size() == 0 )
            {
                sendGossip(prod, seeds);
            }
            else
            {
                /* Gossip with the seed with some probability. */
                double probability = seeds.size() / (double)( liveEndpoints.size() + unreachableEndpoints.size() );
                double randDbl = random.nextDouble();
                if ( randDbl <= probability )
                    sendGossip(prod, seeds);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\Gossiper;notifyFailureDetector(InetAddress,EndpointState);;;void notifyFailureDetector(InetAddress endpoint, EndpointState remoteEndpointState)
    {
        IFailureDetector fd = FailureDetector.instance;
        EndpointState localEndpointState = endpointStateMap.get(endpoint);
        /*
         * If the local endpoint state exists then report to the FD only
         * if the versions workout.
        */
        if ( localEndpointState != null )
        {
            int localGeneration = localEndpointState.getHeartBeatState().getGeneration();
            int remoteGeneration = remoteEndpointState.getHeartBeatState().getGeneration();
            if ( remoteGeneration > localGeneration )
            {
                fd.report(endpoint);
                return;
            }

            if ( remoteGeneration == localGeneration )
            {
                int localVersion = getMaxEndpointStateVersion(localEndpointState);
                int remoteVersion = remoteEndpointState.getHeartBeatState().getHeartBeatVersion();
                if ( remoteVersion > localVersion )
                {
                    fd.report(endpoint);
                }
            }
        }

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\Gossiper;markDead(InetAddress,EndpointState);;;private void markDead(InetAddress addr, EndpointState localState)
    {
        if (logger.isTraceEnabled())
            logger.trace("marking as dead {}", addr);
        localState.markDead();
        liveEndpoints.remove(addr);
        unreachableEndpoints.put(addr, System.currentTimeMillis());
        logger.info("InetAddress {} is now dead.", addr);
        for (IEndpointStateChangeSubscriber subscriber : subscribers)
            subscriber.onDead(addr, localState);
        if (logger.isTraceEnabled())
            logger.trace("Notified " + subscribers);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\Gossiper;handleMajorStateChange(InetAddress,EndpointState);;;private void handleMajorStateChange(InetAddress ep, EndpointState epState)
    {
        if (endpointStateMap.get(ep) != null)
            logger.info("Node {} has restarted, now UP again", ep);
        else
            logger.info("Node {} is now part of the cluster", ep);
        if (logger.isTraceEnabled())
            logger.trace("Adding endpoint state for " + ep);
        endpointStateMap.put(ep, epState);
        if (epState.isAlive())
        {
            // the node restarted before we ever marked it down, so we'll report it as dead briefly so maintenance like resetting the connection pool can occur 
            for (IEndpointStateChangeSubscriber subscriber : subscribers)
                subscriber.onDead(ep, epState);
        }
        markAlive(ep, epState);
        for (IEndpointStateChangeSubscriber subscriber : subscribers)
            subscriber.onJoin(ep, epState);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\Gossiper;applyStateLocally(Map<InetAddress,EndpointState>);;;            if (justRemovedEndpoints.containsKey(ep))
            {
                if (logger.isTraceEnabled())
                    logger.trace("Ignoring gossip for " + ep + " because it is quarantined");
                continue;
            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\Gossiper;applyStateLocally(Map<InetAddress,EndpointState>);;;                if (logger.isTraceEnabled())
                    logger.trace(ep + "local generation " + localGeneration + ", remote generation " + remoteGeneration);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\Gossiper;applyStateLocally(Map<InetAddress,EndpointState>);;;                    else if (logger.isTraceEnabled())
                            logger.trace("Ignoring remote version " + remoteMaxVersion + " <= " + localMaxVersion + " for " + ep);
                    if (!localEpStatePtr.isAlive()) // unless of course, it was dead
                        markAlive(ep, localEpStatePtr);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\Gossiper;applyNewStates(InetAddress,EndpointState,EndpointState);;;private void applyNewStates(InetAddress addr, EndpointState localState, EndpointState remoteState)
    {
        // don't assert here, since if the node restarts the version will go back to zero
        int oldVersion = localState.getHeartBeatState().getHeartBeatVersion();
        Map<ApplicationState, VersionedValue> localAppStateMap = localState.getApplicationStateMap();

        localState.setHeartBeatState(remoteState.getHeartBeatState());
        if (logger.isTraceEnabled())
            logger.trace("Updating heartbeat state version to " + localState.getHeartBeatState().getHeartBeatVersion() + " from " + oldVersion + " for " + addr + " ...");

        for (Entry<ApplicationState, VersionedValue> remoteEntry : remoteState.getApplicationStateMap().entrySet())
        {
            ApplicationState remoteKey = remoteEntry.getKey();
            VersionedValue remoteValue = remoteEntry.getValue();

            assert remoteState.getHeartBeatState().getGeneration() == localState.getHeartBeatState().getGeneration();
            localState.addApplicationState(remoteKey, remoteValue);
            doNotifications(addr, remoteKey, remoteValue);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\Gossiper;start(int);;;        if (logger.isTraceEnabled())
            logger.trace("gossip started with generation " + localState.getHeartBeatState().getGeneration());
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\HeartBeatState;serialize(HeartBeatState,DataOutputStream,int);;;public void serialize(HeartBeatState hbState, DataOutputStream dos, int version) throws IOException
    {
        dos.writeInt(hbState.getGeneration());
        dos.writeInt(hbState.getHeartBeatVersion());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\HeartBeatState;deserialize(DataInputStream,int);;;public HeartBeatState deserialize(DataInputStream dis, int version) throws IOException
    {
        return new HeartBeatState(dis.readInt(), dis.readInt());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\VersionedValue;toString();;;@Override
    public String toString()
    {
        return "Value(" + value + "," + version + ")";
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\VersionedValue;moving(Token);;;public VersionedValue moving(Token token)
        {
            return new VersionedValue(VersionedValue.STATUS_MOVING + VersionedValue.DELIMITER + partitioner.getTokenFactory().toString(token));
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\VersionedValue;serialize(VersionedValue,DataOutputStream,int);;;public void serialize(VersionedValue value, DataOutputStream dos, int version) throws IOException
        {
            dos.writeUTF(value.value);
            dos.writeInt(value.version);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\gms\VersionedValue;deserialize(DataInputStream,int);;;public VersionedValue deserialize(DataInputStream dis, int version) throws IOException
        {
            String value = dis.readUTF();
            int valVersion = dis.readInt();
            return new VersionedValue(value, valVersion);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\hadoop\ColumnFamilyRecordWriter;write(ByteBuffer,List<org.apache.cassandra.hadoop.avro.Mutation>);;;@Override
    public void write(ByteBuffer keybuff, List<org.apache.cassandra.hadoop.avro.Mutation> value) throws IOException
    {
        Range range = ringCache.getRange(keybuff);

        // get the client for the given range, or create a new one
        RangeClient client = clients.get(range);
        if (client == null)
        {
            // haven't seen keys for this range: create new client
            client = new RangeClient(ringCache.getEndpoint(range));
            client.start();
            clients.put(range, client);
        }

        for (org.apache.cassandra.hadoop.avro.Mutation amut : value)
            client.put(new Pair<ByteBuffer,Mutation>(keybuff, avroToThrift(amut)));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\hadoop\ColumnFamilyRecordWriter;avroToThrift(org.apache.cassandra.hadoop.avro.Mutation);;;private Mutation avroToThrift(org.apache.cassandra.hadoop.avro.Mutation amut)
    {
        Mutation mutation = new Mutation();
        org.apache.cassandra.hadoop.avro.ColumnOrSuperColumn acosc = amut.column_or_supercolumn;
        if (acosc == null)
        {
            // deletion
            assert amut.deletion != null;
            Deletion deletion = new Deletion().setTimestamp(amut.deletion.timestamp);
            mutation.setDeletion(deletion);

            org.apache.cassandra.hadoop.avro.SlicePredicate apred = amut.deletion.predicate;
            if (apred == null && amut.deletion.super_column == null)
            {
                // leave Deletion alone to delete entire row
            }
            else if (amut.deletion.super_column != null)
            {
                // super column
                deletion.setSuper_column(ByteBufferUtil.getArray(amut.deletion.super_column));
            }
            else if (apred.column_names != null)
            {
                // column names
                List<ByteBuffer> names = new ArrayList<ByteBuffer>(apred.column_names.size());
                for (ByteBuffer name : apred.column_names)
                    names.add(name);
                deletion.setPredicate(new SlicePredicate().setColumn_names(names));
            }
            else
            {
                // range
                deletion.setPredicate(new SlicePredicate().setSlice_range(avroToThrift(apred.slice_range)));
            }
        }
        else
        {
            // creation
            ColumnOrSuperColumn cosc = new ColumnOrSuperColumn();
            mutation.setColumn_or_supercolumn(cosc);
            if (acosc.column != null)
                // standard column
                cosc.setColumn(avroToThrift(acosc.column));
            else
            {
                // super column
                ByteBuffer scolname = acosc.super_column.name;
                List<Column> scolcols = new ArrayList<Column>(acosc.super_column.columns.size());
                for (org.apache.cassandra.hadoop.avro.Column acol : acosc.super_column.columns)
                    scolcols.add(avroToThrift(acol));
                cosc.setSuper_column(new SuperColumn(scolname, scolcols));
            }
        }
        return mutation;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\hadoop\ColumnFamilyRecordWriter;avroToThrift(org.apache.cassandra.hadoop.avro.SliceRange);;;private SliceRange avroToThrift(org.apache.cassandra.hadoop.avro.SliceRange asr)
    {
        return new SliceRange(asr.start, asr.finish, asr.reversed, asr.count);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\hadoop\ColumnFamilyRecordWriter;avroToThrift(org.apache.cassandra.hadoop.avro.Column);;;private Column avroToThrift(org.apache.cassandra.hadoop.avro.Column acol)
    {
        return new Column(acol.name).setValue(acol.value).setTimestamp(acol.timestamp);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionController;CompactionController(ColumnFamilyStore,Collection<SSTableReader>,boolean,int,boolean);;;public CompactionController(ColumnFamilyStore cfs, Collection<SSTableReader> sstables, boolean isMajor, int gcBefore, boolean forceDeserialize)
    {
        this.cfs = cfs;
        this.isMajor = isMajor;
        this.sstables = new HashSet<SSTableReader>(sstables);
        this.gcBefore = gcBefore;
        this.forceDeserialize = forceDeserialize;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionController;getBasicController(boolean);;;public static CompactionController getBasicController(boolean forceDeserialize)
    {
        return forceDeserialize ? basicDeserializingController : basicController;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionController;getKeyspace();;;public String getKeyspace()
    {
        return cfs != null ? cfs.table.name : "n/a";
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionController;getColumnFamily();;;public String getColumnFamily()
    {
        return cfs != null ? cfs.columnFamily : "n/a";
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionController;shouldPurge(DecoratedKey);;;public boolean shouldPurge(DecoratedKey key)
    {
        return isMajor || (cfs != null && !cfs.isKeyInRemainingSSTables(key, sstables));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionController;needDeserialize();;;public boolean needDeserialize()
    {
        if (forceDeserialize)
            return true;

        for (SSTableReader sstable : sstables)
            if (!sstable.descriptor.isLatestVersion)
                return true;

        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionController;invalidateCachedRow(DecoratedKey);;;public void invalidateCachedRow(DecoratedKey key)
    {
        if (cfs != null)
            cfs.invalidateCachedRow(key);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionController;removeDeletedInCache(DecoratedKey);;;public void removeDeletedInCache(DecoratedKey key)
    {
        if (cfs != null)
        {
            ColumnFamily cachedRow = cfs.getRawCachedRow(key);
            if (cachedRow != null)
                ColumnFamilyStore.removeDeleted(cachedRow, gcBefore);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionInfo;CompactionInfo(String,String,CompactionType,long,long);;;public CompactionInfo(String ksname, String cfname, CompactionType tasktype, long bytesComplete, long totalBytes)
    {
        this.ksname = ksname;
        this.cfname = cfname;
        this.tasktype = tasktype;
        this.bytesComplete = bytesComplete;
        this.totalBytes = totalBytes;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionInfo;forProgress(long,long);;;public CompactionInfo forProgress(long bytesComplete, long totalBytes)
    {
        return new CompactionInfo(ksname, cfname, tasktype, bytesComplete, totalBytes);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionInfo;getKeyspace();;;public String getKeyspace()
    {
        return ksname;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionInfo;getColumnFamily();;;public String getColumnFamily()
    {
        return cfname;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionInfo;getBytesComplete();;;public long getBytesComplete()
    {
        return bytesComplete;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionInfo;getTotalBytes();;;public long getTotalBytes()
    {
        return totalBytes;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionInfo;getTaskType();;;public CompactionType getTaskType()
    {
        return tasktype;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionInfo;toString();;;public String toString()
    {
        StringBuilder buff = new StringBuilder();
        buff.append(getTaskType()).append('@').append(hashCode());
        buff.append('(').append(getKeyspace()).append(", ").append(getColumnFamily());
        buff.append(", ").append(getBytesComplete()).append('/').append(getTotalBytes());
        return buff.append(')').toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionInfo;getCompactionInfo();;;public CompactionInfo getCompactionInfo();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionIterator;CompactionIterator(CompactionType,Iterable<SSTableReader>,CompactionController);;;public CompactionIterator(CompactionType type, Iterable<SSTableReader> sstables, CompactionController controller) throws IOException
    {
        this(type, getCollatingIterator(sstables), controller);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionIterator;CompactionIterator(CompactionType,Iterator,CompactionController);;;@SuppressWarnings("unchecked")
    protected CompactionIterator(CompactionType type, Iterator iter, CompactionController controller)
    {
        super(iter);
        this.type = type;
        this.controller = controller;
        row = 0;
        totalBytes = bytesRead = 0;
        for (SSTableScanner scanner : getScanners())
        {
            totalBytes += scanner.getFileLength();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionIterator;getCompactionInfo();;;public CompactionInfo getCompactionInfo()
    {
        return new CompactionInfo(controller.getKeyspace(),
                                  controller.getColumnFamily(),
                                  type,
                                  bytesRead,
                                  totalBytes);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionIterator;getReduced();;;                throttle();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionIterator;throttle();;;private void throttle()
    {
        if (DatabaseDescriptor.getCompactionThroughputMbPerSec() < 1 || StorageService.instance.isBootstrapMode())
            // throttling disabled
            return;
        int totalBytesPerMS = DatabaseDescriptor.getCompactionThroughputMbPerSec() * 1024 * 1024 / 1000;

        // bytes compacted and time passed since last delay
        long bytesSinceLast = bytesRead - bytesAtLastDelay;
        long msSinceLast = System.currentTimeMillis() - timeAtLastDelay;

        // determine the current target
        int newTarget = totalBytesPerMS /
            Math.max(1, CompactionManager.instance.getActiveCompactions());
        if (newTarget != targetBytesPerMS)
            logger.info(String.format("%s now compacting at %d bytes/ms.",
                                      this,
                                      newTarget));
        targetBytesPerMS = newTarget;

        // the excess bytes that were compacted in this period
        long excessBytes = bytesSinceLast - msSinceLast * targetBytesPerMS;

        // the time to delay to recap the deficit
        long timeToDelay = excessBytes / Math.max(1, targetBytesPerMS);
        if (timeToDelay > 0)
        {
            if (logger.isTraceEnabled())
                logger.trace(String.format("Compacted %d bytes in %d ms: throttling for %d ms",
                                           bytesSinceLast, msSinceLast, timeToDelay));
            try { Thread.sleep(timeToDelay); } catch (InterruptedException e) { throw new AssertionError(e); }
        }
        bytesAtLastDelay = bytesRead;
        timeAtLastDelay = System.currentTimeMillis();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionIterator;toString();;;public String toString()
    {
        return this.getCompactionInfo().toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionType;CompactionType(String);;;CompactionType(String type)
    {
        this.type = type;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\CompactionType;toString();;;public String toString()
    {
        return type;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\IColumnSerializer;deserialize(DataInput,ColumnFamilyStore,boolean,int);;;public IColumn deserialize(DataInput in, ColumnFamilyStore interner, boolean fromRemote, int expireBefore) throws IOException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\ICompactSerializer;serialize(T,DataOutputStream,int);;;public void serialize(T t, DataOutputStream dos, int version) throws IOException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\ICompactSerializer;deserialize(DataInputStream,int);;;public T deserialize(DataInputStream dis, int version) throws IOException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\ICompactSerializer3;serializedSize(T);;;public long serializedSize(T t);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\LazilyCompactedRow;LazilyCompactedRow(CompactionController,List<SSTableIdentityIterator>);;;public LazilyCompactedRow(CompactionController controller, List<SSTableIdentityIterator> rows)
    {
        super(rows.get(0).getKey());
        this.controller = controller;
        this.shouldPurge = controller.shouldPurge(key);
        this.rows = new ArrayList<SSTableIdentityIterator>(rows);

        for (SSTableIdentityIterator row : rows)
        {
            ColumnFamily cf = row.getColumnFamily();

            if (emptyColumnFamily == null)
                emptyColumnFamily = cf;
            else
                emptyColumnFamily.delete(cf);
        }

        // initialize row header so isEmpty can be called
        headerBuffer = new DataOutputBuffer();
        ColumnIndexer.serialize(this, headerBuffer);
        // reach into iterator used by ColumnIndexer to get column count and size
        columnCount = iter.size;
        columnSerializedSize = iter.serializedSize;
        iter = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\LazilyCompactedRow;update(MessageDigest);;;
        try
        {
            ColumnFamily.serializer().serializeCFInfo(emptyColumnFamily, out);
            out.writeInt(columnCount);
            digest.update(out.getData(), 0, out.getLength());
        }
        catch (IOException e)
        {
            throw new IOError(e);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\PrecompactedRow;PrecompactedRow(DecoratedKey,ColumnFamily);;;public PrecompactedRow(DecoratedKey key, ColumnFamily compacted)
    {
        super(key);
        this.compactedCf = compacted;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\PrecompactedRow;PrecompactedRow(CompactionController,List<SSTableIdentityIterator>);;;public PrecompactedRow(CompactionController controller, List<SSTableIdentityIterator> rows)
    {
        super(rows.get(0).getKey());

        ColumnFamily cf = null;
        for (SSTableIdentityIterator row : rows)
        {
            ColumnFamily thisCF;
            try
            {
                thisCF = row.getColumnFamilyWithColumns();
            }
            catch (IOException e)
            {
                logger.error("Skipping row " + key + " in " + row.getPath(), e);
                continue;
            }
            if (cf == null)
            {
                cf = thisCF;
            }
            else
            {
                cf.addAll(thisCF);
            }
        }
        compactedCf = controller.shouldPurge(key) ? ColumnFamilyStore.removeDeleted(cf, controller.gcBefore) : cf;
        if (compactedCf != null && compactedCf.metadata().getDefaultValidator().isCommutative())
        {
            CounterColumn.removeOldShards(compactedCf, controller.gcBefore);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\PrecompactedRow;getFullColumnFamily();;;public ColumnFamily getFullColumnFamily()  throws IOException
    {
        return compactedCf;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\Descriptor;hasReplayPosition();;;public boolean hasReplayPosition()
    {
        return version.compareTo("g") >= 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTable;SSTable(Descriptor,CFMetaData,ReplayPosition,IPartitioner);;;protected SSTable(Descriptor descriptor, CFMetaData metadata, ReplayPosition replayPosition, IPartitioner partitioner)
    {
        this(descriptor, new HashSet<Component>(), metadata, replayPosition, partitioner);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTable;SSTable(Descriptor,Set<Component>,CFMetaData,ReplayPosition,IPartitioner);;;protected SSTable(Descriptor descriptor, Set<Component> components, CFMetaData metadata, ReplayPosition replayPosition, IPartitioner partitioner)
    {
        this(descriptor, components, metadata, replayPosition, partitioner, defaultRowHistogram(), defaultColumnHistogram());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTable;SSTable(Descriptor,Set<Component>,CFMetaData,ReplayPosition,IPartitioner,EstimatedHistogram,EstimatedHistogram);;;protected SSTable(Descriptor descriptor, Set<Component> components, CFMetaData metadata, ReplayPosition replayPosition, IPartitioner partitioner, EstimatedHistogram rowSizes, EstimatedHistogram columnCounts)
    {
        assert descriptor != null;
        assert components != null;
        assert metadata != null;
        assert replayPosition != null;
        assert partitioner != null;
        assert rowSizes != null;
        assert columnCounts != null;

        this.descriptor = descriptor;
        Set<Component> dataComponents = new HashSet<Component>(components);
        for (Component component : components)
            assert component.type != Component.Type.COMPACTED_MARKER;
        this.components = Collections.unmodifiableSet(dataComponents);
        this.metadata = metadata;
        this.replayPosition = replayPosition;
        this.partitioner = partitioner;
        estimatedRowSize = rowSizes;
        estimatedColumnCount = columnCounts;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableBoundedScanner;SSTableBoundedScanner(SSTableReader,int,boolean,Range);;;SSTableBoundedScanner(SSTableReader sstable, int bufferSize, boolean skipCache, Range range)
    {
        super(sstable, bufferSize, skipCache);
        this.rangeIterator = sstable.getPositionsForRanges(Collections.singletonList(range)).iterator();
        if (rangeIterator.hasNext())
        {
            currentRange = rangeIterator.next();
            try
            {
                file.seek(currentRange.left);
            }
            catch (IOException e)
            {
                throw new RuntimeException(e);
            }
        }
        else
        {
            exhausted = true;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableBoundedScanner;hasNext();;;@Override
    public boolean hasNext()
    {
        if (iterator == null)
            iterator = exhausted ? Arrays.asList(new IColumnIterator[0]).iterator() : new BoundedKeyScanningIterator();
        return iterator.hasNext();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableBoundedScanner;next();;;@Override
    public IColumnIterator next()
    {
        if (iterator == null)
            iterator = exhausted ? Arrays.asList(new IColumnIterator[0]).iterator() : new BoundedKeyScanningIterator();
        return iterator.next();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableBoundedScanner;hasNext();;;@Override
        public boolean hasNext()
        {
            if (!super.hasNext())
                return false;

            if (finishedAt < currentRange.right)
                return true;

            if (rangeIterator.hasNext())
            {
                currentRange = rangeIterator.next();
                finishedAt = currentRange.left; // next() will seek for us
                return true;
            }
            else
            {
                return false;
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableDeletingReference;SSTableDeletingReference(DataTracker,SSTableReader,ReferenceQueue<?superSSTableReader>);;;SSTableDeletingReference(DataTracker tracker, SSTableReader referent, ReferenceQueue<? super SSTableReader> q)
    {
        super(referent, q);
        this.tracker = tracker;
        this.desc = referent.descriptor;
        this.components = referent.components;
        this.size = referent.bytesOnDisk();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableIdentityIterator;SSTableIdentityIterator(CFMetaData,BufferedRandomAccessFile,DecoratedKey,long,long,boolean);;;public SSTableIdentityIterator(CFMetaData metadata, BufferedRandomAccessFile file, DecoratedKey key, long dataStart, long dataSize, boolean fromRemote)
    throws IOException
    {
        this(metadata, file, key, dataStart, dataSize, false, null, fromRemote);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableIdentityIterator;SSTableIdentityIterator(CFMetaData,BufferedRandomAccessFile,DecoratedKey,long,long,boolean,SSTableReader,boolean);;;private SSTableIdentityIterator(CFMetaData metadata, BufferedRandomAccessFile file, DecoratedKey key, long dataStart, long dataSize, boolean checkData, SSTableReader sstable, boolean fromRemote)
    throws IOException
    {
        this.file = file;
        this.key = key;
        this.dataStart = dataStart;
        this.dataSize = dataSize;
        this.expireBefore = (int)(System.currentTimeMillis() / 1000);
        this.fromRemote = fromRemote;
        this.validateColumns = checkData;
        finishedAt = dataStart + dataSize;

        try
        {
            file.seek(this.dataStart);
            if (checkData)
            {
                try
                {
                    IndexHelper.defreezeBloomFilter(file, dataSize, sstable.descriptor.usesOldBloomFilter);
                }
                catch (Exception e)
                {
                    if (e instanceof EOFException)
                        throw (EOFException) e;

                    logger.debug("Invalid bloom filter in {}; will rebuild it", sstable);
                    // deFreeze should have left the file position ready to deserialize index
                }
                try
                {
                    IndexHelper.deserializeIndex(file);
                }
                catch (Exception e)
                {
                    logger.debug("Invalid row summary in {}; will rebuild it", sstable);
                }
                file.seek(this.dataStart);
            }

            IndexHelper.skipBloomFilter(file);
            IndexHelper.skipIndex(file);
            columnFamily = ColumnFamily.create(metadata);
            ColumnFamily.serializer().deserializeFromSSTableNoColumns(columnFamily, file);
            columnCount = file.readInt();
            columnPosition = file.getFilePointer();
        }
        catch (IOException e)
        {
            throw new IOError(e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableReader;open(Descriptor,Set<Component>,Set<DecoratedKey>,DataTracker,CFMetaData,IPartitioner);;;public static SSTableReader open(Descriptor descriptor, Set<Component> components, Set<DecoratedKey> savedKeys, DataTracker tracker, CFMetaData metadata, IPartitioner partitioner) throws IOException
    {
        assert partitioner != null;

        long start = System.currentTimeMillis();
        logger.info("Opening " + descriptor);

        EstimatedHistogram rowSizes;
        EstimatedHistogram columnCounts;
        File statsFile = new File(descriptor.filenameFor(SSTable.COMPONENT_STATS));
        ReplayPosition rp = ReplayPosition.NONE;
        if (statsFile.exists())
        {
            DataInputStream dis = null;
            try
            {
                logger.debug("Load metadata for {}", descriptor);
                dis = new DataInputStream(new BufferedInputStream(new FileInputStream(statsFile)));
                rowSizes = EstimatedHistogram.serializer.deserialize(dis);
                columnCounts = EstimatedHistogram.serializer.deserialize(dis);
                if (descriptor.hasReplayPosition())
                    rp = ReplayPosition.serializer.deserialize(dis);
            }
            finally
            {
                FileUtils.closeQuietly(dis);
            }
        }
        else
        {
            logger.debug("No statistics for {}", descriptor);
            rowSizes = SSTable.defaultRowHistogram();
            columnCounts = SSTable.defaultColumnHistogram();
        }

        SSTableReader sstable = new SSTableReader(descriptor, components, metadata, rp, partitioner, null, null, null, null, System.currentTimeMillis(), rowSizes, columnCounts);
        sstable.setTrackedBy(tracker);

        // versions before 'c' encoded keys as utf-16 before hashing to the filter
        if (descriptor.hasStringsInBloomFilter)
        {
            sstable.load(true, savedKeys);
        }
        else
        {
            sstable.load(false, savedKeys);
            sstable.loadBloomFilter();
        }
        if (logger.isDebugEnabled())
            logger.debug("INDEX LOAD TIME for " + descriptor + ": " + (System.currentTimeMillis() - start) + " ms.");

        if (logger.isDebugEnabled() && sstable.getKeyCache() != null)
            logger.debug(String.format("key cache contains %s/%s keys", sstable.getKeyCache().size(), sstable.getKeyCache().getCapacity()));

        return sstable;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableReader;internalOpen(Descriptor,Set<Component>,CFMetaData,ReplayPosition,IPartitioner,SegmentedFile,SegmentedFile,IndexSummary,Filter,long,EstimatedHistogram,EstimatedHistogram);;;static SSTableReader internalOpen(Descriptor desc, Set<Component> components, CFMetaData metadata, ReplayPosition replayPosition, IPartitioner partitioner, SegmentedFile ifile, SegmentedFile dfile, IndexSummary isummary, Filter bf, long maxDataAge, EstimatedHistogram rowsize,
                                      EstimatedHistogram columncount) throws IOException
    {
        assert desc != null && partitioner != null && ifile != null && dfile != null && isummary != null && bf != null;
        return new SSTableReader(desc, components, metadata, replayPosition, partitioner, ifile, dfile, isummary, bf, maxDataAge, rowsize, columncount);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableReader;SSTableReader(Descriptor,Set<Component>,CFMetaData,ReplayPosition,IPartitioner,SegmentedFile,SegmentedFile,IndexSummary,Filter,long,EstimatedHistogram,EstimatedHistogram);;;private SSTableReader(Descriptor desc,
                          Set<Component> components,
                          CFMetaData metadata,
                          ReplayPosition replayPosition,
                          IPartitioner partitioner,
                          SegmentedFile ifile,
                          SegmentedFile dfile,
                          IndexSummary indexSummary,
                          Filter bloomFilter,
                          long maxDataAge,
                          EstimatedHistogram rowSizes,
                          EstimatedHistogram columnCounts)
    throws IOException
    {
        super(desc, components, metadata, replayPosition, partitioner, rowSizes, columnCounts);
        this.maxDataAge = maxDataAge;

        this.ifile = ifile;
        this.dfile = dfile;
        this.indexSummary = indexSummary;
        this.bf = bloomFilter;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableReader;setTrackedBy(DataTracker);;;public void setTrackedBy(DataTracker tracker)
    {
        if (tracker != null)
        {
            phantomReference = new SSTableDeletingReference(tracker, this, finalizerQueue);
            finalizers.add(phantomReference);
            keyCache = tracker.getKeyCache();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableReader;getSampleIndexesForRanges(List<IndexSummary.KeyPosition>,Collection<Range>);;;private static List<Pair<Integer,Integer>> getSampleIndexesForRanges(List<IndexSummary.KeyPosition> samples, Collection<Range> ranges)
    {
        // use the index to determine a minimal section for each range
        List<Pair<Integer,Integer>> positions = new ArrayList<Pair<Integer,Integer>>();
        if (samples.isEmpty())
            return positions;

        for (AbstractBounds range : AbstractBounds.normalize(ranges))
        {
            DecoratedKey leftKey = new DecoratedKey(range.left, null);
            DecoratedKey rightKey = new DecoratedKey(range.right, null);

            int left = Collections.binarySearch(samples, new IndexSummary.KeyPosition(leftKey, -1));
            if (left < 0)
                left = (left + 1) * -1;
            else
                // left range are start exclusive
                left = left + 1;
            if (left == samples.size())
                // left is past the end of the sampling
                continue;

            int right = Range.isWrapAround(range.left, range.right)
                      ? samples.size() - 1
                      : Collections.binarySearch(samples, new IndexSummary.KeyPosition(rightKey, -1));
            if (right < 0)
            {
                // range are end inclusive so we use the previous index from what binarySearch give us
                // since that will be the last index we will return
                right = (right + 1) * -1;
                if (right > 0)
                    right--;
            }

            if (left >= right)
                // empty range
                continue;
            positions.add(new Pair(Integer.valueOf(left), Integer.valueOf(right)));
        }
        return positions;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableReader;getKeySamples(Range);;;public Iterable<DecoratedKey> getKeySamples(final Range range)
    {
        final List<IndexSummary.KeyPosition> samples = indexSummary.getIndexPositions();

        final List<Pair<Integer, Integer>> indexRanges = getSampleIndexesForRanges(samples, Collections.singletonList(range));

        if (indexRanges.isEmpty())
            return Collections.emptyList();

        return new Iterable<DecoratedKey>()
        {
            public Iterator<DecoratedKey> iterator()
            {
                return new Iterator<DecoratedKey>()
                {
                    private Iterator<Pair<Integer, Integer>> rangeIter = indexRanges.iterator();
                    private Pair<Integer, Integer> current;
                    private int idx;

                    public boolean hasNext()
                    {
                        if (current == null || idx > current.right)
                        {
                            if (rangeIter.hasNext())
                            {
                                current = rangeIter.next();
                                idx = current.left;
                                return true;
                            }
                            return false;
                        }

                        return true;
                    }

                    public DecoratedKey next()
                    {
                        return samples.get(idx++).key;
                    }

                    public void remove()
                    {
                        throw new UnsupportedOperationException();
                    }
                };
            }
        };
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableReader;getDirectScanner(int,Range);;;public SSTableScanner getDirectScanner(int bufferSize, Range range)
    {
        return new SSTableBoundedScanner(this, bufferSize, true, range);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableWriter;SSTableWriter(String,long,CFMetaData,IPartitioner,ReplayPosition);;;public SSTableWriter(String filename, long keyCount, CFMetaData metadata, IPartitioner partitioner, ReplayPosition replayPosition) throws IOException
    {
        super(Descriptor.fromFilename(filename),
              new HashSet<Component>(Arrays.asList(Component.DATA, Component.FILTER, Component.PRIMARY_INDEX, Component.STATS)),
              metadata,
              replayPosition,
              partitioner,
              SSTable.defaultRowHistogram(),
              SSTable.defaultColumnHistogram());
        iwriter = new IndexWriter(descriptor, partitioner, keyCount);
        dbuilder = SegmentedFile.getBuilder(DatabaseDescriptor.getDiskAccessMode());
        dataFile = new BufferedRandomAccessFile(new File(getFilename()), "rw", BufferedRandomAccessFile.DEFAULT_BUFFER_SIZE, true);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableWriter;writeMetadata(Descriptor,EstimatedHistogram,EstimatedHistogram,ReplayPosition);;;private static void writeMetadata(Descriptor desc, EstimatedHistogram rowSizes, EstimatedHistogram columnCounts, ReplayPosition rp) throws IOException
    {
        BufferedRandomAccessFile out = new BufferedRandomAccessFile(new File(desc.filenameFor(SSTable.COMPONENT_STATS)),
                                                                     "rw",
                                                                     BufferedRandomAccessFile.DEFAULT_BUFFER_SIZE,
                                                                     true);
        EstimatedHistogram.serializer.serialize(rowSizes, out);
        EstimatedHistogram.serializer.serialize(columnCounts, out);
        ReplayPosition.serializer.serialize(rp, out);
        out.close();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableWriter;createBuilder(Descriptor,OperationType);;;public static Builder createBuilder(Descriptor desc, OperationType type)
    {
        if (!desc.isLatestVersion)
            // TODO: streaming between different versions will fail: need support for
            // recovering other versions to provide a stable streaming api
            throw new RuntimeException(String.format("Cannot recover SSTable with version %s (current version %s).",
                                                     desc.version, Descriptor.CURRENT_VERSION));

        return new Builder(desc, type);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableWriter;Builder(Descriptor,OperationType);;;public Builder(Descriptor desc, OperationType type)
        {
            this.desc = desc;
            this.type = type;
            cfs = Table.open(desc.ksname).getColumnFamilyStore(desc.cfname);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableWriter;getCompactionInfo();;;public CompactionInfo getCompactionInfo()
        {
            maybeOpenIndexer();
            try
            {
                // both file offsets are still valid post-close
                return new CompactionInfo(desc.ksname,
                                          desc.cfname,
                                          CompactionType.SSTABLE_BUILD,
                                          indexer.dfile.getFilePointer(),
                                          indexer.dfile.length());
            }
            catch (IOException e)
            {
                throw new IOError(e);
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableWriter;maybeOpenIndexer();;;private void maybeOpenIndexer()
        {
            if (indexer != null)
                return;
            try
            {
                if (cfs.metadata.getDefaultValidator().isCommutative())
                    indexer = new CommutativeRowIndexer(desc, cfs, type);
                else
                    indexer = new RowIndexer(desc, cfs, type);
            }
            catch (IOException e)
            {
                throw new IOError(e);
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableWriter;RowIndexer(Descriptor,ColumnFamilyStore,OperationType);;;RowIndexer(Descriptor desc, ColumnFamilyStore cfs, OperationType type) throws IOException
        {
            this(desc, new BufferedRandomAccessFile(new File(desc.filenameFor(SSTable.COMPONENT_DATA)), "r", 8 * 1024 * 1024, true), cfs, type);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableWriter;RowIndexer(Descriptor,BufferedRandomAccessFile,ColumnFamilyStore,OperationType);;;protected RowIndexer(Descriptor desc, BufferedRandomAccessFile dfile, ColumnFamilyStore cfs, OperationType type) throws IOException
        {
            this.desc = desc;
            this.dfile = dfile;
            this.type = type;
            this.cfs = cfs;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableWriter;prepareIndexing();;;long prepareIndexing() throws IOException
        {
            long estimatedRows;
            try
            {
                estimatedRows = SSTable.estimateRowsFromData(desc, dfile);
                iwriter = new IndexWriter(desc, StorageService.getPartitioner(), estimatedRows);
                return estimatedRows;
            }
            catch(IOException e)
            {
                dfile.close();
                throw e;
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableWriter;index();;;long index() throws IOException
        {
            try
            {
                return doIndexing();
            }
            finally
            {
                try
                {
                    close();
                }
                catch (IOException e)
                {
                    throw new IOError(e);
                }
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableWriter;close();;;void close() throws IOException
        {
            dfile.close();
            iwriter.close();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableWriter;updateCache(DecoratedKey,long,AbstractCompactedRow);;;protected void updateCache(DecoratedKey key, long dataSize, AbstractCompactedRow row) throws IOException
        {
            ColumnFamily cached = cfs.getRawCachedRow(key);
            if (cached != null)
            {
                switch (type)
                {
                    case AES:
                        if (dataSize > DatabaseDescriptor.getInMemoryCompactionLimit())
                        {
                            // We have a key in cache for a very big row, that is fishy. We don't fail here however because that would prevent the sstable
                            // from being build (and there is no real point anyway), so we just invalidate the row for correction and log a warning.
                            logger.warn("Found a cached row over the in memory compaction limit during post-streaming rebuilt; it is highly recommended to avoid huge row on column family with row cache enabled.");
                            cfs.invalidateCachedRow(key);
                        }
                        else
                        {
                            ColumnFamily cf;
                            if (row == null)
                            {
                                // If not provided, read from disk.
                                cf = ColumnFamily.create(cfs.metadata);
                                ColumnFamily.serializer().deserializeColumns(dfile, cf, true, true);
                            }
                            else
                            {
                                assert row instanceof PrecompactedRow;
                                // we do not purge so we should not get a null here
                                cf = ((PrecompactedRow)row).getFullColumnFamily();
                            }
                            cfs.updateRowCache(key, cf);
                        }
                        break;
                    default:
                        cfs.invalidateCachedRow(key);
                        break;
                }
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableWriter;doIndexing();;;protected long doIndexing() throws IOException
        {
            EstimatedHistogram rowSizes = SSTable.defaultRowHistogram();
            EstimatedHistogram columnCounts = SSTable.defaultColumnHistogram();
            long rows = 0;
            DecoratedKey key;
            long rowPosition = 0;
            while (rowPosition < dfile.length())
            {
                // read key
                key = SSTableReader.decodeKey(StorageService.getPartitioner(), desc, ByteBufferUtil.readWithShortLength(dfile));
                iwriter.afterAppend(key, rowPosition);

                // seek to next key
                long dataSize = SSTableReader.readRowSize(dfile, desc);
                rowPosition = dfile.getFilePointer() + dataSize;

                IndexHelper.skipBloomFilter(dfile);
                IndexHelper.skipIndex(dfile);
                ColumnFamily.serializer().deserializeFromSSTableNoColumns(ColumnFamily.create(cfs.metadata), dfile);

                // don't move that statement around, it expects the dfile to be before the columns
                updateCache(key, dataSize, null);

                rowSizes.add(dataSize);
                columnCounts.add(dfile.readInt());
                
                dfile.seek(rowPosition);

                rows++;
            }
            writeMetadata(desc, rowSizes, columnCounts, ReplayPosition.NONE);
            return rows;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableWriter;CommutativeRowIndexer(Descriptor,ColumnFamilyStore,OperationType);;;CommutativeRowIndexer(Descriptor desc, ColumnFamilyStore cfs, OperationType type) throws IOException
        {
            super(desc, new BufferedRandomAccessFile(new File(desc.filenameFor(SSTable.COMPONENT_DATA)), "r", 8 * 1024 * 1024, true), cfs, type);
            writerDfile = new BufferedRandomAccessFile(new File(desc.filenameFor(SSTable.COMPONENT_DATA)), "rw", 8 * 1024 * 1024, true);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableWriter;doIndexing();;;@Override
        protected long doIndexing() throws IOException
        {
            EstimatedHistogram rowSizes = SSTable.defaultRowHistogram();
            EstimatedHistogram columnCounts = SSTable.defaultColumnHistogram();
            long rows = 0L;
            DecoratedKey key;

            CompactionController controller = CompactionController.getBasicController(true);

            long dfileLength = dfile.length();
            while (!dfile.isEOF())
            {
                // read key
                key = SSTableReader.decodeKey(StorageService.getPartitioner(), desc, ByteBufferUtil.readWithShortLength(dfile));

                // skip data size, bloom filter, column index
                long dataSize = SSTableReader.readRowSize(dfile, desc);
                SSTableIdentityIterator iter = new SSTableIdentityIterator(cfs.metadata, dfile, key, dfile.getFilePointer(), dataSize, true);

                AbstractCompactedRow row;
                if (dataSize > DatabaseDescriptor.getInMemoryCompactionLimit())
                {
                    logger.info(String.format("Rebuilding post-streaming large counter row %s (%d bytes) incrementally", ByteBufferUtil.bytesToHex(key.key), dataSize));
                    row = new LazilyCompactedRow(controller, Collections.singletonList(iter));
                }
                else
                {
                    row = new PrecompactedRow(controller, Collections.singletonList(iter));
                }

                updateCache(key, dataSize, row);

                rowSizes.add(dataSize);
                columnCounts.add(row.columnCount());

                // update index writer
                iwriter.afterAppend(key, writerDfile.getFilePointer());
                // write key and row
                ByteBufferUtil.writeWithShortLength(key.key, writerDfile);
                row.write(writerDfile);

                rows++;
            }
            writeMetadata(desc, rowSizes, columnCounts, ReplayPosition.NONE);

            if (writerDfile.getFilePointer() != dfile.getFilePointer())
            {
                // truncate file to new, reduced length
                writerDfile.setLength(writerDfile.getFilePointer());
            }
            writerDfile.sync();

            return rows;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\sstable\SSTableWriter;close();;;@Override
        void close() throws IOException
        {
            super.close();
            writerDfile.close();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\util\BufferedRandomAccessFile;setLength(long);;;@Override
    public void setLength(long newLength) throws IOException
    {
        if (newLength < 0)
            throw new IllegalArgumentException();

        // account for dirty data in buffers
        if (isDirty)
        {
            if (newLength < bufferOffset)
            {
                // buffer is garbage
                validBufferBytes = 0;
            }
            else if (newLength > (bufferOffset + validBufferBytes))
            {
                // flush everything in buffer
                flush();
            }
            else // buffer within range
            {
                // truncate buffer and flush
                validBufferBytes = (int)(newLength - bufferOffset);
                flush();
            }
        }

        // at this point all dirty buffer data is flushed
        super.setLength(newLength);

        validBufferBytes = 0;
        current = newLength;
        reBuffer();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\util\ColumnSortedMap;ColumnSortedMap(Comparator<ByteBuffer>,ColumnSerializer,DataInput,ColumnFamilyStore,int,boolean,int);;;public ColumnSortedMap(Comparator<ByteBuffer> comparator, ColumnSerializer serializer, DataInput dis, ColumnFamilyStore interner, int length, boolean fromRemote, int expireBefore)
    {
        this.comparator = comparator;
        this.serializer = serializer;
        this.interner = interner;
        this.dis = dis;
        this.length = length;
        this.fromRemote = fromRemote;
        this.expireBefore = expireBefore;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\util\ColumnSortedMap;ColumnSet(ColumnSerializer,DataInput,ColumnFamilyStore,int,boolean,int);;;public ColumnSet(ColumnSerializer serializer, DataInput dis, ColumnFamilyStore interner, int length, boolean fromRemote, int expireBefore)
    {
        this.serializer = serializer;
        this.dis = dis;
        this.interner = interner;
        this.length = length;
        this.fromRemote = fromRemote;
        this.expireBefore = expireBefore;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\util\ColumnSortedMap;ColumnIterator(ColumnSerializer,DataInput,ColumnFamilyStore,int,boolean,int);;;public ColumnIterator(ColumnSerializer serializer, DataInput dis, ColumnFamilyStore interner, int length, boolean fromRemote, int expireBefore)
    {
        this.dis = dis;
        this.serializer = serializer;
        this.interner = interner;
        this.length = length;
        this.fromRemote = fromRemote;
        this.expireBefore = expireBefore;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\util\MemoryInputStream;MemoryInputStream(FreeableMemory);;;public MemoryInputStream(FreeableMemory mem)
    {
        this.mem = mem;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\util\MemoryInputStream;read();;;public int read() throws IOException
    {       
        return mem.getValidByte(position++) & 0xFF;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\util\MemoryInputStream;seekInternal(int);;;protected void seekInternal(int pos)
    {
        position = pos;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\util\MemoryInputStream;getPosition();;;protected int getPosition()
    {
        return position;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\util\MemoryInputStream;skipBytes(int);;;public int skipBytes(int n) throws IOException
    {
        seekInternal(getPosition() + n);
        return position;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\util\MemoryInputStream;close();;;public void close()
    {
        // do nothing.
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\util\MemoryOutputStream;MemoryOutputStream(Memory);;;public MemoryOutputStream(Memory mem)
    {
        this.mem = mem;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\util\MemoryOutputStream;write(int);;;@Override
    public void write(int b)
    {
        mem.setByte(this.position, (byte)b);
        this.position++;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\io\util\MemoryOutputStream;position();;;public int position()
    {
        return this.position;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\AbstractReplicationStrategy;validateOptions();;;public abstract void validateOptions() throws ConfigurationException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\AbstractReplicationStrategy;createReplicationStrategy(String,Class<?extendsAbstractReplicationStrategy>,TokenMetadata,IEndpointSnitch,Map<String,String>);;;        // Throws Config Exception if strat_opts don't contain required info
        strategy.validateOptions();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\AbstractReplicationStrategy;validateReplicationFactor(String);;;protected void validateReplicationFactor(String rf) throws ConfigurationException
    {
        try
        {
            if (Integer.parseInt(rf) < 0)
            {
                throw new ConfigurationException("Replication factor must be non-negative; found " + rf);
            }
        }
        catch (NumberFormatException e2)
        {
            throw new ConfigurationException("Replication factor must be numeric; found " + rf);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\LocalStrategy;getReplicationFactor();;;public int getReplicationFactor()
    {
        return 1;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\LocalStrategy;validateOptions();;;public void validateOptions() throws ConfigurationException
    {
        // LocalStrategy doesn't expect any options.
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\NetworkTopologyStrategy;validateOptions();;;public void validateOptions() throws ConfigurationException
    {
        for (Entry<String, String> e : this.configOptions.entrySet())
        {
            validateReplicationFactor(e.getValue());
        }

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\OldNetworkTopologyStrategy;getReplicationFactor();;;public int getReplicationFactor()
    {
        return Integer.parseInt(this.configOptions.get("replication_factor"));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\OldNetworkTopologyStrategy;validateOptions();;;public void validateOptions() throws ConfigurationException
    {
        if (configOptions == null || configOptions.get("replication_factor") == null)
        {
            throw new ConfigurationException("SimpleStrategy requires a replication_factor strategy option.");
        }
        validateReplicationFactor(configOptions.get("replication_factor"));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\SeedProvider;getSeeds();;;List<InetAddress> getSeeds();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\SimpleSeedProvider;SimpleSeedProvider(Map<String,String>);;;public SimpleSeedProvider(Map<String, String> args)
    {
        seeds = new ArrayList<InetAddress>();
        String[] hosts = args.get("seeds").split(",", -1);
        for (String host : hosts)
        {
            try
            {
                seeds.add(InetAddress.getByName(host));
            }
            catch (UnknownHostException ex)
            {
                // not fatal... DD will bark if there end up being zero seeds.
                logger.warn("Seed provider couldn't lookup host " + host);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\SimpleSeedProvider;getSeeds();;;public List<InetAddress> getSeeds()
    {
        return Collections.unmodifiableList(seeds);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\SimpleSeedProvider;addSeed(InetAddress);;;public void addSeed(InetAddress addr)
    {
        if (!seeds.contains(addr))
            seeds.add(addr);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\SimpleStrategy;getReplicationFactor();;;public int getReplicationFactor()
    {
        return Integer.parseInt(this.configOptions.get("replication_factor"));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\SimpleStrategy;validateOptions();;;public void validateOptions() throws ConfigurationException
    {
        if (configOptions == null || configOptions.get("replication_factor") == null)
        {
            throw new ConfigurationException("SimpleStrategy requires a replication_factor strategy option.");
        }
        validateReplicationFactor(configOptions.get("replication_factor"));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\TokenMetadata;updateNormalToken(Token,InetAddress);;;            removeFromMoving(endpoint); // also removing this endpoint from moving
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\TokenMetadata;addMovingEndpoint(Token,InetAddress);;;public void addMovingEndpoint(Token token, InetAddress endpoint)
    {
        assert endpoint != null;

        lock.writeLock().lock();

        try
        {
            movingEndpoints.add(new Pair<Token, InetAddress>(token, endpoint));
        }
        finally
        {
            lock.writeLock().unlock();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\TokenMetadata;removeFromMoving(InetAddress);;;public void removeFromMoving(InetAddress endpoint)
    {
        assert endpoint != null;

        lock.writeLock().lock();
        try
        {
            for (Pair<Token, InetAddress> pair : movingEndpoints)
            {
                if (pair.right.equals(endpoint))
                {
                    movingEndpoints.remove(pair);
                    break;
                }
            }

            invalidateCaches();
        }
        finally
        {
            lock.writeLock().unlock();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\TokenMetadata;isMoving(InetAddress);;;public boolean isMoving(InetAddress endpoint)
    {
        assert endpoint != null;

        lock.readLock().lock();

        try
        {
            for (Pair<Token, InetAddress> pair : movingEndpoints)
            {
                if (pair.right.equals(endpoint))
                    return true;
            }

            return false;
        }
        finally
        {
            lock.readLock().unlock();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\TokenMetadata;cloneAfterAllLeft();;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\TokenMetadata;cloneAfterAllLeft();;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\TokenMetadata;cloneAfterAllSettled();;;public TokenMetadata cloneAfterAllSettled()
    {
        lock.readLock().lock();

        try
        {
            TokenMetadata metadata = cloneOnlyTokenMap();

            for (InetAddress endpoint : leavingEndpoints)
                metadata.removeEndpoint(endpoint);


            for (Pair<Token, InetAddress> pair : movingEndpoints)
                metadata.updateNormalToken(pair.left, pair.right);

            return metadata;
        }
        finally
        {
            lock.readLock().unlock();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\locator\TokenMetadata;getMovingEndpoints();;;public Set<Pair<Token, InetAddress>> getMovingEndpoints()
    {
        return movingEndpoints;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\CachingMessageProducer;CachingMessageProducer(MessageProducer);;;public CachingMessageProducer(MessageProducer prod)
    {
        this.prod = prod;    
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\CachingMessageProducer;getMessage(Integer);;;public synchronized Message getMessage(Integer version) throws IOException
    {
        Message msg = messages.get(version);
        if (msg == null)
        {
            msg = prod.getMessage(version);
            messages.put(version, msg);
        }
        return msg;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\Header;serialize(Header,DataOutputStream,int);;;public void serialize(Header t, DataOutputStream dos, int version) throws IOException
    {           
        CompactEndpointSerializationHelper.serialize(t.getFrom(), dos);
        dos.writeInt(t.getVerb().ordinal());
        
        /* Serialize the message header */
        int size = t.details_.size();
        dos.writeInt(size);
        Set<String> keys = t.details_.keySet();
        
        for( String key : keys )
        {
            dos.writeUTF(key);
            byte[] value = t.details_.get(key);
            dos.writeInt(value.length);
            dos.write(value);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\Header;deserialize(DataInputStream,int);;;public Header deserialize(DataInputStream dis, int version) throws IOException
    {
        InetAddress from = CompactEndpointSerializationHelper.deserialize(dis);
        int verbOrdinal = dis.readInt();
        
        /* Deserializing the message header */
        int size = dis.readInt();
        Map<String, byte[]> details = new Hashtable<String, byte[]>(size);
        for ( int i = 0; i < size; ++i )
        {
            String key = dis.readUTF();
            int length = dis.readInt();
            byte[] bytes = new byte[length];
            dis.readFully(bytes);
            details.put(key, bytes);
        }
        
        return new Header(from, StorageService.VERBS[verbOrdinal], details);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\IncomingTcpConnection;run();;;                        // todo: need to be aware of message version.
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\IncomingTcpConnection;run();;;                assert version == MessagingService.getBits(header, 15, 8) : "Protocol version shouldn't change during a session";
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\IncomingTcpConnection;stream(StreamHeader,DataInputStream);;;private void stream(StreamHeader streamHeader, DataInputStream input) throws IOException
    {
        if (DatabaseDescriptor.getEncryptionOptions().internode_encryption == EncryptionOptions.InternodeEncryption.all)
            new SSLIncomingStreamReader(streamHeader, socket, input).read();
        else
            new IncomingStreamReader(streamHeader, socket).read();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\Message;Message(Header,byte[],int);;;private Message(Header header, byte[] body, int version)
    {
        assert header != null;
        assert body != null;

        header_ = header;
        body_ = body;
        this.version = version;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\Message;Message(InetAddress,StorageService.Verb,byte[],int);;;public Message(InetAddress from, StorageService.Verb verb, byte[] body, int version)
    {
        this(new Header(from, verb), body, version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\Message;getVersion();;;public int getVersion()
    {
        return version;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\Message;getReply(InetAddress,byte[],int);;;public Message getReply(InetAddress from, byte[] body, int version)
    {
        Header header = new Header(from, StorageService.Verb.REQUEST_RESPONSE);
        return new Message(header, body, version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\Message;getInternalReply(byte[],int);;;public Message getInternalReply(byte[] body, int version)
    {
        Header header = new Header(FBUtilities.getLocalAddress(), StorageService.Verb.INTERNAL_RESPONSE);
        return new Message(header, body, version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\Message;serialize(Message,DataOutputStream,int);;;public void serialize(Message t, DataOutputStream dos, int version) throws IOException
        {
            assert t.getVersion() == version : "internode protocol version mismatch"; // indicates programmer error.
            Header.serializer().serialize( t.header_, dos, version);
            byte[] bytes = t.getMessageBody();
            dos.writeInt(bytes.length);
            dos.write(bytes);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\Message;deserialize(DataInputStream,int);;;public Message deserialize(DataInputStream dis, int version) throws IOException
        {
            Header header = Header.serializer().deserialize(dis, version);
            int size = dis.readInt();
            byte[] bytes = new byte[size];
            dis.readFully(bytes);
            return new Message(header, bytes, version);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\MessageProducer;getMessage(Integer);;;public Message getMessage(Integer version) throws IOException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\MessagingService;getServerSocket(InetAddress);;;private ServerSocket getServerSocket(InetAddress localEp) throws IOException, ConfigurationException
    {
        final ServerSocket ss;
        if (DatabaseDescriptor.getEncryptionOptions() != null && DatabaseDescriptor.getEncryptionOptions().internode_encryption == EncryptionOptions.InternodeEncryption.all)
        {
            ss = SSLFactory.getServerSocket(DatabaseDescriptor.getEncryptionOptions(), localEp, DatabaseDescriptor.getStoragePort());
            // setReuseAddress happens in the factory.
            logger_.info("Starting Encrypted Messaging Service on port {}", DatabaseDescriptor.getStoragePort());
        }
        else
        {
            ServerSocketChannel serverChannel = ServerSocketChannel.open();
            ss = serverChannel.socket();
            ss.setReuseAddress(true);
            InetSocketAddress address = new InetSocketAddress(localEp, DatabaseDescriptor.getStoragePort());
            try
            {
                ss.bind(address);
            }
            catch (BindException e)
            {
                if (e.getMessage().contains("in use"))
                    throw new ConfigurationException(address + " is in use by another process.  Change listen_address:storage_port in cassandra.yaml to values that do not conflict with other services");
                else if (e.getMessage().contains("Cannot assign requested address"))
                    throw new ConfigurationException("Unable to bind to address " + address + ". Set listen_address in cassandra.yaml to an interface you can bind to, e.g., your private IP address on EC2");
                else
                    throw e;
            }
            logger_.info("Starting Messaging Service on port {}", DatabaseDescriptor.getStoragePort());
        }
        return ss;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\MessagingService;sendRR(Message,InetAddress,IMessageCallback);    {
        return sendRR(message, to, cb, DEFAULT_CALLBACK_TIMEOUT);;    {        
        String id = nextId();
        addCallback(cb, id, to);
        sendOneWay(message, id, to);
        return id;;    {
        String id = nextId();
        addCallback(cb, id, to);
        sendOneWay(message, id, to);
        return id;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\MessagingService;sendRR(MessageProducer,InetAddress,IAsyncCallback);;;public String sendRR(MessageProducer producer, InetAddress to, IAsyncCallback cb)
    {
        try
        {
            return sendRR(producer.getMessage(Gossiper.instance.getVersion(to)), to, cb);
        }
        catch (IOException ex)
        {
            // happened during message creation.
            throw new IOError(ex);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\MessagingService;packIt(byte[],boolean,int);;;public ByteBuffer packIt(byte[] bytes, boolean compress, int version)
    {
        /*
             Setting up the protocol header. This is 4 bytes long
             represented as an integer. The first 2 bits indicate
             the serializer type. The 3rd bit indicates if compression
             is turned on or off. It is turned off by default. The 4th
             bit indicates if we are in streaming mode. It is turned off
             by default. The 5th-8th bits are reserved for future use.
             The next 8 bits indicate a version number. Remaining 15 bits
             are not used currently.
        */
        int header = 0;
        // Setting up the serializer bit
        header |= serializerType_.ordinal();
        // set compression bit.
        if (compress)
            header |= 4;
        // Setting up the version bit
        header |= (version << 8);

        ByteBuffer buffer = ByteBuffer.allocate(4 + 4 + 4 + bytes.length);
        buffer.putInt(PROTOCOL_MAGIC);
        buffer.putInt(header);
        buffer.putInt(bytes.length);
        buffer.put(bytes);
        buffer.flip();
        return buffer;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\net\MessagingService;constructStreamHeader(StreamHeader,boolean,int);;;public ByteBuffer constructStreamHeader(StreamHeader streamHeader, boolean compress, int version)
    {
        /*
        Setting up the protocol header. This is 4 bytes long
        represented as an integer. The first 2 bits indicate
        the serializer type. The 3rd bit indicates if compression
        is turned on or off. It is turned off by default. The 4th
        bit indicates if we are in streaming mode. It is turned off
        by default. The following 4 bits are reserved for future use.
        The next 8 bits indicate a version number. Remaining 15 bits
        are not used currently.
        */
        int header = 0;
        // Setting up the serializer bit
        header |= serializerType_.ordinal();
        // set compression bit.
        if ( compress )
            header |= 4;
        // set streaming bit
        header |= 8;
        // Setting up the version bit
        header |= (version << 8);
        /* Finished the protocol header setup */

        /* Adding the StreamHeader which contains the session Id along
         * with the pendingfile info for the stream.
         * | Session Id | Pending File Size | Pending File | Bool more files |
         * | No. of Pending files | Pending Files ... |
         */
        byte[] bytes;
        try
        {
            DataOutputBuffer buffer = new DataOutputBuffer();
            StreamHeader.serializer().serialize(streamHeader, buffer, version);
            bytes = buffer.getData();
        }
        catch (IOException e)
        {
            throw new RuntimeException(e);
        }
        assert bytes.length > 0;

        ByteBuffer buffer = ByteBuffer.allocate(4 + 4 + 4 + bytes.length);
        buffer.putInt(PROTOCOL_MAGIC);
        buffer.putInt(header);
        buffer.putInt(bytes.length);
        buffer.put(bytes);
        buffer.flip();
        return buffer;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\security\SSLFactory;getServerSocket(EncryptionOptions,InetAddress,int);;;public static SSLServerSocket getServerSocket(EncryptionOptions options, InetAddress address, int port) throws IOException
    {
        SSLContext ctx = createSSLContext(options);
        SSLServerSocket serverSocket = (SSLServerSocket)ctx.getServerSocketFactory().createServerSocket();
        serverSocket.setReuseAddress(true);
        serverSocket.setEnabledCipherSuites(options.cipherSuites);
        serverSocket.bind(new InetSocketAddress(address, port), 100);
        return serverSocket;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\security\SSLFactory;getSocket(EncryptionOptions,InetAddress,int,InetAddress,int);;;public static SSLSocket getSocket(EncryptionOptions options, InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException
    {
        SSLContext ctx = createSSLContext(options);
        SSLSocket socket = (SSLSocket) ctx.getSocketFactory().createSocket(address, port, localAddress, localPort);
        socket.setEnabledCipherSuites(options.cipherSuites);
        return socket;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\security\SSLFactory;getSocket(EncryptionOptions);;;public static SSLSocket getSocket(EncryptionOptions options) throws IOException
    {
        SSLContext ctx = createSSLContext(options);
        SSLSocket socket = (SSLSocket) ctx.getSocketFactory().createSocket();
        socket.setEnabledCipherSuites(options.cipherSuites);
        return socket;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\security\SSLFactory;createSSLContext(EncryptionOptions);;;private static SSLContext createSSLContext(EncryptionOptions options) throws IOException {
        SSLContext ctx;
        try {
            ctx = SSLContext.getInstance(PROTOCOL);
            TrustManagerFactory tmf = null;
            KeyManagerFactory kmf = null;

            tmf = TrustManagerFactory.getInstance(ALGORITHM);
            KeyStore ts = KeyStore.getInstance(STORE_TYPE);
            ts.load(new FileInputStream(options.truststore), options.truststore_password.toCharArray());
            tmf.init(ts);

            kmf = KeyManagerFactory.getInstance(ALGORITHM);
            KeyStore ks = KeyStore.getInstance(STORE_TYPE);
            ks.load(new FileInputStream(options.keystore), options.keystore_password.toCharArray());
            kmf.init(ks, options.keystore_password.toCharArray());

            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);

        } catch (Exception e) {
            throw new IOException("Error creating the initializing the SSL Context", e);
        }
        return ctx;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\security\streaming\SSLFileStreamTask;SSLFileStreamTask(StreamHeader,InetAddress);;;public SSLFileStreamTask(StreamHeader header, InetAddress to)
    {
        super(header, to);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\security\streaming\SSLFileStreamTask;write(FileChannel,Pair<Long,Long>,long,long);;;@Override
    protected long write(FileChannel fc, Pair<Long, Long> section, long length, long bytesTransferred) throws IOException
    {
        int toTransfer = (int)Math.min(CHUNK_SIZE, length - bytesTransferred);
        fc.position(section.left + bytesTransferred);
        ByteBuffer buf = ByteBuffer.allocate(toTransfer);
        fc.read(buf);
        buf.flip();
        output.write(buf.array(), 0, buf.limit());
        output.flush();
        return buf.limit();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\security\streaming\SSLFileStreamTask;writeHeader(ByteBuffer);;;@Override
    protected void writeHeader(ByteBuffer buffer) throws IOException
    {
        output.write(buffer.array(), 0, buffer.limit());
        output.flush();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\security\streaming\SSLFileStreamTask;bind();;;@Override
    protected void bind() throws IOException
    {
        socket = SSLFactory.getSocket(DatabaseDescriptor.getEncryptionOptions());
        socket.bind(new InetSocketAddress(FBUtilities.getLocalAddress(), 0));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\security\streaming\SSLFileStreamTask;connect();;;@Override
    protected void connect() throws IOException
    {
        socket.connect(new InetSocketAddress(to, DatabaseDescriptor.getStoragePort()));
        output = new DataOutputStream(socket.getOutputStream());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\security\streaming\SSLFileStreamTask;close();;;@Override
    protected void close() throws IOException
    {
        socket.close();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\security\streaming\SSLIncomingStreamReader;SSLIncomingStreamReader(StreamHeader,Socket,DataInputStream);;;public SSLIncomingStreamReader(StreamHeader header, Socket socket, DataInputStream input) throws IOException
    {
        super(header, socket);
        this.input = input;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\security\streaming\SSLIncomingStreamReader;readnwrite(long,long,long,FileChannel);;;@Override
    protected long readnwrite(long length, long bytesRead, long offset, FileChannel fc) throws IOException
    {
        int toRead = (int)Math.min(FileStreamTask.CHUNK_SIZE, length - bytesRead);
        ByteBuffer buf = ByteBuffer.allocate(toRead);
        input.readFully(buf.array());
        fc.write(buf);
        bytesRead += buf.limit();
        remoteFile.progress += buf.limit();
        return bytesRead;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\AntiEntropyService;getRepairSession(Range,String,String);;;public RepairSession getRepairSession(Range range, String tablename, String... cfnames)
    {
        return new RepairSession(range, tablename, cfnames);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\AntiEntropyService;getArtificialRepairSession(TreeRequest,String,String);;;RepairSession getArtificialRepairSession(TreeRequest req, String tablename, String... cfnames)
    {
        return new RepairSession(req, tablename, cfnames);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\AntiEntropyService;getNeighbors(String,Range);;;static Set<InetAddress> getNeighbors(String table, Range range)
    {
        StorageService ss = StorageService.instance;
        Map<Range, List<InetAddress>> replicaSets = ss.getRangeToAddressMap(table);
        if (!replicaSets.containsKey(range))
            return Collections.emptySet();
        Set<InetAddress> neighbors = new HashSet<InetAddress>(replicaSets.get(range));
        neighbors.remove(FBUtilities.getLocalAddress());
        // Excluding all node with version <= 0.7 since they don't know how to
        // create a correct merkle tree (they build it over the full range)
        for (InetAddress endpoint : neighbors)
        {
            if (Gossiper.instance.getVersion(endpoint) <= MessagingService.VERSION_07)
            {
                logger.info("Excluding " + endpoint + " from repair because it is on version 0.7 or sooner. You should consider updating this node before running repair again.");
                neighbors.remove(endpoint);
            }
        }
        return neighbors;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\AntiEntropyService;request(String,InetAddress,Range,String,String);;;TreeRequest request(String sessionid, InetAddress remote, Range range, String ksname, String cfname)
    {
        TreeRequest request = new TreeRequest(sessionid, remote, range, new CFPair(ksname, cfname));
        MessagingService.instance().sendOneWay(TreeRequestVerbHandler.makeVerb(request, Gossiper.instance.getVersion(remote)), remote);
        return request;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\AntiEntropyService;Validator(TreeRequest,MerkleTree);;;            // Reestablishing the range because we don't serialize it (for bad
            // reason - see MerkleTree for details)
            this.tree.fullRange = this.request.range;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\AntiEntropyService;prepare(ColumnFamilyStore);;;            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\AntiEntropyService;add(AbstractCompactedRow);;;            assert request.range.contains(row.key.token) : row.key.token + " is not contained in " + request.range;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\AntiEntropyService;makeVerb(TreeRequest,int);;;static Message makeVerb(TreeRequest request, int version)
        {
            try
            {
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                DataOutputStream dos = new DataOutputStream(bos);
                SERIALIZER.serialize(request, dos, version);
                return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.TREE_REQUEST, bos.toByteArray(), version);
            }
            catch(IOException e)
            {
                throw new RuntimeException(e);
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\AntiEntropyService;serialize(TreeRequest,DataOutputStream,int);;;public void serialize(TreeRequest request, DataOutputStream dos, int version) throws IOException
        {
            dos.writeUTF(request.sessionid);
            CompactEndpointSerializationHelper.serialize(request.endpoint, dos);
            dos.writeUTF(request.cf.left);
            dos.writeUTF(request.cf.right);
            if (version > MessagingService.VERSION_07)
                AbstractBounds.serializer().serialize(request.range, dos);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\AntiEntropyService;deserialize(DataInputStream,int);;;public TreeRequest deserialize(DataInputStream dis, int version) throws IOException
        {
            String sessId = dis.readUTF();
            InetAddress endpoint = CompactEndpointSerializationHelper.deserialize(dis);
            CFPair cfpair = new CFPair(dis.readUTF(), dis.readUTF());
            Range range;
            if (version > MessagingService.VERSION_07)
                range = (Range) AbstractBounds.serializer().deserialize(dis);
            else
                range = new Range(StorageService.getPartitioner().getMinimumToken(), StorageService.getPartitioner().getMinimumToken());

            return new TreeRequest(sessId, endpoint, range, cfpair);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\AntiEntropyService;serialize(Validator,DataOutputStream,int);;;public void serialize(Validator v, DataOutputStream dos, int version) throws IOException
        {
            TreeRequestVerbHandler.SERIALIZER.serialize(v.request, dos, version);
            MerkleTree.serializer.serialize(v.tree, dos, version);
            dos.flush();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\AntiEntropyService;deserialize(DataInputStream,int);;;public Validator deserialize(DataInputStream dis, int version) throws IOException
        {
            final TreeRequest request = TreeRequestVerbHandler.SERIALIZER.deserialize(dis, version);
            try
            {
                return new Validator(request, MerkleTree.serializer.deserialize(dis, version));
            }
            catch(Exception e)
            {
                throw new RuntimeException(e);
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\AntiEntropyService;TreeRequest(String,InetAddress,Range,CFPair);;;public TreeRequest(String sessionid, InetAddress endpoint, Range range, CFPair cf)
        {
            this.sessionid = sessionid;
            this.endpoint = endpoint;
            this.cf = cf;
            this.range = range;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\AntiEntropyService;RepairSession(TreeRequest,String,String);;;public RepairSession(TreeRequest req, String tablename, String... cfnames)
        {
            super(req.sessionid);
            this.range = req.range;
            this.tablename = tablename;
            this.cfnames = cfnames;
            requestsMade = new SimpleCondition();
            this.requests = new ConcurrentHashMap<TreeRequest,Object>();
            requests.put(req, this);
            Callback callback = new Callback();
            AntiEntropyService.instance.sessions.put(getName(), callback);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\AntiEntropyService;RepairSession(Range,String,String);;;public RepairSession(Range range, String tablename, String... cfnames)
        {
            super("manual-repair-" + UUID.randomUUID());
            this.tablename = tablename;
            this.cfnames = cfnames;
            this.range = range;
            this.requestsMade = new SimpleCondition();
            this.requests = new ConcurrentHashMap<TreeRequest,Object>();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\ClientState;getKeyspace();;;        if (keyspace == null)
            throw new InvalidRequestException("no keyspace has been specified");
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\ClientState;hasColumnFamilyListAccess(Permission);        ;;
        // hardcode disallowing messing with system keyspace
        if (keyspace.equalsIgnoreCase("system"))
            throw new InvalidRequestException("system keyspace is not user-modifiable");
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\MigrationManager;passiveAnnounce(UUID);;;        // this is for notifying nodes as they arrive in the cluster.
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\MigrationManager;makeVersionMessage(UUID,int);;;private static Message makeVersionMessage(UUID version, int protocolVersion)
    {
        byte[] body = version.toString().getBytes();
        return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.DEFINITIONS_ANNOUNCE, body, protocolVersion);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\MigrationManager;makeMigrationMessage(Collection<IColumn>,int);;;private static Message makeMigrationMessage(Collection<IColumn> migrations, int version) throws IOException
    {
        ByteArrayOutputStream bout = new ByteArrayOutputStream();
        DataOutputStream dout = new DataOutputStream(bout);
        dout.writeInt(migrations.size());
        // riddle me this: how do we know that these binary values (which contained serialized row mutations) are compatible
        // with the destination?  Further, since these migrations may be old, how do we know if they are compatible with
        // the current version?  The bottom line is that we don't.  For this reason, running migrations from a new node
        // to an old node will be a crap shoot.  Pushing migrations from an old node to a new node should work, so long
        // as the oldest migrations are only one version old.  We need a way of flattening schemas so that this isn't a
        // problem during upgrades.
        for (IColumn col : migrations)
        {
            assert col instanceof Column;
            ByteBufferUtil.writeWithLength(col.name(), dout);
            ByteBufferUtil.writeWithLength(col.value(), dout);
        }
        dout.close();
        byte[] body = bout.toByteArray();
        return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.DEFINITIONS_UPDATE_RESPONSE, body, version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;mutate(List<?extendsIMutation>,ConsistencyLevel);;;public static void mutate(List<? extends IMutation> mutations, ConsistencyLevel consistency_level) throws UnavailableException, TimeoutException
    {
        final String localDataCenter = DatabaseDescriptor.getEndpointSnitch().getDatacenter(FBUtilities.getLocalAddress());

        long startTime = System.nanoTime();
        List<IWriteResponseHandler> responseHandlers = new ArrayList<IWriteResponseHandler>();

        IMutation mostRecentMutation = null;
        try
        {
            for (IMutation mutation : mutations)
            {
                mostRecentMutation = mutation;
                if (mutation instanceof CounterMutation)
                {
                    responseHandlers.add(mutateCounter((CounterMutation)mutation, localDataCenter));
                }
                else
                {
                    responseHandlers.add(performWrite(mutation, consistency_level, localDataCenter, standardWritePerformer));
                }
            }
            // wait for writes.  throws timeoutexception if necessary
            for (IWriteResponseHandler responseHandler : responseHandlers)
            {
                responseHandler.get();
            }
        }
        catch (TimeoutException ex)
        {
            if (logger.isDebugEnabled())
            {
                List<String> mstrings = new ArrayList<String>();
                for (IMutation mutation : mutations)
                    mstrings.add(mutation.toString(true));
                logger.debug("Write timeout {} for one (or more) of: ", ex.toString(), mstrings);
            }
            throw ex;
        }
        catch (IOException e)
        {
            assert mostRecentMutation != null;
            throw new RuntimeException("error writing key " + ByteBufferUtil.bytesToHex(mostRecentMutation.key()), e);
        }
        finally
        {
            writeStats.addNano(System.nanoTime() - startTime);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;performWrite(IMutation,ConsistencyLevel,String,WritePerformer);;;public static IWriteResponseHandler performWrite(IMutation mutation, ConsistencyLevel consistency_level, String localDataCenter, WritePerformer performer) throws UnavailableException, TimeoutException, IOException
    {
        String table = mutation.getTable();
        AbstractReplicationStrategy rs = Table.open(table).getReplicationStrategy();

        Collection<InetAddress> writeEndpoints = getWriteEndpoints(table, mutation.key());
        Multimap<InetAddress, InetAddress> hintedEndpoints = rs.getHintedEndpoints(writeEndpoints);

        IWriteResponseHandler responseHandler = rs.getWriteResponseHandler(writeEndpoints, hintedEndpoints, consistency_level);

        // exit early if we can't fulfill the CL at this time
        responseHandler.assureSufficientLiveNodes();

        performer.apply(mutation, hintedEndpoints, responseHandler, localDataCenter, consistency_level);
        return responseHandler;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;getWriteEndpoints(String,ByteBuffer);;;private static Collection<InetAddress> getWriteEndpoints(String table, ByteBuffer key)
    {
        StorageService ss = StorageService.instance;
        List<InetAddress> naturalEndpoints = ss.getNaturalEndpoints(table, key);
        return ss.getTokenMetadata().getWriteEndpoints(StorageService.getPartitioner().getToken(key), table, naturalEndpoints);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;sendToHintedEndpoints(RowMutation,Multimap<InetAddress,InetAddress>,IWriteResponseHandler,String,boolean,ConsistencyLevel);;;private static void sendToHintedEndpoints(final RowMutation rm, Multimap<InetAddress, InetAddress> hintedEndpoints, IWriteResponseHandler responseHandler, String localDataCenter, boolean insertLocalMessages, ConsistencyLevel consistency_level)
    throws IOException
    {
        // Multimap that holds onto all the messages and addresses meant for a specific datacenter
        Map<String, Multimap<Message, InetAddress>> dcMessages = new HashMap<String, Multimap<Message, InetAddress>>(hintedEndpoints.size());
        MessageProducer producer = new CachingMessageProducer(rm);

        for (Map.Entry<InetAddress, Collection<InetAddress>> entry : hintedEndpoints.asMap().entrySet())
        {
            InetAddress destination = entry.getKey();
            Collection<InetAddress> targets = entry.getValue();

            String dc = DatabaseDescriptor.getEndpointSnitch().getDatacenter(destination);

            if (targets.size() == 1 && targets.iterator().next().equals(destination))
            {
                // unhinted writes
                if (destination.equals(FBUtilities.getLocalAddress()))
                {
                    if (insertLocalMessages)
                        insertLocal(rm, responseHandler);
                }
                else
                {
                    // belongs on a different server
                    if (logger.isDebugEnabled())
                        logger.debug("insert writing key " + ByteBufferUtil.bytesToHex(rm.key()) + " to " + destination);

                    Multimap<Message, InetAddress> messages = dcMessages.get(dc);
                    if (messages == null)
                    {
                       messages = HashMultimap.create();
                       dcMessages.put(dc, messages);
                    }

                    messages.put(producer.getMessage(Gossiper.instance.getVersion(destination)), destination);
                }
            }
            else
            {
                // hinted messages are unique, so there is no point to adding a hop by forwarding via another node.
                // thus, we use sendRR/sendOneWay directly here.
                Message hintedMessage = rm.getMessage(Gossiper.instance.getVersion(destination));
                for (InetAddress target : targets)
                {
                    if (!target.equals(destination))
                    {
                        addHintHeader(hintedMessage, target);
                        if (logger.isDebugEnabled())
                            logger.debug("insert writing key " + ByteBufferUtil.bytesToHex(rm.key()) + " to " + destination + " for " + target);
                    }
                }
                // non-destination hints are part of the callback and count towards consistency only under CL.ANY
                if (targets.contains(destination) || consistency_level == ConsistencyLevel.ANY)
                    MessagingService.instance().sendRR(hintedMessage, destination, responseHandler);
                else
                    MessagingService.instance().sendOneWay(hintedMessage, destination);
            }
        }
        sendMessages(localDataCenter, dcMessages, responseHandler);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;mutateCounter(CounterMutation,String);;;public static IWriteResponseHandler mutateCounter(CounterMutation cm, String localDataCenter) throws UnavailableException, TimeoutException, IOException
    {
        InetAddress endpoint = findSuitableEndpoint(cm.getTable(), cm.key());

        if (endpoint.equals(FBUtilities.getLocalAddress()))
        {
            return applyCounterMutationOnCoordinator(cm, localDataCenter);
        }
        else
        {
            // Exit now if we can't fulfill the CL here instead of forwarding to the leader replica
            String table = cm.getTable();
            AbstractReplicationStrategy rs = Table.open(table).getReplicationStrategy();
            Collection<InetAddress> writeEndpoints = getWriteEndpoints(table, cm.key());
            Multimap<InetAddress, InetAddress> hintedEndpoints = rs.getHintedEndpoints(writeEndpoints);
            rs.getWriteResponseHandler(writeEndpoints, hintedEndpoints, cm.consistency()).assureSufficientLiveNodes();

            // Forward the actual update to the chosen leader replica
            IWriteResponseHandler responseHandler = WriteResponseHandler.create(endpoint);

            Message message = cm.makeMutationMessage(Gossiper.instance.getVersion(endpoint));
            if (logger.isDebugEnabled())
                logger.debug("forwarding counter update of key " + ByteBufferUtil.bytesToHex(cm.key()) + " to " + endpoint);
            MessagingService.instance().sendRR(message, endpoint, responseHandler);
            return responseHandler;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;findSuitableEndpoint(String,ByteBuffer);;;private static InetAddress findSuitableEndpoint(String table, ByteBuffer key) throws UnavailableException
    {
        List<InetAddress> endpoints = StorageService.instance.getLiveNaturalEndpoints(table, key);
        DatabaseDescriptor.getEndpointSnitch().sortByProximity(FBUtilities.getLocalAddress(), endpoints);
        if (endpoints.isEmpty())
            throw new UnavailableException();
        return endpoints.get(0);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;applyCounterMutationOnLeader(CounterMutation,String);;;public static IWriteResponseHandler applyCounterMutationOnLeader(CounterMutation cm, String localDataCenter) throws UnavailableException, TimeoutException, IOException
    {
        return performWrite(cm, cm.consistency(), localDataCenter, counterWritePerformer);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;applyCounterMutationOnCoordinator(CounterMutation,String);;;public static IWriteResponseHandler applyCounterMutationOnCoordinator(CounterMutation cm, String localDataCenter) throws UnavailableException, TimeoutException, IOException
    {
        return performWrite(cm, cm.consistency(), localDataCenter, counterWriteOnCoordinatorPerformer);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;applyCounterMutation(IMutation,Multimap<InetAddress,InetAddress>,IWriteResponseHandler,String,ConsistencyLevel,boolean);;;private static void applyCounterMutation(final IMutation mutation, final Multimap<InetAddress, InetAddress> hintedEndpoints, final IWriteResponseHandler responseHandler, final String localDataCenter, final ConsistencyLevel consistency_level, boolean executeOnMutationStage)
    {
        // we apply locally first, then send it to other replica
        if (logger.isDebugEnabled())
            logger.debug("insert writing local & replicate " + mutation.toString(true));

        Runnable runnable = new WrappedRunnable()
        {
            public void runMayThrow() throws IOException
            {
                assert mutation instanceof CounterMutation;
                final CounterMutation cm = (CounterMutation) mutation;

                // apply mutation
                cm.apply();

                responseHandler.response(null);

                if (cm.shouldReplicateOnWrite())
                {
                    // We do the replication on another stage because it involves a read (see CM.makeReplicationMutation)
                    // and we want to avoid blocking too much the MUTATION stage
                    StageManager.getStage(Stage.REPLICATE_ON_WRITE).execute(new WrappedRunnable()
                    {
                        public void runMayThrow() throws IOException
                        {
                            // send mutation to other replica
                            sendToHintedEndpoints(cm.makeReplicationMutation(), hintedEndpoints, responseHandler, localDataCenter, false, consistency_level);
                        }
                    });
                }
            }
        };
        if (executeOnMutationStage)
            StageManager.getStage(Stage.MUTATION).execute(runnable);
        else
            runnable.run();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;fetchRows(List<ReadCommand>,ConsistencyLevel);;;            catch (TimeoutException ex)
            {
                if (logger.isDebugEnabled())
                    logger.debug("Read timeout: {}", ex.toString());
                throw ex;
            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;getRangeSlice(RangeSliceCommand,ConsistencyLevel);                if (consistency_level == ConsistencyLevel.ONE && !liveEndpoints.isEmpty() && liveEndpoints.get(0).equals(FBUtilities.getLocalAddress())) ;;                if (consistency_level == ConsistencyLevel.ONE && !liveEndpoints.isEmpty() && liveEndpoints.get(0).equals(FBUtilities.getLocalAddress()))
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;getRangeSlice(RangeSliceCommand,ConsistencyLevel);                    try ;;                    try
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;getRangeSlice(RangeSliceCommand,ConsistencyLevel);                    } 
                    catch (ExecutionException e) ;;                    }
                    catch (ExecutionException e)
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;getRangeSlice(RangeSliceCommand,ConsistencyLevel);                    } 
                    catch (InterruptedException e) ;;                    }
                    catch (InterruptedException e)
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;getRangeSlice(RangeSliceCommand,ConsistencyLevel);                    }           ;;                    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;getRangeSlice(RangeSliceCommand,ConsistencyLevel);                else ;;                else
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;getRangeSlice(RangeSliceCommand,ConsistencyLevel);            ;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;describeSchemaVersions();        } 
        catch (InterruptedException ex) ;;        }
        catch (InterruptedException ex)
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;describeSchemaVersions();        ;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;describeSchemaVersions();        ;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;describeSchemaVersions();        ;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;scan(String,String,IndexClause,SlicePredicate,ConsistencyLevel);;;            catch (TimeoutException ex)
            {
                if (logger.isDebugEnabled())
                    logger.debug("Index scan timeout: {}", ex.toString());
                throw ex;
            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageProxy;apply(IMutation,Multimap<InetAddress,InetAddress>,IWriteResponseHandler,String,ConsistencyLevel);;;public void apply(IMutation mutation, Multimap<InetAddress, InetAddress> hintedEndpoints, IWriteResponseHandler responseHandler, String localDataCenter, ConsistencyLevel consistency_level) throws IOException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;StorageService();;;        MessagingService.instance().registerVerbHandlers(Verb.COUNTER_MUTATION, new CounterMutationVerbHandler());
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;joinTokenRing();;;        SystemTable.setBootstrapped(true); // first startup is only chance to bootstrap
        setToken(token);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;setCompactionThroughputMbPerSec(int);;;public void setCompactionThroughputMbPerSec(int value) {
        DatabaseDescriptor.setCompactionThroughputMbPerSec(value);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;onChange(InetAddress,ApplicationState,VersionedValue);;;                else if (moveName.equals(VersionedValue.STATUS_MOVING))
                    handleStateMoving(endpoint, pieces);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;handleStateNormal(InetAddress,String[]);;;        if (tokenMetadata_.isMoving(endpoint)) // if endpoint was moving to a new token
            tokenMetadata_.removeFromMoving(endpoint);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;handleStateMoving(InetAddress,String[]);;;private void handleStateMoving(InetAddress endpoint, String[] pieces)
    {
        assert pieces.length == 2;
        Token token = getPartitioner().getTokenFactory().fromString(pieces[1]);

        if (logger_.isDebugEnabled())
            logger_.debug("Node " + endpoint + " state moving, new token " + token);

        tokenMetadata_.addMovingEndpoint(token, endpoint);

        calculatePendingRanges();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;calculatePendingRanges(AbstractReplicationStrategy,String);;;        // At this stage pendingRanges has been updated according to leaving and bootstrapping nodes.
        // We can now finish the calculation by checking moving nodes.

        // For each of the moving nodes, we do the same thing we did for bootstrapping:
        // simply add and remove them one by one to allLeftMetadata and check in between what their ranges would be.
        for (Pair<Token, InetAddress> moving : tm.getMovingEndpoints())
        {
            InetAddress endpoint = moving.right; // address of the moving node

            //  moving.left is a new token of the endpoint
            allLeftMetadata.updateNormalToken(moving.left, endpoint);

            for (Range range : strategy.getAddressRanges(allLeftMetadata).get(endpoint))
            {
                pendingRanges.put(range, endpoint);
            }

            allLeftMetadata.removeEndpoint(endpoint);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;getMovingNodes();;;public List<String> getMovingNodes()
    {
        List<String> endpoints = new ArrayList<String>();

        for (Pair<Token, InetAddress> node : tokenMetadata_.getMovingEndpoints())
        {
            endpoints.add(node.right.getHostAddress());
        }

        return endpoints;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;forceTableCleanup(String,String);;;        NodeId.OneShotRenewer nodeIdRenewer = new NodeId.OneShotRenewer();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;clearSnapshot(String,String);;;public void clearSnapshot(String tag, String... tableNames) throws IOException
    {
        if(tag == null)
            tag = "";

        Iterable<Table> tables;
        if (tableNames.length == 0)
        {
            tables = Table.all();
        }
        else
        {
            ArrayList<Table> tempTables = new ArrayList<Table>();
            for(String table : tableNames)
                tempTables.add(getValidTable(table));
            tables = tempTables;
        }

        for (Table table : tables)
            table.clearSnapshot(tag);

        if (logger_.isDebugEnabled())
            logger_.debug("Cleared out snapshot directories");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;forceTableRepair(String,String);;;
        if (failedSession)
            throw new IOException("Some Repair session(s) failed.");
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;forceTableRepair(Range,String,String);;;public AntiEntropyService.RepairSession forceTableRepair(final Range range, final String tableName, final String... columnFamilies) throws IOException
    {
        String[] families;
        if (columnFamilies.length == 0)
        {
            ArrayList<String> names = new ArrayList<String>();
            for (ColumnFamilyStore cfStore : getValidColumnFamilies(tableName)) {
                names.add(cfStore.getColumnFamilyName());
            }
            families = names.toArray(new String[] {});
        }
        else
        {
            families = columnFamilies;
        }
        AntiEntropyService.RepairSession sess = AntiEntropyService.instance.getRepairSession(range, tableName, families);
        sess.start();
        return sess;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;unbootstrap(Runnable);;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;unbootstrap(Runnable);;;        setMode("Leaving: streaming data to other nodes", true);

        CountDownLatch latch = streamRanges(rangesToStream);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;streamRanges(Map<String,Multimap<Range,InetAddress>>);;;private CountDownLatch streamRanges(final Map<String, Multimap<Range, InetAddress>> rangesToStreamByTable)
    {
        final CountDownLatch latch = new CountDownLatch(rangesToStreamByTable.keySet().size());
        for (final String table : rangesToStreamByTable.keySet())
        {
            Multimap<Range, InetAddress> rangesWithEndpoints = rangesToStreamByTable.get(table);

            if (rangesWithEndpoints.isEmpty())
            {
                latch.countDown();
                continue;
            }

            final Set<Map.Entry<Range, InetAddress>> pending = new HashSet<Map.Entry<Range, InetAddress>>(rangesWithEndpoints.entries());

            for (final Map.Entry<Range, InetAddress> entry : rangesWithEndpoints.entries())
            {
                final Range range = entry.getKey();
                final InetAddress newEndpoint = entry.getValue();

                final Runnable callback = new Runnable()
                {
                    public void run()
                    {
                        synchronized (pending)
                        {
                            pending.remove(entry);

                            if (pending.isEmpty())
                                latch.countDown();
                        }
                    }
                };

                StageManager.getStage(Stage.STREAM).execute(new Runnable()
                {
                    public void run()
                    {
                        // TODO each call to transferRanges re-flushes, this is potentially a lot of waste
                        StreamOut.transferRanges(newEndpoint, table, Arrays.asList(range), callback, OperationType.UNBOOTSTRAP);
                    }
                });
            }
        }
        return latch;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;requestRanges(Map<String,Multimap<InetAddress,Range>>);;;private CountDownLatch requestRanges(final Map<String, Multimap<InetAddress, Range>> ranges)
    {
        final CountDownLatch latch = new CountDownLatch(ranges.keySet().size());
        for (final String table : ranges.keySet())
        {
            Multimap<InetAddress, Range> endpointWithRanges = ranges.get(table);

            if (endpointWithRanges.isEmpty())
            {
                latch.countDown();
                continue;
            }

            final Set<InetAddress> pending = new HashSet<InetAddress>(endpointWithRanges.keySet());

            // Send messages to respective folks to stream data over to me
            for (final InetAddress source: endpointWithRanges.keySet())
            {
                Collection<Range> toFetch = endpointWithRanges.get(source);

                final Runnable callback = new Runnable()
                {
                    public void run()
                    {
                        pending.remove(source);

                        if (pending.isEmpty())
                            latch.countDown();
                    }
                };

                if (logger_.isDebugEnabled())
                    logger_.debug("Requesting from " + source + " ranges " + StringUtils.join(toFetch, ", "));

                // sending actual request
                StreamIn.requestRanges(source, table, toFetch, callback, OperationType.BOOTSTRAP);
            }
        }
        return latch;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;calculateStreamAndFetchRanges(Collection<Range>,Collection<Range>);;;private Pair<Set<Range>, Set<Range>> calculateStreamAndFetchRanges(Collection<Range> current, Collection<Range> updated)
    {
        return calculateStreamAndFetchRanges(current.iterator(), updated.iterator());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageService;calculateStreamAndFetchRanges(Iterator<Range>,Iterator<Range>);;;private Pair<Set<Range>, Set<Range>> calculateStreamAndFetchRanges(Iterator<Range> current, Iterator<Range> updated)
    {
        Set<Range> toStream = new HashSet<Range>();
        Set<Range> toFetch  = new HashSet<Range>();

        while (current.hasNext() && updated.hasNext())
        {
            Range r1 = current.next();
            Range r2 = updated.next();

            // if ranges intersect we need to fetch only missing part
            if (r1.intersects(r2))
            {
                // adding difference ranges to fetch from a ring
                toFetch.addAll(r1.differenceToFetch(r2));

                // if current range is a sub-range of a new range we don't need to seed
                // otherwise we need to seed parts of the current range
                if (!r2.contains(r1))
                {
                    // (A, B] & (C, D]
                    if (Range.compare(r1.left, r2.left) < 0) // if A < C
                    {
                        toStream.add(new Range(r1.left, r2.left)); // seed (A, C]
                    }

                    if (Range.compare(r1.right, r2.right) > 0) // if B > D
                    {
                        toStream.add(new Range(r2.right, r1.right)); // seed (D, B]
                    }
                }
            }
            else // otherwise we need to fetch whole new range
            {
                toStream.add(r1); // should seed whole old range
                toFetch.add(r2);
            }
        }

        return new Pair<Set<Range>, Set<Range>>(toStream, toFetch);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageServiceMBean;getMovingNodes();;;public List<String> getMovingNodes();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageServiceMBean;getNaturalEndpoints(String,ByteBuffer);;;public List<InetAddress> getNaturalEndpoints(String table, ByteBuffer key);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageServiceMBean;clearSnapshot(String,String);;;public void clearSnapshot(String tag, String... tableNames) throws IOException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\service\StorageServiceMBean;setCompactionThroughputMbPerSec(int);;;public void setCompactionThroughputMbPerSec(int value);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\FileStreamTask;stream();;;private void stream() throws IOException
    {
        ByteBuffer buffer = MessagingService.instance().constructStreamHeader(header, false, Gossiper.instance.getVersion(to));
        writeHeader(buffer);

        if (header.file == null)
            return;

        RandomAccessFile raf = new RandomAccessFile(new File(header.file.getFilename()), "r");
        try
        {
            FileChannel fc = raf.getChannel();
            // stream sections of the file as returned by PendingFile.currentSection
            for (Pair<Long, Long> section : header.file.sections)
            {
                long length = section.right - section.left;
                long bytesTransferred = 0;
                while (bytesTransferred < length)
                {
                    long lastWrite = write(fc, section, length, bytesTransferred);
                    bytesTransferred += lastWrite;
                    header.file.progress += lastWrite;
                }
                if (logger.isDebugEnabled())
                    logger.debug("Bytes transferred " + bytesTransferred + "/" + header.file.size);
            }
        }
        finally
        {
            FileUtils.closeQuietly(raf);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\FileStreamTask;write(FileChannel,Pair<Long,Long>,long,long);;;protected long write(FileChannel fc, Pair<Long, Long> section, long length, long bytesTransferred) throws IOException
    {
        long toTransfer = Math.min(CHUNK_SIZE, length - bytesTransferred);
        return fc.transferTo(section.left + bytesTransferred, toTransfer, channel);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\FileStreamTask;writeHeader(ByteBuffer);;;protected void writeHeader(ByteBuffer buffer) throws IOException
    {
        channel.write(buffer);
        assert buffer.remaining() == 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\FileStreamTask;connectAttempt();;;private void connectAttempt() throws IOException
    {
        bind();
        int attempts = 0;
        while (true)
        {
            try
            {
                connect();
                break;
            }
            catch (IOException e)
            {
                if (++attempts >= MAX_CONNECT_ATTEMPTS)
                    throw e;

                long waitms = DatabaseDescriptor.getRpcTimeout() * (long)Math.pow(2, attempts);
                logger.warn("Failed attempt " + attempts + " to connect to " + to + " to stream " + header.file + ". Retrying in " + waitms + " ms. (" + e + ")");
                try
                {
                    Thread.sleep(waitms);
                }
                catch (InterruptedException wtf)
                {
                    throw new RuntimeException(wtf);
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\FileStreamTask;bind();;;protected void bind() throws IOException
    {
        channel = SocketChannel.open();
        // force local binding on correctly specified interface.
        channel.socket().bind(new InetSocketAddress(FBUtilities.getLocalAddress(), 0));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\FileStreamTask;close();;;protected void close() throws IOException
    {
        channel.close();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\IncomingStreamReader;IncomingStreamReader(StreamHeader,Socket);;;public IncomingStreamReader(StreamHeader header, Socket socket) throws IOException
    {
        this.socketChannel = socket.getChannel();
        InetSocketAddress remoteAddress = (InetSocketAddress)socket.getRemoteSocketAddress();
        session = StreamInSession.get(remoteAddress.getAddress(), header.sessionId);
        session.addFiles(header.pendingFiles);
        // set the current file we are streaming so progress shows up in jmx
        session.setCurrentFile(header.file);
        session.setTable(header.table);
        // pendingFile gets the new context for the local node.
        remoteFile = header.file;
        localFile = remoteFile != null ? StreamIn.getContextMapping(remoteFile) : null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\IncomingStreamReader;readnwrite(long,long,long,FileChannel);;;protected long readnwrite(long length, long bytesRead, long offset, FileChannel fc) throws IOException
    {
        long toRead = Math.min(FileStreamTask.CHUNK_SIZE, length - bytesRead);
        long lastRead = fc.transferFrom(socketChannel, offset + bytesRead, toRead);
	// if the other side fails, we will not get an exception, but instead transferFrom will constantly return 0 byte read
	// and we would thus enter an infinite loop. So intead, if no bytes are tranferred we assume the other side is dead and 
	// raise an exception (that will be catch belove and 'the right thing' will be done).
	if (lastRead == 0)
		throw new IOException("Transfer failed for remote file " + remoteFile);
        bytesRead += lastRead;
        remoteFile.progress += lastRead;
        return bytesRead;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\PendingFile;PendingFile(SSTable,Descriptor,String,List<Pair<Long,Long>>,OperationType);;;public PendingFile(SSTable sstable, Descriptor desc, String component, List<Pair<Long,Long>> sections, OperationType type)
    {
        this.sstable = sstable;
        this.desc = desc;
        this.component = component;
        this.sections = sections;
        this.type = type;

        long tempSize = 0;
        for(Pair<Long,Long> section : sections)
        {
            tempSize += section.right - section.left;
        }
        size = tempSize;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\PendingFile;serialize(PendingFile,DataOutputStream,int);;;public void serialize(PendingFile sc, DataOutputStream dos, int version) throws IOException
        {
            if (sc == null)
            {
                dos.writeUTF("");
                return;
            }

            dos.writeUTF(sc.desc.filenameFor(sc.component));
            dos.writeUTF(sc.component);
            dos.writeInt(sc.sections.size());
            for (Pair<Long,Long> section : sc.sections)
            {
                dos.writeLong(section.left); dos.writeLong(section.right);
            }
            if (version > MessagingService.VERSION_07)
                dos.writeUTF(sc.type.name());
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\PendingFile;deserialize(DataInputStream,int);;;public PendingFile deserialize(DataInputStream dis, int version) throws IOException
        {
            String filename = dis.readUTF();
            if (filename.isEmpty())
                return null;
            
            Descriptor desc = Descriptor.fromFilename(filename);
            String component = dis.readUTF();
            int count = dis.readInt();
            List<Pair<Long,Long>> sections = new ArrayList<Pair<Long,Long>>(count);
            for (int i = 0; i < count; i++)
                sections.add(new Pair<Long,Long>(Long.valueOf(dis.readLong()), Long.valueOf(dis.readLong())));
            // this controls the way indexes are rebuilt when streaming in.  
            OperationType type = OperationType.RESTORE_REPLICA_COUNT;
            if (version > MessagingService.VERSION_07)
                type = OperationType.valueOf(dis.readUTF());
            return new PendingFile(null, desc, component, sections, type);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\StreamHeader;serialize(StreamHeader,DataOutputStream,int);;;public void serialize(StreamHeader sh, DataOutputStream dos, int version) throws IOException
        {
            dos.writeUTF(sh.table);
            dos.writeLong(sh.sessionId);
            PendingFile.serializer().serialize(sh.file, dos, version);
            dos.writeInt(sh.pendingFiles.size());
            for(PendingFile file : sh.pendingFiles)
            {
                PendingFile.serializer().serialize(file, dos, version);
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\StreamHeader;deserialize(DataInputStream,int);;;public StreamHeader deserialize(DataInputStream dis, int version) throws IOException
        {
            String table = dis.readUTF();
            long sessionId = dis.readLong();
            PendingFile file = PendingFile.serializer().deserialize(dis, version);
            int size = dis.readInt();

            List<PendingFile> pendingFiles = new ArrayList<PendingFile>(size);
            for (int i = 0; i < size; i++)
            {
                pendingFiles.add(PendingFile.serializer().deserialize(dis, version));
            }

            return new StreamHeader(table, sessionId, file, pendingFiles);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\StreamIn;requestRanges(InetAddress,String,Collection<Range>,Runnable,OperationType);;;public static void requestRanges(InetAddress source, String tableName, Collection<Range> ranges, Runnable callback, OperationType type)
    {
        assert ranges.size() > 0;

        if (logger.isDebugEnabled())
            logger.debug("Requesting from {} ranges {}", source, StringUtils.join(ranges, ", "));
        StreamInSession session = StreamInSession.create(source, callback);
        Message message = new StreamRequestMessage(FBUtilities.getLocalAddress(), 
                                                   ranges, 
                                                   tableName, 
                                                   session.getSessionId(), 
                                                   type)
                .getMessage(Gossiper.instance.getVersion(source));
        MessagingService.instance().sendOneWay(message, source);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\StreamOut;transferRanges(InetAddress,String,Collection<Range>,Runnable,OperationType);;;public static void transferRanges(InetAddress target, String tableName, Collection<Range> ranges, Runnable callback, OperationType type)
    {
        assert ranges.size() > 0;
        
        // this is so that this target shows up as a destination while anticompaction is happening.
        StreamOutSession session = StreamOutSession.create(tableName, target, callback);

        logger.info("Beginning transfer to {}", target);
        logger.debug("Ranges are {}", StringUtils.join(ranges, ","));

        try
        {
            Table table = flushSSTable(tableName);
            // send the matching portion of every sstable in the keyspace
            transferSSTables(session, table.getAllSSTables(), ranges, type);
        }
        catch (IOException e)
        {
            throw new IOError(e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\StreamOut;transferRangesForRequest(StreamOutSession,Collection<Range>,OperationType);;;public static void transferRangesForRequest(StreamOutSession session, Collection<Range> ranges, OperationType type)
    {
        assert ranges.size() > 0;

        logger.info("Beginning transfer to {}", session.getHost());
        logger.debug("Ranges are {}", StringUtils.join(ranges, ","));

        try
        {
            Table table = flushSSTable(session.table);
            // send the matching portion of every sstable in the keyspace
            List<PendingFile> pending = createPendingFiles(table.getAllSSTables(), ranges, type);
            session.addFilesToStream(pending);
            session.begin();
        }
        catch (IOException e)
        {
            throw new IOError(e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\StreamOut;transferSSTables(StreamOutSession,Collection<SSTableReader>,Collection<Range>,OperationType);;;public static void transferSSTables(StreamOutSession session, Collection<SSTableReader> sstables, Collection<Range> ranges, OperationType type) throws IOException
    {
        List<PendingFile> pending = createPendingFiles(sstables, ranges, type);

        if (pending.size() > 0)
        {
            session.addFilesToStream(pending);
            session.begin();
        }
        else
        {
            session.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\StreamOut;createPendingFiles(Collection<SSTableReader>,Collection<Range>,OperationType);;;private static List<PendingFile> createPendingFiles(Collection<SSTableReader> sstables, Collection<Range> ranges, OperationType type)
    {
        List<PendingFile> pending = new ArrayList<PendingFile>();
        for (SSTableReader sstable : sstables)
        {
            Descriptor desc = sstable.descriptor;
            List<Pair<Long,Long>> sections = sstable.getPositionsForRanges(ranges);
            if (sections.isEmpty())
                continue;
            pending.add(new PendingFile(sstable, desc, SSTable.COMPONENT_DATA, sections, type));
        }
        logger.info("Stream context metadata {}, {} sstables.", pending, sstables.size());
        return pending;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\StreamReply;getMessage(Integer);;;public Message getMessage(Integer version) throws IOException
    {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream( bos );
        serializer.serialize(this, dos, version);
        return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.STREAM_REPLY, bos.toByteArray(), version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\StreamReply;serialize(StreamReply,DataOutputStream,int);;;public void serialize(StreamReply reply, DataOutputStream dos, int version) throws IOException
        {
            dos.writeLong(reply.sessionId);
            dos.writeUTF(reply.file);
            dos.writeInt(reply.action.ordinal());
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\StreamReply;deserialize(DataInputStream,int);;;public StreamReply deserialize(DataInputStream dis, int version) throws IOException
        {
            long sessionId = dis.readLong();
            String targetFile = dis.readUTF();
            Status action = Status.values()[dis.readInt()];
            return new StreamReply(targetFile, sessionId, action);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\StreamRequestMessage;StreamRequestMessage(InetAddress,Collection<Range>,String,long,OperationType);;;StreamRequestMessage(InetAddress target, Collection<Range> ranges, String table, long sessionId, OperationType type)
    {
        this.target = target;
        this.ranges = ranges;
        this.table = table;
        this.sessionId = sessionId;
        this.type = type;
        file = null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\StreamRequestMessage;StreamRequestMessage(InetAddress,PendingFile,long);;;        this.type = file.type;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\StreamRequestMessage;getMessage(Integer);;;public Message getMessage(Integer version)
    {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(bos);
        try
        {
            StreamRequestMessage.serializer().serialize(this, dos, version);
        }
        catch (IOException e)
        {
            throw new IOError(e);
        }
        return new Message(FBUtilities.getLocalAddress(), StorageService.Verb.STREAM_REQUEST, bos.toByteArray(), version);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\StreamRequestMessage;toString();;;            sb.append(type);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\StreamRequestMessage;serialize(StreamRequestMessage,DataOutputStream,int);;;public void serialize(StreamRequestMessage srm, DataOutputStream dos, int version) throws IOException
        {
            dos.writeLong(srm.sessionId);
            CompactEndpointSerializationHelper.serialize(srm.target, dos);
            if (srm.file != null)
            {
                dos.writeBoolean(true);
                PendingFile.serializer().serialize(srm.file, dos, version);
            }
            else
            {
                dos.writeBoolean(false);
                dos.writeUTF(srm.table);
                dos.writeInt(srm.ranges.size());
                for (Range range : srm.ranges)
                {
                    AbstractBounds.serializer().serialize(range, dos);
                }
                if (version > MessagingService.VERSION_07)
                    dos.writeUTF(srm.type.name());
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\streaming\StreamRequestMessage;deserialize(DataInputStream,int);;;public StreamRequestMessage deserialize(DataInputStream dis, int version) throws IOException
        {
            long sessionId = dis.readLong();
            InetAddress target = CompactEndpointSerializationHelper.deserialize(dis);
            boolean singleFile = dis.readBoolean();
            if (singleFile)
            {
                PendingFile file = PendingFile.serializer().deserialize(dis, version);
                return new StreamRequestMessage(target, file, sessionId);
            }
            else
            {
                String table = dis.readUTF();
                int size = dis.readInt();
                List<Range> ranges = (size == 0) ? null : new ArrayList<Range>();
                for( int i = 0; i < size; ++i )
                {
                    ranges.add((Range) AbstractBounds.serializer().deserialize(dis));
                }
                OperationType type = OperationType.RESTORE_REPLICA_COUNT;
                if (version > MessagingService.VERSION_07)
                    type = OperationType.valueOf(dis.readUTF());
                return new StreamRequestMessage(target, ranges, table, sessionId, type);
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\CassandraServer;thriftifyCounterSubColumns(Collection<IColumn>);;;public List<CounterColumn> thriftifyCounterSubColumns(Collection<IColumn> columns)
    {
        if (columns == null || columns.isEmpty())
        {
            return EMPTY_COUNTER_SUBCOLUMNS;
        }

        ArrayList<CounterColumn> thriftColumns = new ArrayList<CounterColumn>(columns.size());
        for (IColumn column : columns)
        {
            if (column.isMarkedForDelete())
            {
                continue;
            }
            assert column instanceof org.apache.cassandra.db.CounterColumn;
            CounterColumn thrift_column = new CounterColumn(column.name(), CounterContext.instance().total(column.value()));
            thriftColumns.add(thrift_column);
        }

        return thriftColumns;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\CassandraServer;thriftifySuperColumns(Collection<IColumn>,boolean,boolean);;;private List<ColumnOrSuperColumn> thriftifySuperColumns(Collection<IColumn> columns, boolean reverseOrder, boolean isCounterCF)
    {
        if (isCounterCF)
            return thriftifyCounterSuperColumns(columns, reverseOrder);
        else
            return thriftifySuperColumns(columns, reverseOrder);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\CassandraServer;thriftifyCounterSuperColumns(Collection<IColumn>,boolean);;;private List<ColumnOrSuperColumn> thriftifyCounterSuperColumns(Collection<IColumn> columns, boolean reverseOrder)
    {
        ArrayList<ColumnOrSuperColumn> thriftSuperColumns = new ArrayList<ColumnOrSuperColumn>(columns.size());
        for (IColumn column : columns)
        {
            List<CounterColumn> subcolumns = thriftifyCounterSubColumns(column.getSubColumns());
            if (subcolumns.isEmpty())
            {
                continue;
            }
            CounterSuperColumn superColumn = new CounterSuperColumn(column.name(), subcolumns);
            thriftSuperColumns.add(new ColumnOrSuperColumn().setCounter_super_column(superColumn));
        }

        if (reverseOrder)
            Collections.reverse(thriftSuperColumns);

        return thriftSuperColumns;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\CassandraServer;thriftifyColumnFamily(ColumnFamily,boolean,boolean);;;        {
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\CassandraServer;thriftifyColumnFamily(ColumnFamily,boolean,boolean);;;        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\CassandraServer;multiget_slice(List<ByteBuffer>,ColumnParent,SlicePredicate,ConsistencyLevel);;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\CassandraServer;internal_get(ByteBuffer,ColumnPath,ConsistencyLevel);;;private ColumnOrSuperColumn internal_get(ByteBuffer key, ColumnPath column_path, ConsistencyLevel consistency_level)
    throws InvalidRequestException, NotFoundException, UnavailableException, TimedOutException
    {
        state().hasColumnFamilyAccess(column_path.column_family, Permission.READ);
        String keyspace = state().getKeyspace();

        CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_path.column_family);
        ThriftValidation.validateColumnPath(metadata, column_path);
        ThriftValidation.validateConsistencyLevel(keyspace, consistency_level);

        QueryPath path = new QueryPath(column_path.column_family, column_path.column == null ? null : column_path.super_column);
        List<ByteBuffer> nameAsList = Arrays.asList(column_path.column == null ? column_path.super_column : column_path.column);
        ThriftValidation.validateKey(metadata, key);
        ReadCommand command = new SliceByNamesReadCommand(keyspace, key, path, nameAsList);

        Map<DecoratedKey, ColumnFamily> cfamilies = readColumnFamily(Arrays.asList(command), consistency_level);

        ColumnFamily cf = cfamilies.get(StorageService.getPartitioner().decorateKey(command.key));

        if (cf == null)
            throw new NotFoundException();
        List<ColumnOrSuperColumn> tcolumns = thriftifyColumnFamily(cf, command.queryPath.superColumnName != null, false);
        if (tcolumns.isEmpty())
            throw new NotFoundException();
        assert tcolumns.size() == 1;
        return tcolumns.get(0);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\CassandraServer;internal_insert(ByteBuffer,ColumnParent,Column,ConsistencyLevel);;;private void internal_insert(ByteBuffer key, ColumnParent column_parent, Column column, ConsistencyLevel consistency_level)
    throws InvalidRequestException, UnavailableException, TimedOutException
    {
        state().hasColumnFamilyAccess(column_parent.column_family, Permission.WRITE);

        CFMetaData metadata = ThriftValidation.validateColumnFamily(state().getKeyspace(), column_parent.column_family, false);
        ThriftValidation.validateKey(metadata, key);
        ThriftValidation.validateColumnParent(metadata, column_parent);
        // SuperColumn field is usually optional, but not when we're inserting
        if (metadata.cfType == ColumnFamilyType.Super && column_parent.super_column == null)
        {
            throw new InvalidRequestException("missing mandatory super column name for super CF " + column_parent.column_family);
        }
        ThriftValidation.validateColumnNames(metadata, column_parent, Arrays.asList(column.name));
        ThriftValidation.validateColumnData(metadata, column);

        RowMutation rm = new RowMutation(state().getKeyspace(), key);
        try
        {
            rm.add(new QueryPath(column_parent.column_family, column_parent.super_column, column.name), column.value, column.timestamp, column.ttl);
        }
        catch (MarshalException e)
        {
            throw new InvalidRequestException(e.getMessage());
        }
        doInsert(consistency_level, Arrays.asList(rm));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\CassandraServer;internal_batch_mutate(Map<ByteBuffer,Map<String,List<Mutation>>>,ConsistencyLevel);;;private void internal_batch_mutate(Map<ByteBuffer,Map<String,List<Mutation>>> mutation_map, ConsistencyLevel consistency_level)
    throws InvalidRequestException, UnavailableException, TimedOutException
    {
        List<String> cfamsSeen = new ArrayList<String>();
        List<IMutation> rowMutations = new ArrayList<IMutation>();
        String keyspace = state().getKeyspace();

        for (Map.Entry<ByteBuffer, Map<String, List<Mutation>>> mutationEntry: mutation_map.entrySet())
        {
            ByteBuffer key = mutationEntry.getKey();

            // We need to separate row mutation for standard cf and counter cf (that will be encapsulated in a
            // CounterMutation) because it doesn't follow the same code path
            RowMutation rmStandard = null;
            RowMutation rmCounter = null;

            Map<String, List<Mutation>> columnFamilyToMutations = mutationEntry.getValue();
            for (Map.Entry<String, List<Mutation>> columnFamilyMutations : columnFamilyToMutations.entrySet())
            {
                String cfName = columnFamilyMutations.getKey();

                // Avoid unneeded authorizations
                if (!(cfamsSeen.contains(cfName)))
                {
                    state().hasColumnFamilyAccess(cfName, Permission.WRITE);
                    cfamsSeen.add(cfName);
                }

                CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, cfName);
                ThriftValidation.validateKey(metadata, key);

                RowMutation rm;
                if (metadata.getDefaultValidator().isCommutative())
                {
                    ThriftValidation.validateCommutativeForWrite(metadata, consistency_level);
                    rmCounter = rmCounter == null ? new RowMutation(keyspace, key) : rmCounter;
                    rm = rmCounter;
                }
                else
                {
                    rmStandard = rmStandard == null ? new RowMutation(keyspace, key) : rmStandard;
                    rm = rmStandard;
                }

                for (Mutation mutation : columnFamilyMutations.getValue())
                {
                    ThriftValidation.validateMutation(metadata, mutation);

                    if (mutation.deletion != null)
                    {
                        rm.deleteColumnOrSuperColumn(cfName, mutation.deletion);
                    }
                    if (mutation.column_or_supercolumn != null)
                    {
                        rm.addColumnOrSuperColumn(cfName, mutation.column_or_supercolumn);
                    }
                }
            }
            if (rmStandard != null && !rmStandard.isEmpty())
                rowMutations.add(rmStandard);
            if (rmCounter != null && !rmCounter.isEmpty())
                rowMutations.add(new org.apache.cassandra.db.CounterMutation(rmCounter, consistency_level));
        }

        doInsert(consistency_level, rowMutations);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\CassandraServer;internal_remove(ByteBuffer,ColumnPath,long,ConsistencyLevel,boolean);;;private void internal_remove(ByteBuffer key, ColumnPath column_path, long timestamp, ConsistencyLevel consistency_level, boolean isCommutativeOp)
    throws InvalidRequestException, UnavailableException, TimedOutException
    {
        state().hasColumnFamilyAccess(column_path.column_family, Permission.WRITE);

        CFMetaData metadata = ThriftValidation.validateColumnFamily(state().getKeyspace(), column_path.column_family, isCommutativeOp);
        ThriftValidation.validateKey(metadata, key);
        ThriftValidation.validateColumnPathOrParent(metadata, column_path);
        if (isCommutativeOp)
            ThriftValidation.validateCommutativeForWrite(metadata, consistency_level);

        RowMutation rm = new RowMutation(state().getKeyspace(), key);
        rm.delete(new QueryPath(column_path), timestamp); 

        if (isCommutativeOp)
            doInsert(consistency_level, Arrays.asList(new CounterMutation(rm, consistency_level)));
        else
            doInsert(consistency_level, Arrays.asList(rm));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\CassandraServer;doInsert(ConsistencyLevel,List<?extendsIMutation>);;;private void doInsert(ConsistencyLevel consistency_level, List<? extends IMutation> mutations) throws UnavailableException, TimedOutException, InvalidRequestException
    {
        ThriftValidation.validateConsistencyLevel(state().getKeyspace(), consistency_level);
        try
        {
            schedule();

            try
            {
                if (!mutations.isEmpty())
                    StorageProxy.mutate(mutations, consistency_level);
            }
            catch (TimeoutException e)
            {
                throw new TimedOutException();
            }
        }
        finally
        {
            release();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\CassandraServer;add(ByteBuffer,ColumnParent,CounterColumn,ConsistencyLevel);;;public void add(ByteBuffer key, ColumnParent column_parent, CounterColumn column, ConsistencyLevel consistency_level)
            throws InvalidRequestException, UnavailableException, TimedOutException, TException
    {
        logger.debug("add");

        state().hasColumnFamilyAccess(column_parent.column_family, Permission.WRITE);
        String keyspace = state().getKeyspace();

        CFMetaData metadata = ThriftValidation.validateColumnFamily(keyspace, column_parent.column_family, true);
        ThriftValidation.validateKey(metadata, key);
        ThriftValidation.validateCommutativeForWrite(metadata, consistency_level);
        ThriftValidation.validateColumnParent(metadata, column_parent);
        // SuperColumn field is usually optional, but not when we're adding
        if (metadata.cfType == ColumnFamilyType.Super && column_parent.super_column == null)
        {
            throw new InvalidRequestException("missing mandatory super column name for super CF " + column_parent.column_family);
        }
        ThriftValidation.validateColumnNames(metadata, column_parent, Arrays.asList(column.name));

        RowMutation rm = new RowMutation(keyspace, key);
        try
        {
            rm.addCounter(new QueryPath(column_parent.column_family, column_parent.super_column, column.name), column.value);
        }
        catch (MarshalException e)
        {
            throw new InvalidRequestException(e.getMessage());
        }
        doInsert(consistency_level, Arrays.asList(new CounterMutation(rm, consistency_level)));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\CassandraServer;remove_counter(ByteBuffer,ColumnPath,ConsistencyLevel);;;public void remove_counter(ByteBuffer key, ColumnPath path, ConsistencyLevel consistency_level)
            throws InvalidRequestException, UnavailableException, TimedOutException, TException
    {
        logger.debug("remove_counter");

        internal_remove(key, path, System.currentTimeMillis(), consistency_level, true);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\CassandraServer;execute_cql_query(ByteBuffer,Compression);;;public CqlResult execute_cql_query(ByteBuffer query, Compression compression)
    throws InvalidRequestException, UnavailableException, TimedOutException, SchemaDisagreementException, TException
    {
        String queryString = null;
        
        // Decompress the query string.
        try
        {
            switch (compression)
            {
                case GZIP:
                    ByteArrayOutputStream byteArray = new ByteArrayOutputStream();
                    byte[] outBuffer = new byte[1024], inBuffer = new byte[1024];
                    
                    Inflater decompressor = new Inflater();
                    
                    int lenRead = 0;
                    while (true)
                    {
                        if (decompressor.needsInput())
                            lenRead = query.remaining() < 1024 ? query.remaining() : 1024;
                            query.get(inBuffer, 0, lenRead);
                            decompressor.setInput(inBuffer, 0, lenRead);
                        
                        int lenWrite = 0;
                        while ((lenWrite = decompressor.inflate(outBuffer)) !=0)
                            byteArray.write(outBuffer, 0, lenWrite);
                        
                        if (decompressor.finished())
                            break;
                    }
                    
                    decompressor.end();
                    
                    queryString = new String(byteArray.toByteArray(), 0, byteArray.size(), "UTF-8");
                    break;
                case NONE:
                    try 
                    {
                        queryString = ByteBufferUtil.string(query);
                    }
                    catch (CharacterCodingException ex) 
                    {
                        throw new InvalidRequestException(ex.getMessage());
                    }
                    break;
            }
        }
        catch (DataFormatException e)
        {
            throw new InvalidRequestException("Error deflating query string.");
        }
        catch (UnsupportedEncodingException e)
        {
            throw new InvalidRequestException("Unknown query string encoding.");
        }
        
        try
        {
            return QueryProcessor.process(queryString, state());
        }
        catch (RecognitionException e)
        {
            InvalidRequestException ire = new InvalidRequestException("Invalid or malformed CQL query string");
            ire.initCause(e);
            throw ire;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\CustomTThreadPoolServer;CustomTThreadPoolServer(TThreadPoolServer.Args,ExecutorService);;;public CustomTThreadPoolServer(TThreadPoolServer.Args args, ExecutorService executorService) {
        super(args);
        executorService_ = executorService;
        this.args = args;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateKey(CFMetaData,ByteBuffer);;;public static void validateKey(CFMetaData metadata, ByteBuffer key) throws InvalidRequestException
    {
        if (key == null || key.remaining() == 0)
        {
            throw new InvalidRequestException("Key may not be empty");
        }

        // check that key can be handled by FBUtilities.writeShortByteArray
        if (key.remaining() > FBUtilities.MAX_UNSIGNED_SHORT)
        {
            throw new InvalidRequestException("Key length of " + key.remaining() +
                                              " is longer than maximum of " + FBUtilities.MAX_UNSIGNED_SHORT);
        }

        try
        {
            metadata.getKeyValidator().validate(key);
        }
        catch (MarshalException e)
        {
            throw new InvalidRequestException(e.getMessage());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateColumnFamily(String,String,boolean);;;public static CFMetaData validateColumnFamily(String tablename, String cfName, boolean isCommutativeOp) throws InvalidRequestException
    {
        CFMetaData metadata = validateColumnFamily(tablename, cfName);

        if (isCommutativeOp)
        {
            if (!metadata.getDefaultValidator().isCommutative())
                throw new InvalidRequestException("invalid operation for non commutative columnfamily " + cfName);
        }
        else
        {
            if (metadata.getDefaultValidator().isCommutative())
                throw new InvalidRequestException("invalid operation for commutative columnfamily " + cfName);
        }
        return metadata;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateColumnFamily(String,String);;;        validateTable(tablename);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateColumnPath(CFMetaData,ColumnPath);;;public static void validateColumnPath(CFMetaData metadata, ColumnPath column_path) throws InvalidRequestException
    {
        if (metadata.cfType == ColumnFamilyType.Standard)
        {
            if (column_path.super_column != null)
            {
                throw new InvalidRequestException("supercolumn parameter is invalid for standard CF " + metadata.cfName);
            }
            if (column_path.column == null)
            {
                throw new InvalidRequestException("column parameter is not optional for standard CF " + metadata.cfName);
            }
        }
        else
        {
            if (column_path.super_column == null)
                throw new InvalidRequestException("supercolumn parameter is not optional for super CF " + metadata.cfName);
        }
        if (column_path.column != null)
        {
            validateColumnNames(metadata, column_path.super_column, Arrays.asList(column_path.column));
        }
        if (column_path.super_column != null)
        {
            validateColumnNames(metadata, (ByteBuffer)null, Arrays.asList(column_path.super_column));
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateColumnParent(CFMetaData,ColumnParent);;;public static void validateColumnParent(CFMetaData metadata, ColumnParent column_parent) throws InvalidRequestException
    {
        if (metadata.cfType == ColumnFamilyType.Standard)
        {
            if (column_parent.super_column != null)
            {
                throw new InvalidRequestException("columnfamily alone is required for standard CF " + metadata.cfName);
            }
        }

        if (column_parent.super_column != null)
        {
            validateColumnNames(metadata, (ByteBuffer)null, Arrays.asList(column_parent.super_column));
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateColumnPathOrParent(CFMetaData,ColumnPath);;;static void validateColumnPathOrParent(CFMetaData metadata, ColumnPath column_path_or_parent) throws InvalidRequestException
    {
        if (metadata.cfType == ColumnFamilyType.Standard)
        {
            if (column_path_or_parent.super_column != null)
            {
                throw new InvalidRequestException("supercolumn may not be specified for standard CF " + metadata.cfName);
            }
        }
        if (metadata.cfType == ColumnFamilyType.Super)
        {
            if (column_path_or_parent.super_column == null && column_path_or_parent.column != null)
            {
                throw new InvalidRequestException("A column cannot be specified without specifying a super column for removal on super CF " + metadata.cfName);
            }
        }
        if (column_path_or_parent.column != null)
        {
            validateColumnNames(metadata, column_path_or_parent.super_column, Arrays.asList(column_path_or_parent.column));
        }
        if (column_path_or_parent.super_column != null)
        {
            validateColumnNames(metadata, (ByteBuffer)null, Arrays.asList(column_path_or_parent.super_column));
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateColumnNames(CFMetaData,ByteBuffer,Iterable<ByteBuffer>);;;private static void validateColumnNames(CFMetaData metadata, ByteBuffer superColumnName, Iterable<ByteBuffer> column_names)
            throws InvalidRequestException
    {
        if (superColumnName != null)
        {
            if (superColumnName.remaining() > IColumn.MAX_NAME_LENGTH)
                throw new InvalidRequestException("supercolumn name length must not be greater than " + IColumn.MAX_NAME_LENGTH);
            if (superColumnName.remaining() == 0)
                throw new InvalidRequestException("supercolumn name must not be empty");
            if (metadata.cfType == ColumnFamilyType.Standard)
                throw new InvalidRequestException("supercolumn specified to ColumnFamily " + metadata.cfName + " containing normal columns");
        }
        AbstractType comparator = metadata.getComparatorFor(superColumnName);
        for (ByteBuffer name : column_names)
        {
            if (name.remaining() > IColumn.MAX_NAME_LENGTH)
                throw new InvalidRequestException("column name length must not be greater than " + IColumn.MAX_NAME_LENGTH);
            if (name.remaining() == 0)
                throw new InvalidRequestException("column name must not be empty");
            try
            {
                comparator.validate(name);
            }
            catch (MarshalException e)
            {
                throw new InvalidRequestException(e.getMessage());
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateColumnNames(CFMetaData,ColumnParent,Iterable<ByteBuffer>);;;public static void validateColumnNames(CFMetaData metadata, ColumnParent column_parent, Iterable<ByteBuffer> column_names) throws InvalidRequestException
    {
        validateColumnNames(metadata, column_parent.super_column, column_names);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateRange(CFMetaData,ColumnParent,SliceRange);;;public static void validateRange(CFMetaData metadata, ColumnParent column_parent, SliceRange range) throws InvalidRequestException
    {
        AbstractType comparator = metadata.getComparatorFor(column_parent.super_column);
        try
        {
            comparator.validate(range.start);
            comparator.validate(range.finish);
        }
        catch (MarshalException e)
        {
            throw new InvalidRequestException(e.getMessage());
        }

        if (range.count < 0)
            throw new InvalidRequestException("get_slice requires non-negative count");

        Comparator<ByteBuffer> orderedComparator = range.isReversed() ? comparator.reverseComparator : comparator;
        if (range.start.remaining() > 0
            && range.finish.remaining() > 0
            && orderedComparator.compare(range.start, range.finish) > 0)
        {
            throw new InvalidRequestException("range finish must come after start in the order of traversal");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateColumnOrSuperColumn(CFMetaData,ColumnOrSuperColumn);;;public static void validateColumnOrSuperColumn(CFMetaData metadata, ColumnOrSuperColumn cosc)
            throws InvalidRequestException
    {
        boolean isCommutative = metadata.getDefaultValidator().isCommutative();

        int nulls = 0;
        if (cosc.column == null) nulls++;
        if (cosc.super_column == null) nulls++;
        if (cosc.counter_column == null) nulls++;
        if (cosc.counter_super_column == null) nulls++;

        if (nulls != 3)
            throw new InvalidRequestException("ColumnOrSuperColumn must have one (and only one) of column, super_column, counter and counter_super_column");

        if (cosc.column != null)
        {
            if (isCommutative)
                throw new InvalidRequestException("invalid operation for commutative columnfamily " + metadata.cfName);

            validateTtl(cosc.column);
            validateColumnPath(metadata, new ColumnPath(metadata.cfName).setSuper_column((ByteBuffer)null).setColumn(cosc.column.name));
            validateColumnData(metadata, cosc.column);
        }

        if (cosc.super_column != null)
        {
            if (isCommutative)
                throw new InvalidRequestException("invalid operation for commutative columnfamily " + metadata.cfName);

            for (Column c : cosc.super_column.columns)
            {
                validateColumnPath(metadata, new ColumnPath(metadata.cfName).setSuper_column(cosc.super_column.name).setColumn(c.name));
                validateColumnData(metadata, c);
            }
        }

        if (cosc.counter_column != null)
        {
            if (!isCommutative)
                throw new InvalidRequestException("invalid operation for non commutative columnfamily " + metadata.cfName);

            validateColumnPath(metadata, new ColumnPath(metadata.cfName).setSuper_column((ByteBuffer)null).setColumn(cosc.counter_column.name));
        }

        if (cosc.counter_super_column != null)
        {
            if (!isCommutative)
                throw new InvalidRequestException("invalid operation for non commutative columnfamily " + metadata.cfName);

            for (CounterColumn c : cosc.counter_super_column.columns)
                validateColumnPath(metadata, new ColumnPath(metadata.cfName).setSuper_column(cosc.counter_super_column.name).setColumn(c.name));
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateMutation(CFMetaData,Mutation);;;public static void validateMutation(CFMetaData metadata, Mutation mut)
            throws InvalidRequestException
    {
        ColumnOrSuperColumn cosc = mut.column_or_supercolumn;
        Deletion del = mut.deletion;

        int nulls = 0;
        if (cosc == null) nulls++;
        if (del == null) nulls++;

        if (nulls != 1)
        {
            throw new InvalidRequestException("mutation must have one and only one of column_or_supercolumn or deletion");
        }

        if (cosc != null)
        {
            validateColumnOrSuperColumn(metadata, cosc);
        }
        else
        {
            validateDeletion(metadata, del);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateDeletion(CFMetaData,Deletion);;;public static void validateDeletion(CFMetaData metadata, Deletion del) throws InvalidRequestException
    {

        if (del.super_column != null)
            validateColumnNames(metadata, (ByteBuffer)null, Arrays.asList(del.super_column));

        if (del.predicate != null)
        {
            validateSlicePredicate(metadata, del.super_column, del.predicate);
            if (del.predicate.slice_range != null)
                throw new InvalidRequestException("Deletion does not yet support SliceRange predicates.");
        }

        if (metadata.cfType == ColumnFamilyType.Standard && del.super_column != null)
        {
            String msg = String.format("Deletion of super columns is not possible on a standard ColumnFamily (KeySpace=%s ColumnFamily=%s Deletion=%s)", metadata.ksName, metadata.cfName, del);
            throw new InvalidRequestException(msg);
        }

        if (metadata.getDefaultValidator().isCommutative())
        {
            // forcing server timestamp even if a timestamp was set for coherence with other counter operation
            del.timestamp = System.currentTimeMillis();
        }
        else if (!del.isSetTimestamp())
        {
            throw new InvalidRequestException("Deletion timestamp is not optional for non commutative column family " + metadata.cfName);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateSlicePredicate(CFMetaData,ByteBuffer,SlicePredicate);;;public static void validateSlicePredicate(CFMetaData metadata, ByteBuffer scName, SlicePredicate predicate) throws InvalidRequestException
    {
        if (predicate.column_names == null && predicate.slice_range == null)
            throw new InvalidRequestException("A SlicePredicate must be given a list of Columns, a SliceRange, or both");

        if (predicate.slice_range != null)
            validateRange(metadata, new ColumnParent(metadata.cfName).setSuper_column(scName), predicate.slice_range);

        if (predicate.column_names != null)
            validateColumnNames(metadata, scName, predicate.column_names);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateColumnData(CFMetaData,Column);;;public static void validateColumnData(CFMetaData metadata, Column column) throws InvalidRequestException
    {
        validateTtl(column);
        if (!column.isSetValue())
            throw new InvalidRequestException("Column value is required");
        if (!column.isSetTimestamp())
            throw new InvalidRequestException("Column timestamp is required");
        try
        {
            AbstractType validator = metadata.getValueValidator(column.name);
            if (validator != null)
                validator.validate(column.value);
        }
        catch (MarshalException me)
        {
            throw new InvalidRequestException(String.format("[%s][%s][%s] = [%s] failed validation (%s)",
                                                            metadata.ksName,
                                                            metadata.cfName,
                                                            ByteBufferUtil.bytesToHex(column.name),
                                                            ByteBufferUtil.bytesToHex(column.value),
                                                            me.getMessage()));
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validatePredicate(CFMetaData,ColumnParent,SlicePredicate);;;public static void validatePredicate(CFMetaData metadata, ColumnParent column_parent, SlicePredicate predicate)
            throws InvalidRequestException
    {
        if (predicate.column_names == null && predicate.slice_range == null)
            throw new InvalidRequestException("predicate column_names and slice_range may not both be null");
        if (predicate.column_names != null && predicate.slice_range != null)
            throw new InvalidRequestException("predicate column_names and slice_range may not both be present");

        if (predicate.getSlice_range() != null)
            validateRange(metadata, column_parent, predicate.slice_range);
        else
            validateColumnNames(metadata, column_parent, predicate.column_names);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateIndexClauses(CFMetaData,IndexClause);;;public static void validateIndexClauses(CFMetaData metadata, IndexClause index_clause)
    throws InvalidRequestException
    {
        if (index_clause.expressions.isEmpty())
            throw new InvalidRequestException("index clause list may not be empty");
        Set<ByteBuffer> indexedColumns = Table.open(metadata.ksName).getColumnFamilyStore(metadata.cfName).getIndexedColumns();
        AbstractType nameValidator =  ColumnFamily.getComparatorFor(metadata.ksName, metadata.cfName, null);

        boolean isIndexed = false;
        for (IndexExpression expression : index_clause.expressions)
        {
            try
            {
                nameValidator.validate(expression.column_name);
            }
            catch (MarshalException me)
            {
                throw new InvalidRequestException(String.format("[%s]=[%s] failed name validation (%s)",
                                                                ByteBufferUtil.bytesToHex(expression.column_name),
                                                                ByteBufferUtil.bytesToHex(expression.value),
                                                                me.getMessage()));
            }

            AbstractType valueValidator = DatabaseDescriptor.getValueValidator(metadata.ksName, metadata.cfName, expression.column_name);
            try
            {
                valueValidator.validate(expression.value);
            }
            catch (MarshalException me)
            {
                throw new InvalidRequestException(String.format("[%s]=[%s] failed value validation (%s)",
                                                                ByteBufferUtil.bytesToHex(expression.column_name),
                                                                ByteBufferUtil.bytesToHex(expression.value),
                                                                me.getMessage()));
            }

            isIndexed |= expression.op.equals(IndexOperator.EQ) && indexedColumns.contains(expression.column_name);
        }

        if (!isIndexed)
            throw new InvalidRequestException("No indexed columns present in index clause with operator EQ");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateCfDef(CfDef);;;            if (cf_def.key_alias != null)
            {
                if (!cf_def.key_alias.hasRemaining())
                    throw new InvalidRequestException("key_alias may not be empty");
                try
                {
                    // it's hard to use a key in a select statement if we can't type it.
                    // for now let's keep it simple and require ascii.
                    AsciiType.instance.validate(cf_def.key_alias);
                }
                catch (MarshalException e)
                {
                    throw new InvalidRequestException("Key aliases must be ascii");
                }
            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateCommutativeForWrite(CFMetaData,ConsistencyLevel);;;public static void validateCommutativeForWrite(CFMetaData metadata, ConsistencyLevel consistency) throws InvalidRequestException
    {
        if (!metadata.getReplicateOnWrite() && consistency != ConsistencyLevel.ONE)
        {
            throw new InvalidRequestException("cannot achieve CL > CL.ONE without replicate_on_write on columnfamily " + metadata.cfName);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\thrift\ThriftValidation;validateKsDef(KsDef);;;public static void validateKsDef(KsDef ks_def) throws ConfigurationException
    {
        // Attempt to instantiate the ARS, which will throw a ConfigException if
        //  the strategy_options aren't fully formed or if the ARS Classname is invalid.
        Map<String, String> options = KSMetaData.forwardsCompatibleOptions(ks_def);
        TokenMetadata tmd = StorageService.instance.getTokenMetadata();
        IEndpointSnitch eps = DatabaseDescriptor.getEndpointSnitch();
        Class<? extends AbstractReplicationStrategy> cls = AbstractReplicationStrategy.getClass(ks_def.strategy_class);
        AbstractReplicationStrategy.createReplicationStrategy(ks_def.name, cls, tmd, eps, options);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\NodeCmd;printUsage();;;        addCmdHelp(header, "setcompactionthroughput <value_in_mb>", "Set the MB/s throughput cap for compaction in the system, or 0 to disable throttling.");
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\NodeCmd;printUsage();;;        addCmdHelp(header, "snapshot [keyspaces...] -t [snapshotName]", "Take a snapshot of the specified keyspaces using optional name snapshotName");
        addCmdHelp(header, "clearsnapshot [keyspaces...] -t [snapshotName]", "Remove snapshots for the specified keyspaces. Either remove all snapshots or remove the snapshots with the given name.");
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\NodeCmd;printRing(PrintStream);;;        Collection<String> movingNodes = probe.getMovingNodes();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\NodeCmd;main(String[]);;;            case SETCOMPACTIONTHROUGHPUT :
                if (arguments.length != 1) { badUse("Missing value argument."); }
                probe.setCompactionThroughput(Integer.valueOf(arguments[0]));
                break;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\NodeCmd;handleSnapshots(NodeCommand,String,String[],NodeProbe);;;private static void handleSnapshots(NodeCommand nc, String tag, String[] cmdArgs, NodeProbe probe) throws InterruptedException, IOException
    {
        int length = cmdArgs.length > 1 ? cmdArgs.length - 1 : 0;
        String[] keyspaces = new String[length];
        for (int i = 0; i < keyspaces.length; i++)
            keyspaces[i] = cmdArgs[i + 1];

        switch (nc)
        {
            case SNAPSHOT :
                if (tag == null || tag.equals(""))
                    tag = new Long(System.currentTimeMillis()).toString();
                probe.takeSnapshot(tag, keyspaces);
                System.out.println("Snapshot directory: " + tag);
                break;
            case CLEARSNAPSHOT :
                probe.clearSnapshot(tag, keyspaces);
                break;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\NodeProbe;getMovingNodes();;;public List<String> getMovingNodes()
    {
        return ssProxy.getMovingNodes();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\NodeProbe;takeSnapshot(String,String);;;public void takeSnapshot(String snapshotName, String... keyspaces) throws IOException
    {
        ssProxy.takeSnapshot(snapshotName, keyspaces);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\NodeProbe;clearSnapshot(String,String);;;public void clearSnapshot(String tag, String... keyspaces) throws IOException
    {
        ssProxy.clearSnapshot(tag, keyspaces);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\NodeProbe;setCompactionThroughput(int);;;public void setCompactionThroughput(int value)
    {
        ssProxy.setCompactionThroughputMbPerSec(value);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\SSTableExport;serializeColumns(Iterator<IColumn>,PrintStream,AbstractType,CFMetaData);;;private static void serializeColumns(Iterator<IColumn> columns, PrintStream out, AbstractType comparator, CFMetaData cfMetaData)
    {
        while (columns.hasNext())
        {
            IColumn column = columns.next();
            serializeColumn(column, out, comparator, cfMetaData);

            if (columns.hasNext())
                out.print(", ");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\SSTableExport;serializeColumn(IColumn,PrintStream,AbstractType,CFMetaData);;;private static void serializeColumn(IColumn column, PrintStream out, AbstractType comparator, CFMetaData cfMetaData)
    {
        ByteBuffer name = ByteBufferUtil.clone(column.name());
        ByteBuffer value = ByteBufferUtil.clone(column.value());
        AbstractType validator = cfMetaData.getValueValidator(name);

        out.print("[");
        out.print(quote(comparator.getString(name)));
        out.print(", ");
        out.print(quote(validator.getString(value)));
        out.print(", ");
        out.print(column.timestamp());

        if (column instanceof DeletedColumn)
        {
            out.print(", ");
            out.print("\"d\"");
        }
        else if (column instanceof ExpiringColumn)
        {
            out.print(", ");
            out.print("\"e\"");
            out.print(", ");
            out.print(((ExpiringColumn) column).getTimeToLive());
            out.print(", ");
            out.print(column.getLocalDeletionTime());
        }
        else if (column instanceof CounterColumn)
        {
            out.print(", ");
            out.print("\"c\"");
            out.print(", ");
            out.print(((CounterColumn) column).timestampOfLastDelete());
        }

        out.print("]");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\SSTableExport;serializeRow(SSTableIdentityIterator,DecoratedKey,PrintStream);;;        CFMetaData cfMetaData = columnFamily.metadata();
        AbstractType comparator = columnFamily.getComparator();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\SSTableImport;JsonColumn(T,CFMetaData,boolean);;;public JsonColumn(T json, CFMetaData meta, boolean isSubColumn)
        {
            AbstractType comparator = (isSubColumn) ? meta.subcolumnComparator : meta.comparator;

            if (json instanceof List)
            {
                List fields = (List<?>) json;

                assert fields.size() >= 3 : "Column definition should have at least 3";

                name  = stringAsType((String) fields.get(0), comparator);
                value = stringAsType((String) fields.get(1), meta.getValueValidator(name.duplicate()));
                timestamp = (Long) fields.get(2);
                kind = "";

                if (fields.size() > 3)
                {
                    if (fields.get(3) instanceof Boolean)
                    {
                        // old format, reading this for backward compatibility sake
                        if (fields.size() == 6)
                        {
                            kind = "e";
                            ttl = (Integer) fields.get(4);
                            localExpirationTime = (int) (long) ((Long) fields.get(5));
                        }
                        else
                        {
                            kind = ((Boolean) fields.get(3)) ? "d" : "";
                        }
                    }
                    else
                    {
                        kind = (String) fields.get(3);
                        if (isExpiring())
                        {
                            ttl = (Integer) fields.get(4);
                            localExpirationTime = (int) (long) ((Long) fields.get(5));
                        }
                        else if (isCounter())
                        {
                            timestampOfLastDelete = (long) ((Integer) fields.get(4));
                        }
                    }
                }
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\SSTableImport;isDeleted();;;public boolean isDeleted()
        {
            return kind.equals("d");
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\SSTableImport;isExpiring();;;public boolean isExpiring()
        {
            return kind.equals("e");
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\SSTableImport;isCounter();;;public boolean isCounter()
        {
            return kind.equals("c");
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\SSTableImport;addToSuperCF(Map<?,?>,ColumnFamily);;;        AbstractType comparator = metaData.comparator;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\tools\SSTableImport;stringAsType(String,AbstractType);;;private static ByteBuffer stringAsType(String content, AbstractType type)
    {
        try
        {
            return (type == BytesType.instance) ? hexToBytes(content) : type.fromString(content);
        }
        catch (MarshalException e)
        {
            throw new RuntimeException(e.getMessage());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\BloomFilterSerializer;serialize(BloomFilter,DataOutput);;;public void serialize(BloomFilter bf, DataOutput dos) throws IOException
    {
        long[] bits = bf.bitset.getBits();
        int bitLength = bits.length;

        dos.writeInt(bf.getHashCount());
        dos.writeInt(bitLength);

        for (int i = 0; i < bitLength; i++)
            dos.writeLong(bits[i]);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\BloomFilterSerializer;deserialize(DataInput);;;public BloomFilter deserialize(DataInput dis) throws IOException
    {
        int hashes = dis.readInt();
        int bitLength = dis.readInt();
        long[] bits = new long[bitLength];
        for (int i = 0; i < bitLength; i++)
            bits[i] = dis.readLong();
        OpenBitSet bs = new OpenBitSet(bits, bitLength);
        return new BloomFilter(hashes, bs);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\ByteBufferUtil;arrayCopy(ByteBuffer,int,ByteBuffer,int,int);;;public static void arrayCopy(ByteBuffer src, int srcPos, ByteBuffer dst, int dstPos, int length)
    {
        if (src.hasArray() && dst.hasArray())
        {
            System.arraycopy(src.array(),
                             src.arrayOffset() + srcPos,
                             dst.array(),
                             dst.arrayOffset() + dstPos,
                             length);
        }
        else
        {
            if (src.limit() - srcPos < length || dst.limit() - dstPos < length)
                throw new IndexOutOfBoundsException();

            for (int i = 0; i < length; i++)
            {
                dst.put(dstPos++, src.get(srcPos++));
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\ByteBufferUtil;compareSubArrays(ByteBuffer,int,ByteBuffer,int,int);;;public static int compareSubArrays(ByteBuffer bytes1, int offset1, ByteBuffer bytes2, int offset2, int length)
    {
        if ( null == bytes1 )
        {
            if ( null == bytes2) return 0;
            else return -1;
        }
        if (null == bytes2 ) return 1;

        assert bytes1.limit() >= offset1 + length : "The first byte array isn't long enough for the specified offset and length.";
        assert bytes2.limit() >= offset2 + length : "The second byte array isn't long enough for the specified offset and length.";
        for ( int i = 0; i < length; i++ )
        {
            byte byte1 = bytes1.get(offset1 + i);
            byte byte2 = bytes2.get(offset2 + i);
            if ( byte1 == byte2 )
                continue;
            // compare non-equal bytes as unsigned
            return (byte1 & 0xFF) < (byte2 & 0xFF) ? -1 : 1;
        }
        return 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\FBUtilities;copyIntoBytes(byte[],int,int);;;public static void copyIntoBytes(byte[] bytes, int offset, int i)
    {
        bytes[offset]   = (byte)( ( i >>> 24 ) & 0xFF );
        bytes[offset+1] = (byte)( ( i >>> 16 ) & 0xFF );
        bytes[offset+2] = (byte)( ( i >>> 8  ) & 0xFF );
        bytes[offset+3] = (byte)(   i          & 0xFF );
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\FBUtilities;toByteArray(int);;;public static byte[] toByteArray(int i)
    {
        byte[] bytes = new byte[4];
        copyIntoBytes(bytes, 0, i);
        return bytes;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\FBUtilities;copyIntoBytes(byte[],int,long);;;public static void copyIntoBytes(byte[] bytes, int offset, long l)
    {
        bytes[offset]   = (byte)( ( l >>> 56 ) & 0xFF );
        bytes[offset+1] = (byte)( ( l >>> 48 ) & 0xFF );
        bytes[offset+2] = (byte)( ( l >>> 40 ) & 0xFF );
        bytes[offset+3] = (byte)( ( l >>> 32 ) & 0xFF );
        bytes[offset+4] = (byte)( ( l >>> 24 ) & 0xFF );
        bytes[offset+5] = (byte)( ( l >>> 16 ) & 0xFF );
        bytes[offset+6] = (byte)( ( l >>> 8  ) & 0xFF );
        bytes[offset+7] = (byte)(   l          & 0xFF );
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\FBUtilities;toByteArray(long);;;public static byte[] toByteArray(long l)
    {
        byte[] bytes = new byte[8];
        copyIntoBytes(bytes, 0, l);
        return bytes;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\FBUtilities;getReleaseVersionString();;;            if (in == null)
            {
                return "Unknown";
            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\FBUtilities;newCacheProvider(String);;;public static IRowCacheProvider newCacheProvider(String cache_provider) throws ConfigurationException
    {
        if (!cache_provider.contains("."))
            cache_provider = "org.apache.cassandra.cache." + cache_provider;
        return FBUtilities.construct(cache_provider, "row cache provider");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\LegacyBloomFilterSerializer;serialize(LegacyBloomFilter,DataOutputStream,int);;;public void serialize(LegacyBloomFilter bf, DataOutputStream dos, int version)
            throws IOException
    {
        throw new UnsupportedOperationException("Shouldn't be serializing legacy bloom filters");
//        dos.writeInt(bf.getHashCount());
//        ObjectOutputStream oos = new ObjectOutputStream(dos);
//        oos.writeObject(bf.getBitSet());
//        oos.flush();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\LegacyBloomFilterSerializer;deserialize(DataInputStream,int);;;public LegacyBloomFilter deserialize(DataInputStream dis, int version) throws IOException
    {
        int hashes = dis.readInt();
        ObjectInputStream ois = new ObjectInputStream(dis);
        try
        {
          BitSet bs = (BitSet) ois.readObject();
          return new LegacyBloomFilter(hashes, bs);
        } catch (ClassNotFoundException e)
        {
          throw new RuntimeException(e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;serialize(MerkleTree,DataOutputStream,int);;;public void serialize(MerkleTree mt, DataOutputStream dos, int version) throws IOException
        {
            if (version == MessagingService.VERSION_07)
            {
                ObjectOutputStream out = new ObjectOutputStream(dos);
                out.writeObject(mt);
            }
            else
            {
                dos.writeByte(mt.hashdepth);
                dos.writeLong(mt.maxsize);
                dos.writeLong(mt.size);
                Hashable.serializer.serialize(mt.root, dos, version);
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;deserialize(DataInputStream,int);;;public MerkleTree deserialize(DataInputStream dis, int version) throws IOException
        {
            if (version == MessagingService.VERSION_07)
            {
                ObjectInputStream in = new ObjectInputStream(dis);
                try
                {
                    return (MerkleTree)in.readObject();
                }
                catch (ClassNotFoundException ex)
                {
                    throw new IOException(ex);
                }
            }
            else
            {
                byte hashdepth = dis.readByte();
                long maxsize = dis.readLong();
                long size = dis.readLong();
                MerkleTree mt = new MerkleTree(null, null, hashdepth, maxsize);
                mt.size = size;
                mt.root = Hashable.serializer.deserialize(dis, version);
                return mt;
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;MerkleTree(IPartitioner,Range,byte,long);;;public MerkleTree(IPartitioner partitioner, Range range, byte hashdepth, long maxsize)
    {
        assert hashdepth < Byte.MAX_VALUE;
        this.fullRange = range;
        this.partitioner = partitioner;
        this.hashdepth = hashdepth;
        this.maxsize = maxsize;

        size = 1;
        root = new Leaf(null);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;difference(MerkleTree,MerkleTree);;;        if (!ltree.fullRange.equals(rtree.fullRange))
            throw new IllegalArgumentException("Difference only make sense on tree covering the same range (but " + ltree.fullRange + " != " + rtree.fullRange + ")");
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;invalidateHelper(Hashable,Token,Token);        ;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;splitHelper(Hashable,Token,Token,byte,Token);;;            Token midpoint = partitioner.midpoint(pleft, pright);

            // We should not create a non-sensical range where start and end are the same token (this is non-sensical because range are
            // start exclusive). Note that we shouldn't hit that unless the full range is very small or we are fairly deep
            if (midpoint.equals(pleft) || midpoint.equals(pright))
                throw new StopRecursion.TooDeep();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;splitHelper(Hashable,Token,Token,byte,Token);;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;invalids();;;public TreeRangeIterator invalids()
    {
        return new TreeRangeIterator(this);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;TreeRangeIterator(MerkleTree);;;TreeRangeIterator(MerkleTree tree)
        {
            tovisit = new ArrayDeque<TreeRange>();
            tovisit.add(new TreeRange(tree, tree.fullRange.left, tree.fullRange.right, (byte)0, tree.root));
            this.tree = tree;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;computeNext();;;                {
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;computeNext();;;                    if (active.isWrapAround() && !tovisit.isEmpty())
                        // put to be taken again last
                        tovisit.addLast(active);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;computeNext();;;                }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;serialize(Inner,DataOutputStream,int);;;public void serialize(Inner inner, DataOutputStream dos, int version) throws IOException
            {
                if (inner.hash == null)
                    dos.writeInt(-1);
                else
                {
                    dos.writeInt(inner.hash.length);
                    dos.write(inner.hash);
                }
                Token.serializer().serialize(inner.token, dos);
                Hashable.serializer.serialize(inner.lchild, dos, version);
                Hashable.serializer.serialize(inner.rchild, dos, version);
            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;deserialize(DataInputStream,int);;;public Inner deserialize(DataInputStream dis, int version) throws IOException
            {
                int hashLen = dis.readInt();
                byte[] hash = hashLen >= 0 ? new byte[hashLen] : null;
                if (hash != null)
                    dis.readFully(hash);
                Token token = Token.serializer().deserialize(dis);
                Hashable lchild = Hashable.serializer.deserialize(dis, version);
                Hashable rchild = Hashable.serializer.deserialize(dis, version);
                return new Inner(token, lchild, rchild);
            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;serialize(Leaf,DataOutputStream,int);;;public void serialize(Leaf leaf, DataOutputStream dos, int version) throws IOException
            {
                if (leaf.hash == null)
                    dos.writeInt(-1);
                else
                {
                    dos.writeInt(leaf.hash.length);
                    dos.write(leaf.hash);
                }
            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;deserialize(DataInputStream,int);;;public Leaf deserialize(DataInputStream dis, int version) throws IOException
            {
                int hashLen = dis.readInt();
                byte[] hash = hashLen < 0 ? null : new byte[hashLen];
                if (hash != null)
                    dis.readFully(hash);
                return new Leaf(hash);
            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;serialize(Hashable,DataOutputStream,int);;;public void serialize(Hashable h, DataOutputStream dos, int version) throws IOException
            {
                if (h instanceof Inner) 
                {
                    dos.writeByte(Inner.IDENT);
                    Inner.serializer.serialize((Inner)h, dos, version);
                }
                else if (h instanceof Leaf)
                {
                    dos.writeByte(Leaf.IDENT);
                    Leaf.serializer.serialize((Leaf)h, dos, version);
                }
                else
                    throw new IOException("Unexpected Hashable: " + h.getClass().getCanonicalName());
            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\MerkleTree;deserialize(DataInputStream,int);;;public Hashable deserialize(DataInputStream dis, int version) throws IOException
            {
                byte ident = dis.readByte();
                if (Inner.IDENT == ident)
                    return Inner.serializer.deserialize(dis, version);
                else if (Leaf.IDENT == ident)
                    return Leaf.serializer.deserialize(dis, version);
                else
                    throw new IOException("Unexpected Hashable: " + ident);
            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;getLocalId();;;public static NodeId getLocalId()
    {
        return localIds.current.get();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;renewLocalId();;;public static synchronized void renewLocalId()
    {
        localIds.renewCurrent();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;getOldLocalNodeIds();;;public static List<NodeIdRecord> getOldLocalNodeIds()
    {
        return localIds.olds;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;fromInt(int);;;public static NodeId fromInt(int n)
    {
        long lowBits = 0xC000000000000000L | n;
        return new NodeId(ByteBuffer.allocate(16).putLong(0, 0).putLong(8, lowBits));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;wrap(ByteBuffer);;;public static NodeId wrap(ByteBuffer id)
    {
        return new NodeId(id);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;wrap(ByteBuffer,int);;;public static NodeId wrap(ByteBuffer bb, int offset)
    {
        ByteBuffer dup = bb.duplicate();
        dup.position(offset);
        dup.limit(dup.position() + LENGTH);
        return wrap(dup);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;NodeId(ByteBuffer);;;private NodeId(ByteBuffer id)
    {
        if (id.remaining() != LENGTH)
            throw new IllegalArgumentException("A NodeId representation is exactly " + LENGTH + " bytes");

        this.id = id;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;generate();;;public static NodeId generate()
    {
        return new NodeId(ByteBuffer.wrap(UUIDGen.decompose(UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress()))));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;bytes();;;public ByteBuffer bytes()
    {
        return id;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;isLocalId();;;public boolean isLocalId()
    {
        return equals(getLocalId());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;compareTo(NodeId);;;public int compareTo(NodeId o)
    {
        return ByteBufferUtil.compareSubArrays(id, id.position(), o.id, o.id.position(), NodeId.LENGTH);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;toString();;;@Override
    public String toString()
    {
        return UUIDGen.getUUID(id).toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;equals(Object);;;@Override
    public boolean equals(Object o)
    {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;

        NodeId otherId = (NodeId)o;
        return id.equals(otherId.id);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;hashCode();;;@Override
    public int hashCode()
    {
        return id.hashCode();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;OneShotRenewer();;;public OneShotRenewer()
        {
            renewed = false;
            initialId = getLocalId();
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;maybeRenew(CounterColumn);;;public void maybeRenew(CounterColumn column)
        {
            if (!renewed && column.hasNodeId(initialId))
            {
                renewLocalId();
                renewed = true;
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;LocalNodeIdHistory();;;LocalNodeIdHistory()
        {
            NodeId id = SystemTable.getCurrentLocalNodeId();
            if (id == null)
            {
                // no recorded local node id, generating a new one and saving it
                id = generate();
                logger.info("No saved local node id, using newly generated: {}", id);
                SystemTable.writeCurrentLocalNodeId(null, id);
                current = new AtomicReference<NodeId>(id);
                olds = new CopyOnWriteArrayList();
            }
            else
            {
                logger.info("Saved local node id: {}", id);
                current = new AtomicReference<NodeId>(id);
                olds = new CopyOnWriteArrayList(SystemTable.getOldLocalNodeIds());
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;renewCurrent();;;synchronized void renewCurrent()
        {
            NodeId newNodeId = generate();
            NodeId old = current.get();
            SystemTable.writeCurrentLocalNodeId(old, newNodeId);
            current.set(newNodeId);
            olds.add(new NodeIdRecord(old));
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;NodeIdRecord(NodeId);;;public NodeIdRecord(NodeId id)
        {
            this(id, System.currentTimeMillis());
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\NodeId;NodeIdRecord(NodeId,long);;;public NodeIdRecord(NodeId id, long timestamp)
        {
            this.id = id;
            this.timestamp = timestamp;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\UUIDGen;UUIDGen();;;private UUIDGen()
    {
        // make sure someone didn't whack the clock by changing the order of instantiation.
        if (clock == 0) throw new RuntimeException("singleton instantiation is misplaced.");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\UUIDGen;getTimeUUIDBytes();;;public static byte[] getTimeUUIDBytes()
    {
        return createTimeUUIDBytes(instance.createTimeSafe());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\UUIDGen;getTimeUUIDBytes(long);;;public static byte[] getTimeUUIDBytes(long timeMillis)
    {
        return createTimeUUIDBytes(instance.createTimeUnsafe(timeMillis));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\UUIDGen;createTimeUUIDBytes(long);;;private static byte[] createTimeUUIDBytes(long msb)
    {
        long lsb = instance.getClockSeqAndNode();
        byte[] uuidBytes = new byte[16];
        
        for (int i = 0; i < 8; i++)
            uuidBytes[i] = (byte) (msb >>> 8 * (7 - i));
        
        for (int i = 8; i < 16; i++)
            uuidBytes[i] = (byte) (lsb >>> 8 * (7 - i));
        
        return uuidBytes;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\UUIDGen;getAdjustedTimestamp(UUID);;;public static long getAdjustedTimestamp(UUID uuid)
    {
        if (uuid.version() != 1)
            throw new IllegalArgumentException("incompatible with uuid version: "+uuid.version());
        return (uuid.timestamp() / 10000) - START_EPOCH;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\UUIDGen;getClockSeqAndNode();;;private long getClockSeqAndNode()
    {
        try
        {
            return getClockSeqAndNode(InetAddress.getLocalHost());
        }
        catch (UnknownHostException e)
        {
            throw new RuntimeException(e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\UUIDGen;getClockSeqAndNode(InetAddress);;;private long getClockSeqAndNode(InetAddress addr)
    {
        long lsb = 0;
        lsb |= (clock & 0x3f00000000000000L) >>> 56; // was 58?
        lsb |= 0x0000000000000080;
        lsb |= (clock & 0x00ff000000000000L) >>> 48; 
        lsb |= makeNode(addr);
        return lsb;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\UUIDGen;createTimeSafe();;;private synchronized long createTimeSafe()
    {
        long nanosSince = (System.currentTimeMillis() - START_EPOCH) * 10000;
        if (nanosSince > lastNanos)
            lastNanos = nanosSince;
        else
            nanosSince = ++lastNanos;
        
        return createTime(nanosSince);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\UUIDGen;createTimeUnsafe(long);;;private long createTimeUnsafe(long when)
    {
        long nanosSince = (when - START_EPOCH) * 10000;
        return createTime(nanosSince);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\UUIDGen;createTime(long);;;private long createTime(long nanosSince)
    {   
        long msb = 0L; 
        msb |= (0x00000000ffffffffL & nanosSince) << 32;
        msb |= (0x0000ffff00000000L & nanosSince) >>> 16; 
        msb |= (0xffff000000000000L & nanosSince) >>> 48;
        msb |= 0x0000000000001000L; // sets the version to 1.
        return msb;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\src\java\org\apache\cassandra\utils\UUIDGen;makeNode(InetAddress);;;private long makeNode(InetAddress addr)
    {
        if (nodeCache.containsKey(addr))
            return nodeCache.get(addr);
        
        // ideally, we'd use the MAC address, but java doesn't expose that.
        byte[] hash = FBUtilities.hash(ByteBuffer.wrap(addr.toString().getBytes()));
        long node = 0;
        for (int i = 0; i < Math.min(6, hash.length); i++)
            node |= (0x00000000000000ff & (long)hash[i]) << (5-i)*8;
        assert (0xff00000000000000L & node) == 0;
        
        nodeCache.put(addr, node);
        
        return node;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\CassandraServiceController;shutdown();;;            if (tarball != null)
                BlobUtils.deleteBlob(config, clusterSpec, tarball);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\CountersTest;testWriteOneReadAll();;;@Test
    public void testWriteOneReadAll() throws Exception
    {
        List<InetAddress> hosts = controller.getHosts();
        // create a keyspace that performs counter validation
        final String keyspace = "TestOneNodeWrite";
        keyspace(keyspace).rf(3).validator("CounterColumnType").create();

        for (InetAddress host : hosts)
        {
            Cassandra.Client client = controller.createClient(host);
            client.set_keyspace(keyspace);

            ByteBuffer key = newKey();

            add(client, key, "Standard1", "c1", 1, ConsistencyLevel.ONE);
            add(client, key, "Standard1", "c2", 2, ConsistencyLevel.ONE);

            new CounterGet(client, "Standard1", key).name("c1").value(1L).perform(ConsistencyLevel.ALL);
            new CounterGet(client, "Standard1", key).name("c2").value(2L).perform(ConsistencyLevel.ALL);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\CountersTest;CounterGet(Cassandra.Client,String,ByteBuffer);;;public CounterGet(Cassandra.Client client, String cf, ByteBuffer key)
        {
            super(client, cf, key);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\CountersTest;tryPerformAction(ConsistencyLevel);;;public void tryPerformAction(ConsistencyLevel cl) throws Exception
        {
            ByteBuffer bname = ByteBuffer.wrap(name.getBytes());
            ColumnPath cpath = new ColumnPath(cf).setColumn(bname);
            CounterColumn col = client.get(key, cpath, cl).counter_column;
            assertEquals(bname, col.name);
            assertEquals(value.longValue(), col.value);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\CountersTest;add(Cassandra.Client,ByteBuffer,String,String,long,ConsistencyLevel);;;protected void add(Cassandra.Client client, ByteBuffer key, String cf, String name, long value, ConsistencyLevel cl)
        throws InvalidRequestException, UnavailableException, TimedOutException, TException
    {
        CounterColumn col = new CounterColumn(ByteBuffer.wrap(name.getBytes()), value);
        client.add(key, new ColumnParent(cf), col, cl);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;KeyspaceCreation(String);;;public KeyspaceCreation(String name)
        {
            this.name = name;
            cfdef = new CfDef(name, "Standard1");
            cfdef.setComparator_type("BytesType");
            cfdef.setKey_cache_size(10000);
            cfdef.setRow_cache_size(1000);
            cfdef.setRow_cache_save_period_in_seconds(0);
            cfdef.setKey_cache_save_period_in_seconds(3600);
            cfdef.setMemtable_flush_after_mins(59);
            cfdef.setMemtable_throughput_in_mb(255);
            cfdef.setMemtable_operations_in_millions(0.29);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;validator(String);;;public KeyspaceCreation validator(String validator)
        {
            cfdef.setDefault_validation_class(validator);
            return this;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;rf(int);;;public KeyspaceCreation rf(int rf)
        {
            this.rf = rf;
            return this;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;create();;;public void create() throws Exception
        {
            List<InetAddress> hosts = controller.getHosts();
            Cassandra.Client client = controller.createClient(hosts.get(0));
            Map<String,String> stratOptions = new HashMap<String,String>();
            stratOptions.put("replication_factor", "" + rf);
            client.system_add_keyspace(new KsDef(name,
                                                 "org.apache.cassandra.locator.SimpleStrategy",
                                                 Arrays.asList(cfdef))
                                               .setStrategy_options(stratOptions)
                                               .setCf_defs(Collections.<CfDef>emptyList()));

            // poll, until KS added
            for (InetAddress host : hosts)
            {
                try
                {
                    client = controller.createClient(host);
                    poll:
                    while (true)
                    {
                        List<KsDef> ksDefList = client.describe_keyspaces();
                        for (KsDef ks : ksDefList)
                        {
                            if (ks.name.equals(name))
                                break poll;
                        }

                        try
                        {
                            Thread.sleep(1000);
                        }
                        catch (InterruptedException e)
                        {
                            break poll;
                        }
                    }
                }
                catch (TException te)
                {
                    continue;
                }
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;keyspace(String);;;protected static KeyspaceCreation keyspace(String name)
    {
        return new KeyspaceCreation(name);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;newKey();;;protected ByteBuffer newKey()
    {
        return ByteBuffer.wrap(String.format("test.key.%d", System.currentTimeMillis()).getBytes());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;insert(Cassandra.Client,ByteBuffer,String,String,String,long,ConsistencyLevel);;;protected void insert(Cassandra.Client client, ByteBuffer key, String cf, String name, String value, long timestamp, ConsistencyLevel cl)
        throws InvalidRequestException, UnavailableException, TimedOutException, TException
    {
        Column col = new Column(ByteBuffer.wrap(name.getBytes()))
            .setValue(ByteBuffer.wrap(value.getBytes()))
            .setTimestamp(timestamp);
        client.insert(key, new ColumnParent(cf), col, cl);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;getColumn(Cassandra.Client,ByteBuffer,String,String,ConsistencyLevel);;;protected Column getColumn(Cassandra.Client client, ByteBuffer key, String cf, String col, ConsistencyLevel cl)
        throws InvalidRequestException, UnavailableException, TimedOutException, TException, NotFoundException
    {
        ColumnPath cpath = new ColumnPath(cf);
        cpath.setColumn(col.getBytes());
        return client.get(key, cpath, cl).column;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;Get(Cassandra.Client,String,ByteBuffer);;;public Get(Cassandra.Client client, String cf, ByteBuffer key)
        {
            super(client, cf, key);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;tryPerformAction(ConsistencyLevel);;;public void tryPerformAction(ConsistencyLevel cl) throws Exception
        {
            assertColumnEqual(name, value, timestamp, getColumn(client, key, cf, name, cl));
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;Insert(Cassandra.Client,String,ByteBuffer);;;public Insert(Cassandra.Client client, String cf, ByteBuffer key)
        {
            super(client, cf, key);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;tryPerformAction(ConsistencyLevel);;;public void tryPerformAction(ConsistencyLevel cl) throws Exception
        {
            insert(client, key, cf, name, value, timestamp, cl);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;RetryingAction(Cassandra.Client,String,ByteBuffer);;;public RetryingAction(Cassandra.Client client, String cf, ByteBuffer key)
        {
            this.client = client;
            this.cf = cf;
            this.key = key;
            this.timestamp = 0;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;name(String);;;public RetryingAction name(String name)
        {
            this.name = name; return this;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;value(T);;;public RetryingAction value(T value)
        {
            this.value = value; return this;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;timeout(long);;;public RetryingAction timeout(long timeout)
        {
            this.timeout = timeout; return this;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;timestamp(long);;;public RetryingAction timestamp(long timestamp)
        {
            this.timestamp = timestamp; return this;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;expecting(Class);;;public RetryingAction expecting(Class... tempExceptions)
        {
            this.expected.clear();
            for (Class exclass : tempExceptions)
                expected.add((Class<Exception>)exclass);
            return this;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;perform(ConsistencyLevel);;;public void perform(ConsistencyLevel cl) throws AssertionError
        {
            long deadline = System.currentTimeMillis() + timeout;
            int attempts = 0;
            String template = "%s for " + this + " after %d attempt(s) with %d ms to spare.";
            Exception e = null;
            while(deadline > System.currentTimeMillis())
            {
                try
                {
                    attempts++;
                    tryPerformAction(cl);
                    logger.info(String.format(template, "Succeeded", attempts, deadline - System.currentTimeMillis()));
                    return;
                }
                catch (Exception ex)
                {
                    e = ex;
                    if (!expected.contains(ex.getClass()))
                        continue;
                    logger.info(String.format(template, "Caught expected exception: " + e, attempts, deadline - System.currentTimeMillis()));
                    return;
                }
            }
            String err = String.format(template, "Caught unexpected: " + e, attempts, deadline - System.currentTimeMillis());
            logger.error(err, e);
            throw new AssertionError(err);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;toString();;;public String toString()
        {
            return this.getClass().getSimpleName() + "(" + key + "," + name + ")";
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;tryPerformAction(ConsistencyLevel);;;protected abstract void tryPerformAction(ConsistencyLevel cl) throws Exception;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;get_slice(Cassandra.Client,ByteBuffer,String,ConsistencyLevel);;;protected List<ColumnOrSuperColumn> get_slice(Cassandra.Client client, ByteBuffer key, String cf, ConsistencyLevel cl)
      throws InvalidRequestException, UnavailableException, TimedOutException, TException
    {
        SlicePredicate sp = new SlicePredicate();
        sp.setSlice_range(
            new SliceRange(
                ByteBuffer.wrap(new byte[0]),
                ByteBuffer.wrap(new byte[0]),
                false,
                1000
                )
            );
        return client.get_slice(key, new ColumnParent(cf), sp, cl);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;assertColumnEqual(String,String,long,Column);;;protected void assertColumnEqual(String name, String value, long timestamp, Column col)
    {
        assertEquals(ByteBuffer.wrap(name.getBytes()), col.name);
        assertEquals(ByteBuffer.wrap(value.getBytes()), col.value);
        assertEquals(timestamp, col.timestamp);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;endpointsForKey(InetAddress,ByteBuffer,String);;;protected List<InetAddress> endpointsForKey(InetAddress seed, ByteBuffer key, String keyspace)
        throws IOException
    {
        RingCache ring = new RingCache(keyspace, new RandomPartitioner(), seed.getHostAddress(), 9160);
        List<InetAddress> privateendpoints = ring.getEndpoint(key);
        List<InetAddress> endpoints = new ArrayList<InetAddress>();
        for (InetAddress endpoint : privateendpoints)
        {
            endpoints.add(controller.getPublicHost(endpoint));
        }
        return endpoints;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\TestBase;nonEndpointForKey(InetAddress,ByteBuffer,String);;;protected InetAddress nonEndpointForKey(InetAddress seed, ByteBuffer key, String keyspace)
        throws IOException
    {
        List<InetAddress> endpoints = endpointsForKey(seed, key, keyspace);
        for (InetAddress host : controller.getHosts())
        {
            if (!endpoints.contains(host))
            {
                return host;
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\utils\BlobUtils;storeBlob(Configuration,ClusterSpec,String);;;
        // blob name and checksum of the file
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\utils\BlobUtils;storeBlob(Configuration,ClusterSpec,String);;;        String blobNameChecksum = blobName + ".md5";
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\utils\BlobUtils;storeBlob(Configuration,ClusterSpec,String);;;
        File checksumFile;

        try
        {
            checksumFile = File.createTempFile("dtchecksum", "md5");
            checksumFile.deleteOnExit();

            FileWriter checksumWriter = new FileWriter(checksumFile);

            String checksum = FBUtilities.bytesToHex(Files.getDigest(file, MessageDigest.getInstance("MD5")));

            checksumWriter.write(String.format("%s  %s", checksum, file.getName()));
            checksumWriter.close();
        }
        catch (IOException e)
        {
            throw new RuntimeException("Can't create a checksum of the file: " + filename);
        }
        catch (NoSuchAlgorithmException e)
        {
            throw new RuntimeException(e.getMessage());
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\utils\BlobUtils;storeBlob(Configuration,ClusterSpec,String);;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\utils\BlobUtils;storeBlob(Configuration,ClusterSpec,String);;;            map.putFile(blobNameChecksum, checksumFile);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\utils\BlobUtils;storeBlob(Configuration,ClusterSpec,String);;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\utils\BlobUtils;storeBlob(Configuration,ClusterSpec,String);;;
                sss.putObjectACL(container,
                                 blobNameChecksum,
                                 AccessControlList.fromCannedAccessPolicy(CannedAccessPolicy.PUBLIC_READ, ownerId));
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\utils\BlobUtils;storeBlob(Configuration,ClusterSpec,String);;;            {
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\distributed\org\apache\cassandra\utils\BlobUtils;storeBlob(Configuration,ClusterSpec,String);;;            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\long\org\apache\cassandra\db\LongCompactionSpeedTest;testAESCountersRepairWide();;;@Test
    public void testAESCountersRepairWide() throws Exception
    {
        testAESCountersRepair(2, 1, 500000);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\long\org\apache\cassandra\db\LongCompactionSpeedTest;testAESCountersRepairSlim();;;@Test
    public void testAESCountersRepairSlim() throws Exception
    {
        testAESCountersRepair(2, 500000, 1);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\long\org\apache\cassandra\db\LongCompactionSpeedTest;testAESCounterRepairMany();;;@Test
    public void testAESCounterRepairMany() throws Exception
    {
        testAESCountersRepair(100, 1000, 5);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\long\org\apache\cassandra\db\LongCompactionSpeedTest;testAESCountersRepair(int,int,int);;;protected void testAESCountersRepair(int sstableCount, final int rowsPerSSTable, final int colsPerRow) throws Exception
    {
        final String cfName = "Counter1";
        CompactionManager.instance.disableAutoCompaction();

        ArrayList<SSTableReader> sstables = new ArrayList<SSTableReader>();
        for (int k = 0; k < sstableCount; k++)
        {
            final int sstableNum = k;
            SSTableReader sstable = SSTableUtils.prepare().ks(TABLE1).cf(cfName).write(rowsPerSSTable, new SSTableUtils.Appender(){
                int written = 0;
                public boolean append(SSTableWriter writer) throws IOException
                {
                    if (written > rowsPerSSTable)
                        return false;

                    DecoratedKey key = Util.dk(String.format("%020d", written));
                    ColumnFamily cf = ColumnFamily.create(TABLE1, cfName);
                    for (int i = 0; i < colsPerRow; i++)
                        cf.addColumn(createCounterColumn(String.valueOf(i)));
                    writer.append(key, cf);
                    written++;
                    return true;
                }
            });

            // whack the index to trigger the recover
            FileUtils.deleteWithConfirm(sstable.descriptor.filenameFor(Component.PRIMARY_INDEX));
            FileUtils.deleteWithConfirm(sstable.descriptor.filenameFor(Component.FILTER));

            sstables.add(sstable);
        }

        // give garbage collection a bit of time to catch up
        Thread.sleep(1000);

        long start = System.currentTimeMillis();

        for (SSTableReader sstable : sstables)
            CompactionManager.instance.submitSSTableBuild(sstable.descriptor, OperationType.AES).get();

        System.out.println(String.format("%s: sstables=%d rowsper=%d colsper=%d: %d ms",
                                         this.getClass().getName(),
                                         sstableCount,
                                         rowsPerSSTable,
                                         colsPerRow,
                                         System.currentTimeMillis() - start));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\long\org\apache\cassandra\db\LongCompactionSpeedTest;createCounterColumn(String);;;protected CounterColumn createCounterColumn(String name)
    {
        ContextState context = ContextState.allocate(4, 1);
        context.writeElement(NodeId.fromInt(1), 4L, 2L, true);
        context.writeElement(NodeId.fromInt(2), 4L, 2L);
        context.writeElement(NodeId.fromInt(4), 3L, 3L);
        context.writeElement(NodeId.fromInt(8), 2L, 4L);

        return new CounterColumn(ByteBufferUtil.bytes(name), context.context, 0L);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\long\org\apache\cassandra\db\MeteredFlusherTest;testManyMemtables();;;@Test
    public void testManyMemtables() throws IOException, ConfigurationException
    {
        Table table = Table.open("Keyspace1");
        for (int i = 0; i < 100; i++)
        {
            CFMetaData metadata = new CFMetaData(table.name, "_CF" + i, ColumnFamilyType.Standard, UTF8Type.instance, null);
            new AddColumnFamily(metadata).apply();
        }

        ByteBuffer name = ByteBufferUtil.bytes("c");
        for (int j = 0; j < 200; j++)
        {
            for (int i = 0; i < 100; i++)
            {
                RowMutation rm = new RowMutation("Keyspace1", ByteBufferUtil.bytes("key" + j));
                ColumnFamily cf = ColumnFamily.create("Keyspace1", "_CF" + i);
                // don't cheat by allocating this outside of the loop; that defeats the purpose of deliberately using lots of memory
                ByteBuffer value = ByteBuffer.allocate(100000);
                cf.addColumn(new Column(name, value));
                rm.add(cf);
                rm.applyUnsafe();
            }
        }

        int flushes = 0;
        for (ColumnFamilyStore cfs : ColumnFamilyStore.all())
        {
            if (cfs.getColumnFamilyName().startsWith("_CF"))
                flushes += cfs.getMemtableSwitchCount();
        }
        assert flushes > 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\AbstractSerializationsTester;getVersion();;;protected final int getVersion()
    {
        return VERSION_MAP.get(CUR_VER);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\SchemaLoader;loadSchema();;;@BeforeClass
    public static void loadSchema()
    {
        try
        {
            for (KSMetaData ksm : schemaDefinition())
            {
                for (CFMetaData cfm : ksm.cfMetaData().values())
                    CFMetaData.map(cfm);
                DatabaseDescriptor.setTableDefinition(ksm, DatabaseDescriptor.getDefsVersion());
            }
        }
        catch (ConfigurationException e)
        {
            throw new RuntimeException(e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\SchemaLoader;standardCFMD(String,String);;;private static CFMetaData standardCFMD(String ksName, String cfName)
    {
        return new CFMetaData(ksName, cfName, ColumnFamilyType.Standard, BytesType.instance, null).keyCacheSize(0);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\SchemaLoader;superCFMD(String,String,AbstractType);;;private static CFMetaData superCFMD(String ksName, String cfName, AbstractType subcc)
    {
        return new CFMetaData(ksName, cfName, ColumnFamilyType.Super, BytesType.instance, subcc).keyCacheSize(0);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\SchemaLoader;indexCFMD(String,String,Boolean);;;private static CFMetaData indexCFMD(String ksName, String cfName, final Boolean withIdxType)
    {
        return standardCFMD(ksName, cfName)
                .columnMetadata(new HashMap<ByteBuffer, ColumnDefinition>()
                    {{
                        ByteBuffer cName = ByteBuffer.wrap("birthdate".getBytes(Charsets.UTF_8));
                        IndexType keys = withIdxType ? IndexType.KEYS : null;
                        put(cName, new ColumnDefinition(cName, LongType.instance, keys, null));
                    }});
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\SchemaLoader;jdbcCFMD(String,String,AbstractType);;;private static CFMetaData jdbcCFMD(String ksName, String cfName, AbstractType comp)
    {
        return new CFMetaData(ksName, cfName, ColumnFamilyType.Standard, comp, comp).defaultValidator(comp);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\Util;concatByteArrays(byte[],byte[]);;;public static byte[] concatByteArrays(byte[] first, byte[]... remaining)
    {
        int length = first.length;
        for (byte[] array : remaining)
        {
            length += array.length;
        }

        byte[] result = new byte[length];
        System.arraycopy(first, 0, result, 0, first.length);
        int offset = first.length;

        for (byte[] array : remaining)
        {
            System.arraycopy(array, 0, result, offset, array.length);
            offset += array.length;
        }

        return result;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\Util;equalsNodeId(NodeId,ByteBuffer,int);;;public static boolean equalsNodeId(NodeId n, ByteBuffer context, int offset)
    {
        return NodeId.wrap(context, context.position() + offset).equals(n);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\Util;compactAll(ColumnFamilyStore);;;public static Future<?> compactAll(ColumnFamilyStore cfs)
    {
        List<Descriptor> descriptors = new ArrayList<Descriptor>();
        for (SSTableReader sstable : cfs.getSSTables())
            descriptors.add(sstable.descriptor);
        return CompactionManager.instance.submitUserDefined(cfs, descriptors, Integer.MAX_VALUE);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\cache\CacheProviderTest;simpleCase(ColumnFamily,ICache<String,ColumnFamily>);;;private void simpleCase(ColumnFamily cf, ICache<String, ColumnFamily> cache)
    {
        cache.put(key1, cf);
        assertDigests(cache.get(key1), cf);
        cache.put(key2, cf);
        cache.put(key3, cf);
        cache.put(key4, cf);
        cache.put(key5, cf);
        
        assertEquals(CAPACITY, cache.size());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\cache\CacheProviderTest;assertDigests(ColumnFamily,ColumnFamily);;;private void assertDigests(ColumnFamily one, ColumnFamily two)
    {
        // CF does not implement .equals
        assert ColumnFamily.digest(one).equals(ColumnFamily.digest(two));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\cache\CacheProviderTest;concurrentCase(ColumnFamily,ICache<String,ColumnFamily>);;;private void concurrentCase(final ColumnFamily cf, final ICache<String, ColumnFamily> cache) throws InterruptedException
    {
        Runnable runable = new Runnable()
        {
            public void run()
            {
                for (int j = 0; j < 10; j++)
                {
                    cache.put(key1, cf);
                    cache.put(key2, cf);
                    cache.put(key3, cf);
                    cache.put(key4, cf);
                    cache.put(key5, cf);
                }
            }
        };

        List<Thread> threads = new ArrayList<Thread>(100);
        for (int i = 0; i < 100; i++)
        {
            Thread thread = new Thread(runable);
            threads.add(thread);
            thread.start();
        }
        for (Thread thread : threads)
            thread.join();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\cache\CacheProviderTest;createCF();;;private ColumnFamily createCF()
    {
        ColumnFamily cf = ColumnFamily.create("Keyspace1", "Standard1");
        cf.addColumn(column("vijay", "great", 1));
        cf.addColumn(column("awesome", "vijay", 1));
        return cf;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\cache\CacheProviderTest;testHeapCache();;;@Test
    public void testHeapCache() throws InterruptedException
    {
        ICache<String, ColumnFamily> cache = ConcurrentLinkedHashCache.create(CAPACITY);
        ColumnFamily cf = createCF();
        simpleCase(cf, cache);
        concurrentCase(cf, cache);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\cache\CacheProviderTest;testSerializingCache();;;@Test
    public void testSerializingCache() throws InterruptedException
    {
        ICache<String, ColumnFamily> cache = new SerializingCache<String, ColumnFamily>(CAPACITY, ColumnFamily.serializer());
        ColumnFamily cf = createCF();
        simpleCase(cf, cache);
        // concurrentCase(cf, cache);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\cli\CliTest;testCli();;;            else if (statement.startsWith("incr "))
            {
                assertEquals(result, "Value incremented." + System.getProperty("line.separator"));
            }
            else if (statement.startsWith("decr "))
            {
                assertEquals(result, "Value decremented." + System.getProperty("line.separator"));
            }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\cli\CliTest;testCli();;;                else if (statement.contains("Counter"))
                {
                    assertTrue(result.startsWith("=> (counter=") || result.startsWith("Value was not found"));
                }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\CommitLogTest;tmpFile();;;protected File tmpFile() throws IOException
    {
        File logFile = File.createTempFile("testRecoveryWithPartiallyWrittenHeaderTestFile", null);
        logFile.deleteOnExit();
        assert logFile.length() == 0;
        return logFile;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\CommitLogTest;testRecovery(byte[]);;;protected void testRecovery(byte[] logData) throws Exception
    {
        File logFile = tmpFile();
        OutputStream lout = new FileOutputStream(logFile);
        lout.write(logData);
        //statics make it annoying to test things correctly
        CommitLog.recover(new File[] {logFile}); //CASSANDRA-1119 / CASSANDRA-1179 throw on failure*/
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\CompactionsTest;testCompactions();;;        final int SSTABLES = (DatabaseDescriptor.getIndexInterval() * 3 / ROWS_PER_SSTABLE);

        // disable compaction while flushing
        store.disableAutoCompaction();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\CompactionsTest;testCompactions();;;        // re-enable compaction with thresholds low enough to force a few rounds
        store.setMinimumCompactionThreshold(2);
        store.setMaximumCompactionThreshold(4);
        // loop submitting parallel compactions until they all return 0
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\CounterColumnTest;testCreate();;;@Test
    public void testCreate() throws UnknownHostException
    {
        long delta = 3L;
        CounterUpdateColumn cuc = new CounterUpdateColumn(ByteBufferUtil.bytes("x"), delta, 1L);
        CounterColumn column = cuc.localCopy(Table.open("Keyspace5").getColumnFamilyStore("Counter1"));

        assert delta == column.total();
        assert 1 == column.value().getShort(0);
        assert 0 == column.value().getShort(2);
        assert NodeId.wrap(column.value(), 4).isLocalId();
        assert 1L == column.value().getLong(4 + 0*stepLength + idLength);
        assert delta == column.value().getLong(4 + 0*stepLength + idLength + clockLength);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\CounterColumnTest;testReconcile();;;@Test
    public void testReconcile() throws UnknownHostException
    {
        IColumn left;
        IColumn right;
        IColumn reconciled;

        ByteBuffer context;

        // tombstone + tombstone
        left  = new DeletedColumn(ByteBufferUtil.bytes("x"), 1, 1L);
        right = new DeletedColumn(ByteBufferUtil.bytes("x"), 2, 2L);

        assert left.reconcile(right).getMarkedForDeleteAt() == right.getMarkedForDeleteAt();
        assert right.reconcile(left).getMarkedForDeleteAt() == right.getMarkedForDeleteAt();

        // tombstone > live
        left  = new DeletedColumn(ByteBufferUtil.bytes("x"), 1, 2L);
        right = new CounterColumn(ByteBufferUtil.bytes("x"), 0L, 1L);

        assert left.reconcile(right) == left;

        // tombstone < live last delete
        left  = new DeletedColumn(ByteBufferUtil.bytes("x"), 1, 1L);
        right = new CounterColumn(ByteBufferUtil.bytes("x"), 0L, 4L, 2L);

        assert left.reconcile(right) == right;

        // tombstone == live last delete
        left  = new DeletedColumn(ByteBufferUtil.bytes("x"), 1, 2L);
        right = new CounterColumn(ByteBufferUtil.bytes("x"), 0L, 4L, 2L);

        assert left.reconcile(right) == right;

        // tombstone > live last delete
        left  = new DeletedColumn(ByteBufferUtil.bytes("x"), 1, 4L);
        right = new CounterColumn(ByteBufferUtil.bytes("x"), 0L, 9L, 1L);

        reconciled = left.reconcile(right);
        assert reconciled.name() == right.name();
        assert reconciled.value() == right.value();
        assert reconciled.timestamp() == right.timestamp();
        assert ((CounterColumn)reconciled).timestampOfLastDelete() == left.getMarkedForDeleteAt();

        // live < tombstone
        left  = new CounterColumn(ByteBufferUtil.bytes("x"), 0L, 1L);
        right = new DeletedColumn(ByteBufferUtil.bytes("x"), 1, 2L);

        assert left.reconcile(right) == right;

        // live last delete > tombstone
        left  = new CounterColumn(ByteBufferUtil.bytes("x"), 0L, 4L, 2L);
        right = new DeletedColumn(ByteBufferUtil.bytes("x"), 1, 1L);

        assert left.reconcile(right) == left;

        // live last delete == tombstone
        left  = new CounterColumn(ByteBufferUtil.bytes("x"), 0L, 4L, 2L);
        right = new DeletedColumn(ByteBufferUtil.bytes("x"), 1, 2L);

        assert left.reconcile(right) == left;

        // live last delete < tombstone
        left  = new CounterColumn(ByteBufferUtil.bytes("x"), 0L, 9L, 1L);
        right = new DeletedColumn(ByteBufferUtil.bytes("x"), 1, 4L);

        reconciled = left.reconcile(right);
        assert reconciled.name() == left.name();
        assert reconciled.value() == left.value();
        assert reconciled.timestamp() == left.timestamp();
        assert ((CounterColumn)reconciled).timestampOfLastDelete() == right.getMarkedForDeleteAt();

        // live < live last delete
        left  = new CounterColumn(ByteBufferUtil.bytes("x"), cc.create(NodeId.fromInt(1), 2L, 3L, false), 1L, Long.MIN_VALUE);
        right = new CounterColumn(ByteBufferUtil.bytes("x"), cc.create(NodeId.fromInt(1), 1L, 1L, false), 4L, 3L);

        assert left.reconcile(right) == right;

        // live last delete > live
        left  = new CounterColumn(ByteBufferUtil.bytes("x"), cc.create(NodeId.fromInt(1), 2L, 3L, false), 6L, 5L);
        right = new CounterColumn(ByteBufferUtil.bytes("x"), cc.create(NodeId.fromInt(1), 1L, 1L, false), 4L, 3L);

        assert left.reconcile(right) == left;

        // live + live
        left = new CounterColumn(ByteBufferUtil.bytes("x"), cc.create(NodeId.fromInt(1), 1L, 1L, false), 4L, Long.MIN_VALUE);
        right = new CounterColumn(ByteBufferUtil.bytes("x"), cc.create(NodeId.fromInt(1), 2L, 3L, false), 1L, Long.MIN_VALUE);

        reconciled = left.reconcile(right);
        assert reconciled.name().equals(left.name());
        assert ((CounterColumn)reconciled).total() == 3L;
        assert reconciled.timestamp() == 4L;

        left = reconciled;
        right = new CounterColumn(ByteBufferUtil.bytes("x"), cc.create(NodeId.fromInt(2), 1L, 5L, false), 2L, Long.MIN_VALUE);

        reconciled = left.reconcile(right);
        assert reconciled.name().equals(left.name());
        assert ((CounterColumn)reconciled).total() == 8L;
        assert reconciled.timestamp() == 4L;

        left = reconciled;
        right = new CounterColumn(ByteBufferUtil.bytes("x"), cc.create(NodeId.fromInt(2), 2L, 2L, false), 6L, Long.MIN_VALUE);

        reconciled = left.reconcile(right);
        assert reconciled.name().equals(left.name());
        assert ((CounterColumn)reconciled).total() == 5L;
        assert reconciled.timestamp() == 6L;

        context = reconciled.value();
        int hd = 2; // header
        assert hd + 2 * stepLength == context.remaining();

        assert Util.equalsNodeId(NodeId.fromInt(1), context, hd + 0*stepLength);
        assert 2L == context.getLong(hd + 0*stepLength + idLength);
        assert 3L == context.getLong(hd + 0*stepLength + idLength + clockLength);

        assert Util.equalsNodeId(NodeId.fromInt(2), context, hd + 1*stepLength);
        assert 2L == context.getLong(hd + 1*stepLength + idLength);
        assert 2L == context.getLong(hd + 1*stepLength + idLength + clockLength);

        assert ((CounterColumn)reconciled).timestampOfLastDelete() == Long.MIN_VALUE;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\CounterColumnTest;testDiff();;;@Test
    public void testDiff() throws UnknownHostException
    {
        ContextState left;
        ContextState right;

        CounterColumn leftCol;
        CounterColumn rightCol;

        // timestamp
        leftCol = new CounterColumn(ByteBufferUtil.bytes("x"), 0, 1L);
        rightCol = new CounterColumn(ByteBufferUtil.bytes("x"), 0, 2L);

        assert rightCol == leftCol.diff(rightCol);
        assert null     == rightCol.diff(leftCol);

        // timestampOfLastDelete
        leftCol = new CounterColumn(ByteBufferUtil.bytes("x"), 0, 1L, 1L);
        rightCol = new CounterColumn(ByteBufferUtil.bytes("x"), 0, 1L, 2L);

        assert rightCol == leftCol.diff(rightCol);
        assert null     == rightCol.diff(leftCol);

        // equality: equal nodes, all counts same
        left = ContextState.allocate(3, 0);
        left.writeElement(NodeId.fromInt(3), 3L, 0L);
        left.writeElement(NodeId.fromInt(6), 2L, 0L);
        left.writeElement(NodeId.fromInt(9), 1L, 0L);
        right = new ContextState(ByteBufferUtil.clone(left.context), 2);

        leftCol  = new CounterColumn(ByteBufferUtil.bytes("x"), left.context,  1L);
        rightCol = new CounterColumn(ByteBufferUtil.bytes("x"), right.context, 1L);
        assert null == leftCol.diff(rightCol);

        // greater than: left has superset of nodes (counts equal)
        left = ContextState.allocate(4, 0);
        left.writeElement(NodeId.fromInt(3), 3L, 0L);
        left.writeElement(NodeId.fromInt(6), 2L, 0L);
        left.writeElement(NodeId.fromInt(9), 1L, 0L);
        left.writeElement(NodeId.fromInt(12), 0L, 0L);

        right = ContextState.allocate(3, 0);
        right.writeElement(NodeId.fromInt(3), 3L, 0L);
        right.writeElement(NodeId.fromInt(6), 2L, 0L);
        right.writeElement(NodeId.fromInt(9), 1L, 0L);

        leftCol  = new CounterColumn(ByteBufferUtil.bytes("x"), left.context,  1L);
        rightCol = new CounterColumn(ByteBufferUtil.bytes("x"), right.context, 1L);
        assert null == leftCol.diff(rightCol);

        // less than: right has subset of nodes (counts equal)
        assert leftCol == rightCol.diff(leftCol);

        // disjoint: right and left have disjoint node sets
        left = ContextState.allocate(3, 0);
        left.writeElement(NodeId.fromInt(3), 1L, 0L);
        left.writeElement(NodeId.fromInt(4), 1L, 0L);
        left.writeElement(NodeId.fromInt(9), 1L, 0L);

        right = ContextState.allocate(3, 0);
        right.writeElement(NodeId.fromInt(3), 1L, 0L);
        right.writeElement(NodeId.fromInt(6), 1L, 0L);
        right.writeElement(NodeId.fromInt(9), 1L, 0L);

        leftCol  = new CounterColumn(ByteBufferUtil.bytes("x"), left.context,  1L);
        rightCol = new CounterColumn(ByteBufferUtil.bytes("x"), right.context, 1L);
        assert rightCol == leftCol.diff(rightCol);
        assert leftCol  == rightCol.diff(leftCol);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\CounterColumnTest;testSerializeDeserialize();;;@Test
    public void testSerializeDeserialize() throws IOException
    {
        CounterContext.ContextState state = CounterContext.ContextState.allocate(4, 2);
        state.writeElement(NodeId.fromInt(1), 4L, 4L);
        state.writeElement(NodeId.fromInt(2), 4L, 4L, true);
        state.writeElement(NodeId.fromInt(3), 4L, 4L);
        state.writeElement(NodeId.fromInt(4), 4L, 4L, true);

        CounterColumn original = new CounterColumn(ByteBufferUtil.bytes("x"), state.context, 1L);
        DataOutputBuffer bufOut = new DataOutputBuffer();
        Column.serializer().serialize(original, bufOut);
        byte[] serialized = bufOut.getData();

        ByteArrayInputStream bufIn = new ByteArrayInputStream(serialized, 0, serialized.length);
        CounterColumn deserialized = (CounterColumn)Column.serializer().deserialize(new DataInputStream(bufIn));
        assert original.equals(deserialized);

        bufIn = new ByteArrayInputStream(serialized, 0, serialized.length);
        CounterColumn deserializedOnRemote = (CounterColumn)Column.serializer().deserialize(new DataInputStream(bufIn), null, true);
        assert deserializedOnRemote.name().equals(original.name());
        assert deserializedOnRemote.total() == original.total();
        assert deserializedOnRemote.value().equals(cc.clearAllDelta(original.value()));
        assert deserializedOnRemote.timestamp() == deserialized.timestamp();
        assert deserializedOnRemote.timestampOfLastDelete() == deserialized.timestampOfLastDelete();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\CounterColumnTest;testUpdateDigest();;;@Test
    public void testUpdateDigest() throws Exception
    {
        MessageDigest digest1 = MessageDigest.getInstance("md5");
        MessageDigest digest2 = MessageDigest.getInstance("md5");

        CounterContext.ContextState state = CounterContext.ContextState.allocate(4, 2);
        state.writeElement(NodeId.fromInt(1), 4L, 4L);
        state.writeElement(NodeId.fromInt(2), 4L, 4L, true);
        state.writeElement(NodeId.fromInt(3), 4L, 4L);
        state.writeElement(NodeId.fromInt(4), 4L, 4L, true);

        CounterColumn original = new CounterColumn(ByteBufferUtil.bytes("x"), state.context, 1L);
        CounterColumn cleared = new CounterColumn(ByteBufferUtil.bytes("x"), cc.clearAllDelta(state.context), 1L);

        original.updateDigest(digest1);
        cleared.updateDigest(digest2);

        assert Arrays.equals(digest1.digest(), digest2.digest());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;testZeroInjection();;;@Test
    public void testZeroInjection() throws IOException
    {
        org.apache.cassandra.db.migration.avro.CfDef cd = new org.apache.cassandra.db.migration.avro.CfDef();
        // populate only fields that must be non-null.
        cd.keyspace = new Utf8("Lest Ks");
        cd.name = new Utf8("Mest Cf");
        
        org.apache.cassandra.db.migration.avro.CfDef cd2 = SerDeUtils.deserializeWithSchema(SerDeUtils.serializeWithSchema(cd), new org.apache.cassandra.db.migration.avro.CfDef());
        assert cd.equals(cd2);
        // make sure some of the fields didn't get unexpected zeros put in during [de]serialize operations.
        assert cd.min_compaction_threshold == null;
        assert cd2.min_compaction_threshold == null;
        assert cd.row_cache_save_period_in_seconds == null;
        assert cd2.row_cache_save_period_in_seconds == null;
        
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;ensureStaticCFMIdsAreLessThan1000();;;@Test
    public void ensureStaticCFMIdsAreLessThan1000()
    {
        assert CFMetaData.StatusCf.cfId == 0;    
        assert CFMetaData.HintsCf.cfId == 1;    
        assert CFMetaData.MigrationsCf.cfId == 2;    
        assert CFMetaData.SchemaCf.cfId == 3;    
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;testCFMetaDataApply();;;@Test
    public void testCFMetaDataApply() throws ConfigurationException
    {
        Map<ByteBuffer, ColumnDefinition> indexes = new HashMap<ByteBuffer, ColumnDefinition>();
        for (int i = 0; i < 5; i++) 
        {
            ByteBuffer name = ByteBuffer.wrap(new byte[] { (byte)i });
            indexes.put(name, new ColumnDefinition(name, BytesType.instance, IndexType.KEYS, Integer.toString(i)));
        }
        CFMetaData cfm = new CFMetaData("Keyspace1",
                                        "TestApplyCFM_CF",
                                        ColumnFamilyType.Standard,
                                        BytesType.instance,
                                        null);

        cfm.comment("No comment")
           .rowCacheSize(1.0)
           .keyCacheSize(1.0)
           .readRepairChance(0.5)
           .replicateOnWrite(false)
           .gcGraceSeconds(100000)
           .defaultValidator(null)
           .minCompactionThreshold(500)
           .maxCompactionThreshold(500)
           .rowCacheSavePeriod(500)
           .keyCacheSavePeriod(500)
           .memTime(500)
           .memSize(500)
           .memOps(500.0)
           .mergeShardsChance(0.0)
           .columnMetadata(indexes);

        // we'll be adding this one later. make sure it's not already there.
        assert cfm.getColumn_metadata().get(ByteBuffer.wrap(new byte[] { 5 })) == null;
        org.apache.cassandra.db.migration.avro.CfDef cfDef = CFMetaData.convertToAvro(cfm);
        
        // add one.
        org.apache.cassandra.db.migration.avro.ColumnDef addIndexDef = new org.apache.cassandra.db.migration.avro.ColumnDef();
        addIndexDef.index_name = "5";
        addIndexDef.index_type = org.apache.cassandra.db.migration.avro.IndexType.KEYS;
        addIndexDef.name = ByteBuffer.wrap(new byte[] { 5 });
        addIndexDef.validation_class = BytesType.class.getName();
        cfDef.column_metadata.add(addIndexDef);
        
        // remove one.
        org.apache.cassandra.db.migration.avro.ColumnDef removeIndexDef = new org.apache.cassandra.db.migration.avro.ColumnDef();
        removeIndexDef.index_name = "0";
        removeIndexDef.index_type = org.apache.cassandra.db.migration.avro.IndexType.KEYS;
        removeIndexDef.name = ByteBuffer.wrap(new byte[] { 0 });
        removeIndexDef.validation_class = BytesType.class.getName();
        assert cfDef.column_metadata.remove(removeIndexDef);
        
        cfm.apply(cfDef);
        
        for (int i = 1; i < indexes.size(); i++)
            assert cfm.getColumn_metadata().get(ByteBuffer.wrap(new byte[] { 1 })) != null;
        assert cfm.getColumn_metadata().get(ByteBuffer.wrap(new byte[] { 0 })) == null;
        assert cfm.getColumn_metadata().get(ByteBuffer.wrap(new byte[] { 5 })) != null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;testInvalidNames();;;@Test
    public void testInvalidNames() throws IOException
    {
        String[] valid = {"1", "a", "_1", "b_", "__", "1_a"};
        for (String s : valid)
            assert Migration.isLegalName(s);
        
        String[] invalid = {"b@t", "dash-y", "", " ", "dot.s", ".hidden"};
        for (String s : invalid)
            assert !Migration.isLegalName(s);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;saveAndRestore();;;@Test
    public void saveAndRestore() throws IOException
    {
        // verify dump and reload.
        UUID first = UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress());
        DefsTable.dumpToStorage(first);
        List<KSMetaData> defs = new ArrayList<KSMetaData>(DefsTable.loadFromStorage(first));

        assert defs.size() > 0;
        assert defs.size() == DatabaseDescriptor.getNonSystemTables().size();
        for (KSMetaData loaded : defs)
        {
            KSMetaData defined = DatabaseDescriptor.getTableDefinition(loaded.name);
            assert defined.equals(loaded);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;addNewCfToBogusTable();;;@Test
    public void addNewCfToBogusTable() throws InterruptedException
    {
        CFMetaData newCf = addTestCF("MadeUpKeyspace", "NewCF", "new cf");
        try
        {
            new AddColumnFamily(newCf).apply();
            throw new AssertionError("You shouldn't be able to do anything to a keyspace that doesn't exist.");
        }
        catch (ConfigurationException expected)
        {
        }
        catch (IOException unexpected)
        {
            throw new AssertionError("Unexpected exception.");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;testMigrations();;;@Test
    public void testMigrations() throws IOException, ConfigurationException
    {
        // do a save. make sure it doesn't mess with the defs version.
        UUID prior = DatabaseDescriptor.getDefsVersion();
        UUID ver0 = UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress());
        DefsTable.dumpToStorage(ver0);
        assert DatabaseDescriptor.getDefsVersion().equals(prior);

        // add a cf.
        CFMetaData newCf1 = addTestCF("Keyspace1", "MigrationCf_1", "Migration CF");

        Migration m1 = new AddColumnFamily(newCf1);
        m1.apply();
        UUID ver1 = m1.getVersion();
        assert DatabaseDescriptor.getDefsVersion().equals(ver1);
        
        // rename it.
        Migration m2 = new RenameColumnFamily("Keyspace1", "MigrationCf_1", "MigrationCf_2");
        m2.apply();
        UUID ver2 = m2.getVersion();
        assert DatabaseDescriptor.getDefsVersion().equals(ver2);
        
        // drop it.
        Migration m3 = new DropColumnFamily("Keyspace1", "MigrationCf_2");
        m3.apply();
        UUID ver3 = m3.getVersion();
        assert DatabaseDescriptor.getDefsVersion().equals(ver3);
        
        // now lets load the older migrations to see if that code works.
        Collection<IColumn> serializedMigrations = Migration.getLocalMigrations(ver1, ver3);
        assert serializedMigrations.size() == 3;
        
        // test deserialization of the migrations.
        Migration[] reconstituded = new Migration[3];
        int i = 0;
        for (IColumn col : serializedMigrations)
        {
            UUID version = UUIDGen.getUUID(col.name());
            reconstituded[i] = Migration.deserialize(col.value(), MessagingService.version_);
            assert version.equals(reconstituded[i].getVersion());
            i++;
        }
        
        assert m1.getClass().equals(reconstituded[0].getClass());
        assert m2.getClass().equals(reconstituded[1].getClass());
        assert m3.getClass().equals(reconstituded[2].getClass());
        
        // verify that the row mutations are the same. rather than exposing the private fields, serialize and verify.
        assert m1.serialize().equals(reconstituded[0].serialize());
        assert m2.serialize().equals(reconstituded[1].serialize());
        assert m3.serialize().equals(reconstituded[2].serialize());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;addNewCfWithNullComment();;;@Test
    public void addNewCfWithNullComment() throws ConfigurationException, IOException, ExecutionException, InterruptedException
    {
        final String ks = "Keyspace1";
        final String cf = "BrandNewCfWithNull";
        KSMetaData original = DatabaseDescriptor.getTableDefinition(ks);

        CFMetaData newCf = addTestCF(original.name, cf, null);

        assert !DatabaseDescriptor.getTableDefinition(ks).cfMetaData().containsKey(newCf.cfName);
        new AddColumnFamily(newCf).apply();

        assert DatabaseDescriptor.getTableDefinition(ks).cfMetaData().containsKey(newCf.cfName);
        assert DatabaseDescriptor.getTableDefinition(ks).cfMetaData().get(newCf.cfName).equals(newCf);  
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;addNewCF();;;@Test
    public void addNewCF() throws ConfigurationException, IOException, ExecutionException, InterruptedException
    {
        final String ks = "Keyspace1";
        final String cf = "BrandNewCf";
        KSMetaData original = DatabaseDescriptor.getTableDefinition(ks);

        CFMetaData newCf = addTestCF(original.name, cf, "A New Column Family");

        assert !DatabaseDescriptor.getTableDefinition(ks).cfMetaData().containsKey(newCf.cfName);
        new AddColumnFamily(newCf).apply();

        assert DatabaseDescriptor.getTableDefinition(ks).cfMetaData().containsKey(newCf.cfName);
        assert DatabaseDescriptor.getTableDefinition(ks).cfMetaData().get(newCf.cfName).equals(newCf);

        // now read and write to it.
        DecoratedKey dk = Util.dk("key0");
        RowMutation rm = new RowMutation(ks, dk.key);
        rm.add(new QueryPath(cf, null, ByteBufferUtil.bytes("col0")), ByteBufferUtil.bytes("value0"), 1L);
        rm.apply();
        ColumnFamilyStore store = Table.open(ks).getColumnFamilyStore(cf);
        assert store != null;
        store.forceBlockingFlush();
        
        ColumnFamily cfam = store.getColumnFamily(QueryFilter.getNamesFilter(dk, new QueryPath(cf), ByteBufferUtil.bytes("col0")));
        assert cfam.getColumn(ByteBufferUtil.bytes("col0")) != null;
        IColumn col = cfam.getColumn(ByteBufferUtil.bytes("col0"));
        assert ByteBufferUtil.bytes("value0").equals(col.value());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;dropCf();;;@Test
    public void dropCf() throws ConfigurationException, IOException, ExecutionException, InterruptedException
    {
        DecoratedKey dk = Util.dk("dropCf");
        // sanity
        final KSMetaData ks = DatabaseDescriptor.getTableDefinition("Keyspace1");
        assert ks != null;
        final CFMetaData cfm = ks.cfMetaData().get("Standard1");
        assert cfm != null;
        
        // write some data, force a flush, then verify that files exist on disk.
        RowMutation rm = new RowMutation(ks.name, dk.key);
        for (int i = 0; i < 100; i++)
            rm.add(new QueryPath(cfm.cfName, null, ByteBufferUtil.bytes(("col" + i))), ByteBufferUtil.bytes("anyvalue"), 1L);
        rm.apply();
        ColumnFamilyStore store = Table.open(cfm.ksName).getColumnFamilyStore(cfm.cfName);
        assert store != null;
        store.forceBlockingFlush();
        store.getFlushPath(1024, Descriptor.CURRENT_VERSION);
        assert DefsTable.getFiles(cfm.ksName, cfm.cfName).size() > 0;
        
        new DropColumnFamily(ks.name, cfm.cfName).apply();
        
        assert !DatabaseDescriptor.getTableDefinition(ks.name).cfMetaData().containsKey(cfm.cfName);
        
        // any write should fail.
        rm = new RowMutation(ks.name, dk.key);
        boolean success = true;
        try
        {
            rm.add(new QueryPath("Standard1", null, ByteBufferUtil.bytes("col0")), ByteBufferUtil.bytes("value0"), 1L);
            rm.apply();
        }
        catch (Throwable th)
        {
            success = false;
        }
        assert !success : "This mutation should have failed since the CF no longer exists.";

        // verify that the files are gone.
        for (File file : DefsTable.getFiles(cfm.ksName, cfm.cfName))
        {
            if (file.getPath().endsWith("Data.db") && !new File(file.getPath().replace("Data.db", "Compacted")).exists())
                throw new AssertionError("undeleted file " + file);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;renameCf();;;@Test
    public void renameCf() throws ConfigurationException, IOException, ExecutionException, InterruptedException
    {
        DecoratedKey dk = Util.dk("key0");
        final KSMetaData ks = DatabaseDescriptor.getTableDefinition("Keyspace2");
        assert ks != null;
        final CFMetaData oldCfm = ks.cfMetaData().get("Standard1");
        assert oldCfm != null;
        
        // write some data, force a flush, then verify that files exist on disk.
        RowMutation rm = new RowMutation(ks.name, dk.key);
        for (int i = 0; i < 100; i++)
            rm.add(new QueryPath(oldCfm.cfName, null, ByteBufferUtil.bytes(("col" + i))), ByteBufferUtil.bytes("anyvalue"), 1L);
        rm.apply();
        ColumnFamilyStore store = Table.open(oldCfm.ksName).getColumnFamilyStore(oldCfm.cfName);
        assert store != null;
        store.forceBlockingFlush();
        int fileCount = DefsTable.getFiles(oldCfm.ksName, oldCfm.cfName).size();
        assert fileCount > 0;
        
        final String cfName = "St4ndard1Replacement";
        new RenameColumnFamily(oldCfm.ksName, oldCfm.cfName, cfName).apply();
        
        assert !DatabaseDescriptor.getTableDefinition(ks.name).cfMetaData().containsKey(oldCfm.cfName);
        assert DatabaseDescriptor.getTableDefinition(ks.name).cfMetaData().containsKey(cfName);
        
        // verify that new files are there.
        assert DefsTable.getFiles(oldCfm.ksName, cfName).size() == fileCount;
        
        // do some reads.
        store = Table.open(oldCfm.ksName).getColumnFamilyStore(cfName);
        assert store != null;
        ColumnFamily cfam = store.getColumnFamily(QueryFilter.getSliceFilter(dk, new QueryPath(cfName), ByteBufferUtil.EMPTY_BYTE_BUFFER, ByteBufferUtil.EMPTY_BYTE_BUFFER, false, 1000));
        assert cfam.getSortedColumns().size() == 100; // should be good enough?
        
        // do some writes
        rm = new RowMutation(ks.name, dk.key);
        rm.add(new QueryPath(cfName, null, ByteBufferUtil.bytes("col5")), ByteBufferUtil.bytes("updated"), 2L);
        rm.apply();
        store.forceBlockingFlush();
        
        cfam = store.getColumnFamily(QueryFilter.getNamesFilter(dk, new QueryPath(cfName), ByteBufferUtil.bytes("col5")));
        assert cfam.getColumnCount() == 1;
        assert cfam.getColumn(ByteBufferUtil.bytes("col5")).value().equals( ByteBufferUtil.bytes("updated"));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;addNewKS();;;@Test
    public void addNewKS() throws ConfigurationException, IOException, ExecutionException, InterruptedException
    {
        DecoratedKey dk = Util.dk("key0");
        CFMetaData newCf = addTestCF("NewKeyspace1", "AddedStandard1", "A new cf for a new ks");

        KSMetaData newKs = new KSMetaData(newCf.ksName, SimpleStrategy.class, KSMetaData.optsWithRF(5), newCf);
        
        new AddKeyspace(newKs).apply();
        
        assert DatabaseDescriptor.getTableDefinition(newCf.ksName) != null;
        assert DatabaseDescriptor.getTableDefinition(newCf.ksName) == newKs;

        // test reads and writes.
        RowMutation rm = new RowMutation(newCf.ksName, dk.key);
        rm.add(new QueryPath(newCf.cfName, null, ByteBufferUtil.bytes("col0")), ByteBufferUtil.bytes("value0"), 1L);
        rm.apply();
        ColumnFamilyStore store = Table.open(newCf.ksName).getColumnFamilyStore(newCf.cfName);
        assert store != null;
        store.forceBlockingFlush();
        
        ColumnFamily cfam = store.getColumnFamily(QueryFilter.getNamesFilter(dk, new QueryPath(newCf.cfName), ByteBufferUtil.bytes("col0")));
        assert cfam.getColumn(ByteBufferUtil.bytes("col0")) != null;
        IColumn col = cfam.getColumn(ByteBufferUtil.bytes("col0"));
        assert ByteBufferUtil.bytes("value0").equals(col.value());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;dropKS();;;@Test
    public void dropKS() throws ConfigurationException, IOException, ExecutionException, InterruptedException
    {
        DecoratedKey dk = Util.dk("dropKs");
        // sanity
        final KSMetaData ks = DatabaseDescriptor.getTableDefinition("Keyspace1");
        assert ks != null;
        final CFMetaData cfm = ks.cfMetaData().get("Standard2");
        assert cfm != null;

        // write some data, force a flush, then verify that files exist on disk.
        RowMutation rm = new RowMutation(ks.name, dk.key);
        for (int i = 0; i < 100; i++)
            rm.add(new QueryPath(cfm.cfName, null, ByteBufferUtil.bytes(("col" + i))), ByteBufferUtil.bytes("anyvalue"), 1L);
        rm.apply();
        ColumnFamilyStore store = Table.open(cfm.ksName).getColumnFamilyStore(cfm.cfName);
        assert store != null;
        store.forceBlockingFlush();
        assert DefsTable.getFiles(cfm.ksName, cfm.cfName).size() > 0;
        
        new DropKeyspace(ks.name).apply();
        
        assert DatabaseDescriptor.getTableDefinition(ks.name) == null;
        
        // write should fail.
        rm = new RowMutation(ks.name, dk.key);
        boolean success = true;
        try
        {
            rm.add(new QueryPath("Standard1", null, ByteBufferUtil.bytes("col0")), ByteBufferUtil.bytes("value0"), 1L);
            rm.apply();
        }
        catch (Throwable th)
        {
            success = false;
        }
        assert !success : "This mutation should have failed since the CF no longer exists.";

        // reads should fail too.
        boolean threw = false;
        try
        {
            Table.open(ks.name);
        }
        catch (Throwable th)
        {
            threw = true;
        }
        assert threw;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;dropKSUnflushed();;;@Test
    public void dropKSUnflushed() throws ConfigurationException, IOException, ExecutionException, InterruptedException
    {
        DecoratedKey dk = Util.dk("dropKs");
        // sanity
        final KSMetaData ks = DatabaseDescriptor.getTableDefinition("Keyspace3");
        assert ks != null;
        final CFMetaData cfm = ks.cfMetaData().get("Standard1");
        assert cfm != null;

        // write some data
        RowMutation rm = new RowMutation(ks.name, dk.key);
        for (int i = 0; i < 100; i++)
            rm.add(new QueryPath(cfm.cfName, null, ByteBufferUtil.bytes(("col" + i))), ByteBufferUtil.bytes("anyvalue"), 1L);
        rm.apply();

        new DropKeyspace(ks.name).apply();

        assert DatabaseDescriptor.getTableDefinition(ks.name) == null;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;renameKs();;;@Test
    public void renameKs() throws ConfigurationException, IOException, ExecutionException, InterruptedException
    {
        DecoratedKey dk = Util.dk("renameKs");
        final KSMetaData oldKs = DatabaseDescriptor.getTableDefinition("Keyspace2");
        assert oldKs != null;
        final String cfName = "Standard3";
        assert oldKs.cfMetaData().containsKey(cfName);
        assert oldKs.cfMetaData().get(cfName).ksName.equals(oldKs.name);
        
        // write some data that we hope to read back later.
        RowMutation rm = new RowMutation(oldKs.name, dk.key);
        for (int i = 0; i < 10; i++)
            rm.add(new QueryPath(cfName, null, ByteBufferUtil.bytes(("col" + i))), ByteBufferUtil.bytes("value"), 1L);
        rm.apply();
        ColumnFamilyStore store = Table.open(oldKs.name).getColumnFamilyStore(cfName);
        assert store != null;
        store.forceBlockingFlush();
        assert DefsTable.getFiles(oldKs.name, cfName).size() > 0;
        
        final String newKsName = "RenamedKeyspace2";
        new RenameKeyspace(oldKs.name, newKsName).apply();
        KSMetaData newKs = DatabaseDescriptor.getTableDefinition(newKsName);
        
        assert DatabaseDescriptor.getTableDefinition(oldKs.name) == null;
        assert newKs != null;
        assert newKs.name.equals(newKsName);
        assert newKs.cfMetaData().containsKey(cfName);
        assert newKs.cfMetaData().get(cfName).ksName.equals(newKsName);
        assert DefsTable.getFiles(newKs.name, cfName).size() > 0;
        
        // read on old should fail.
        // reads should fail too.
        boolean threw = false;
        try
        {
            Table.open(oldKs.name);
        }
        catch (Throwable th)
        {
            threw = true;
        }
        assert threw;
        
        // write on old should fail.
        rm = new RowMutation(oldKs.name, ByteBufferUtil.bytes("any key will do"));
        boolean success = true;
        try
        {
            rm.add(new QueryPath(cfName, null, ByteBufferUtil.bytes("col0")), ByteBufferUtil.bytes("value0"), 1L);
            rm.apply();
        }
        catch (Throwable th)
        {
            success = false;
        }
        assert !success : "This mutation should have failed since the CF/Table no longer exists.";
        
        // write on new should work.
        rm = new RowMutation(newKsName, dk.key);
        rm.add(new QueryPath(cfName, null, ByteBufferUtil.bytes("col0")), ByteBufferUtil.bytes("newvalue"), 2L);
        rm.apply();
        store = Table.open(newKs.name).getColumnFamilyStore(cfName);
        assert store != null;
        store.forceBlockingFlush();
        
        // read on new should work.
        SortedSet<ByteBuffer> cols = new TreeSet<ByteBuffer>(BytesType.instance);
        cols.add(ByteBufferUtil.bytes("col0"));
        cols.add(ByteBufferUtil.bytes("col1"));
        ColumnFamily cfam = store.getColumnFamily(QueryFilter.getNamesFilter(dk, new QueryPath(cfName), cols));
        assert cfam.getColumnCount() == cols.size();
        // tests new write.
        
        ByteBuffer val = cfam.getColumn(ByteBufferUtil.bytes("col0")).value();
        assertEquals(ByteBufferUtil.string(val), "newvalue");
        // tests old write.
         val = cfam.getColumn(ByteBufferUtil.bytes("col1")).value();
        assertEquals(ByteBufferUtil.string(val), "value");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;createEmptyKsAddNewCf();;;@Test
    public void createEmptyKsAddNewCf() throws ConfigurationException, IOException, ExecutionException, InterruptedException
    {
        assert DatabaseDescriptor.getTableDefinition("EmptyKeyspace") == null;
        
        KSMetaData newKs = new KSMetaData("EmptyKeyspace", SimpleStrategy.class, KSMetaData.optsWithRF(5));

        new AddKeyspace(newKs).apply();
        assert DatabaseDescriptor.getTableDefinition("EmptyKeyspace") != null;

        CFMetaData newCf = addTestCF("EmptyKeyspace", "AddedLater", "A new CF to add to an empty KS");

        //should not exist until apply
        assert !DatabaseDescriptor.getTableDefinition(newKs.name).cfMetaData().containsKey(newCf.cfName);

        //add the new CF to the empty space
        new AddColumnFamily(newCf).apply();

        assert DatabaseDescriptor.getTableDefinition(newKs.name).cfMetaData().containsKey(newCf.cfName);
        assert DatabaseDescriptor.getTableDefinition(newKs.name).cfMetaData().get(newCf.cfName).equals(newCf);

        // now read and write to it.
        DecoratedKey dk = Util.dk("key0");
        RowMutation rm = new RowMutation(newKs.name, dk.key);
        rm.add(new QueryPath(newCf.cfName, null, ByteBufferUtil.bytes("col0")), ByteBufferUtil.bytes("value0"), 1L);
        rm.apply();
        ColumnFamilyStore store = Table.open(newKs.name).getColumnFamilyStore(newCf.cfName);
        assert store != null;
        store.forceBlockingFlush();

        ColumnFamily cfam = store.getColumnFamily(QueryFilter.getNamesFilter(dk, new QueryPath(newCf.cfName), ByteBufferUtil.bytes("col0")));
        assert cfam.getColumn(ByteBufferUtil.bytes("col0")) != null;
        IColumn col = cfam.getColumn(ByteBufferUtil.bytes("col0"));
        assert ByteBufferUtil.bytes("value0").equals(col.value());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;testUpdateKeyspace();;;@Test
    public void testUpdateKeyspace() throws ConfigurationException, IOException, ExecutionException, InterruptedException
    {
        // create a keyspace to serve as existing.
        CFMetaData cf = addTestCF("UpdatedKeyspace", "AddedStandard1", "A new cf for a new ks");
        KSMetaData oldKs = new KSMetaData(cf.ksName, SimpleStrategy.class, KSMetaData.optsWithRF(5), cf);
        
        new AddKeyspace(oldKs).apply();
        
        assert DatabaseDescriptor.getTableDefinition(cf.ksName) != null;
        assert DatabaseDescriptor.getTableDefinition(cf.ksName) == oldKs;
        
        // anything with cf defs should fail.
        CFMetaData cf2 = addTestCF(cf.ksName, "AddedStandard2", "A new cf for a new ks");
        KSMetaData newBadKs = new KSMetaData(cf.ksName, SimpleStrategy.class, KSMetaData.optsWithRF(4), cf2);
        try
        {
            new UpdateKeyspace(newBadKs).apply();
            throw new AssertionError("Should not have been able to update a KS with a KS that described column families.");
        }
        catch (ConfigurationException ex)
        {
            // expected.
        }
        
        // names should match.
        KSMetaData newBadKs2 = new KSMetaData(cf.ksName + "trash", SimpleStrategy.class, KSMetaData.optsWithRF(4));
        try
        {
            new UpdateKeyspace(newBadKs2).apply();
            throw new AssertionError("Should not have been able to update a KS with an invalid KS name.");
        }
        catch (ConfigurationException ex)
        {
            // expected.
        }
        
        KSMetaData newKs = new KSMetaData(cf.ksName, OldNetworkTopologyStrategy.class, KSMetaData.optsWithRF(1));
        new UpdateKeyspace(newKs).apply();
        
        KSMetaData newFetchedKs = DatabaseDescriptor.getKSMetaData(newKs.name);
        assert newFetchedKs.strategyClass.equals(newKs.strategyClass);
        assert !newFetchedKs.strategyClass.equals(oldKs.strategyClass);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;testUpdateColumnFamilyNoIndexes();;;@Test
    public void testUpdateColumnFamilyNoIndexes() throws ConfigurationException, IOException, ExecutionException, InterruptedException
    {
        // create a keyspace with a cf to update.
        CFMetaData cf = addTestCF("UpdatedCfKs", "Standard1added", "A new cf that will be updated");
        KSMetaData ksm = new KSMetaData(cf.ksName, SimpleStrategy.class, KSMetaData.optsWithRF(1), cf);
        new AddKeyspace(ksm).apply();
        
        assert DatabaseDescriptor.getTableDefinition(cf.ksName) != null;
        assert DatabaseDescriptor.getTableDefinition(cf.ksName) == ksm;
        assert DatabaseDescriptor.getCFMetaData(cf.ksName, cf.cfName) != null;
        
        // updating certain fields should fail.
        org.apache.cassandra.db.migration.avro.CfDef cf_def = CFMetaData.convertToAvro(cf);
        cf_def.row_cache_size = 43.3;
        cf_def.column_metadata = new ArrayList<org.apache.cassandra.db.migration.avro.ColumnDef>();
        cf_def.default_validation_class ="BytesType";
        cf_def.min_compaction_threshold = 5;
        cf_def.max_compaction_threshold = 31;
        
        // test valid operations.
        cf_def.comment = "Modified comment";
        new UpdateColumnFamily(cf_def).apply(); // doesn't get set back here.
        
        cf_def.row_cache_size = 2d;
        new UpdateColumnFamily(cf_def).apply();
        
        cf_def.key_cache_size = 3d;
        new UpdateColumnFamily(cf_def).apply();
        
        cf_def.read_repair_chance = 0.23;
        new UpdateColumnFamily(cf_def).apply();
        
        cf_def.gc_grace_seconds = 12;
        new UpdateColumnFamily(cf_def).apply();
        
        cf_def.default_validation_class = "UTF8Type";
        new UpdateColumnFamily(cf_def).apply();

        cf_def.min_compaction_threshold = 3;
        new UpdateColumnFamily(cf_def).apply();

        cf_def.max_compaction_threshold = 33;
        new UpdateColumnFamily(cf_def).apply();

        // can't test changing the reconciler because there is only one impl.
        
        // check the cumulative affect.
        assert DatabaseDescriptor.getCFMetaData(cf.ksName, cf.cfName).getComment().equals(cf_def.comment);
        assert DatabaseDescriptor.getCFMetaData(cf.ksName, cf.cfName).getRowCacheSize() == cf_def.row_cache_size;
        assert DatabaseDescriptor.getCFMetaData(cf.ksName, cf.cfName).getKeyCacheSize() == cf_def.key_cache_size;
        assert DatabaseDescriptor.getCFMetaData(cf.ksName, cf.cfName).getReadRepairChance() == cf_def.read_repair_chance;
        assert DatabaseDescriptor.getCFMetaData(cf.ksName, cf.cfName).getGcGraceSeconds() == cf_def.gc_grace_seconds;
        assert DatabaseDescriptor.getCFMetaData(cf.ksName, cf.cfName).getDefaultValidator() == UTF8Type.instance;
        
        // todo: we probably don't need to reset old values in the catches anymore.
        // make sure some invalid operations fail.
        int oldId = cf_def.id;
        try
        {
            cf_def.id++;
            cf.apply(cf_def);
            throw new AssertionError("Should have blown up when you used a different id.");
        }
        catch (ConfigurationException expected) 
        {
            cf_def.id = oldId;    
        }
        
        CharSequence oldStr = cf_def.name;
        try
        {
            cf_def.name = cf_def.name + "_renamed";
            cf.apply(cf_def);
            throw new AssertionError("Should have blown up when you used a different name.");
        }
        catch (ConfigurationException expected)
        {
            cf_def.name = oldStr;
        }
        
        oldStr = cf_def.keyspace;
        try
        {
            cf_def.keyspace = oldStr + "_renamed";
            cf.apply(cf_def);
            throw new AssertionError("Should have blown up when you used a different keyspace.");
        }
        catch (ConfigurationException expected)
        {
            cf_def.keyspace = oldStr;
        }
        
        try
        {
            cf_def.column_type = ColumnFamilyType.Super.name();
            cf.apply(cf_def);
            throw new AssertionError("Should have blwon up when you used a different cf type.");
        }
        catch (ConfigurationException expected)
        {
            cf_def.column_type = ColumnFamilyType.Standard.name();
        }
        
        oldStr = cf_def.comparator_type;
        try 
        {
            cf_def.comparator_type = BytesType.class.getSimpleName();
            cf.apply(cf_def);
            throw new AssertionError("Should have blown up when you used a different comparator.");
        }
        catch (ConfigurationException expected)
        {
            cf_def.comparator_type = UTF8Type.class.getSimpleName();
        }

        try
        {
            cf_def.min_compaction_threshold = 34;
            cf.apply(cf_def);
            throw new AssertionError("Should have blown up when min > max.");
        }
        catch (ConfigurationException expected)
        {
            cf_def.min_compaction_threshold = 3;
        }

        try
        {
            cf_def.max_compaction_threshold = 2;
            cf.apply(cf_def);
            throw new AssertionError("Should have blown up when max > min.");
        }
        catch (ConfigurationException expected)
        {
            cf_def.max_compaction_threshold = 33;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;testDropIndex();;;@Test
    public void testDropIndex() throws IOException, ExecutionException, InterruptedException, ConfigurationException
    {
        // insert some data.  save the sstable descriptor so we can make sure it's marked for delete after the drop
        RowMutation rm = new RowMutation("Keyspace6", ByteBufferUtil.bytes("k1"));
        rm.add(new QueryPath("Indexed1", null, ByteBufferUtil.bytes("notbirthdate")), ByteBufferUtil.bytes(1L), 0);
        rm.add(new QueryPath("Indexed1", null, ByteBufferUtil.bytes("birthdate")), ByteBufferUtil.bytes(1L), 0);
        rm.apply();
        ColumnFamilyStore cfs = Table.open("Keyspace6").getColumnFamilyStore("Indexed1");
        cfs.forceBlockingFlush();
        ColumnFamilyStore indexedCfs = cfs.getIndexedColumnFamilyStore(cfs.getIndexedColumns().iterator().next());
        Descriptor desc = indexedCfs.getSSTables().iterator().next().descriptor;

        // drop the index
        CFMetaData meta = CFMetaData.rename(cfs.metadata, cfs.metadata.cfName); // abusing rename to clone
        ColumnDefinition cdOld = meta.getColumn_metadata().values().iterator().next();
        ColumnDefinition cdNew = new ColumnDefinition(cdOld.name, cdOld.getValidator(), null, null);
        meta.columnMetadata(Collections.singletonMap(cdOld.name, cdNew));
        UpdateColumnFamily update = new UpdateColumnFamily(CFMetaData.convertToAvro(meta));
        update.apply();

        // check
        assert cfs.getIndexedColumns().isEmpty();
        ColumnFamilyStore.scrubDataDirectories("Keyspace6", "Indexed1");
        assert !new File(desc.filenameFor(Component.DATA)).exists();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\DefsTest;addTestCF(String,String,String);;;private CFMetaData addTestCF(String ks, String cf, String comment)
    {
        CFMetaData newCFMD = new CFMetaData(ks, cf, ColumnFamilyType.Standard, UTF8Type.instance, null);
        newCFMD.comment(comment)
               .keyCacheSize(1.0)
               .readRepairChance(0.0)
               .mergeShardsChance(0.0);

        return newCFMD;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\RecoveryManagerTest;testRecoverCounter();;;@Test
    public void testRecoverCounter() throws IOException, ExecutionException, InterruptedException
    {
        Table table1 = Table.open("Keyspace1");

        RowMutation rm;
        DecoratedKey dk = Util.dk("key");
        ColumnFamily cf;

        for (int i = 0; i < 10; ++i)
        {
            rm = new RowMutation("Keyspace1", dk.key);
            cf = ColumnFamily.create("Keyspace1", "Counter1");
            cf.addColumn(new CounterColumn(ByteBufferUtil.bytes("col"), 1L, 1L));
            rm.add(cf);
            rm.apply();
        }

        table1.getColumnFamilyStore("Counter1").clearUnsafe();

        CommitLog.instance.resetUnsafe(); // disassociate segments from live CL
        CommitLog.recover();

        cf = Util.getColumnFamily(table1, dk, "Counter1");

        assert cf.getColumnCount() == 1;
        IColumn c = cf.getColumn(ByteBufferUtil.bytes("col"));

        assert c != null;
        assert ((CounterColumn)c).total() == 10L;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\SuperColumnTest;testAddColumnIncrementCounter();;;@Test
    public void testAddColumnIncrementCounter()
    {
        ContextState state;

    	SuperColumn sc = new SuperColumn(ByteBufferUtil.bytes("sc1"), LongType.instance);

        state = ContextState.allocate(4, 1);
        state.writeElement(NodeId.fromInt(1), 7L, 0L);
        state.writeElement(NodeId.fromInt(2), 5L, 7L);
        state.writeElement(NodeId.fromInt(4), 2L, 9L);
        state.writeElement(NodeId.getLocalId(), 3L, 3L, true);
        sc.addColumn(new CounterColumn(getBytes(1), state.context, 3L, 0L));

        state = ContextState.allocate(4, 1);
        state.writeElement(NodeId.fromInt(2), 3L, 4L);
        state.writeElement(NodeId.fromInt(4), 4L, 1L);
        state.writeElement(NodeId.fromInt(8), 9L, 0L);
        state.writeElement(NodeId.getLocalId(), 9L, 5L, true);
        sc.addColumn(new CounterColumn(getBytes(1), state.context, 10L, 0L));

        state = ContextState.allocate(3, 0);
        state.writeElement(NodeId.fromInt(2), 1L, 0L);
        state.writeElement(NodeId.fromInt(3), 6L, 0L);
        state.writeElement(NodeId.fromInt(7), 3L, 0L);
        sc.addColumn(new CounterColumn(getBytes(2), state.context, 9L, 0L));
                    
    	assertNotNull(sc.getSubColumn(getBytes(1)));
    	assertNull(sc.getSubColumn(getBytes(3)));

        // column: 1
        ContextState c1 = ContextState.allocate(5, 1);
        c1.writeElement(NodeId.fromInt(1), 7L, 0L);
        c1.writeElement(NodeId.fromInt(2), 5L, 7L);
        c1.writeElement(NodeId.fromInt(4), 4L, 1L);
        c1.writeElement(NodeId.fromInt(8), 9L, 0L);
        c1.writeElement(NodeId.getLocalId(), 12L, 8L, true);
        assert 0 == ByteBufferUtil.compareSubArrays(
            ((CounterColumn)sc.getSubColumn(getBytes(1))).value(),
            0,
            c1.context,
            0,
            c1.context.remaining());

        // column: 2
        ContextState c2 = ContextState.allocate(3, 0);
        c2.writeElement(NodeId.fromInt(2), 1L, 0L);
        c2.writeElement(NodeId.fromInt(3), 6L, 0L);
        c2.writeElement(NodeId.fromInt(7), 3L, 0L);
        assert 0 == ByteBufferUtil.compareSubArrays(
            ((CounterColumn)sc.getSubColumn(getBytes(2))).value(),
            0,
            c2.context,
            0,
            c2.context.remaining());

    	assertNotNull(sc.getSubColumn(getBytes(1)));
    	assertNotNull(sc.getSubColumn(getBytes(2)));
    	assertNull(sc.getSubColumn(getBytes(3)));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\SystemTableTest;testLocalToken();;;@Test
    public void testLocalToken()
    {
        SystemTable.updateToken(new BytesToken(ByteBufferUtil.bytes("token")));
        assert new String(((BytesToken) SystemTable.getSavedToken()).token, Charsets.UTF_8).equals("token");

        SystemTable.updateToken(new BytesToken(ByteBufferUtil.bytes("token2")));
        assert new String(((BytesToken) SystemTable.getSavedToken()).token, Charsets.UTF_8).equals("token2");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\SystemTableTest;testNonLocalToken();;;@Test
    public void testNonLocalToken() throws UnknownHostException
    {
        BytesToken token = new BytesToken(ByteBufferUtil.bytes("token3"));
        InetAddress address = InetAddress.getByName("127.0.0.2");
        SystemTable.updateToken(address, token);
        assert SystemTable.loadTokens().get(token).equals(address);
        SystemTable.removeToken(token);
        assert !SystemTable.loadTokens().containsKey(token);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\context\CounterContextTest;testCreate();;;@Test
    public void testCreate()
    {
        ByteBuffer context = cc.create(4);
        assert context.remaining() == stepLength + 4;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\context\CounterContextTest;testDiff();;;@Test
    public void testDiff()
    {
        ContextState left = ContextState.allocate(3, 0);
        ContextState right;

        // equality: equal nodes, all counts same
        left.writeElement(NodeId.fromInt(3), 3L, 0L);
        left.writeElement(NodeId.fromInt(6), 2L, 0L);
        left.writeElement(NodeId.fromInt(9), 1L, 0L);
        right = new ContextState(ByteBufferUtil.clone(left.context), left.headerLength);

        assert ContextRelationship.EQUAL ==
            cc.diff(left.context, right.context);

        // greater than: left has superset of nodes (counts equal)
        left = ContextState.allocate(4, 0);
        left.writeElement(NodeId.fromInt(3),  3L, 0L);
        left.writeElement(NodeId.fromInt(6),  2L, 0L);
        left.writeElement(NodeId.fromInt(9),  1L, 0L);
        left.writeElement(NodeId.fromInt(12), 0L, 0L);

        right = ContextState.allocate(3, 0);
        right.writeElement(NodeId.fromInt(3), 3L, 0L);
        right.writeElement(NodeId.fromInt(6), 2L, 0L);
        right.writeElement(NodeId.fromInt(9), 1L, 0L);

        assert ContextRelationship.GREATER_THAN ==
            cc.diff(left.context, right.context);
        
        // less than: left has subset of nodes (counts equal)
        left = ContextState.allocate(3, 0);
        left.writeElement(NodeId.fromInt(3), 3L, 0L);
        left.writeElement(NodeId.fromInt(6), 2L, 0L);
        left.writeElement(NodeId.fromInt(9), 1L, 0L);

        right = ContextState.allocate(4, 0);
        right.writeElement(NodeId.fromInt(3),  3L, 0L);
        right.writeElement(NodeId.fromInt(6),  2L, 0L);
        right.writeElement(NodeId.fromInt(9),  1L, 0L);
        right.writeElement(NodeId.fromInt(12), 0L, 0L);

        assert ContextRelationship.LESS_THAN ==
            cc.diff(left.context, right.context);

        // greater than: equal nodes, but left has higher counts
        left = ContextState.allocate(3, 0);
        left.writeElement(NodeId.fromInt(3), 3L, 0L);
        left.writeElement(NodeId.fromInt(6), 2L, 0L);
        left.writeElement(NodeId.fromInt(9), 3L, 0L);

        right = ContextState.allocate(3, 0);
        right.writeElement(NodeId.fromInt(3), 3L, 0L);
        right.writeElement(NodeId.fromInt(6), 2L, 0L);
        right.writeElement(NodeId.fromInt(9), 1L, 0L);

        assert ContextRelationship.GREATER_THAN ==
            cc.diff(left.context, right.context);

        // less than: equal nodes, but right has higher counts
        left = ContextState.allocate(3, 0);
        left.writeElement(NodeId.fromInt(3), 3L, 0L);
        left.writeElement(NodeId.fromInt(6), 2L, 0L);
        left.writeElement(NodeId.fromInt(9), 3L, 0L);

        right = ContextState.allocate(3, 0);
        right.writeElement(NodeId.fromInt(3), 3L, 0L);
        right.writeElement(NodeId.fromInt(6), 9L, 0L);
        right.writeElement(NodeId.fromInt(9), 3L, 0L);

        assert ContextRelationship.LESS_THAN ==
            cc.diff(left.context, right.context);

        // disjoint: right and left have disjoint node sets
        left = ContextState.allocate(3, 0);
        left.writeElement(NodeId.fromInt(3), 1L, 0L);
        left.writeElement(NodeId.fromInt(4), 1L, 0L);
        left.writeElement(NodeId.fromInt(9), 1L, 0L);

        right = ContextState.allocate(3, 0);
        right.writeElement(NodeId.fromInt(3), 1L, 0L);
        right.writeElement(NodeId.fromInt(6), 1L, 0L);
        right.writeElement(NodeId.fromInt(9), 1L, 0L);

        assert ContextRelationship.DISJOINT ==
            cc.diff(left.context, right.context);

        left = ContextState.allocate(3, 0);
        left.writeElement(NodeId.fromInt(3), 1L, 0L);
        left.writeElement(NodeId.fromInt(4), 1L, 0L);
        left.writeElement(NodeId.fromInt(9), 1L, 0L);

        right = ContextState.allocate(3, 0);
        right.writeElement(NodeId.fromInt(2),  1L, 0L);
        right.writeElement(NodeId.fromInt(6),  1L, 0L);
        right.writeElement(NodeId.fromInt(12), 1L, 0L);

        assert ContextRelationship.DISJOINT ==
            cc.diff(left.context, right.context);

        // disjoint: equal nodes, but right and left have higher counts in differing nodes
        left = ContextState.allocate(3, 0);
        left.writeElement(NodeId.fromInt(3), 1L, 0L);
        left.writeElement(NodeId.fromInt(6), 3L, 0L);
        left.writeElement(NodeId.fromInt(9), 1L, 0L);

        right = ContextState.allocate(3, 0);
        right.writeElement(NodeId.fromInt(3), 1L, 0L);
        right.writeElement(NodeId.fromInt(6), 1L, 0L);
        right.writeElement(NodeId.fromInt(9), 5L, 0L);

        assert ContextRelationship.DISJOINT ==
            cc.diff(left.context, right.context);

        left = ContextState.allocate(3, 0);
        left.writeElement(NodeId.fromInt(3), 2L, 0L);
        left.writeElement(NodeId.fromInt(6), 3L, 0L);
        left.writeElement(NodeId.fromInt(9), 1L, 0L);

        right = ContextState.allocate(3, 0);
        right.writeElement(NodeId.fromInt(3), 1L, 0L);
        right.writeElement(NodeId.fromInt(6), 9L, 0L);
        right.writeElement(NodeId.fromInt(9), 5L, 0L);

        assert ContextRelationship.DISJOINT ==
            cc.diff(left.context, right.context);

        // disjoint: left has more nodes, but lower counts
        left = ContextState.allocate(4, 0);
        left.writeElement(NodeId.fromInt(3),  2L, 0L);
        left.writeElement(NodeId.fromInt(6),  3L, 0L);
        left.writeElement(NodeId.fromInt(9),  1L, 0L);
        left.writeElement(NodeId.fromInt(12), 1L, 0L);

        right = ContextState.allocate(3, 0);
        right.writeElement(NodeId.fromInt(3), 4L, 0L);
        right.writeElement(NodeId.fromInt(6), 9L, 0L);
        right.writeElement(NodeId.fromInt(9), 5L, 0L);

        assert ContextRelationship.DISJOINT ==
            cc.diff(left.context, right.context);
        
        // disjoint: left has less nodes, but higher counts
        left = ContextState.allocate(3, 0);
        left.writeElement(NodeId.fromInt(3), 5L, 0L);
        left.writeElement(NodeId.fromInt(6), 3L, 0L);
        left.writeElement(NodeId.fromInt(9), 2L, 0L);

        right = ContextState.allocate(4, 0);
        right.writeElement(NodeId.fromInt(3),  4L, 0L);
        right.writeElement(NodeId.fromInt(6),  3L, 0L);
        right.writeElement(NodeId.fromInt(9),  2L, 0L);
        right.writeElement(NodeId.fromInt(12), 1L, 0L);

        assert ContextRelationship.DISJOINT ==
            cc.diff(left.context, right.context);

        // disjoint: mixed nodes and counts
        left = ContextState.allocate(3, 0);
        left.writeElement(NodeId.fromInt(3), 5L, 0L);
        left.writeElement(NodeId.fromInt(6), 2L, 0L);
        left.writeElement(NodeId.fromInt(9), 2L, 0L);

        right = ContextState.allocate(4, 0);
        right.writeElement(NodeId.fromInt(3),  4L, 0L);
        right.writeElement(NodeId.fromInt(6),  3L, 0L);
        right.writeElement(NodeId.fromInt(9),  2L, 0L);
        right.writeElement(NodeId.fromInt(12), 1L, 0L);

        assert ContextRelationship.DISJOINT ==
            cc.diff(left.context, right.context);

        left = ContextState.allocate(4, 0);
        left.writeElement(NodeId.fromInt(3), 5L, 0L);
        left.writeElement(NodeId.fromInt(6), 2L, 0L);
        left.writeElement(NodeId.fromInt(7), 2L, 0L);
        left.writeElement(NodeId.fromInt(9), 2L, 0L);

        right = ContextState.allocate(3, 0);
        right.writeElement(NodeId.fromInt(3), 4L, 0L);
        right.writeElement(NodeId.fromInt(6), 3L, 0L);
        right.writeElement(NodeId.fromInt(9), 2L, 0L);

        assert ContextRelationship.DISJOINT ==
            cc.diff(left.context, right.context);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\context\CounterContextTest;testMerge();;;@Test
    public void testMerge()
    {
        // note: local counts aggregated; remote counts are reconciled (i.e. take max)
        ContextState left = ContextState.allocate(4, 1);
        left.writeElement(NodeId.fromInt(1), 1L, 1L);
        left.writeElement(NodeId.fromInt(2), 2L, 2L);
        left.writeElement(NodeId.fromInt(4), 6L, 3L);
        left.writeElement(NodeId.getLocalId(), 7L, 3L, true);

        ContextState right = ContextState.allocate(3, 1);
        right.writeElement(NodeId.fromInt(4), 4L, 4L);
        right.writeElement(NodeId.fromInt(5), 5L, 5L);
        right.writeElement(NodeId.getLocalId(), 2L, 9L, true);

        ByteBuffer merged = cc.merge(left.context, right.context);
        int hd = 4;

        assertEquals(hd + 5 * stepLength, merged.remaining());
        // local node id's counts are aggregated
        assert Util.equalsNodeId(NodeId.getLocalId(), merged, hd + 4*stepLength);
        assertEquals(  9L, merged.getLong(hd + 4*stepLength + idLength));
        assertEquals(12L,  merged.getLong(hd + 4*stepLength + idLength + clockLength));

        // remote node id counts are reconciled (i.e. take max)
        assert Util.equalsNodeId(NodeId.fromInt(4), merged, hd + 2*stepLength);
        assertEquals( 6L,  merged.getLong(hd + 2*stepLength + idLength));
        assertEquals( 3L,  merged.getLong(hd + 2*stepLength + idLength + clockLength));

        assert Util.equalsNodeId(NodeId.fromInt(5), merged, hd + 3*stepLength);
        assertEquals( 5L,  merged.getLong(hd + 3*stepLength + idLength));
        assertEquals( 5L,  merged.getLong(hd + 3*stepLength + idLength + clockLength));

        assert Util.equalsNodeId(NodeId.fromInt(2), merged, hd + 1*stepLength);
        assertEquals( 2L,  merged.getLong(hd + 1*stepLength + idLength));
        assertEquals( 2L,  merged.getLong(hd + 1*stepLength + idLength + clockLength));

        assert Util.equalsNodeId(NodeId.fromInt(1), merged, hd + 0*stepLength);
        assertEquals( 1L,  merged.getLong(hd + 0*stepLength + idLength));
        assertEquals( 1L,  merged.getLong(hd + 0*stepLength + idLength + clockLength));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\context\CounterContextTest;testTotal();;;@Test
    public void testTotal()
    {
        ContextState left = ContextState.allocate(4, 1);
        left.writeElement(NodeId.fromInt(1), 1L, 1L);
        left.writeElement(NodeId.fromInt(2), 2L, 2L);
        left.writeElement(NodeId.fromInt(4), 3L, 3L);
        left.writeElement(NodeId.getLocalId(), 3L, 3L, true);

        ContextState right = ContextState.allocate(3, 1);
        right.writeElement(NodeId.fromInt(4), 4L, 4L);
        right.writeElement(NodeId.fromInt(5), 5L, 5L);
        right.writeElement(NodeId.getLocalId(), 9L, 9L, true);

        ByteBuffer merged = cc.merge(left.context, right.context);

        // 127.0.0.1: 12 (3+9)
        // 0.0.0.1:    1
        // 0.0.0.2:    2
        // 0.0.0.4:    4
        // 0.0.0.5:    5

        assertEquals(24L, cc.total(merged));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\context\CounterContextTest;testMergeOldShards();;;@Test
    public void testMergeOldShards()
    {
        long now = System.currentTimeMillis();
        NodeId id1 = NodeId.fromInt(1);
        NodeId id3 = NodeId.fromInt(3);
        List<NodeId.NodeIdRecord> records = new ArrayList<NodeId.NodeIdRecord>();
        records.add(new NodeId.NodeIdRecord(id1, 2L));
        records.add(new NodeId.NodeIdRecord(id3, 4L));

        // Destination of merge is a delta
        ContextState ctx = ContextState.allocate(5, 2);
        ctx.writeElement(id1, 1L, 1L);
        ctx.writeElement(NodeId.fromInt(2), 2L, 2L);
        ctx.writeElement(id3, 3L, 3L, true);
        ctx.writeElement(NodeId.fromInt(4), 6L, 3L);
        ctx.writeElement(NodeId.fromInt(5), 7L, 3L, true);

        ByteBuffer merger = cc.computeOldShardMerger(ctx.context, records);
        ContextState m = new ContextState(merger);

        assert m.getNodeId().equals(id1);
        assert m.getClock() <= -now;
        assert m.getCount() == 0;
        m.moveToNext();
        assert m.getNodeId().equals(id3);
        assert m.getClock() == 4L;
        assert m.getCount() == 1L;
        assert cc.total(ctx.context) == cc.total(cc.merge(ctx.context, merger));

        // Source of merge is a delta
        ctx = ContextState.allocate(4, 1);
        ctx.writeElement(id1, 1L, 1L, true);
        ctx.writeElement(NodeId.fromInt(2), 2L, 2L);
        ctx.writeElement(id3, 3L, 3L);
        ctx.writeElement(NodeId.fromInt(4), 6L, 3L);

        merger = cc.computeOldShardMerger(ctx.context, records);
        assert cc.total(ctx.context) == cc.total(cc.merge(ctx.context, merger));

        // source and destination of merge are deltas
        ctx = ContextState.allocate(4, 2);
        ctx.writeElement(id1, 1L, 1L, true);
        ctx.writeElement(NodeId.fromInt(2), 2L, 2L);
        ctx.writeElement(id3, 3L, 3L, true);
        ctx.writeElement(NodeId.fromInt(4), 6L, 3L);

        merger = cc.computeOldShardMerger(ctx.context, records);
        assert cc.total(ctx.context) == cc.total(cc.merge(ctx.context, merger));

        // none of source and destination of merge are deltas
        ctx = ContextState.allocate(4, 0);
        ctx.writeElement(id1, 1L, 1L);
        ctx.writeElement(NodeId.fromInt(2), 2L, 2L);
        ctx.writeElement(id3, 3L, 3L);
        ctx.writeElement(NodeId.fromInt(4), 6L, 3L);

        merger = cc.computeOldShardMerger(ctx.context, records);
        assert cc.total(ctx.context) == cc.total(cc.merge(ctx.context, merger));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\context\CounterContextTest;testRemoveOldShards();;;@Test
    public void testRemoveOldShards()
    {
        NodeId id1 = NodeId.fromInt(1);
        NodeId id3 = NodeId.fromInt(3);
        NodeId id6 = NodeId.fromInt(6);
        List<NodeId.NodeIdRecord> records = new ArrayList<NodeId.NodeIdRecord>();
        records.add(new NodeId.NodeIdRecord(id1, 2L));
        records.add(new NodeId.NodeIdRecord(id3, 4L));
        records.add(new NodeId.NodeIdRecord(id6, 10L));

        ContextState ctx = ContextState.allocate(6, 2);
        ctx.writeElement(id1, 1L, 1L);
        ctx.writeElement(NodeId.fromInt(2), 2L, 2L);
        ctx.writeElement(id3, 3L, 3L, true);
        ctx.writeElement(NodeId.fromInt(4), 6L, 3L);
        ctx.writeElement(NodeId.fromInt(5), 7L, 3L, true);
        ctx.writeElement(id6, 5L, 6L);

        ByteBuffer merger = cc.computeOldShardMerger(ctx.context, records);
        ByteBuffer merged = cc.merge(ctx.context, merger);
        assert cc.total(ctx.context) == cc.total(merged);

        ByteBuffer cleaned = cc.removeOldShards(merged, (int)(System.currentTimeMillis() / 1000) + 1);
        assert cc.total(ctx.context) == cc.total(cleaned);
        assert cleaned.remaining() == ctx.context.remaining() - stepLength;

        merger = cc.computeOldShardMerger(cleaned, records);
        merged = cc.merge(cleaned, merger);
        assert cc.total(ctx.context) == cc.total(merged);

        cleaned = cc.removeOldShards(merged, (int)(System.currentTimeMillis() / 1000) + 1);
        assert cc.total(ctx.context) == cc.total(cleaned);
        assert cleaned.remaining() == ctx.context.remaining() - 2 * stepLength - 2;

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\RoundTripTest;testInteger();;;@Test
    public void testInteger()
    {
        BigInteger bi = new BigInteger("1");
        assert bi.intValue() == 1;
        assert IntegerType.instance.getString(IntegerType.instance.fromString("1")).equals("1");
        assert IntegerType.instance.fromString(IntegerType.instance.getString(ByteBuffer.wrap(bi.toByteArray())))
                .equals(ByteBuffer.wrap(bi.toByteArray()));
        assert IntegerType.instance.compose(ByteBuffer.wrap(bi.toByteArray())).equals(bi);
        assert IntegerType.instance.toString(bi).equals("1");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\RoundTripTest;testLong();;;@Test
    public void testLong()
    {
        byte[] v = new byte[]{0,0,0,0,0,0,0,1};
        assert LongType.instance.getString(LongType.instance.fromString("1")).equals("1");
        assert LongType.instance.fromString(LongType.instance.getString(ByteBuffer.wrap(v)))
                .equals(ByteBuffer.wrap(v));
        assert LongType.instance.compose(ByteBuffer.wrap(v)) == 1L;
        assert LongType.instance.toString(1L).equals("1");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\RoundTripTest;testAscii();;;@Test
    public void testAscii() throws Exception
    {
        byte[] abc = "abc".getBytes(Charsets.US_ASCII);
        assert AsciiType.instance.getString(AsciiType.instance.fromString("abc")).equals("abc");
        assert AsciiType.instance.fromString(AsciiType.instance.getString(ByteBuffer.wrap(abc)))
                .equals(ByteBuffer.wrap(abc));
        assert AsciiType.instance.compose(ByteBuffer.wrap(abc)).equals("abc");
        assert AsciiType.instance.toString("abc").equals("abc");
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\RoundTripTest;testBytes();;;@Test
    public void testBytes()
    {
        byte[] v = new byte[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        assert BytesType.instance.toString(BytesType.instance.fromString(FBUtilities.bytesToHex(v)))
                .equals(FBUtilities.bytesToHex(v));
        assert BytesType.instance.fromString(BytesType.instance.toString(ByteBuffer.wrap(v)))
                .equals(ByteBuffer.wrap(v));
        assert BytesType.instance.compose(ByteBuffer.wrap(v)).equals(ByteBuffer.wrap(v));
        assert BytesType.instance.toString(ByteBuffer.wrap(v)).equals(FBUtilities.bytesToHex(v));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\RoundTripTest;testLexicalUUID();;;@Test
    public void testLexicalUUID()
    {
        UUID uuid = UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress());
        assert LexicalUUIDType.instance.getString(LexicalUUIDType.instance.fromString(uuid.toString()))
                .equals(uuid.toString());
        assert LexicalUUIDType.instance.fromString(LexicalUUIDType.instance.getString(ByteBuffer.wrap(UUIDGen.decompose(uuid))))
                .equals(ByteBuffer.wrap(UUIDGen.decompose(uuid)));
        assert LexicalUUIDType.instance.compose(ByteBuffer.wrap(UUIDGen.decompose(uuid))).equals(uuid);
        assert LexicalUUIDType.instance.toString(uuid).equals(uuid.toString());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\RoundTripTest;testTimeUUID();;;@Test
    public void testTimeUUID()
    {
        UUID uuid = UUIDGen.makeType1UUIDFromHost(FBUtilities.getLocalAddress());
        assert TimeUUIDType.instance.getString(TimeUUIDType.instance.fromString(uuid.toString()))
                .equals(uuid.toString());
        assert TimeUUIDType.instance.fromString(TimeUUIDType.instance.getString(ByteBuffer.wrap(UUIDGen.decompose(uuid))))
                .equals(ByteBuffer.wrap(UUIDGen.decompose(uuid)));
        assert TimeUUIDType.instance.compose(ByteBuffer.wrap(UUIDGen.decompose(uuid))).equals(uuid);
        
        assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString(uuid.toString())));
        assert TimeUUIDType.instance.toString(uuid).equals(uuid.toString());
        
        TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
        Calendar c = Calendar.getInstance();
        c.set(Calendar.YEAR, 2011);
        c.set(Calendar.MONTH, Calendar.MARCH);
        c.set(Calendar.DAY_OF_MONTH, 8);
        c.set(Calendar.HOUR_OF_DAY, 0);
        c.set(Calendar.MINUTE, 0);
        c.set(Calendar.SECOND, 0);
        c.set(Calendar.MILLISECOND, 0);
        Long ts = new Long(1299560400000L);
        assert ts.equals(c.getTimeInMillis()) : c.getTimeInMillis();
        
        // create a uuid with a known time.
        uuid = TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString(ts.toString()));
        assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString(uuid.toString())));
        assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08 00:00")));
        assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08 00:00:00")));
        assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08 00:00-0500")));
        assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08 00:00:00-0500")));
        assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08T00:00")));
        assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08T00:00-0500")));
        assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08T00:00:00")));
        assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08T00:00:00-0500")));
        assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08")));
        assert uuid.equals(TimeUUIDType.instance.compose(TimeUUIDType.instance.fromString("2011-03-08-0500")));  
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\RoundTripTest;testUtf8();;;@Test
    public void testUtf8() throws Exception
    {
        String v = "\u2297\u5432\u2376\u263d\uf543";
        assert UTF8Type.instance.getString(UTF8Type.instance.fromString(v)).equals(v);
        assert UTF8Type.instance.fromString(UTF8Type.instance.getString(ByteBuffer.wrap(v.getBytes(Charsets.UTF_8))))
                .equals(ByteBuffer.wrap(v.getBytes(Charsets.UTF_8)));
        assert UTF8Type.instance.compose(ByteBuffer.wrap(v.getBytes(Charsets.UTF_8))).equals(v);
        assert UTF8Type.instance.toString(v).equals(v);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\UUIDTypeTest;testCompare();;;@Test
    public void testCompare()
    {

        UUID t1 = newTimeBasedUUID();
        UUID t2 = newTimeBasedUUID();

        testCompare(t1, t2, -1);
        testCompare(t1, t1, 0);
        testCompare(t2, t2, 0);

        UUID nullId = new UUID(0, 0);

        testCompare(nullId, t1, -1);
        testCompare(t2, nullId, 1);
        testCompare(nullId, nullId, 0);

        for (int test = 1; test < 32; test++)
        {
            UUID r1 = UUID.randomUUID();
            UUID r2 = UUID.randomUUID();

            testCompare(r1, r2, compareUUID(r1, r2));
            testCompare(r1, r1, 0);
            testCompare(r2, r2, 0);

            testCompare(t1, r1, -1);
            testCompare(r2, t2, 1);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\UUIDTypeTest;newTimeBasedUUID();;;public UUID newTimeBasedUUID()
    {
        try
        {
            return UUIDGen.makeType1UUIDFromHost(InetAddress.getLocalHost());
        } catch (UnknownHostException e)
        {
            throw new RuntimeException(e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\UUIDTypeTest;compareUnsigned(long,long);;;public static int compareUnsigned(long n1, long n2)
    {
        if (n1 == n2)
        {
            return 0;
        }
        if ((n1 < n2) ^ ((n1 < 0) != (n2 < 0)))
        {
            return -1;
        }
        return 1;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\UUIDTypeTest;compareUUID(UUID,UUID);;;public static int compareUUID(UUID u1, UUID u2)
    {
        int c = compareUnsigned(u1.getMostSignificantBits(),
                u2.getMostSignificantBits());
        if (c != 0)
        {
            return c;
        }
        return compareUnsigned(u1.getLeastSignificantBits(),
                u2.getLeastSignificantBits());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\UUIDTypeTest;describeCompare(UUID,UUID,int);;;public String describeCompare(UUID u1, UUID u2, int c)
    {
        String tb1 = (u1.version() == 1) ? "time-based " : "random ";
        String tb2 = (u2.version() == 1) ? "time-based " : "random ";
        String comp = (c < 0) ? " < " : ((c == 0) ? " = " : " > ");
        return tb1 + u1 + comp + tb2 + u2;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\UUIDTypeTest;sign(int);;;public int sign(int i)
    {
        if (i < 0)
        {
            return -1;
        }
        if (i > 0)
        {
            return 1;
        }
        return 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\UUIDTypeTest;bytebuffer(UUID);;;public static ByteBuffer bytebuffer(UUID uuid)
    {
        long msb = uuid.getMostSignificantBits();
        long lsb = uuid.getLeastSignificantBits();
        byte[] bytes = new byte[16];

        for (int i = 0; i < 8; i++)
        {
            bytes[i] = (byte) (msb >>> 8 * (7 - i));
        }
        for (int i = 8; i < 16; i++)
        {
            bytes[i] = (byte) (lsb >>> 8 * (7 - i));
        }

        return ByteBuffer.wrap(bytes);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\UUIDTypeTest;logJdkUUIDCompareToVariance(UUID,UUID,int);;;public void logJdkUUIDCompareToVariance(UUID u1, UUID u2, int expC)
    {
        if (u1.version() != u2.version())
        {
            return;
        }
        if (u1.version() == 1)
        {
            return;
        }
        if (u1.compareTo(u2) != expC)
        {
            logger.info("*** Note: java.util.UUID.compareTo() would have compared this differently");
        }

    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\UUIDTypeTest;testCompare(UUID,UUID,int);;;public void testCompare(UUID u1, UUID u2, int expC)
    {
        int c = sign(uuidType.compare(bytebuffer(u1), bytebuffer(u2)));
        expC = sign(expC);
        assertEquals("Expected " + describeCompare(u1, u2, expC) + ", got "
                + describeCompare(u1, u2, c), expC, c);

        if (u1.version() == 1 && u2.version() == 1)
            assertEquals(c, sign(TimeUUIDType.instance.compare(bytebuffer(u1), bytebuffer(u2))));

        logJdkUUIDCompareToVariance(u1, u2, c);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\UUIDTypeTest;testTimeEquality();;;@Test
    public void testTimeEquality()
    {
        UUID a = newTimeBasedUUID();
        UUID b = new UUID(a.getMostSignificantBits(),
                a.getLeastSignificantBits());

        assertEquals(0, uuidType.compare(bytebuffer(a), bytebuffer(b)));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\UUIDTypeTest;testTimeSmaller();;;@Test
    public void testTimeSmaller()
    {
        UUID a = newTimeBasedUUID();
        UUID b = newTimeBasedUUID();
        UUID c = newTimeBasedUUID();

        assert uuidType.compare(bytebuffer(a), bytebuffer(b)) < 0;
        assert uuidType.compare(bytebuffer(b), bytebuffer(c)) < 0;
        assert uuidType.compare(bytebuffer(a), bytebuffer(c)) < 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\UUIDTypeTest;testTimeBigger();;;@Test
    public void testTimeBigger()
    {
        UUID a = newTimeBasedUUID();
        UUID b = newTimeBasedUUID();
        UUID c = newTimeBasedUUID();

        assert uuidType.compare(bytebuffer(c), bytebuffer(b)) > 0;
        assert uuidType.compare(bytebuffer(b), bytebuffer(a)) > 0;
        assert uuidType.compare(bytebuffer(c), bytebuffer(a)) > 0;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\db\marshal\UUIDTypeTest;testTimestampComparison();;;@Test
    public void testTimestampComparison()
    {
        Random rng = new Random();
        ByteBuffer[] uuids = new ByteBuffer[100];
        for (int i = 0; i < uuids.length; i++)
        {
            uuids[i] = ByteBuffer.allocate(16);
            rng.nextBytes(uuids[i].array());
            // set version to 1
            uuids[i].array()[6] &= 0x0F;
            uuids[i].array()[6] |= 0x10;
        }
        Arrays.sort(uuids, uuidType);
        for (int i = 1; i < uuids.length; i++)
        {
            long i0 = UUIDGen.getUUID(uuids[i - 1]).timestamp();
            long i1 = UUIDGen.getUUID(uuids[i]).timestamp();
            assert i0 <= i1;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\CompactSerializerTest;scanClasspath();;;        expectedClassNames.add("CounterMutationSerializer");
        expectedClassNames.add("HashableSerializer");
        expectedClassNames.add("InnerSerializer");
        expectedClassNames.add("LeafSerializer");
        expectedClassNames.add("MerkleTreeSerializer");
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\LazilyCompactedRowTest;assertDigest(ColumnFamilyStore,int,boolean);;;private void assertDigest(ColumnFamilyStore cfs, int gcBefore, boolean major) throws IOException, NoSuchAlgorithmException
    {
        Collection<SSTableReader> sstables = cfs.getSSTables();
        CompactionController controller = new CompactionController(cfs, sstables, major, gcBefore, false);
        CompactionIterator ci1 = new PreCompactingIterator(sstables, controller);
        CompactionIterator ci2 = new LazyCompactionIterator(sstables, controller);

        while (true)
        {
            if (!ci1.hasNext())
            {
                assert !ci2.hasNext();
                break;
            }

            AbstractCompactedRow row1 = ci1.next();
            AbstractCompactedRow row2 = ci2.next();
            MessageDigest digest1 = MessageDigest.getInstance("MD5");
            MessageDigest digest2 = MessageDigest.getInstance("MD5");

            row1.update(digest1);
            row2.update(digest2);

            assert MessageDigest.isEqual(digest1.digest(), digest2.digest());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\LazilyCompactedRowTest;testOneRow();;;        assertDigest(cfs, Integer.MAX_VALUE, true);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\LazilyCompactedRowTest;testOneRowTwoColumns();;;        assertDigest(cfs, Integer.MAX_VALUE, true);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\LazilyCompactedRowTest;testOneRowManyColumns();;;@Test
    public void testOneRowManyColumns() throws IOException, ExecutionException, InterruptedException, NoSuchAlgorithmException
    {
        CompactionManager.instance.disableAutoCompaction();

        Table table = Table.open("Keyspace1");
        ColumnFamilyStore cfs = table.getColumnFamilyStore("Standard1");

        ByteBuffer key = ByteBuffer.wrap("k".getBytes());
        RowMutation rm = new RowMutation("Keyspace1", key);
        for (int i = 0; i < 1000; i++)
            rm.add(new QueryPath("Standard1", null, ByteBufferUtil.bytes(i)), ByteBufferUtil.EMPTY_BYTE_BUFFER, 0);
        rm.apply();
        DataOutputBuffer out = new DataOutputBuffer();
        RowMutation.serializer().serialize(rm, out, MessagingService.version_);
        assert out.getLength() > DatabaseDescriptor.getColumnIndexSize();
        cfs.forceBlockingFlush();

        assertBytes(cfs, Integer.MAX_VALUE, true);
        assertDigest(cfs, Integer.MAX_VALUE, true);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\LazilyCompactedRowTest;testTwoRows();;;        assertDigest(cfs, Integer.MAX_VALUE, true);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\LazilyCompactedRowTest;testTwoRowsTwoColumns();;;        assertDigest(cfs, Integer.MAX_VALUE, true);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\LazilyCompactedRowTest;testManyRows();;;        assertDigest(cfs, Integer.MAX_VALUE, true);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\LazilyCompactedRowTest;LazyCompactionIterator(Iterable<SSTableReader>,CompactionController);;;public LazyCompactionIterator(Iterable<SSTableReader> sstables, CompactionController controller) throws IOException
        {
            super(CompactionType.UNKNOWN, sstables, controller);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\LazilyCompactedRowTest;PreCompactingIterator(Iterable<SSTableReader>,CompactionController);;;public PreCompactingIterator(Iterable<SSTableReader> sstables, CompactionController controller) throws IOException
        {
            super(CompactionType.UNKNOWN, sstables, controller);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\LazilyCompactedRowTest;getCompactedRow();;;@Override
        protected AbstractCompactedRow getCompactedRow()
        {
            return new PrecompactedRow(controller, rows);
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\sstable\SSTableUtils;write(Map<String,ColumnFamily>);;;                sorted.put(Util.dk(entry.getKey()), entry.getValue());

            final Iterator<Map.Entry<DecoratedKey, ColumnFamily>> iter = sorted.entrySet().iterator();
            return write(sorted.size(), new Appender()
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\sstable\SSTableUtils;write(int,Appender);;;public SSTableReader write(int expectedSize, Appender appender) throws IOException
        {
            File datafile = (dest == null) ? tempSSTableFile(ksname, cfname, generation) : new File(dest.filenameFor(Component.DATA));
            SSTableWriter writer = new SSTableWriter(datafile.getAbsolutePath(), expectedSize);
            long start = System.currentTimeMillis();
            while (appender.append(writer)) { /* pass */ }
            SSTableReader reader = writer.closeAndOpenReader();
            // mark all components for removal
            if (cleanup)
                for (Component component : reader.components)
                    new File(reader.descriptor.filenameFor(component)).deleteOnExit();
            return reader;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\sstable\SSTableUtils;append(SSTableWriter);;;public abstract boolean append(SSTableWriter writer) throws IOException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\sstable\SSTableWriterCommutativeTest;testRecoverAndOpenCommutative();;;@Test
    public void testRecoverAndOpenCommutative() throws IOException, ExecutionException, InterruptedException, UnknownHostException
    {
        String keyspace = "Keyspace1";
        String cfname   = "Counter1";

        Map<String, ColumnFamily> entries = new HashMap<String, ColumnFamily>();
        Map<String, ColumnFamily> cleanedEntries = new HashMap<String, ColumnFamily>();

        ColumnFamily cf;
        ColumnFamily cfCleaned;
        CounterContext.ContextState state;

        // key: k
        cf = ColumnFamily.create(keyspace, cfname);
        cfCleaned = ColumnFamily.create(keyspace, cfname);
        state = CounterContext.ContextState.allocate(4, 1);
        state.writeElement(NodeId.fromInt(2), 9L, 3L, true);
        state.writeElement(NodeId.fromInt(4), 4L, 2L);
        state.writeElement(NodeId.fromInt(6), 3L, 3L);
        state.writeElement(NodeId.fromInt(8), 2L, 4L);
        cf.addColumn(new CounterColumn( ByteBufferUtil.bytes("x"), state.context, 0L));
        cfCleaned.addColumn(new CounterColumn( ByteBufferUtil.bytes("x"), cc.clearAllDelta(state.context), 0L));

        state = CounterContext.ContextState.allocate(4, 1);
        state.writeElement(NodeId.fromInt(1), 7L, 12L);
        state.writeElement(NodeId.fromInt(2), 5L, 3L, true);
        state.writeElement(NodeId.fromInt(3), 2L, 33L);
        state.writeElement(NodeId.fromInt(9), 1L, 24L);
        cf.addColumn(new CounterColumn( ByteBufferUtil.bytes("y"), state.context, 0L));
        cfCleaned.addColumn(new CounterColumn( ByteBufferUtil.bytes("y"), cc.clearAllDelta(state.context), 0L));

        entries.put("k", cf);
        cleanedEntries.put("k", cfCleaned);

        // key: l
        cf = ColumnFamily.create(keyspace, cfname);
        cfCleaned = ColumnFamily.create(keyspace, cfname);
        state = CounterContext.ContextState.allocate(4, 1);
        state.writeElement(NodeId.fromInt(2), 9L, 3L, true);
        state.writeElement(NodeId.fromInt(4), 4L, 2L);
        state.writeElement(NodeId.fromInt(6), 3L, 3L);
        state.writeElement(NodeId.fromInt(8), 2L, 4L);
        cf.addColumn(new CounterColumn( ByteBufferUtil.bytes("x"), state.context, 0L));
        cfCleaned.addColumn(new CounterColumn( ByteBufferUtil.bytes("x"), cc.clearAllDelta(state.context), 0L));

        state = CounterContext.ContextState.allocate(3, 0);
        state.writeElement(NodeId.fromInt(1), 7L, 12L);
        state.writeElement(NodeId.fromInt(3), 2L, 33L);
        state.writeElement(NodeId.fromInt(9), 1L, 24L);
        cf.addColumn(new CounterColumn( ByteBufferUtil.bytes("y"), state.context, 0L));
        cfCleaned.addColumn(new CounterColumn( ByteBufferUtil.bytes("y"), cc.clearAllDelta(state.context), 0L));

        entries.put("l", cf);
        cleanedEntries.put("l", cfCleaned);

        // write out unmodified CF
        SSTableReader orig = SSTableUtils.prepare().ks(keyspace).cf(cfname).generation(0).write(entries);

        // whack the index to trigger the recover
        FileUtils.deleteWithConfirm(orig.descriptor.filenameFor(Component.PRIMARY_INDEX));
        FileUtils.deleteWithConfirm(orig.descriptor.filenameFor(Component.FILTER));

        // re-build inline
        SSTableReader rebuilt = CompactionManager.instance.submitSSTableBuild(
            orig.descriptor,
            OperationType.AES
            ).get();

        // write out cleaned CF
        SSTableReader cleaned = SSTableUtils.prepare().ks(keyspace).cf(cfname).generation(0).write(cleanedEntries);

        // verify
        BufferedRandomAccessFile origFile    = new BufferedRandomAccessFile(orig.descriptor.filenameFor(SSTable.COMPONENT_DATA), "r", 8 * 1024 * 1024);
        BufferedRandomAccessFile cleanedFile = new BufferedRandomAccessFile(cleaned.descriptor.filenameFor(SSTable.COMPONENT_DATA), "r", 8 * 1024 * 1024);

        while(origFile.getFilePointer() < origFile.length() && cleanedFile.getFilePointer() < cleanedFile.length())
        {
            assert origFile.readByte() == cleanedFile.readByte();
        }
        assert origFile.getFilePointer() == origFile.length();
        assert cleanedFile.getFilePointer() == cleanedFile.length();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\sstable\SSTableWriterTest;testRecoverAndOpen();;;        entries.put("k2", cf);        
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\util\BufferedRandomAccessFileTest;assertSetLength(BufferedRandomAccessFile,long);;;public void assertSetLength(BufferedRandomAccessFile file, long length) throws IOException
    {
        assert file.getFilePointer() == length;
        assert file.length() == file.getFilePointer();
        assert file.getChannel().size() == file.length();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\util\BufferedRandomAccessFileTest;testSetLength();;;@Test
    public void testSetLength() throws IOException
    {
        File tmpFile = File.createTempFile("set_length", "bin");
        BufferedRandomAccessFile file = new BufferedRandomAccessFile(tmpFile, "rw", 8*1024*1024);

        // test that data in buffer is truncated
        file.writeLong(1L);
        file.writeLong(2L);
        file.writeLong(3L);
        file.writeLong(4L);
        file.setLength(16L);
        assertSetLength(file, 16L);

        // seek back and truncate within file
        file.writeLong(3L);
        file.seek(8L);
        file.setLength(24L);
        assertSetLength(file, 24L);

        // seek back and truncate past end of file
        file.setLength(64L);
        assertSetLength(file, 64L);

        // make sure file is consistent after sync
        file.sync();
        assertSetLength(file, 64L);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\util\BufferedRandomAccessFileTest;testSetNegativeLength();;;@Test (expected=IllegalArgumentException.class)
    public void testSetNegativeLength() throws IOException, IllegalArgumentException
    {
        File tmpFile = File.createTempFile("set_negative_length", "bin");
        BufferedRandomAccessFile file = new BufferedRandomAccessFile(tmpFile, "rw", 8*1024*1024);
        file.setLength(-8L);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\io\util\BufferedRandomAccessFileTest;testSetLengthDuringReadMode();;;@Test (expected=IOException.class)
    public void testSetLengthDuringReadMode() throws IOException
    {
        File tmpFile = File.createTempFile("set_length_during_read_mode", "bin");
        BufferedRandomAccessFile file = new BufferedRandomAccessFile(tmpFile, "r", 8*1024*1024);
        file.setLength(4L);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\locator\SimpleStrategyTest;getStrategy(String,TokenMetadata);;;        KSMetaData ksmd =  DatabaseDescriptor.getKSMetaData(table);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceCounterTest;init();;;public void init()
    {
        tablename = "Keyspace5";
        cfname    = "Counter1";
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceCounterTest;getWriteData();;;public List<RowMutation> getWriteData()
    {
        List<RowMutation> rms = new LinkedList<RowMutation>();
        RowMutation rm;
        rm = new RowMutation(tablename, ByteBufferUtil.bytes("key1"));
        rm.addCounter(new QueryPath(cfname, null, ByteBufferUtil.bytes("Column1")), 42);
        rms.add(rm);
        return rms;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceStandardTest;init();;;public void init()
    {
        tablename = "Keyspace5";
        cfname    = "Standard1";
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceStandardTest;getWriteData();;;public List<RowMutation> getWriteData()
    {
        List<RowMutation> rms = new LinkedList<RowMutation>();
        RowMutation rm;
        rm = new RowMutation(tablename, ByteBufferUtil.bytes("key1"));
        rm.add(new QueryPath(cfname, null, ByteBufferUtil.bytes("Column1")), ByteBufferUtil.bytes("asdfasdf"), 0);
        rms.add(rm);
        return rms;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceTestAbstract;init();;;public abstract void init();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceTestAbstract;getWriteData();;;public abstract List<RowMutation> getWriteData();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceTestAbstract;prepare();;;@Before
    public void prepare() throws Exception
    {
        if (!initialized)
        {
            initialized = true;

            init();

            LOCAL = FBUtilities.getLocalAddress();
            StorageService.instance.initServer();
            // generate a fake endpoint for which we can spoof receiving/sending trees
            REMOTE = InetAddress.getByName("127.0.0.2");
            store = null;
            for (ColumnFamilyStore cfs : Table.open(tablename).getColumnFamilyStores())
            {
                if (cfs.columnFamily.equals(cfname))
                {
                    store = cfs;
                    break;
                }
            }
            assert store != null : "CF not found: " + cfname;
        }

        aes = AntiEntropyService.instance;
        TokenMetadata tmd = StorageService.instance.getTokenMetadata();
        tmd.clearUnsafe();
        StorageService.instance.setToken(StorageService.getPartitioner().getRandomToken());
        tmd.updateNormalToken(StorageService.getPartitioner().getMinimumToken(), REMOTE);
        assert tmd.isMember(REMOTE);

        Gossiper.instance.initializeNodeUnsafe(REMOTE, 1);

        local_range = StorageService.instance.getLocalPrimaryRange();

        // random session id for each test
        request = new TreeRequest(UUID.randomUUID().toString(), LOCAL, local_range, new CFPair(tablename, cfname));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceTestAbstract;teardown();;;@After
    public void teardown() throws Exception
    {
        flushAES();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceTestAbstract;testValidatorPrepare();;;@Test
    public void testValidatorPrepare() throws Throwable
    {
        Validator validator;

        // write
        Util.writeColumnFamily(getWriteData());

        // sample
        validator = new Validator(request);
        validator.prepare(store);

        // and confirm that the tree was split
        assertTrue(validator.tree.size() > 1);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceTestAbstract;testValidatorComplete();;;@Test
    public void testValidatorComplete() throws Throwable
    {
        Validator validator = new Validator(request);
        validator.prepare(store);
        validator.complete();

        // confirm that the tree was validated
        Token min = validator.tree.partitioner().getMinimumToken();
        assert null != validator.tree.hash(new Range(min, min));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceTestAbstract;testValidatorAdd();;;@Test
    public void testValidatorAdd() throws Throwable
    {
        Validator validator = new Validator(request);
        IPartitioner part = validator.tree.partitioner();
        Token mid = part.midpoint(local_range.left, local_range.right);
        validator.prepare(store);

        // add a row
        validator.add(new PrecompactedRow(new DecoratedKey(mid, ByteBufferUtil.bytes("inconceivable!")), null));
        validator.complete();

        // confirm that the tree was validated
        assert null != validator.tree.hash(local_range);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceTestAbstract;testManualRepair();;;@Test
    public void testManualRepair() throws Throwable
    {
        AntiEntropyService.RepairSession sess = AntiEntropyService.instance.getRepairSession(local_range, tablename, cfname);
        sess.start();
        sess.blockUntilRunning();

        // ensure that the session doesn't end without a response from REMOTE
        sess.join(100);
        assert sess.isAlive();

        // deliver a fake response from REMOTE
        AntiEntropyService.instance.completedRequest(new TreeRequest(sess.getName(), REMOTE, local_range, request.cf));

        // block until the repair has completed
        sess.join();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceTestAbstract;testGetNeighborsPlusOne();;;@Test
    public void testGetNeighborsPlusOne() throws Throwable
    {
        // generate rf+1 nodes, and ensure that all nodes are returned
        Set<InetAddress> expected = addTokens(1 + Table.open(tablename).getReplicationStrategy().getReplicationFactor());
        expected.remove(FBUtilities.getLocalAddress());
        Collection<Range> ranges = StorageService.instance.getLocalRanges(tablename);
        Set<InetAddress> neighbors = new HashSet<InetAddress>();
        for (Range range : ranges)
        {
            neighbors.addAll(AntiEntropyService.getNeighbors(tablename, range));
        }
        assertEquals(expected, neighbors);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceTestAbstract;testGetNeighborsTimesTwo();;;@Test
    public void testGetNeighborsTimesTwo() throws Throwable
    {
        TokenMetadata tmd = StorageService.instance.getTokenMetadata();

        // generate rf*2 nodes, and ensure that only neighbors specified by the ARS are returned
        addTokens(2 * Table.open(tablename).getReplicationStrategy().getReplicationFactor());
        AbstractReplicationStrategy ars = Table.open(tablename).getReplicationStrategy();
        Set<InetAddress> expected = new HashSet<InetAddress>();
        for (Range replicaRange : ars.getAddressRanges().get(FBUtilities.getLocalAddress()))
        {
            expected.addAll(ars.getRangeAddresses(tmd).get(replicaRange));
        }
        expected.remove(FBUtilities.getLocalAddress());
        Collection<Range> ranges = StorageService.instance.getLocalRanges(tablename);
        Set<InetAddress> neighbors = new HashSet<InetAddress>();
        for (Range range : ranges)
        {
            neighbors.addAll(AntiEntropyService.getNeighbors(tablename, range));
        }
        assertEquals(expected, neighbors);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceTestAbstract;testDifferencer();;;@Test
    public void testDifferencer() throws Throwable
    {
        // this next part does some housekeeping so that cleanup in the differencer doesn't error out.
        AntiEntropyService.RepairSession sess = AntiEntropyService.instance.getArtificialRepairSession(request, tablename, cfname);
        
        // generate a tree
        Validator validator = new Validator(request);
        validator.prepare(store);
        validator.complete();
        MerkleTree ltree = validator.tree;

        // and a clone
        validator = new Validator(request);
        validator.prepare(store);
        validator.complete();
        MerkleTree rtree = validator.tree;

        // change a range in one of the trees
        Token ltoken = StorageService.getPartitioner().midpoint(local_range.left, local_range.right);
        ltree.invalidate(ltoken);
        MerkleTree.TreeRange changed = ltree.get(ltoken);
        changed.hash("non-empty hash!".getBytes());

        Set<Range> interesting = new HashSet<Range>();
        interesting.add(changed);

        // difference the trees
        Differencer diff = new Differencer(request, ltree, rtree);
        diff.run();
        
        // ensure that the changed range was recorded
        assertEquals("Wrong differing ranges", interesting, new HashSet<Range>(diff.differences));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceTestAbstract;addTokens(int);;;Set<InetAddress> addTokens(int max) throws Throwable
    {
        TokenMetadata tmd = StorageService.instance.getTokenMetadata();
        Set<InetAddress> endpoints = new HashSet<InetAddress>();
        for (int i = 1; i <= max; i++)
        {
            InetAddress endpoint = InetAddress.getByName("127.0.0." + i);
            tmd.updateNormalToken(StorageService.getPartitioner().getRandomToken(), endpoint);
            endpoints.add(endpoint);
        }
        return endpoints;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\AntiEntropyServiceTestAbstract;flushAES();;;void flushAES() throws Exception
    {
        final ThreadPoolExecutor stage = StageManager.getStage(Stage.ANTI_ENTROPY);
        final Callable noop = new Callable<Object>()
        {
            public Boolean call()
            {
                return true;
            }
        };
        
        // send two tasks through the stage: one to follow existing tasks and a second to follow tasks created by
        // those existing tasks: tasks won't recursively create more tasks
        stage.submit(noop).get(5000, TimeUnit.MILLISECONDS);
        stage.submit(noop).get(5000, TimeUnit.MILLISECONDS);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\LeaveAndBootstrapTest;newTestWriteEndpointsDuringLeave();;;@Test
    public void newTestWriteEndpointsDuringLeave() throws Exception
    {
        StorageService ss = StorageService.instance;
        final int RING_SIZE = 6;
        final int LEAVING_NODE = 3;

        TokenMetadata tmd = ss.getTokenMetadata();
        tmd.clearUnsafe();
        IPartitioner partitioner = new RandomPartitioner();
        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);

        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);

        ArrayList<Token> endpointTokens = new ArrayList<Token>();
        ArrayList<Token> keyTokens = new ArrayList<Token>();
        List<InetAddress> hosts = new ArrayList<InetAddress>();

        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, RING_SIZE);

        Map<Token, List<InetAddress>> expectedEndpoints = new HashMap<Token, List<InetAddress>>();
        for (String table : DatabaseDescriptor.getNonSystemTables())
        {
            for (Token token : keyTokens)
            {
                List<InetAddress> endpoints = new ArrayList<InetAddress>();
                Iterator<Token> tokenIter = TokenMetadata.ringIterator(tmd.sortedTokens(), token, false);
                while (tokenIter.hasNext())
                {
                    endpoints.add(tmd.getEndpoint(tokenIter.next()));
                }
                expectedEndpoints.put(token, endpoints);
            }
        }

        // Third node leaves
        ss.onChange(hosts.get(LEAVING_NODE),
                ApplicationState.STATUS,
                valueFactory.leaving(endpointTokens.get(LEAVING_NODE)));
        assertTrue(tmd.isLeaving(hosts.get(LEAVING_NODE)));

        AbstractReplicationStrategy strategy;
        for (String table : DatabaseDescriptor.getNonSystemTables())
        {
            strategy = getStrategy(table, tmd);
            for (Token token : keyTokens)
            {
                int replicationFactor = strategy.getReplicationFactor();

                HashSet<InetAddress> actual = new HashSet<InetAddress>(tmd.getWriteEndpoints(token, table, strategy.calculateNaturalEndpoints(token, tmd)));
                HashSet<InetAddress> expected = new HashSet<InetAddress>();

                for (int i = 0; i < replicationFactor; i++)
                {
                    expected.add(expectedEndpoints.get(token).get(i));
                }

                // if the leaving node is in the endpoint list,
                // then we should expect it plus one extra for when it's gone
                if (expected.contains(hosts.get(LEAVING_NODE)))
                    expected.add(expectedEndpoints.get(token).get(replicationFactor));

                assertEquals("mismatched endpoint sets", expected, actual);
            }
        }

        ss.setPartitionerUnsafe(oldPartitioner);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\LeaveAndBootstrapTest;testSimultaneousMove();;;@Test
    public void testSimultaneousMove() throws UnknownHostException, ConfigurationException
    {
        StorageService ss = StorageService.instance;
        final int RING_SIZE = 10;
        TokenMetadata tmd = ss.getTokenMetadata();
        tmd.clearUnsafe();
        IPartitioner partitioner = new RandomPartitioner();
        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);

        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);

        ArrayList<Token> endpointTokens = new ArrayList<Token>();
        ArrayList<Token> keyTokens = new ArrayList<Token>();
        List<InetAddress> hosts = new ArrayList<InetAddress>();

        // create a ring or 10 nodes
        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, RING_SIZE);

        // nodes 6, 8 and 9 leave
        final int[] LEAVING = new int[] {6, 8, 9};
        for (int leaving : LEAVING)
            ss.onChange(hosts.get(leaving), ApplicationState.STATUS, valueFactory.leaving(endpointTokens.get(leaving)));

        // boot two new nodes with keyTokens.get(5) and keyTokens.get(7)
        InetAddress boot1 = InetAddress.getByName("127.0.1.1");
        ss.onChange(boot1, ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(5)));
        InetAddress boot2 = InetAddress.getByName("127.0.1.2");
        ss.onChange(boot2, ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(7)));

        Collection<InetAddress> endpoints = null;

        /* don't require test update every time a new keyspace is added to test/conf/cassandra.yaml */
        Map<String, AbstractReplicationStrategy> tableStrategyMap = new HashMap<String, AbstractReplicationStrategy>();
        for (int i=1; i<=4; i++)
        {
            tableStrategyMap.put("Keyspace" + i, getStrategy("Keyspace" + i, tmd));
        }

        // pre-calculate the results.
        Map<String, Multimap<Token, InetAddress>> expectedEndpoints = new HashMap<String, Multimap<Token, InetAddress>>();
        expectedEndpoints.put("Keyspace1", HashMultimap.<Token, InetAddress>create());
        expectedEndpoints.get("Keyspace1").putAll(new BigIntegerToken("5"), makeAddrs("127.0.0.2"));
        expectedEndpoints.get("Keyspace1").putAll(new BigIntegerToken("15"), makeAddrs("127.0.0.3"));
        expectedEndpoints.get("Keyspace1").putAll(new BigIntegerToken("25"), makeAddrs("127.0.0.4"));
        expectedEndpoints.get("Keyspace1").putAll(new BigIntegerToken("35"), makeAddrs("127.0.0.5"));
        expectedEndpoints.get("Keyspace1").putAll(new BigIntegerToken("45"), makeAddrs("127.0.0.6"));
        expectedEndpoints.get("Keyspace1").putAll(new BigIntegerToken("55"), makeAddrs("127.0.0.7", "127.0.0.8", "127.0.1.1"));
        expectedEndpoints.get("Keyspace1").putAll(new BigIntegerToken("65"), makeAddrs("127.0.0.8"));
        expectedEndpoints.get("Keyspace1").putAll(new BigIntegerToken("75"), makeAddrs("127.0.0.9", "127.0.1.2", "127.0.0.1"));
        expectedEndpoints.get("Keyspace1").putAll(new BigIntegerToken("85"), makeAddrs("127.0.0.10", "127.0.0.1"));
        expectedEndpoints.get("Keyspace1").putAll(new BigIntegerToken("95"), makeAddrs("127.0.0.1"));
        expectedEndpoints.put("Keyspace2", HashMultimap.<Token, InetAddress>create());
        expectedEndpoints.get("Keyspace2").putAll(new BigIntegerToken("5"), makeAddrs("127.0.0.2"));
        expectedEndpoints.get("Keyspace2").putAll(new BigIntegerToken("15"), makeAddrs("127.0.0.3"));
        expectedEndpoints.get("Keyspace2").putAll(new BigIntegerToken("25"), makeAddrs("127.0.0.4"));
        expectedEndpoints.get("Keyspace2").putAll(new BigIntegerToken("35"), makeAddrs("127.0.0.5"));
        expectedEndpoints.get("Keyspace2").putAll(new BigIntegerToken("45"), makeAddrs("127.0.0.6"));
        expectedEndpoints.get("Keyspace2").putAll(new BigIntegerToken("55"), makeAddrs("127.0.0.7", "127.0.0.8", "127.0.1.1"));
        expectedEndpoints.get("Keyspace2").putAll(new BigIntegerToken("65"), makeAddrs("127.0.0.8"));
        expectedEndpoints.get("Keyspace2").putAll(new BigIntegerToken("75"), makeAddrs("127.0.0.9", "127.0.1.2", "127.0.0.1"));
        expectedEndpoints.get("Keyspace2").putAll(new BigIntegerToken("85"), makeAddrs("127.0.0.10", "127.0.0.1"));
        expectedEndpoints.get("Keyspace2").putAll(new BigIntegerToken("95"), makeAddrs("127.0.0.1"));
        expectedEndpoints.put("Keyspace3", HashMultimap.<Token, InetAddress>create());
        expectedEndpoints.get("Keyspace3").putAll(new BigIntegerToken("5"), makeAddrs("127.0.0.2", "127.0.0.3", "127.0.0.4", "127.0.0.5", "127.0.0.6"));
        expectedEndpoints.get("Keyspace3").putAll(new BigIntegerToken("15"), makeAddrs("127.0.0.3", "127.0.0.4", "127.0.0.5", "127.0.0.6", "127.0.0.7", "127.0.1.1", "127.0.0.8"));
        expectedEndpoints.get("Keyspace3").putAll(new BigIntegerToken("25"), makeAddrs("127.0.0.4", "127.0.0.5", "127.0.0.6", "127.0.0.7", "127.0.0.8", "127.0.1.2", "127.0.0.1", "127.0.1.1"));
        expectedEndpoints.get("Keyspace3").putAll(new BigIntegerToken("35"), makeAddrs("127.0.0.5", "127.0.0.6", "127.0.0.7", "127.0.0.8", "127.0.0.9", "127.0.1.2", "127.0.0.1", "127.0.0.2", "127.0.1.1"));
        expectedEndpoints.get("Keyspace3").putAll(new BigIntegerToken("45"), makeAddrs("127.0.0.6", "127.0.0.7", "127.0.0.8", "127.0.0.9", "127.0.0.10", "127.0.1.2", "127.0.0.1", "127.0.0.2", "127.0.1.1", "127.0.0.3"));
        expectedEndpoints.get("Keyspace3").putAll(new BigIntegerToken("55"), makeAddrs("127.0.0.7", "127.0.0.8", "127.0.0.9", "127.0.0.10", "127.0.0.1", "127.0.0.2", "127.0.0.3", "127.0.0.4", "127.0.1.1", "127.0.1.2"));
        expectedEndpoints.get("Keyspace3").putAll(new BigIntegerToken("65"), makeAddrs("127.0.0.8", "127.0.0.9", "127.0.0.10", "127.0.0.1", "127.0.0.2", "127.0.1.2", "127.0.0.3", "127.0.0.4"));
        expectedEndpoints.get("Keyspace3").putAll(new BigIntegerToken("75"), makeAddrs("127.0.0.9", "127.0.0.10", "127.0.0.1", "127.0.0.2", "127.0.0.3", "127.0.1.2", "127.0.0.4", "127.0.0.5"));
        expectedEndpoints.get("Keyspace3").putAll(new BigIntegerToken("85"), makeAddrs("127.0.0.10", "127.0.0.1", "127.0.0.2", "127.0.0.3", "127.0.0.4", "127.0.0.5"));
        expectedEndpoints.get("Keyspace3").putAll(new BigIntegerToken("95"), makeAddrs("127.0.0.1", "127.0.0.2", "127.0.0.3", "127.0.0.4", "127.0.0.5"));
        expectedEndpoints.put("Keyspace4", HashMultimap.<Token, InetAddress>create());
        expectedEndpoints.get("Keyspace4").putAll(new BigIntegerToken("5"), makeAddrs("127.0.0.2", "127.0.0.3", "127.0.0.4"));
        expectedEndpoints.get("Keyspace4").putAll(new BigIntegerToken("15"), makeAddrs("127.0.0.3", "127.0.0.4", "127.0.0.5"));
        expectedEndpoints.get("Keyspace4").putAll(new BigIntegerToken("25"), makeAddrs("127.0.0.4", "127.0.0.5", "127.0.0.6"));
        expectedEndpoints.get("Keyspace4").putAll(new BigIntegerToken("35"), makeAddrs("127.0.0.5", "127.0.0.6", "127.0.0.7", "127.0.1.1", "127.0.0.8"));
        expectedEndpoints.get("Keyspace4").putAll(new BigIntegerToken("45"), makeAddrs("127.0.0.6", "127.0.0.7", "127.0.0.8", "127.0.1.2", "127.0.0.1", "127.0.1.1"));
        expectedEndpoints.get("Keyspace4").putAll(new BigIntegerToken("55"), makeAddrs("127.0.0.7", "127.0.0.8", "127.0.0.9", "127.0.0.1", "127.0.0.2", "127.0.1.1", "127.0.1.2"));
        expectedEndpoints.get("Keyspace4").putAll(new BigIntegerToken("65"), makeAddrs("127.0.0.8", "127.0.0.9", "127.0.0.10", "127.0.1.2", "127.0.0.1", "127.0.0.2"));
        expectedEndpoints.get("Keyspace4").putAll(new BigIntegerToken("75"), makeAddrs("127.0.0.9", "127.0.0.10", "127.0.0.1", "127.0.1.2", "127.0.0.2", "127.0.0.3"));
        expectedEndpoints.get("Keyspace4").putAll(new BigIntegerToken("85"), makeAddrs("127.0.0.10", "127.0.0.1", "127.0.0.2", "127.0.0.3"));
        expectedEndpoints.get("Keyspace4").putAll(new BigIntegerToken("95"), makeAddrs("127.0.0.1", "127.0.0.2", "127.0.0.3"));

        for (Map.Entry<String, AbstractReplicationStrategy> tableStrategy : tableStrategyMap.entrySet())
        {
            String table = tableStrategy.getKey();
            AbstractReplicationStrategy strategy = tableStrategy.getValue();

            for (int i = 0; i < keyTokens.size(); i++)
            {
                endpoints = tmd.getWriteEndpoints(keyTokens.get(i), table, strategy.getNaturalEndpoints(keyTokens.get(i)));
                assertTrue(expectedEndpoints.get(table).get(keyTokens.get(i)).size() == endpoints.size());
                assertTrue(expectedEndpoints.get(table).get(keyTokens.get(i)).containsAll(endpoints));
            }

            // just to be sure that things still work according to the old tests, run them:
            if (strategy.getReplicationFactor() != 3)
                continue;
            // tokens 5, 15 and 25 should go three nodes
            for (int i=0; i<3; ++i)
            {
                endpoints = tmd.getWriteEndpoints(keyTokens.get(i), table, strategy.getNaturalEndpoints(keyTokens.get(i)));
                assertTrue(endpoints.size() == 3);
                assertTrue(endpoints.contains(hosts.get(i+1)));
                assertTrue(endpoints.contains(hosts.get(i+2)));
                assertTrue(endpoints.contains(hosts.get(i+3)));
            }

            // token 35 should go to nodes 4, 5, 6, 7 and boot1
            endpoints = tmd.getWriteEndpoints(keyTokens.get(3), table, strategy.getNaturalEndpoints(keyTokens.get(3)));
            assertTrue(endpoints.size() == 5);
            assertTrue(endpoints.contains(hosts.get(4)));
            assertTrue(endpoints.contains(hosts.get(5)));
            assertTrue(endpoints.contains(hosts.get(6)));
            assertTrue(endpoints.contains(hosts.get(7)));
            assertTrue(endpoints.contains(boot1));

            // token 45 should go to nodes 5, 6, 7, 0, boot1 and boot2
            endpoints = tmd.getWriteEndpoints(keyTokens.get(4), table, strategy.getNaturalEndpoints(keyTokens.get(4)));
            assertTrue(endpoints.size() == 6);
            assertTrue(endpoints.contains(hosts.get(5)));
            assertTrue(endpoints.contains(hosts.get(6)));
            assertTrue(endpoints.contains(hosts.get(7)));
            assertTrue(endpoints.contains(hosts.get(0)));
            assertTrue(endpoints.contains(boot1));
            assertTrue(endpoints.contains(boot2));

            // token 55 should go to nodes 6, 7, 8, 0, 1, boot1 and boot2
            endpoints = tmd.getWriteEndpoints(keyTokens.get(5), table, strategy.getNaturalEndpoints(keyTokens.get(5)));
            assertTrue(endpoints.size() == 7);
            assertTrue(endpoints.contains(hosts.get(6)));
            assertTrue(endpoints.contains(hosts.get(7)));
            assertTrue(endpoints.contains(hosts.get(8)));
            assertTrue(endpoints.contains(hosts.get(0)));
            assertTrue(endpoints.contains(hosts.get(1)));
            assertTrue(endpoints.contains(boot1));
            assertTrue(endpoints.contains(boot2));

            // token 65 should go to nodes 7, 8, 9, 0, 1 and boot2
            endpoints = tmd.getWriteEndpoints(keyTokens.get(6), table, strategy.getNaturalEndpoints(keyTokens.get(6)));
            assertTrue(endpoints.size() == 6);
            assertTrue(endpoints.contains(hosts.get(7)));
            assertTrue(endpoints.contains(hosts.get(8)));
            assertTrue(endpoints.contains(hosts.get(9)));
            assertTrue(endpoints.contains(hosts.get(0)));
            assertTrue(endpoints.contains(hosts.get(1)));
            assertTrue(endpoints.contains(boot2));

            // token 75 should to go nodes 8, 9, 0, 1, 2 and boot2
            endpoints = tmd.getWriteEndpoints(keyTokens.get(7), table, strategy.getNaturalEndpoints(keyTokens.get(7)));
            assertTrue(endpoints.size() == 6);
            assertTrue(endpoints.contains(hosts.get(8)));
            assertTrue(endpoints.contains(hosts.get(9)));
            assertTrue(endpoints.contains(hosts.get(0)));
            assertTrue(endpoints.contains(hosts.get(1)));
            assertTrue(endpoints.contains(hosts.get(2)));
            assertTrue(endpoints.contains(boot2));

            // token 85 should go to nodes 9, 0, 1 and 2
            endpoints = tmd.getWriteEndpoints(keyTokens.get(8), table, strategy.getNaturalEndpoints(keyTokens.get(8)));
            assertTrue(endpoints.size() == 4);
            assertTrue(endpoints.contains(hosts.get(9)));
            assertTrue(endpoints.contains(hosts.get(0)));
            assertTrue(endpoints.contains(hosts.get(1)));
            assertTrue(endpoints.contains(hosts.get(2)));

            // token 95 should go to nodes 0, 1 and 2
            endpoints = tmd.getWriteEndpoints(keyTokens.get(9), table, strategy.getNaturalEndpoints(keyTokens.get(9)));
            assertTrue(endpoints.size() == 3);
            assertTrue(endpoints.contains(hosts.get(0)));
            assertTrue(endpoints.contains(hosts.get(1)));
            assertTrue(endpoints.contains(hosts.get(2)));

        }

        // Now finish node 6 and node 9 leaving, as well as boot1 (after this node 8 is still
        // leaving and boot2 in progress
        ss.onChange(hosts.get(LEAVING[0]), ApplicationState.STATUS, valueFactory.left(endpointTokens.get(LEAVING[0])));
        ss.onChange(hosts.get(LEAVING[2]), ApplicationState.STATUS, valueFactory.left(endpointTokens.get(LEAVING[2])));
        ss.onChange(boot1, ApplicationState.STATUS, valueFactory.normal(keyTokens.get(5)));

        // adjust precalcuated results.  this changes what the epected endpoints are.
        expectedEndpoints.get("Keyspace1").get(new BigIntegerToken("55")).removeAll(makeAddrs("127.0.0.7", "127.0.0.8"));
        expectedEndpoints.get("Keyspace1").get(new BigIntegerToken("85")).removeAll(makeAddrs("127.0.0.10"));
        expectedEndpoints.get("Keyspace2").get(new BigIntegerToken("55")).removeAll(makeAddrs("127.0.0.7", "127.0.0.8"));
        expectedEndpoints.get("Keyspace2").get(new BigIntegerToken("85")).removeAll(makeAddrs("127.0.0.10"));
        expectedEndpoints.get("Keyspace3").get(new BigIntegerToken("15")).removeAll(makeAddrs("127.0.0.7", "127.0.0.8"));
        expectedEndpoints.get("Keyspace3").get(new BigIntegerToken("25")).removeAll(makeAddrs("127.0.0.7", "127.0.1.2", "127.0.0.1"));
        expectedEndpoints.get("Keyspace3").get(new BigIntegerToken("35")).removeAll(makeAddrs("127.0.0.7", "127.0.0.2"));
        expectedEndpoints.get("Keyspace3").get(new BigIntegerToken("45")).removeAll(makeAddrs("127.0.0.7", "127.0.0.10", "127.0.0.3"));
        expectedEndpoints.get("Keyspace3").get(new BigIntegerToken("55")).removeAll(makeAddrs("127.0.0.7", "127.0.0.10", "127.0.0.4"));
        expectedEndpoints.get("Keyspace3").get(new BigIntegerToken("65")).removeAll(makeAddrs("127.0.0.10"));
        expectedEndpoints.get("Keyspace3").get(new BigIntegerToken("75")).removeAll(makeAddrs("127.0.0.10"));
        expectedEndpoints.get("Keyspace3").get(new BigIntegerToken("85")).removeAll(makeAddrs("127.0.0.10"));
        expectedEndpoints.get("Keyspace4").get(new BigIntegerToken("35")).removeAll(makeAddrs("127.0.0.7", "127.0.0.8"));
        expectedEndpoints.get("Keyspace4").get(new BigIntegerToken("45")).removeAll(makeAddrs("127.0.0.7", "127.0.1.2", "127.0.0.1"));
        expectedEndpoints.get("Keyspace4").get(new BigIntegerToken("55")).removeAll(makeAddrs("127.0.0.2", "127.0.0.7"));
        expectedEndpoints.get("Keyspace4").get(new BigIntegerToken("65")).removeAll(makeAddrs("127.0.0.10"));
        expectedEndpoints.get("Keyspace4").get(new BigIntegerToken("75")).removeAll(makeAddrs("127.0.0.10"));
        expectedEndpoints.get("Keyspace4").get(new BigIntegerToken("85")).removeAll(makeAddrs("127.0.0.10"));

        for (Map.Entry<String, AbstractReplicationStrategy> tableStrategy : tableStrategyMap.entrySet())
        {
            String table = tableStrategy.getKey();
            AbstractReplicationStrategy strategy = tableStrategy.getValue();

            for (int i = 0; i < keyTokens.size(); i++)
            {
                endpoints = tmd.getWriteEndpoints(keyTokens.get(i), table, strategy.getNaturalEndpoints(keyTokens.get(i)));
                assertTrue(expectedEndpoints.get(table).get(keyTokens.get(i)).size() == endpoints.size());
                assertTrue(expectedEndpoints.get(table).get(keyTokens.get(i)).containsAll(endpoints));
            }

            if (strategy.getReplicationFactor() != 3)
                continue;
            // leave this stuff in to guarantee the old tests work the way they were supposed to.
            // tokens 5, 15 and 25 should go three nodes
            for (int i=0; i<3; ++i)
            {
                endpoints = tmd.getWriteEndpoints(keyTokens.get(i), table, strategy.getNaturalEndpoints(keyTokens.get(i)));
                assertTrue(endpoints.size() == 3);
                assertTrue(endpoints.contains(hosts.get(i+1)));
                assertTrue(endpoints.contains(hosts.get(i+2)));
                assertTrue(endpoints.contains(hosts.get(i+3)));
            }

            // token 35 goes to nodes 4, 5 and boot1
            endpoints = tmd.getWriteEndpoints(keyTokens.get(3), table, strategy.getNaturalEndpoints(keyTokens.get(3)));
            assertTrue(endpoints.size() == 3);
            assertTrue(endpoints.contains(hosts.get(4)));
            assertTrue(endpoints.contains(hosts.get(5)));
            assertTrue(endpoints.contains(boot1));

            // token 45 goes to nodes 5, boot1 and node7
            endpoints = tmd.getWriteEndpoints(keyTokens.get(4), table, strategy.getNaturalEndpoints(keyTokens.get(4)));
            assertTrue(endpoints.size() == 3);
            assertTrue(endpoints.contains(hosts.get(5)));
            assertTrue(endpoints.contains(boot1));
            assertTrue(endpoints.contains(hosts.get(7)));

            // token 55 goes to boot1, 7, boot2, 8 and 0
            endpoints = tmd.getWriteEndpoints(keyTokens.get(5), table, strategy.getNaturalEndpoints(keyTokens.get(5)));
            assertTrue(endpoints.size() == 5);
            assertTrue(endpoints.contains(boot1));
            assertTrue(endpoints.contains(hosts.get(7)));
            assertTrue(endpoints.contains(boot2));
            assertTrue(endpoints.contains(hosts.get(8)));
            assertTrue(endpoints.contains(hosts.get(0)));

            // token 65 goes to nodes 7, boot2, 8, 0 and 1
            endpoints = tmd.getWriteEndpoints(keyTokens.get(6), table, strategy.getNaturalEndpoints(keyTokens.get(6)));
            assertTrue(endpoints.size() == 5);
            assertTrue(endpoints.contains(hosts.get(7)));
            assertTrue(endpoints.contains(boot2));
            assertTrue(endpoints.contains(hosts.get(8)));
            assertTrue(endpoints.contains(hosts.get(0)));
            assertTrue(endpoints.contains(hosts.get(1)));

            // token 75 goes to nodes boot2, 8, 0, 1 and 2
            endpoints = tmd.getWriteEndpoints(keyTokens.get(7), table, strategy.getNaturalEndpoints(keyTokens.get(7)));
            assertTrue(endpoints.size() == 5);
            assertTrue(endpoints.contains(boot2));
            assertTrue(endpoints.contains(hosts.get(8)));
            assertTrue(endpoints.contains(hosts.get(0)));
            assertTrue(endpoints.contains(hosts.get(1)));
            assertTrue(endpoints.contains(hosts.get(2)));

            // token 85 goes to nodes 0, 1 and 2
            endpoints = tmd.getWriteEndpoints(keyTokens.get(8), table, strategy.getNaturalEndpoints(keyTokens.get(8)));
            assertTrue(endpoints.size() == 3);
            assertTrue(endpoints.contains(hosts.get(0)));
            assertTrue(endpoints.contains(hosts.get(1)));
            assertTrue(endpoints.contains(hosts.get(2)));

            // token 95 goes to nodes 0, 1 and 2
            endpoints = tmd.getWriteEndpoints(keyTokens.get(9), table, strategy.getNaturalEndpoints(keyTokens.get(9)));
            assertTrue(endpoints.size() == 3);
            assertTrue(endpoints.contains(hosts.get(0)));
            assertTrue(endpoints.contains(hosts.get(1)));
            assertTrue(endpoints.contains(hosts.get(2)));
        }

        ss.setPartitionerUnsafe(oldPartitioner);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\LeaveAndBootstrapTest;testStateJumpToBootstrap();;;@Test
    public void testStateJumpToBootstrap() throws UnknownHostException
    {
        StorageService ss = StorageService.instance;
        TokenMetadata tmd = ss.getTokenMetadata();
        tmd.clearUnsafe();
        IPartitioner partitioner = new RandomPartitioner();
        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);

        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);

        ArrayList<Token> endpointTokens = new ArrayList<Token>();
        ArrayList<Token> keyTokens = new ArrayList<Token>();
        List<InetAddress> hosts = new ArrayList<InetAddress>();

        // create a ring or 5 nodes
        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 7);

        // node 2 leaves
        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.leaving(endpointTokens.get(2)));

        // don't bother to test pending ranges here, that is extensively tested by other
        // tests. Just check that the node is in appropriate lists.
        assertTrue(tmd.isMember(hosts.get(2)));
        assertTrue(tmd.isLeaving(hosts.get(2)));
        assertTrue(tmd.getBootstrapTokens().isEmpty());

        // Bootstrap the node immedidiately to keyTokens.get(4) without going through STATE_LEFT
        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(4)));

        assertFalse(tmd.isMember(hosts.get(2)));
        assertFalse(tmd.isLeaving(hosts.get(2)));
        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));

        // Bootstrap node hosts.get(3) to keyTokens.get(1)
        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));

        assertFalse(tmd.isMember(hosts.get(3)));
        assertFalse(tmd.isLeaving(hosts.get(3)));
        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)).equals(hosts.get(2)));
        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));

        // Bootstrap node hosts.get(2) further to keyTokens.get(3)
        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(3)));

        assertFalse(tmd.isMember(hosts.get(2)));
        assertFalse(tmd.isLeaving(hosts.get(2)));
        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(3)).equals(hosts.get(2)));
        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(4)) == null);
        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));

        // Go to normal again for both nodes
        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(3)));
        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(2)));

        assertTrue(tmd.isMember(hosts.get(2)));
        assertFalse(tmd.isLeaving(hosts.get(2)));
        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(3)));
        assertTrue(tmd.isMember(hosts.get(3)));
        assertFalse(tmd.isLeaving(hosts.get(3)));
        assertTrue(tmd.getToken(hosts.get(3)).equals(keyTokens.get(2)));

        assertTrue(tmd.getBootstrapTokens().isEmpty());

        ss.setPartitionerUnsafe(oldPartitioner);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\LeaveAndBootstrapTest;testStateJumpToNormal();;;@Test
    public void testStateJumpToNormal() throws UnknownHostException
    {
        StorageService ss = StorageService.instance;
        TokenMetadata tmd = ss.getTokenMetadata();
        tmd.clearUnsafe();
        IPartitioner partitioner = new RandomPartitioner();
        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);

        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);

        ArrayList<Token> endpointTokens = new ArrayList<Token>();
        ArrayList<Token> keyTokens = new ArrayList<Token>();
        List<InetAddress> hosts = new ArrayList<InetAddress>();

        // create a ring or 5 nodes
        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 6);

        // node 2 leaves
        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.leaving(endpointTokens.get(2)));

        assertTrue(tmd.isLeaving(hosts.get(2)));
        assertTrue(tmd.getToken(hosts.get(2)).equals(endpointTokens.get(2)));

        // back to normal
        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(2)));

        assertTrue(tmd.getLeavingEndpoints().isEmpty());
        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(2)));

        // node 3 goes through leave and left and then jumps to normal at its new token
        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.leaving(keyTokens.get(2)));
        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.left(keyTokens.get(2)));
        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.normal(keyTokens.get(4)));

        assertTrue(tmd.getBootstrapTokens().isEmpty());
        assertTrue(tmd.getLeavingEndpoints().isEmpty());
        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(4)));

        ss.setPartitionerUnsafe(oldPartitioner);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\LeaveAndBootstrapTest;testStateJumpToLeaving();;;@Test
    public void testStateJumpToLeaving() throws UnknownHostException
    {
        StorageService ss = StorageService.instance;
        TokenMetadata tmd = ss.getTokenMetadata();
        tmd.clearUnsafe();
        IPartitioner partitioner = new RandomPartitioner();
        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);

        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);

        ArrayList<Token> endpointTokens = new ArrayList<Token>();
        ArrayList<Token> keyTokens = new ArrayList<Token>();
        List<InetAddress> hosts = new ArrayList<InetAddress>();

        // create a ring or 5 nodes
        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 6);

        // node 2 leaves with _different_ token
        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.leaving(keyTokens.get(0)));

        assertTrue(tmd.getToken(hosts.get(2)).equals(keyTokens.get(0)));
        assertTrue(tmd.isLeaving(hosts.get(2)));
        assertTrue(tmd.getEndpoint(endpointTokens.get(2)) == null);

        // go to boostrap
        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));

        assertFalse(tmd.isLeaving(hosts.get(2)));
        assertTrue(tmd.getBootstrapTokens().size() == 1);
        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(2)));

        // jump to leaving again
        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.leaving(keyTokens.get(1)));

        assertTrue(tmd.getEndpoint(keyTokens.get(1)).equals(hosts.get(2)));
        assertTrue(tmd.isLeaving(hosts.get(2)));
        assertTrue(tmd.getBootstrapTokens().isEmpty());

        // go to state left
        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.left(keyTokens.get(1)));

        assertFalse(tmd.isMember(hosts.get(2)));
        assertFalse(tmd.isLeaving(hosts.get(2)));

        ss.setPartitionerUnsafe(oldPartitioner);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\LeaveAndBootstrapTest;testStateJumpToLeft();;;@Test
    public void testStateJumpToLeft() throws UnknownHostException
    {
        StorageService ss = StorageService.instance;
        TokenMetadata tmd = ss.getTokenMetadata();
        tmd.clearUnsafe();
        IPartitioner partitioner = new RandomPartitioner();
        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);

        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);

        ArrayList<Token> endpointTokens = new ArrayList<Token>();
        ArrayList<Token> keyTokens = new ArrayList<Token>();
        List<InetAddress> hosts = new ArrayList<InetAddress>();

        // create a ring of 6 nodes
        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, 7);

        // node hosts.get(2) goes jumps to left
        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.left(endpointTokens.get(2)));

        assertFalse(tmd.isMember(hosts.get(2)));

        // node hosts.get(4) goes to bootstrap
        ss.onChange(hosts.get(3), ApplicationState.STATUS, valueFactory.bootstrapping(keyTokens.get(1)));

        assertFalse(tmd.isMember(hosts.get(3)));
        assertTrue(tmd.getBootstrapTokens().size() == 1);
        assertTrue(tmd.getBootstrapTokens().get(keyTokens.get(1)).equals(hosts.get(3)));

        // and then directly to 'left'
        ss.onChange(hosts.get(2), ApplicationState.STATUS, valueFactory.left(keyTokens.get(1)));

        assertTrue(tmd.getBootstrapTokens().size() == 0);
        assertFalse(tmd.isMember(hosts.get(2)));
        assertFalse(tmd.isLeaving(hosts.get(2)));

        ss.setPartitionerUnsafe(oldPartitioner);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\LeaveAndBootstrapTest;makeAddrs(String);;;private static Collection<InetAddress> makeAddrs(String... hosts) throws UnknownHostException
    {
        ArrayList<InetAddress> addrs = new ArrayList<InetAddress>(hosts.length);
        for (String host : hosts)
            addrs.add(InetAddress.getByName(host));
        return addrs;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\LeaveAndBootstrapTest;getStrategy(String,TokenMetadata);;;private AbstractReplicationStrategy getStrategy(String table, TokenMetadata tmd) throws ConfigurationException
    {
        KSMetaData ksmd =  DatabaseDescriptor.getKSMetaData(table);
        return AbstractReplicationStrategy.createReplicationStrategy(
                table,
                ksmd.strategyClass,
                tmd,
                new SimpleSnitch(),
                ksmd.strategyOptions);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\MoveTest;newTestWriteEndpointsDuringMove();;;@Test
    public void newTestWriteEndpointsDuringMove() throws Exception
    {
        StorageService ss = StorageService.instance;
        final int RING_SIZE = 10;
        final int MOVING_NODE = 3; // index of the moving node

        TokenMetadata tmd = ss.getTokenMetadata();
        tmd.clearUnsafe();
        IPartitioner partitioner = new RandomPartitioner();
        VersionedValue.VersionedValueFactory valueFactory = new VersionedValue.VersionedValueFactory(partitioner);

        IPartitioner oldPartitioner = ss.setPartitionerUnsafe(partitioner);

        ArrayList<Token> endpointTokens = new ArrayList<Token>();
        ArrayList<Token> keyTokens = new ArrayList<Token>();
        List<InetAddress> hosts = new ArrayList<InetAddress>();

        Util.createInitialRing(ss, partitioner, endpointTokens, keyTokens, hosts, RING_SIZE);

        Map<Token, List<InetAddress>> expectedEndpoints = new HashMap<Token, List<InetAddress>>();
        for (String table : DatabaseDescriptor.getNonSystemTables())
        {
            for (Token token : keyTokens)
            {
                List<InetAddress> endpoints = new ArrayList<InetAddress>();
                Iterator<Token> tokenIter = TokenMetadata.ringIterator(tmd.sortedTokens(), token, false);
                while (tokenIter.hasNext())
                {
                    endpoints.add(tmd.getEndpoint(tokenIter.next()));
                }
                expectedEndpoints.put(token, endpoints);
            }
        }

        // node LEAVING_NODE should move to this token
        Token newToken = positionToken(MOVING_NODE);

        // Third node leaves
        ss.onChange(hosts.get(MOVING_NODE), ApplicationState.STATUS, valueFactory.moving(newToken));

        assertTrue(tmd.isMoving(hosts.get(MOVING_NODE)));

        AbstractReplicationStrategy strategy;
        for (String table : DatabaseDescriptor.getNonSystemTables())
        {
            strategy = getStrategy(table, tmd);
            for (Token token : keyTokens)
            {
                int replicationFactor = strategy.getReplicationFactor();

                HashSet<InetAddress> actual = new HashSet<InetAddress>(tmd.getWriteEndpoints(token, table, strategy.calculateNaturalEndpoints(token, tmd)));
                HashSet<InetAddress> expected = new HashSet<InetAddress>();

                for (int i = 0; i < replicationFactor; i++)
                {
                    expected.add(expectedEndpoints.get(token).get(i));
                }

                assertEquals("mismatched endpoint sets", expected, actual);
            }
        }

        // moving endpoint back to the normal state
        ss.onChange(hosts.get(MOVING_NODE), ApplicationState.STATUS, valueFactory.normal(newToken));
        ss.setPartitionerUnsafe(oldPartitioner);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\MoveTest;testSimultaneousMove();        for (int i=1; i<=4; i++);;        for (int i = 1; i <= 4; i++)
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\MoveTest;testSimultaneousMove();;;       /**
        *  Keyspace1 & Keyspace2 RF=1
        *  {
        *      /127.0.0.1=[(92,0]],
        *      /127.0.0.2=[(0,10]],
        *      /127.0.0.3=[(10,20]],
        *      /127.0.0.4=[(20,30]],
        *      /127.0.0.5=[(30,40]],
        *      /127.0.0.6=[(40,50]],
        *      /127.0.0.7=[(50,62]],
        *      /127.0.0.8=[(62,70]],
        *      /127.0.0.9=[(70,82]],
        *      /127.0.0.10=[(82,92]]
        *  }
        */

        Multimap<InetAddress, Range> keyspace1ranges = tableStrategyMap.get("Keyspace1").getAddressRanges();
        Collection<Range> ranges1 = keyspace1ranges.get(InetAddress.getByName("127.0.0.1"));
        assertEquals(collectionSize(ranges1), 1);
        assertTrue(ranges1.iterator().next().equals(generateRange(92, 0)));
        Collection<Range> ranges2 = keyspace1ranges.get(InetAddress.getByName("127.0.0.2"));
        assertEquals(collectionSize(ranges2), 1);
        assertTrue(ranges2.iterator().next().equals(generateRange(0, 10)));
        Collection<Range> ranges3 = keyspace1ranges.get(InetAddress.getByName("127.0.0.3"));
        assertEquals(collectionSize(ranges3), 1);
        assertTrue(ranges3.iterator().next().equals(generateRange(10, 20)));
        Collection<Range> ranges4 = keyspace1ranges.get(InetAddress.getByName("127.0.0.4"));
        assertEquals(collectionSize(ranges4), 1);
        assertTrue(ranges4.iterator().next().equals(generateRange(20, 30)));
        Collection<Range> ranges5 = keyspace1ranges.get(InetAddress.getByName("127.0.0.5"));
        assertEquals(collectionSize(ranges5), 1);
        assertTrue(ranges5.iterator().next().equals(generateRange(30, 40)));
        Collection<Range> ranges6 = keyspace1ranges.get(InetAddress.getByName("127.0.0.6"));
        assertEquals(collectionSize(ranges6), 1);
        assertTrue(ranges6.iterator().next().equals(generateRange(40, 50)));
        Collection<Range> ranges7 = keyspace1ranges.get(InetAddress.getByName("127.0.0.7"));
        assertEquals(collectionSize(ranges7), 1);
        assertTrue(ranges7.iterator().next().equals(generateRange(50, 62)));
        Collection<Range> ranges8 = keyspace1ranges.get(InetAddress.getByName("127.0.0.8"));
        assertEquals(collectionSize(ranges8), 1);
        assertTrue(ranges8.iterator().next().equals(generateRange(62, 70)));
        Collection<Range> ranges9 = keyspace1ranges.get(InetAddress.getByName("127.0.0.9"));
        assertEquals(collectionSize(ranges9), 1);
        assertTrue(ranges9.iterator().next().equals(generateRange(70, 82)));
        Collection<Range> ranges10 = keyspace1ranges.get(InetAddress.getByName("127.0.0.10"));
        assertEquals(collectionSize(ranges10), 1);
        assertTrue(ranges10.iterator().next().equals(generateRange(82, 92)));


        /**
        * Keyspace3 RF=5
        * {
        *      /127.0.0.1=[(92,0], (70,82], (50,62], (82,92], (62,70]],
        *      /127.0.0.2=[(92,0], (70,82], (82,92], (0,10], (62,70]],
        *      /127.0.0.3=[(92,0], (70,82], (82,92], (0,10], (10,20]],
        *      /127.0.0.4=[(92,0], (20,30], (82,92], (0,10], (10,20]],
        *      /127.0.0.5=[(92,0], (30,40], (20,30], (0,10], (10,20]],
        *      /127.0.0.6=[(40,50], (30,40], (20,30], (0,10], (10,20]],
        *      /127.0.0.7=[(40,50], (30,40], (50,62], (20,30], (10,20]],
        *      /127.0.0.8=[(40,50], (30,40], (50,62], (20,30], (62,70]],
        *      /127.0.0.9=[(40,50], (70,82], (30,40], (50,62], (62,70]],
        *      /127.0.0.10=[(40,50], (70,82], (50,62], (82,92], (62,70]]
        * }
        */

        Multimap<InetAddress, Range> keyspace3ranges = tableStrategyMap.get("Keyspace3").getAddressRanges();
        ranges1 = keyspace3ranges.get(InetAddress.getByName("127.0.0.1"));
        assertEquals(collectionSize(ranges1), 5);
        assertTrue(ranges1.equals(generateRanges(92, 0, 70, 82, 50, 62, 82, 92, 62, 70)));
        ranges2 = keyspace3ranges.get(InetAddress.getByName("127.0.0.2"));
        assertEquals(collectionSize(ranges2), 5);
        assertTrue(ranges2.equals(generateRanges(92, 0, 70, 82, 82, 92, 0, 10, 62, 70)));
        ranges3 = keyspace3ranges.get(InetAddress.getByName("127.0.0.3"));
        assertEquals(collectionSize(ranges3), 5);
        assertTrue(ranges3.equals(generateRanges(92, 0, 70, 82, 82, 92, 0, 10, 10, 20)));
        ranges4 = keyspace3ranges.get(InetAddress.getByName("127.0.0.4"));
        assertEquals(collectionSize(ranges4), 5);
        assertTrue(ranges4.equals(generateRanges(92, 0, 20, 30, 82, 92, 0, 10, 10, 20)));
        ranges5 = keyspace3ranges.get(InetAddress.getByName("127.0.0.5"));
        assertEquals(collectionSize(ranges5), 5);
        assertTrue(ranges5.equals(generateRanges(92, 0, 30, 40, 20, 30, 0, 10, 10, 20)));
        ranges6 = keyspace3ranges.get(InetAddress.getByName("127.0.0.6"));
        assertEquals(collectionSize(ranges6), 5);
        assertTrue(ranges6.equals(generateRanges(40, 50, 30, 40, 20, 30, 0, 10, 10, 20)));
        ranges7 = keyspace3ranges.get(InetAddress.getByName("127.0.0.7"));
        assertEquals(collectionSize(ranges7), 5);
        assertTrue(ranges7.equals(generateRanges(40, 50, 30, 40, 50, 62, 20, 30, 10, 20)));
        ranges8 = keyspace3ranges.get(InetAddress.getByName("127.0.0.8"));
        assertEquals(collectionSize(ranges8), 5);
        assertTrue(ranges8.equals(generateRanges(40, 50, 30, 40, 50, 62, 20, 30, 62, 70)));
        ranges9 = keyspace3ranges.get(InetAddress.getByName("127.0.0.9"));
        assertEquals(collectionSize(ranges9), 5);
        assertTrue(ranges9.equals(generateRanges(40, 50, 70, 82, 30, 40, 50, 62, 62, 70)));
        ranges10 = keyspace3ranges.get(InetAddress.getByName("127.0.0.10"));
        assertEquals(collectionSize(ranges10), 5);
        assertTrue(ranges10.equals(generateRanges(40, 50, 70, 82, 50, 62, 82, 92, 62, 70)));


        /**
         * Keyspace4 RF=3
         * {
         *      /127.0.0.1=[(92,0], (70,82], (82,92]],
         *      /127.0.0.2=[(92,0], (82,92], (0,10]],
         *      /127.0.0.3=[(92,0], (0,10], (10,20]],
         *      /127.0.0.4=[(20,30], (0,10], (10,20]],
         *      /127.0.0.5=[(30,40], (20,30], (10,20]],
         *      /127.0.0.6=[(40,50], (30,40], (20,30]],
         *      /127.0.0.7=[(40,50], (30,40], (50,62]],
         *      /127.0.0.8=[(40,50], (50,62], (62,70]],
         *      /127.0.0.9=[(70,82], (50,62], (62,70]],
         *      /127.0.0.10=[(70,82], (82,92], (62,70]]
         *  }
         */
        Multimap<InetAddress, Range> keyspace4ranges = tableStrategyMap.get("Keyspace4").getAddressRanges();
        ranges1 = keyspace4ranges.get(InetAddress.getByName("127.0.0.1"));
        assertEquals(collectionSize(ranges1), 3);
        assertTrue(ranges1.equals(generateRanges(92, 0, 70, 82, 82, 92)));
        ranges2 = keyspace4ranges.get(InetAddress.getByName("127.0.0.2"));
        assertEquals(collectionSize(ranges2), 3);
        assertTrue(ranges2.equals(generateRanges(92, 0, 82, 92, 0, 10)));
        ranges3 = keyspace4ranges.get(InetAddress.getByName("127.0.0.3"));
        assertEquals(collectionSize(ranges3), 3);
        assertTrue(ranges3.equals(generateRanges(92, 0, 0, 10, 10, 20)));
        ranges4 = keyspace4ranges.get(InetAddress.getByName("127.0.0.4"));
        assertEquals(collectionSize(ranges4), 3);
        assertTrue(ranges4.equals(generateRanges(20, 30, 0, 10, 10, 20)));
        ranges5 = keyspace4ranges.get(InetAddress.getByName("127.0.0.5"));
        assertEquals(collectionSize(ranges5), 3);
        assertTrue(ranges5.equals(generateRanges(30, 40, 20, 30, 10, 20)));
        ranges6 = keyspace4ranges.get(InetAddress.getByName("127.0.0.6"));
        assertEquals(collectionSize(ranges6), 3);
        assertTrue(ranges6.equals(generateRanges(40, 50, 30, 40, 20, 30)));
        ranges7 = keyspace4ranges.get(InetAddress.getByName("127.0.0.7"));
        assertEquals(collectionSize(ranges7), 3);
        assertTrue(ranges7.equals(generateRanges(40, 50, 30, 40, 50, 62)));
        ranges8 = keyspace4ranges.get(InetAddress.getByName("127.0.0.8"));
        assertEquals(collectionSize(ranges8), 3);
        assertTrue(ranges8.equals(generateRanges(40, 50, 50, 62, 62, 70)));
        ranges9 = keyspace4ranges.get(InetAddress.getByName("127.0.0.9"));
        assertEquals(collectionSize(ranges9), 3);
        assertTrue(ranges9.equals(generateRanges(70, 82, 50, 62, 62, 70)));
        ranges10 = keyspace4ranges.get(InetAddress.getByName("127.0.0.10"));
        assertEquals(collectionSize(ranges10), 3);
        assertTrue(ranges10.equals(generateRanges(70, 82, 82, 92, 62, 70)));
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\MoveTest;testSimultaneousMove();;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\MoveTest;testSimultaneousMove();;;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\MoveTest;getStrategy(String,TokenMetadata);;;        KSMetaData ksmd =  DatabaseDescriptor.getKSMetaData(table);
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\MoveTest;positionToken(int);;;private Token positionToken(int position)
    {
        return new BigIntegerToken(String.valueOf(10 * position + 2));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\MoveTest;collectionSize(Collection<?>);;;private int collectionSize(Collection<?> collection)
    {
        if (collection.isEmpty())
            return 0;

        Iterator<?> iterator = collection.iterator();

        int count = 0;
        while (iterator.hasNext())
        {
            iterator.next();
            count++;
        }

        return count;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\MoveTest;generateRanges(int);;;private Collection<Range> generateRanges(int... rangePairs)
    {
        if (rangePairs.length % 2 == 1)
            throw new RuntimeException("generateRanges argument count should be even");

        Set<Range> ranges = new HashSet<Range>();

        for (int i = 0; i < rangePairs.length; i+=2)
        {
            ranges.add(generateRange(rangePairs[i], rangePairs[i+1]));
        }

        return ranges;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\service\MoveTest;generateRange(int,int);;;private Range generateRange(int left, int right)
    {
        return new Range(new BigIntegerToken(String.valueOf(left)), new BigIntegerToken(String.valueOf(right)));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\streaming\SerializationsTest;makePendingFile(boolean,int,OperationType);;;private static PendingFile makePendingFile(boolean sst, int numSecs, OperationType op)
    {
        Descriptor desc = new Descriptor("z", new File("path/doesn't/matter"), "Keyspace1", "Standard1", 23, false);
        List<Pair<Long, Long>> sections = new ArrayList<Pair<Long, Long>>();
        for (int i = 0; i < numSecs; i++)
            sections.add(new Pair<Long, Long>(new Long(i), new Long(i * i)));
        return new PendingFile(sst ? makeSSTable() : null, desc, SSTable.COMPONENT_DATA, sections, op);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\thrift\ThriftValidationTest;testValidateCommutativeWithStandard();;;@Test(expected=InvalidRequestException.class)
    public void testValidateCommutativeWithStandard() throws InvalidRequestException
    {
        ThriftValidation.validateColumnFamily("Keyspace1", "Standard1", true);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\thrift\ThriftValidationTest;testValidateCommutativeWithCounter();;;@Test
    public void testValidateCommutativeWithCounter() throws InvalidRequestException
    {
        ThriftValidation.validateColumnFamily("Keyspace1", "Counter1", true);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\tools\SSTableExportTest;testExportCounterCf();;;@Test
    public void testExportCounterCf() throws IOException
    {
        File tempSS = tempSSTableFile("Keyspace1", "Counter1");
        ColumnFamily cfamily = ColumnFamily.create("Keyspace1", "Counter1");
        SSTableWriter writer = new SSTableWriter(tempSS.getPath(), 2);

        // Add rowA
        cfamily.addColumn(null, new CounterColumn(ByteBufferUtil.bytes("colA"), 42, System.currentTimeMillis()));
        writer.append(Util.dk("rowA"), cfamily);
        cfamily.clear();

        SSTableReader reader = writer.closeAndOpenReader();

        // Export to JSON and verify
        File tempJson = File.createTempFile("Counter1", ".json");
        SSTableExport.export(reader, new PrintStream(tempJson.getPath()), new String[0]);

        JSONObject json = (JSONObject)JSONValue.parse(new FileReader(tempJson));

        JSONArray rowA = (JSONArray)json.get(asHex("rowA"));
        JSONArray colA = (JSONArray)rowA.get(0);
        assert hexToBytes((String)colA.get(0)).equals(ByteBufferUtil.bytes("colA"));
        assert ((String) colA.get(3)).equals("c");
        assert (Long) colA.get(4) == Long.MIN_VALUE;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\tools\SSTableImportTest;testImportSimpleCfOldFormat();;;@Test
    public void testImportSimpleCfOldFormat() throws IOException
    {
        // Import JSON to temp SSTable file
        String jsonUrl = getClass().getClassLoader().getResource("SimpleCF.oldformat.json").getPath();
        File tempSS = tempSSTableFile("Keyspace1", "Standard1");
        SSTableImport.importJson(jsonUrl, "Keyspace1", "Standard1", tempSS.getPath());

        // Verify results
        SSTableReader reader = SSTableReader.open(Descriptor.fromFilename(tempSS.getPath()));
        QueryFilter qf = QueryFilter.getIdentityFilter(Util.dk("rowA"), new QueryPath("Standard1"));
        IColumnIterator iter = qf.getSSTableColumnIterator(reader);
        ColumnFamily cf = iter.getColumnFamily();
        while (iter.hasNext()) cf.addColumn(iter.next());
        assert cf.getColumn(ByteBufferUtil.bytes("colAA")).value().equals(hexToBytes("76616c4141"));
        assert !(cf.getColumn(ByteBufferUtil.bytes("colAA")) instanceof DeletedColumn);
        IColumn expCol = cf.getColumn(ByteBufferUtil.bytes("colAC"));
        assert expCol.value().equals(hexToBytes("76616c4143"));
        assert expCol instanceof ExpiringColumn;
        assert ((ExpiringColumn)expCol).getTimeToLive() == 42 && expCol.getLocalDeletionTime() == 2000000000;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\tools\SSTableImportTest;testImportCounterCf();;;@Test
    public void testImportCounterCf() throws IOException
    {
        // Import JSON to temp SSTable file
        String jsonUrl = getClass().getClassLoader().getResource("CounterCF.json").getPath();
        File tempSS = tempSSTableFile("Keyspace1", "Counter1");
        SSTableImport.importJson(jsonUrl, "Keyspace1", "Counter1", tempSS.getPath());

        // Verify results
        SSTableReader reader = SSTableReader.open(Descriptor.fromFilename(tempSS.getPath()));
        QueryFilter qf = QueryFilter.getIdentityFilter(Util.dk("rowA"), new QueryPath("Counter1"));
        IColumnIterator iter = qf.getSSTableColumnIterator(reader);
        ColumnFamily cf = iter.getColumnFamily();
        while (iter.hasNext()) cf.addColumn(iter.next());
        IColumn c = cf.getColumn(ByteBufferUtil.bytes("colAA"));
        assert c instanceof CounterColumn: c;
        assert ((CounterColumn) c).total() == 42;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\utils\FBUtilitiesTest;testCopyIntoBytes();;;@Test
    public void testCopyIntoBytes()
    {
        int i = 300;
        long l = 1000;
        ByteBuffer b = ByteBuffer.allocate(20);
        FBUtilities.copyIntoBytes(b.array(), 0, i);
        FBUtilities.copyIntoBytes(b.array(), 4, l);
        assertEquals(i, b.getInt(0));
        assertEquals(l, b.getLong(4));
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\utils\FBUtilitiesTest;testCompareByteSubArrays();;;@Test
    public void testCompareByteSubArrays()
    {
        ByteBuffer bytes = ByteBuffer.allocate(16);

        // handle null
        assert ByteBufferUtil.compareSubArrays(
                null, 0, null, 0, 0) == 0;
        assert ByteBufferUtil.compareSubArrays(
                null, 0, ByteBufferUtil.bytes(524255231), 0, 4) == -1;
        assert ByteBufferUtil.compareSubArrays(
                ByteBufferUtil.bytes(524255231), 0, null, 0, 4) == 1;

        // handle comparisons
        FBUtilities.copyIntoBytes(bytes.array(), 3, 524255231);
        assert ByteBufferUtil.compareSubArrays(
                bytes, 3, ByteBufferUtil.bytes(524255231), 0, 4) == 0;
        assert ByteBufferUtil.compareSubArrays(
                bytes, 3, ByteBufferUtil.bytes(524255232), 0, 4) == -1;
        assert ByteBufferUtil.compareSubArrays(
                bytes, 3, ByteBufferUtil.bytes(524255230), 0, 4) == 1;

        // check that incorrect length throws exception
        try
        {
            assert ByteBufferUtil.compareSubArrays(
                    bytes, 3, ByteBufferUtil.bytes(524255231), 0, 24) == 0;
            fail("Should raise an AssertionError.");
        } catch (AssertionError ae)
        {
        }
        try
        {
            assert ByteBufferUtil.compareSubArrays(
                    bytes, 3, ByteBufferUtil.bytes(524255231), 0, 12) == 0;
            fail("Should raise an AssertionError.");
        } catch (AssertionError ae)
        {
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\utils\FBUtilitiesTest;testDecode();;;@Test(expected=CharacterCodingException.class)
    public void testDecode() throws IOException
    {
        ByteBuffer bytes = ByteBuffer.wrap(new byte[]{(byte)0xff, (byte)0xfe});
        ByteBufferUtil.string(bytes, Charsets.UTF_8);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\utils\MerkleTreeTest;fullRange();;;private Range fullRange()
    {
        return new Range(partitioner.getMinimumToken(), partitioner.getMinimumToken());
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\utils\MerkleTreeTest;testSerialization();;;        restored.fullRange = fullRange();
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\test\unit\org\apache\cassandra\utils\MerkleTreeTest;testDifference();;;        // add dummy hashes to both trees
        for (TreeRange range : mt.invalids())
            range.addAll(new HIterator(range.right));
        for (TreeRange range : mt2.invalids())
            range.addAll(new HIterator(range.right));
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;Session(String[]);;;public Session(String[] arguments) throws IllegalArgumentException
    {
        float STDev = 0.1f;
        CommandLineParser parser = new PosixParser();

        try
        {
            CommandLine cmd = parser.parse(availableOptions, arguments);

            if (cmd.getArgs().length > 0)
            {
                System.err.println("Application does not allow arbitrary arguments: " + StringUtils.join(cmd.getArgList(), ", "));
                System.exit(1);
            }

            if (cmd.hasOption("h"))
                throw new IllegalArgumentException("help");

            if (cmd.hasOption("n"))
                numKeys = Integer.parseInt(cmd.getOptionValue("n"));

            if (cmd.hasOption("F"))
                numDifferentKeys = Integer.parseInt(cmd.getOptionValue("F"));
            else
                numDifferentKeys = numKeys;

            if (cmd.hasOption("N"))
                skipKeys = Float.parseFloat(cmd.getOptionValue("N"));

            if (cmd.hasOption("t"))
                threads = Integer.parseInt(cmd.getOptionValue("t"));

            if (cmd.hasOption("c"))
                columns = Integer.parseInt(cmd.getOptionValue("c"));

            if (cmd.hasOption("S"))
                columnSize = Integer.parseInt(cmd.getOptionValue("S"));

            if (cmd.hasOption("C"))
                cardinality = Integer.parseInt(cmd.getOptionValue("C"));

            if (cmd.hasOption("d"))
                nodes = cmd.getOptionValue("d").split(",");

            if (cmd.hasOption("D"))
            {
                try
                {
                    String node = null;
                    List<String> tmpNodes = new ArrayList<String>();
                    BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(cmd.getOptionValue("D"))));
                    while ((node = in.readLine()) != null)
                    {
                        if (node.length() > 0)
                            tmpNodes.add(node);
                    }
                    nodes = tmpNodes.toArray(new String[tmpNodes.size()]);
                    in.close();
                }
                catch(IOException ioe)
                {
                    throw new RuntimeException(ioe);
                }
            }

            if (cmd.hasOption("s"))
                STDev = Float.parseFloat(cmd.getOptionValue("s"));

            if (cmd.hasOption("r"))
                random = true;

            if (cmd.hasOption("f"))
            {
                try
                {
                    out = new PrintStream(new FileOutputStream(cmd.getOptionValue("f")));
                }
                catch (FileNotFoundException e)
                {
                    System.out.println(e.getMessage());
                }
            }

            if (cmd.hasOption("p"))
                port = Integer.parseInt(cmd.getOptionValue("p"));

            if (cmd.hasOption("m"))
                unframed = Boolean.parseBoolean(cmd.getOptionValue("m"));

            if (cmd.hasOption("o"))
                operation = Stress.Operations.valueOf(cmd.getOptionValue("o").toUpperCase());

            if (cmd.hasOption("u"))
                superColumns = Integer.parseInt(cmd.getOptionValue("u"));

            if (cmd.hasOption("y"))
                columnFamilyType = ColumnFamilyType.valueOf(cmd.getOptionValue("y"));

            if (cmd.hasOption("K"))
            {
                retryTimes = Integer.valueOf(cmd.getOptionValue("K"));

                if (retryTimes <= 0)
                {
                    throw new RuntimeException("--keep-trying option value should be > 0");
                }
            }

            if (cmd.hasOption("k"))
            {
                retryTimes = 1;
                ignoreErrors = true;
            }


            if (cmd.hasOption("i"))
                progressInterval = Integer.parseInt(cmd.getOptionValue("i"));

            if (cmd.hasOption("g"))
                keysPerCall = Integer.parseInt(cmd.getOptionValue("g"));

            if (cmd.hasOption("e"))
                consistencyLevel = ConsistencyLevel.valueOf(cmd.getOptionValue("e").toUpperCase());

            if (cmd.hasOption("x"))
                indexType = IndexType.valueOf(cmd.getOptionValue("x").toUpperCase());

            if (cmd.hasOption("R"))
                replicationStrategy = cmd.getOptionValue("R");

            if (cmd.hasOption("l"))
                replicationStrategyOptions.put("replication_factor", String.valueOf(Integer.parseInt(cmd.getOptionValue("l"))));
            else if (replicationStrategy.endsWith("SimpleStrategy"))
                replicationStrategyOptions.put("replication_factor", "1");

            if (cmd.hasOption("O"))
            {
                String[] pairs = StringUtils.split(cmd.getOptionValue("O"), ',');

                for (String pair : pairs)
                {
                    String[] keyAndValue = StringUtils.split(pair, ':');

                    if (keyAndValue.length != 2)
                        throw new RuntimeException("Invalid --strategy-properties value.");

                    replicationStrategyOptions.put(keyAndValue[0], keyAndValue[1]);
                }
            }

            if (cmd.hasOption("W"))
                replicateOnWrite = false;

            averageSizeValues = cmd.hasOption("V");
        }
        catch (ParseException e)
        {
            throw new IllegalArgumentException(e.getMessage(), e);
        }

        mean  = numDifferentKeys / 2;
        sigma = numDifferentKeys * STDev;

        operations = new AtomicInteger();
        keys = new AtomicInteger();
        latency = new AtomicLong();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getCardinality();;;public int getCardinality()
    {
        return cardinality;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getColumnSize();;;public int getColumnSize()
    {
        return columnSize;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;isUnframed();;;public boolean isUnframed()
    {
        return unframed;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getColumnsPerKey();;;public int getColumnsPerKey()
    {
        return columns;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getColumnFamilyType();;;public ColumnFamilyType getColumnFamilyType()
    {
        return columnFamilyType;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getNumKeys();;;public int getNumKeys()
    {
        return numKeys;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getNumDifferentKeys();;;public int getNumDifferentKeys()
    {
        return numDifferentKeys;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getThreads();;;public int getThreads()
    {
        return threads;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getSkipKeys();;;public float getSkipKeys()
    {
        return skipKeys;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getSuperColumns();;;public int getSuperColumns()
    {
        return superColumns;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getKeysPerThread();;;public int getKeysPerThread()
    {
        return numKeys / threads;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getTotalKeysLength();;;public int getTotalKeysLength()
    {
        return Integer.toString(numDifferentKeys).length();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getConsistencyLevel();;;public ConsistencyLevel getConsistencyLevel()
    {
        return consistencyLevel;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getRetryTimes();;;public int getRetryTimes()
    {
        return retryTimes;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;ignoreErrors();;;public boolean ignoreErrors()
    {
        return ignoreErrors;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getOperation();;;public Stress.Operations getOperation()
    {
        return operation;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getOutputStream();;;public PrintStream getOutputStream()
    {
        return out;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getProgressInterval();;;public int getProgressInterval()
    {
        return progressInterval;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;useRandomGenerator();;;public boolean useRandomGenerator()
    {
        return random;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getKeysPerCall();;;public int getKeysPerCall()
    {
        return keysPerCall;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getMean();;;public int getMean()
    {
        return mean;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getSigma();;;public float getSigma()
    {
        return sigma;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;createKeySpaces();;;public void createKeySpaces()
    {
        KsDef keyspace = new KsDef();

        // column family for standard columns
        CfDef standardCfDef = new CfDef("Keyspace1", "Standard1");
        standardCfDef.setComparator_type("AsciiType").setDefault_validation_class("BytesType");
        if (indexType != null)
        {
            ColumnDef standardColumn = new ColumnDef(ByteBufferUtil.bytes("C1"), "BytesType");
            standardColumn.setIndex_type(indexType).setIndex_name("Idx1");
            standardCfDef.setColumn_metadata(Arrays.asList(standardColumn));
        }

        // column family with super columns
        CfDef superCfDef = new CfDef("Keyspace1", "Super1").setColumn_type("Super");
        superCfDef.setComparator_type("AsciiType").setSubcomparator_type("AsciiType").setDefault_validation_class("BytesType");

        // column family for standard counters
        CfDef counterCfDef = new CfDef("Keyspace1", "Counter1").setDefault_validation_class("CounterColumnType").setReplicate_on_write(replicateOnWrite);

        // column family with counter super columns
        CfDef counterSuperCfDef = new CfDef("Keyspace1", "SuperCounter1").setDefault_validation_class("CounterColumnType").setReplicate_on_write(replicateOnWrite).setColumn_type("Super");

        keyspace.setName("Keyspace1");
        keyspace.setStrategy_class(replicationStrategy);

        if (!replicationStrategyOptions.isEmpty())
        {
            keyspace.setStrategy_options(replicationStrategyOptions);
        }

        keyspace.setCf_defs(new ArrayList<CfDef>(Arrays.asList(standardCfDef, superCfDef, counterCfDef, counterSuperCfDef)));

        Cassandra.Client client = getClient(false);

        try
        {
            client.system_add_keyspace(keyspace);
            out.println(String.format("Created keyspaces. Sleeping %ss for propagation.", nodes.length));
            Thread.sleep(nodes.length * 1000); // seconds
        }
        catch (InvalidRequestException e)
        {
            out.println("Unable to create stress keyspace: " + e.getWhy());
        }
        catch (Exception e)
        {
            out.println(e.getMessage());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getClient();;;public Cassandra.Client getClient()
    {
        return getClient(true);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Session;getClient(boolean);;;public Cassandra.Client getClient(boolean setKeyspace)
    {
        // random node selection for fake load balancing
        String currentNode = nodes[Stress.randomizer.nextInt(nodes.length)];

        TSocket socket = new TSocket(currentNode, port);
        TTransport transport = (isUnframed()) ? socket : new TFramedTransport(socket);
        Cassandra.Client client = new Cassandra.Client(new TBinaryProtocol(transport));

        try
        {
            transport.open();

            if (setKeyspace)
            {
                client.set_keyspace("Keyspace1");
            }
        }
        catch (InvalidRequestException e)
        {
            throw new RuntimeException(e.getWhy());
        }
        catch (Exception e)
        {
            throw new RuntimeException(e.getMessage());
        }

        return client;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Stress;main(String[]);;;public static void main(String[] arguments) throws Exception
    {
        long latency, oldLatency;
        int epoch, total, oldTotal, keyCount, oldKeyCount;

        try
        {
            session = new Session(arguments);
        }
        catch (IllegalArgumentException e)
        {
            printHelpMessage();
            return;
        }

        // creating keyspace and column families
        if (session.getOperation() == Operations.INSERT || session.getOperation() == Operations.COUNTER_ADD)
        {
            session.createKeySpaces();
        }

        int threadCount  = session.getThreads();
        Thread[] consumers = new Thread[threadCount];
        PrintStream out = session.getOutputStream();

        out.println("total,interval_op_rate,interval_key_rate,avg_latency,elapsed_time");

        int itemsPerThread = session.getKeysPerThread();
        int modulo = session.getNumKeys() % threadCount;

        // creating required type of the threads for the test
        for (int i = 0; i < threadCount; i++)
        {
            if (i == threadCount - 1)
                itemsPerThread += modulo; // last one is going to handle N + modulo items

            consumers[i] = new Consumer(itemsPerThread);
        }

        new Producer().start();

        // starting worker threads
        for (int i = 0; i < threadCount; i++)
        {
            consumers[i].start();
        }

        // initialization of the values
        boolean terminate = false;
        latency = 0;
        epoch = total = keyCount = 0;

        int interval = session.getProgressInterval();
        int epochIntervals = session.getProgressInterval() * 10;
        long testStartTime = System.currentTimeMillis();

        while (!terminate)
        {
            Thread.sleep(100);

            int alive = 0;
            for (Thread thread : consumers)
                if (thread.isAlive()) alive++;

            if (alive == 0)
                terminate = true;

            epoch++;

            if (terminate || epoch > epochIntervals)
            {
                epoch = 0;

                oldTotal    = total;
                oldLatency  = latency;
                oldKeyCount = keyCount;

                total    = session.operations.get();
                keyCount = session.keys.get();
                latency  = session.latency.get();

                int opDelta  = total - oldTotal;
                int keyDelta = keyCount - oldKeyCount;
                double latencyDelta = latency - oldLatency;

                long currentTimeInSeconds = (System.currentTimeMillis() - testStartTime) / 1000;
                String formattedDelta = (opDelta > 0) ? Double.toString(latencyDelta / (opDelta * 1000)) : "NaN";

                out.println(String.format("%d,%d,%d,%s,%d", total, opDelta / interval, keyDelta / interval, formattedDelta, currentTimeInSeconds));
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Stress;createOperation(int);;;private static Operation createOperation(int index)
    {
        switch (session.getOperation())
        {
            case READ:
                return new Reader(index);

            case COUNTER_GET:
                return new CounterGetter(index);

            case INSERT:
                return new Inserter(index);

            case COUNTER_ADD:
                return new CounterAdder(index);

            case RANGE_SLICE:
                return new RangeSlicer(index);

            case INDEXED_RANGE_SLICE:
                return new IndexedRangeSlicer(index);

            case MULTI_GET:
                return new MultiGetter(index);
        }

        throw new UnsupportedOperationException();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Stress;printHelpMessage();;;public static void printHelpMessage()
    {
        System.out.println("Usage: ./bin/stress [options]\n\nOptions:");

        for(Object o : Session.availableOptions.getOptions())
        {
            Option option = (Option) o;
            String upperCaseName = option.getLongOpt().toUpperCase();
            System.out.println(String.format("-%s%s, --%s%s%n\t\t%s%n", option.getOpt(), (option.hasArg()) ? " "+upperCaseName : "",
                                                            option.getLongOpt(), (option.hasArg()) ? "="+upperCaseName : "", option.getDescription()));
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Stress;run();;;public void run()
        {
            for (int i = 0; i < session.getNumKeys(); i++)
            {
                try
                {
                    operations.put(createOperation(i % session.getNumDifferentKeys()));
                }
                catch (InterruptedException e)
                {
                    System.err.println("Producer error - " + e.getMessage());
                    return;
                }
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Stress;Consumer(int);;;public Consumer(int toConsume)
        {
            items = toConsume;
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\Stress;run();;;public void run()
        {
            Cassandra.Client client = session.getClient();

            for (int i = 0; i < items; i++)
            {
                try
                {
                    operations.take().run(client); // running job
                }
                catch (Exception e)
                {
                    System.err.println(e.getMessage());
                    System.exit(-1);
                }
            }
        }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\CounterAdder;CounterAdder(int);;;public CounterAdder(int index)
    {
        super(index);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\CounterAdder;run(Cassandra.Client);;;public void run(Cassandra.Client client) throws IOException
    {
        List<CounterColumn> columns = new ArrayList<CounterColumn>();
        List<CounterSuperColumn> superColumns = new ArrayList<CounterSuperColumn>();

        // format used for keys
        String format = "%0" + session.getTotalKeysLength() + "d";

        for (int i = 0; i < session.getColumnsPerKey(); i++)
        {
            String columnName = ("C" + Integer.toString(i));

            columns.add(new CounterColumn(ByteBufferUtil.bytes(columnName), 1L));
        }

        if (session.getColumnFamilyType() == ColumnFamilyType.Super)
        {
            // supers = [SuperColumn('S' + str(j), columns) for j in xrange(supers_per_key)]
            for (int i = 0; i < session.getSuperColumns(); i++)
            {
                String superColumnName = "S" + Integer.toString(i);
                superColumns.add(new CounterSuperColumn(ByteBuffer.wrap(superColumnName.getBytes()), columns));
            }
        }

        String rawKey = String.format(format, index);
        Map<ByteBuffer, Map<String, List<Mutation>>> record = new HashMap<ByteBuffer, Map<String, List<Mutation>>>();

        record.put(ByteBufferUtil.bytes(rawKey), session.getColumnFamilyType() == ColumnFamilyType.Super
                                                                                ? getSuperColumnsMutationMap(superColumns)
                                                                                : getColumnsMutationMap(columns));

        long start = System.currentTimeMillis();

        boolean success = false;
        String exceptionMessage = null;

        for (int t = 0; t < session.getRetryTimes(); t++)
        {
            if (success)
                break;

            try
            {
                client.batch_mutate(record, session.getConsistencyLevel());
                success = true;
            }
            catch (Exception e)
            {
                exceptionMessage = getExceptionMessage(e);
                success = false;
            }
        }

        if (!success)
        {
            error(String.format("Operation [%d] retried %d times - error incrementing key %s %s%n",
                                index,
                                session.getRetryTimes(),
                                rawKey,
                                (exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
        }

        session.operations.getAndIncrement();
        session.keys.getAndIncrement();
        session.latency.getAndAdd(System.currentTimeMillis() - start);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\CounterAdder;getSuperColumnsMutationMap(List<CounterSuperColumn>);;;private Map<String, List<Mutation>> getSuperColumnsMutationMap(List<CounterSuperColumn> superColumns)
    {
        List<Mutation> mutations = new ArrayList<Mutation>();
        Map<String, List<Mutation>> mutationMap = new HashMap<String, List<Mutation>>();

        for (CounterSuperColumn s : superColumns)
        {
            ColumnOrSuperColumn cosc = new ColumnOrSuperColumn().setCounter_super_column(s);
            mutations.add(new Mutation().setColumn_or_supercolumn(cosc));
        }

        mutationMap.put("SuperCounter1", mutations);

        return mutationMap;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\CounterAdder;getColumnsMutationMap(List<CounterColumn>);;;private Map<String, List<Mutation>> getColumnsMutationMap(List<CounterColumn> columns)
    {
        List<Mutation> mutations = new ArrayList<Mutation>();
        Map<String, List<Mutation>> mutationMap = new HashMap<String, List<Mutation>>();

        for (CounterColumn c : columns)
        {
            ColumnOrSuperColumn cosc = new ColumnOrSuperColumn().setCounter_column(c);
            mutations.add(new Mutation().setColumn_or_supercolumn(cosc));
        }

        mutationMap.put("Counter1", mutations);

        return mutationMap;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\CounterGetter;CounterGetter(int);;;public CounterGetter(int index)
    {
        super(index);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\CounterGetter;run(Cassandra.Client);;;public void run(Cassandra.Client client) throws IOException
    {
        SliceRange sliceRange = new SliceRange();

        // start/finish
        sliceRange.setStart(new byte[] {}).setFinish(new byte[] {});

        // reversed/count
        sliceRange.setReversed(false).setCount(session.getColumnsPerKey());

        // initialize SlicePredicate with existing SliceRange
        SlicePredicate predicate = new SlicePredicate().setSlice_range(sliceRange);

        if (session.getColumnFamilyType() == ColumnFamilyType.Super)
        {
            runSuperCounterGetter(predicate, client);
        }
        else
        {
            runCounterGetter(predicate, client);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\CounterGetter;runSuperCounterGetter(SlicePredicate,Cassandra.Client);;;private void runSuperCounterGetter(SlicePredicate predicate, Cassandra.Client client) throws IOException
    {
        byte[] rawKey = generateKey();
        ByteBuffer key = ByteBuffer.wrap(rawKey);

        for (int j = 0; j < session.getSuperColumns(); j++)
        {
            String superColumn = 'S' + Integer.toString(j);
            ColumnParent parent = new ColumnParent("CounterSuper1").setSuper_column(superColumn.getBytes());

            long start = System.currentTimeMillis();

            boolean success = false;
            String exceptionMessage = null;

            for (int t = 0; t < session.getRetryTimes(); t++)
            {
                if (success)
                    break;

                try
                {
                    List<ColumnOrSuperColumn> counters;
                    counters = client.get_slice(key, parent, predicate, session.getConsistencyLevel());
                    success = (counters.size() != 0);
                }
                catch (Exception e)
                {
                    exceptionMessage = getExceptionMessage(e);
                    success = false;
                }
            }

            if (!success)
            {
                error(String.format("Operation [%d] retried %d times - error reading counter key %s %s%n",
                                    index,
                                    session.getRetryTimes(),
                                    new String(rawKey),
                                    (exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
            }

            session.operations.getAndIncrement();
            session.keys.getAndIncrement();
            session.latency.getAndAdd(System.currentTimeMillis() - start);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\CounterGetter;runCounterGetter(SlicePredicate,Cassandra.Client);;;private void runCounterGetter(SlicePredicate predicate, Cassandra.Client client) throws IOException
    {
        ColumnParent parent = new ColumnParent("Counter1");

        byte[] key = generateKey();
        ByteBuffer keyBuffer = ByteBuffer.wrap(key);

        long start = System.currentTimeMillis();

        boolean success = false;
        String exceptionMessage = null;

        for (int t = 0; t < session.getRetryTimes(); t++)
        {
            if (success)
                break;

            try
            {
                List<ColumnOrSuperColumn> counters;
                counters = client.get_slice(keyBuffer, parent, predicate, session.getConsistencyLevel());
                success = (counters.size() != 0);
            }
            catch (Exception e)
            {
                exceptionMessage = getExceptionMessage(e);
                success = false;
            }
        }

        if (!success)
        {
            error(String.format("Operation [%d] retried %d times - error reading counter key %s %s%n",
                                index,
                                session.getRetryTimes(),
                                new String(key),
                                (exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
        }

        session.operations.getAndIncrement();
        session.keys.getAndIncrement();
        session.latency.getAndAdd(System.currentTimeMillis() - start);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\IndexedRangeSlicer;IndexedRangeSlicer(int);;;public IndexedRangeSlicer(int index)
    {
        super(index);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\IndexedRangeSlicer;run(Cassandra.Client);;;public void run(Cassandra.Client client) throws IOException
    {
        if (values == null)
            values = generateValues();

        String format = "%0" + session.getTotalKeysLength() + "d";
        SlicePredicate predicate = new SlicePredicate().setSlice_range(new SliceRange(ByteBufferUtil.EMPTY_BYTE_BUFFER,
                                                                                      ByteBufferUtil.EMPTY_BYTE_BUFFER,
                                                                                      false, session.getColumnsPerKey()));

        ColumnParent parent = new ColumnParent("Standard1");
        int expectedPerValue = session.getNumKeys() / values.size();

        ByteBuffer columnName = ByteBufferUtil.bytes("C1");

        int received = 0;

        String startOffset = String.format(format, 0);
        ByteBuffer value = values.get(1); // only C1 column is indexed

        IndexExpression expression = new IndexExpression(columnName, IndexOperator.EQ, value);

        while (received < expectedPerValue)
        {
            IndexClause clause = new IndexClause(Arrays.asList(expression),
                                                 ByteBufferUtil.bytes(startOffset),
                                                 session.getKeysPerCall());

            List<KeySlice> results = null;
            long start = System.currentTimeMillis();

            boolean success = false;
            String exceptionMessage = null;

            for (int t = 0; t < session.getRetryTimes(); t++)
            {
                if (success)
                    break;

                try
                {
                    results = client.get_indexed_slices(parent, clause, predicate, session.getConsistencyLevel());
                    success = (results.size() != 0);
                }
                catch (Exception e)
                {
                    exceptionMessage = getExceptionMessage(e);
                    success = false;
                }
            }

            if (!success)
            {
                error(String.format("Operation [%d] retried %d times - error on calling get_indexed_slices for offset %s %s%n",
                                    index,
                                    session.getRetryTimes(),
                                    startOffset,
                                    (exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
            }

            received += results.size();

            // convert max key found back to an integer, and increment it
            startOffset = String.format(format, (1 + getMaxKey(results)));

            session.operations.getAndIncrement();
            session.keys.getAndAdd(results.size());
            session.latency.getAndAdd(System.currentTimeMillis() - start);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\IndexedRangeSlicer;getMaxKey(List<KeySlice>);;;private int getMaxKey(List<KeySlice> keySlices)
    {
        byte[] firstKey = keySlices.get(0).getKey();
        int maxKey = ByteBufferUtil.toInt(ByteBuffer.wrap(firstKey));

        for (KeySlice k : keySlices)
        {
            int currentKey = ByteBufferUtil.toInt(ByteBuffer.wrap(k.getKey()));

            if (currentKey > maxKey)
            {
                maxKey = currentKey;
            }
        }

        return maxKey;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\Inserter;Inserter(int);;;public Inserter(int index)
    {
        super(index);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\Inserter;run(Cassandra.Client);;;public void run(Cassandra.Client client) throws IOException
    {
        if (values == null)
            values = generateValues();

        List<Column> columns = new ArrayList<Column>();
        List<SuperColumn> superColumns = new ArrayList<SuperColumn>();

        // format used for keys
        String format = "%0" + session.getTotalKeysLength() + "d";

        for (int i = 0; i < session.getColumnsPerKey(); i++)
        {
            String columnName = ("C" + Integer.toString(i));
            ByteBuffer columnValue = values.get(i % values.size());
            columns.add(new Column(ByteBufferUtil.bytes(columnName)).setValue(columnValue).setTimestamp(System.currentTimeMillis()));
        }

        if (session.getColumnFamilyType() == ColumnFamilyType.Super)
        {
            // supers = [SuperColumn('S' + str(j), columns) for j in xrange(supers_per_key)]
            for (int i = 0; i < session.getSuperColumns(); i++)
            {
                String superColumnName = "S" + Integer.toString(i);
                superColumns.add(new SuperColumn(ByteBufferUtil.bytes(superColumnName), columns));
            }
        }

        String rawKey = String.format(format, index);
        Map<ByteBuffer, Map<String, List<Mutation>>> record = new HashMap<ByteBuffer, Map<String, List<Mutation>>>();

        record.put(ByteBufferUtil.bytes(rawKey), session.getColumnFamilyType() == ColumnFamilyType.Super
                                                                                ? getSuperColumnsMutationMap(superColumns)
                                                                                : getColumnsMutationMap(columns));

        long start = System.currentTimeMillis();

        boolean success = false;
        String exceptionMessage = null;

        for (int t = 0; t < session.getRetryTimes(); t++)
        {
            if (success)
                break;

            try
            {
                client.batch_mutate(record, session.getConsistencyLevel());
                success = true;
            }
            catch (Exception e)
            {
                exceptionMessage = getExceptionMessage(e);
                success = false;
            }
        }

        if (!success)
        {
            error(String.format("Operation [%d] retried %d times - error inserting key %s %s%n",
                                index,
                                session.getRetryTimes(),
                                rawKey,
                                (exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
        }

        session.operations.getAndIncrement();
        session.keys.getAndIncrement();
        session.latency.getAndAdd(System.currentTimeMillis() - start);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\Inserter;getSuperColumnsMutationMap(List<SuperColumn>);;;private Map<String, List<Mutation>> getSuperColumnsMutationMap(List<SuperColumn> superColumns)
    {
        List<Mutation> mutations = new ArrayList<Mutation>();
        Map<String, List<Mutation>> mutationMap = new HashMap<String, List<Mutation>>();

        for (SuperColumn s : superColumns)
        {
            ColumnOrSuperColumn superColumn = new ColumnOrSuperColumn().setSuper_column(s);
            mutations.add(new Mutation().setColumn_or_supercolumn(superColumn));
        }

        mutationMap.put("Super1", mutations);

        return mutationMap;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\Inserter;getColumnsMutationMap(List<Column>);;;private Map<String, List<Mutation>> getColumnsMutationMap(List<Column> columns)
    {
        List<Mutation> mutations = new ArrayList<Mutation>();
        Map<String, List<Mutation>> mutationMap = new HashMap<String, List<Mutation>>();

        for (Column c : columns)
        {
            ColumnOrSuperColumn column = new ColumnOrSuperColumn().setColumn(c);
            mutations.add(new Mutation().setColumn_or_supercolumn(column));
        }

        mutationMap.put("Standard1", mutations);

        return mutationMap;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\MultiGetter;MultiGetter(int);;;public MultiGetter(int index)
    {
        super(index);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\MultiGetter;run(Cassandra.Client);;;public void run(Cassandra.Client client) throws IOException
    {
        SlicePredicate predicate = new SlicePredicate().setSlice_range(new SliceRange(ByteBufferUtil.EMPTY_BYTE_BUFFER,
                                                                                      ByteBufferUtil.EMPTY_BYTE_BUFFER,
                                                                                      false, session.getColumnsPerKey()));

        int offset = index * session.getKeysPerThread();
        Map<ByteBuffer,List<ColumnOrSuperColumn>> results;

        if (session.getColumnFamilyType() == ColumnFamilyType.Super)
        {
            List<ByteBuffer> keys = generateKeys(offset, offset + session.getKeysPerCall());

            for (int j = 0; j < session.getSuperColumns(); j++)
            {
                ColumnParent parent = new ColumnParent("Super1").setSuper_column(ByteBufferUtil.bytes("S" + j));

                long start = System.currentTimeMillis();

                boolean success = false;
                String exceptionMessage = null;

                for (int t = 0; t < session.getRetryTimes(); t++)
                {
                    if (success)
                        break;

                    try
                    {
                        results = client.multiget_slice(keys, parent, predicate, session.getConsistencyLevel());
                        success = (results.size() != 0);
                    }
                    catch (Exception e)
                    {
                        exceptionMessage = getExceptionMessage(e);
                    }
                }

                if (!success)
                {
                    error(String.format("Operation [%d] retried %d times - error on calling multiget_slice for keys %s %s%n",
                                        index,
                                        session.getRetryTimes(),
                                        keys,
                                        (exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
                }

                session.operations.getAndIncrement();
                session.keys.getAndAdd(keys.size());
                session.latency.getAndAdd(System.currentTimeMillis() - start);

                offset += session.getKeysPerCall();
            }
        }
        else
        {
            ColumnParent parent = new ColumnParent("Standard1");

            List<ByteBuffer> keys = generateKeys(offset, offset + session.getKeysPerCall());

            long start = System.currentTimeMillis();

            boolean success = false;
            String exceptionMessage = null;

            for (int t = 0; t < session.getRetryTimes(); t++)
            {
                if (success)
                    break;

                try
                {
                    results = client.multiget_slice(keys, parent, predicate, session.getConsistencyLevel());
                    success = (results.size() != 0);
                }
                catch (Exception e)
                {
                    exceptionMessage = getExceptionMessage(e);
                    success = false;
                }
            }

            if (!success)
            {
                error(String.format("Operation [%d] retried %d times - error on calling multiget_slice for keys %s %s%n",
                                    index,
                                    session.getRetryTimes(),
                                    keys,
                                    (exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
            }

            session.operations.getAndIncrement();
            session.keys.getAndAdd(keys.size());
            session.latency.getAndAdd(System.currentTimeMillis() - start);

            offset += session.getKeysPerCall();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\MultiGetter;generateKeys(int,int);;;private List<ByteBuffer> generateKeys(int start, int limit)
    {
        List<ByteBuffer> keys = new ArrayList<ByteBuffer>();

        for (int i = start; i < limit; i++)
        {
            keys.add(ByteBuffer.wrap(generateKey()));
        }

        return keys;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\RangeSlicer;RangeSlicer(int);;;public RangeSlicer(int index)
    {
        super(index);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\RangeSlicer;run(Cassandra.Client);;;public void run(Cassandra.Client client) throws IOException
    {
        String format = "%0" + session.getTotalKeysLength() + "d";

        // initial values
        int count = session.getColumnsPerKey();

        SlicePredicate predicate = new SlicePredicate().setSlice_range(new SliceRange(ByteBufferUtil.EMPTY_BYTE_BUFFER,
                                                                                      ByteBufferUtil.EMPTY_BYTE_BUFFER,
                                                                                      false,
                                                                                      count));

        if (session.getColumnFamilyType() == ColumnFamilyType.Super)
        {
            ByteBuffer start = ByteBufferUtil.bytes(String.format(format, index));

            List<KeySlice> slices = new ArrayList<KeySlice>();
            KeyRange range = new KeyRange(count).setStart_key(start).setEnd_key(ByteBufferUtil.EMPTY_BYTE_BUFFER);

            for (int i = 0; i < session.getSuperColumns(); i++)
            {
                String superColumnName = "S" + Integer.toString(i);
                ColumnParent parent = new ColumnParent("Super1").setSuper_column(ByteBufferUtil.bytes(superColumnName));

                long startTime = System.currentTimeMillis();

                boolean success = false;
                String exceptionMessage = null;

                for (int t = 0; t < session.getRetryTimes(); t++)
                {
                    try
                    {
                        slices = client.get_range_slices(parent, predicate, range, session.getConsistencyLevel());
                        success = (slices.size() != 0);
                    }
                    catch (Exception e)
                    {
                        exceptionMessage = getExceptionMessage(e);
                        success = false;
                    }
                }

                if (!success)
                {
                    error(String.format("Operation [%d] retried %d times - error on calling get_range_slices for range offset %s %s%n",
                                        index,
                                        session.getRetryTimes(),
                                        ByteBufferUtil.string(start),
                                        (exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
                }

                session.operations.getAndIncrement();
                session.latency.getAndAdd(System.currentTimeMillis() - startTime);
            }

            session.keys.getAndAdd(slices.size());
        }
        else
        {
            ColumnParent parent = new ColumnParent("Standard1");

            ByteBuffer start = ByteBufferUtil.bytes(String.format(format, index));

            List<KeySlice> slices = new ArrayList<KeySlice>();
            KeyRange range = new KeyRange(count).setStart_key(start).setEnd_key(ByteBufferUtil.EMPTY_BYTE_BUFFER);

            long startTime = System.currentTimeMillis();

            boolean success = false;
            String exceptionMessage = null;

            for (int t = 0; t < session.getRetryTimes(); t++)
            {
                if (success)
                    break;

                try
                {
                    slices = client.get_range_slices(parent, predicate, range, session.getConsistencyLevel());
                    success = (slices.size() != 0);
                }
                catch (Exception e)
                {
                    exceptionMessage = getExceptionMessage(e);
                    success = false;
                }
            }

            if (!success)
            {
                error(String.format("Operation [%d] retried %d times - error on calling get_indexed_slices for range offset %s %s%n",
                                    index,
                                    session.getRetryTimes(),
                                    ByteBufferUtil.string(start),
                                    (exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
            }

            session.operations.getAndIncrement();
            session.keys.getAndAdd(slices.size());
            session.latency.getAndAdd(System.currentTimeMillis() - startTime);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\Reader;Reader(int);;;public Reader(int index)
    {
        super(index);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\Reader;run(Cassandra.Client);;;public void run(Cassandra.Client client) throws IOException
    {
        SliceRange sliceRange = new SliceRange();

        // start/finish
        sliceRange.setStart(new byte[] {}).setFinish(new byte[] {});

        // reversed/count
        sliceRange.setReversed(false).setCount(session.getColumnsPerKey());

        // initialize SlicePredicate with existing SliceRange
        SlicePredicate predicate = new SlicePredicate().setSlice_range(sliceRange);

        if (session.getColumnFamilyType() == ColumnFamilyType.Super)
        {
            runSuperColumnReader(predicate, client);
        }
        else
        {
            runColumnReader(predicate, client);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\Reader;runSuperColumnReader(SlicePredicate,Cassandra.Client);;;private void runSuperColumnReader(SlicePredicate predicate, Cassandra.Client client) throws IOException
    {
        byte[] rawKey = generateKey();
        ByteBuffer key = ByteBuffer.wrap(rawKey);

        for (int j = 0; j < session.getSuperColumns(); j++)
        {
            String superColumn = 'S' + Integer.toString(j);
            ColumnParent parent = new ColumnParent("Super1").setSuper_column(superColumn.getBytes(UTF_8));

            long start = System.currentTimeMillis();

            boolean success = false;
            String exceptionMessage = null;

            for (int t = 0; t < session.getRetryTimes(); t++)
            {
                if (success)
                    break;

                try
                {
                    List<ColumnOrSuperColumn> columns;
                    columns = client.get_slice(key, parent, predicate, session.getConsistencyLevel());
                    success = (columns.size() != 0);
                }
                catch (Exception e)
                {
                    exceptionMessage = getExceptionMessage(e);
                    success = false;
                }
            }

            if (!success)
            {
                error(String.format("Operation [%d] retried %d times - error reading key %s %s%n",
                                    index,
                                    session.getRetryTimes(),
                                    new String(rawKey),
                                    (exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
            }

            session.operations.getAndIncrement();
            session.keys.getAndIncrement();
            session.latency.getAndAdd(System.currentTimeMillis() - start);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\operations\Reader;runColumnReader(SlicePredicate,Cassandra.Client);;;private void runColumnReader(SlicePredicate predicate, Cassandra.Client client) throws IOException
    {
        ColumnParent parent = new ColumnParent("Standard1");

        byte[] key = generateKey();
        ByteBuffer keyBuffer = ByteBuffer.wrap(key);

        long start = System.currentTimeMillis();

        boolean success = false;
        String exceptionMessage = null;

        for (int t = 0; t < session.getRetryTimes(); t++)
        {
            if (success)
                break;

            try
            {
                List<ColumnOrSuperColumn> columns;
                columns = client.get_slice(keyBuffer, parent, predicate, session.getConsistencyLevel());
                success = (columns.size() != 0);
            }
            catch (Exception e)
            {
                exceptionMessage = getExceptionMessage(e);
                success = false;
            }
        }

        if (!success)
        {
            error(String.format("Operation [%d] retried %d times - error reading key %s %s%n",
                                index,
                                session.getRetryTimes(),
                                new String(key),
                                (exceptionMessage == null) ? "" : "(" + exceptionMessage + ")"));
        }

        session.operations.getAndIncrement();
        session.keys.getAndIncrement();
        session.latency.getAndAdd(System.currentTimeMillis() - start);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\util\Operation;Operation(int);;;public Operation(int idx)
    {
        index = idx;
        session = Stress.session;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\util\Operation;run(Cassandra.Client);;;public abstract void run(Cassandra.Client client) throws IOException;
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\util\Operation;generateValues();;;protected List<ByteBuffer> generateValues()
    {
        if (session.averageSizeValues)
        {
            return generateRandomizedValues();
        }

        List<ByteBuffer> values = new ArrayList<ByteBuffer>();

        for (int i = 0; i < session.getCardinality(); i++)
        {
            String hash = getMD5(Integer.toString(i));
            int times = session.getColumnSize() / hash.length();
            int sumReminder = session.getColumnSize() % hash.length();

            String value = new StringBuilder(multiplyString(hash, times)).append(hash.substring(0, sumReminder)).toString();
            values.add(ByteBuffer.wrap(value.getBytes()));
        }

        return values;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\util\Operation;generateRandomizedValues();;;protected List<ByteBuffer> generateRandomizedValues()
    {
        List<ByteBuffer> values = new ArrayList<ByteBuffer>();

        int limit = 2 * session.getColumnSize();

        for (int i = 0; i < session.getCardinality(); i++)
        {
            byte[] value = new byte[Stress.randomizer.nextInt(limit)];
            Stress.randomizer.nextBytes(value);
            values.add(ByteBuffer.wrap(value));
        }

        return values;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\util\Operation;generateKey();;;protected static byte[] generateKey()
    {
        return (Stress.session.useRandomGenerator()) ? generateRandomKey() : generateGaussKey();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\util\Operation;generateRandomKey();;;private static byte[] generateRandomKey()
    {
        String format = "%0" + Stress.session.getTotalKeysLength() + "d";
        return String.format(format, Stress.randomizer.nextInt(Stress.session.getNumDifferentKeys() - 1)).getBytes(UTF_8);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\util\Operation;generateGaussKey();;;private static byte[] generateGaussKey()
    {
        Session session = Stress.session;
        String format = "%0" + session.getTotalKeysLength() + "d";

        for (;;)
        {
            double token = nextGaussian(session.getMean(), session.getSigma());

            if (0 <= token && token < session.getNumDifferentKeys())
            {
                return String.format(format, (int) token).getBytes(UTF_8);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\util\Operation;nextGaussian(int,float);;;private static double nextGaussian(int mu, float sigma)
    {
        Random random = Stress.randomizer;

        Double currentState = nextGaussian;
        nextGaussian = null;

        if (currentState == null)
        {
            double x2pi  = random.nextDouble() * 2 * Math.PI;
            double g2rad = Math.sqrt(-2.0 * Math.log(1.0 - random.nextDouble()));

            currentState = Math.cos(x2pi) * g2rad;
            nextGaussian = Math.sin(x2pi) * g2rad;
        }

        return mu + currentState * sigma;
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\util\Operation;getMD5(String);;;private String getMD5(String input)
    {
        MessageDigest md = FBUtilities.threadLocalMD5Digest();
        byte[] messageDigest = md.digest(input.getBytes(UTF_8));
        StringBuilder hash = new StringBuilder(new BigInteger(1, messageDigest).toString(16));

        while (hash.length() < 32)
            hash.append("0").append(hash);

        return hash.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\util\Operation;multiplyString(String,int);;;private String multiplyString(String str, int times)
    {
        StringBuilder result = new StringBuilder();

        for (int i = 0; i < times; i++)
            result.append(str);

        return result.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\util\Operation;getExceptionMessage(Exception);;;protected String getExceptionMessage(Exception e)
    {
        String className = e.getClass().getSimpleName();
        String message = (e instanceof InvalidRequestException) ? ((InvalidRequestException) e).getWhy() : e.getMessage();
        return (message == null) ? "(" + className + ")" : String.format("(%s): %s", className, message);
    }
E:\Mestrado\FPFNAnalysis\projects\cassandra\revisions\rev_17279c7_7f5636c\rev_17279c7-7f5636c;\tools\stress\src\org\apache\cassandra\stress\util\Operation;error(String);;;protected void error(String message) throws IOException
    {
        if (!session.ignoreErrors())
            throw new IOException(message);
        else
            System.err.println(message);
    }
E:\Mestrado\FPFNAnalysis\projects\Conversations\revisions\rev_2bddcc9_bfcba91\rev_2bddcc9-bfcba91;\src\main\java\de\measite\minidns\Record;parse(DataInputStream,byte[]);;;        case PTR:
            this.payloadData = new PTR();
            break;
        case TXT:
            this.payloadData = new TXT();
            break;
E:\Mestrado\FPFNAnalysis\projects\Conversations\revisions\rev_2bddcc9_bfcba91\rev_2bddcc9-bfcba91;\src\main\java\de\measite\minidns\record\PTR;getType();;;@Override
    public TYPE getType() {
        return TYPE.PTR;
    }
E:\Mestrado\FPFNAnalysis\projects\Conversations\revisions\rev_2bddcc9_bfcba91\rev_2bddcc9-bfcba91;\src\main\java\de\measite\minidns\record\TXT;getBlob();;;public byte[] getBlob() {
        return blob;
    }
E:\Mestrado\FPFNAnalysis\projects\Conversations\revisions\rev_2bddcc9_bfcba91\rev_2bddcc9-bfcba91;\src\main\java\de\measite\minidns\record\TXT;setBlob(byte[]);;;public void setBlob(byte[] blob) {
        this.blob = blob;
    }
E:\Mestrado\FPFNAnalysis\projects\Conversations\revisions\rev_2bddcc9_bfcba91\rev_2bddcc9-bfcba91;\src\main\java\de\measite\minidns\record\TXT;getText();;;public String getText() {
        try {
            return (new String(blob, "UTF-8")).intern();
        } catch (Exception e) {
            /* Can't happen for UTF-8 unless it's really a blob */
            return null;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\Conversations\revisions\rev_2bddcc9_bfcba91\rev_2bddcc9-bfcba91;\src\main\java\de\measite\minidns\record\TXT;setText(String);;;public void setText(String text) {
        try {
            this.blob = text.getBytes("UTF-8");
        } catch (Exception e) {
            /* Can't happen, UTF-8 IS supported */
            throw new RuntimeException("UTF-8 not supported", e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\Conversations\revisions\rev_2bddcc9_bfcba91\rev_2bddcc9-bfcba91;\src\main\java\de\measite\minidns\record\TXT;toByteArray();;;@Override
    public byte[] toByteArray() {
        throw new UnsupportedOperationException("Not implemented yet");
    }
E:\Mestrado\FPFNAnalysis\projects\Conversations\revisions\rev_2bddcc9_bfcba91\rev_2bddcc9-bfcba91;\src\main\java\de\measite\minidns\record\TXT;parse(DataInputStream,byte[],int);;;@Override
    public void parse(DataInputStream dis, byte[] data, int length)
        throws IOException
    {
        blob = new byte[length];
        dis.readFully(blob);
    }
E:\Mestrado\FPFNAnalysis\projects\Conversations\revisions\rev_2bddcc9_bfcba91\rev_2bddcc9-bfcba91;\src\main\java\de\measite\minidns\record\TXT;getType();;;@Override
    public TYPE getType() {
        return TYPE.TXT;
    }
E:\Mestrado\FPFNAnalysis\projects\Conversations\revisions\rev_2bddcc9_bfcba91\rev_2bddcc9-bfcba91;\src\main\java\de\measite\minidns\record\TXT;toString();;;@Override
    public String toString() {
        return "\"" + getText() + "\"";
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\groovy\grape\GrabAnnotationTransformation;visit(ASTNode[],SourceUnit);;;                    checkForDisableChecksums(node);
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\groovy\grape\GrabAnnotationTransformation;visit(ASTNode[],SourceUnit);;;            if (disableChecksums != null) basicArgs.put(DISABLE_CHECKSUMS_SETTING, disableChecksums);
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\groovy\grape\GrabAnnotationTransformation;callGrabAsStaticInitIfNeeded(ClassNode,ClassNode,AnnotationNode,List<Map<String,Object>>);;;            if (disableChecksums != null)  {
                me.addMapEntryExpression(new ConstantExpression(DISABLE_CHECKSUMS_SETTING), new ConstantExpression(disableChecksums));
            }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\groovy\grape\GrabAnnotationTransformation;checkForDisableChecksums(AnnotationNode);;;private void checkForDisableChecksums(AnnotationNode node) {
        Object val = node.getMember(DISABLE_CHECKSUMS_SETTING);
        if (val == null || !(val instanceof ConstantExpression)) return;
        Object disableChecksumsValue = ((ConstantExpression)val).getValue();
        if (!(disableChecksumsValue instanceof Boolean)) return;
        disableChecksums = (Boolean) disableChecksumsValue;
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\groovy\grape\Grape;getDisableChecksums();;;public static boolean getDisableChecksums() {
        return disableChecksums;
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\groovy\grape\Grape;setDisableChecksums(boolean);;;public static void setDisableChecksums(boolean disableChecksums) {
        Grape.disableChecksums = disableChecksums;
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\groovy\grape\Grape;grab(Map<String,Object>);;;                if (!dependency.containsKey(DISABLE_CHECKSUMS_SETTING)) {
                    dependency.put(DISABLE_CHECKSUMS_SETTING, disableChecksums);
                }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\groovy\grape\Grape;grab(Map<String,Object>,Map);;;                if (!args.containsKey(DISABLE_CHECKSUMS_SETTING)) {
                    args.put(DISABLE_CHECKSUMS_SETTING, disableChecksums);
                }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\groovy\grape\Grape;resolve(Map<String,Object>,List,Map);;;                if (!args.containsKey(DISABLE_CHECKSUMS_SETTING)) {
                    args.put(DISABLE_CHECKSUMS_SETTING, disableChecksums);
                }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\groovy\lang\IntRange;step(int,Closure);;;                if((0L + value + step) >= Integer.MAX_VALUE) {
                    break;
                }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\groovy\lang\IntRange;step(int,Closure);;;                if((0L + value + step) <= Integer.MIN_VALUE) {
                    break;
                }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\ast\tools\GenericsUtils;extractPlaceholders(ClassNode,Map<String,GenericsType>);;;
        if (node.isArray()) {
            extractPlaceholders(node.getComponentType(), map);
            return;
        }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\classgen\AsmClassGenerator;isThisOrSuperInStaticContext(Expression);;;private boolean isThisOrSuperInStaticContext(Expression objectExpression) {
        if (controller.isInClosure()) return false;
        return controller.isStaticContext() && isThisOrSuper(objectExpression);
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\classgen\ExtendedVerifier;visitDeclarationExpression(DeclarationExpression);;;@Override
    public void visitDeclarationExpression(DeclarationExpression expression) {
        visitAnnotations(expression, AnnotationNode.LOCAL_VARIABLE_TARGET);
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\classgen\ExtendedVerifier;visitConstructorOrMethod(MethodNode,int);;;        Statement code = node.getCode();
        if (code != null) {
            code.visit(this);
        }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\classgen\ExtendedVerifier;visitAnnotations(AnnotatedNode,int);;;            // TODO GROOVY-5011
//            visitOverride(node, visited);
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\classgen\ExtendedVerifier;getSourceUnit();;;@Override
    protected SourceUnit getSourceUnit() {
        return source;
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\classgen\Verifier;visitClass(ClassNode);;;        checkForDuplicateMethods(node);
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\classgen\Verifier;makeDescriptorWithoutReturnType(MethodNode);;;private String makeDescriptorWithoutReturnType(MethodNode mn) {
        StringBuilder sb = new StringBuilder();
        sb.append(mn.getName()).append(':');
        for (Parameter p : mn.getParameters()) {
            sb.append(p.getType()).append(',');
        }
        return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\classgen\Verifier;checkForDuplicateMethods(ClassNode);;;private void checkForDuplicateMethods(ClassNode cn) {
        HashSet<String> descriptors = new HashSet<String>();
        for (MethodNode mn : cn.getMethods()) {
            if (mn.isSynthetic()) continue;
            String mySig = makeDescriptorWithoutReturnType(mn);
            if (descriptors.contains(mySig)) {
                throw new RuntimeParserException("The method " + mn.getText() +
                        " duplicates another method of the same signature", mn);
            }
            descriptors.add(mySig);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\runtime\DefaultGroovyMethods;bitwiseNegate(Number);;;public static Number bitwiseNegate(Number left) {
        return NumberMath.bitwiseNegate(left);
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\runtime\DefaultGroovyMethods;unaryPlus(Number);;;public static Number unaryPlus(Number left) {
        return NumberMath.unaryPlus(left);
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\runtime\IOGroovyMethods;newPrintWriter(OutputStream);;;public static PrintWriter newPrintWriter(OutputStream stream) {
        return new GroovyPrintWriter(stream);
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\runtime\IOGroovyMethods;withPrintWriter(OutputStream,Closure<T>);;;public static <T> T withPrintWriter(OutputStream stream, Closure<T> closure) throws IOException {
        return withWriter(newPrintWriter(stream), closure);
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\runtime\IOGroovyMethods;newWriter(OutputStream);;;public static Writer newWriter(OutputStream stream) {
        return new OutputStreamWriter(stream);
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\runtime\IOGroovyMethods;newWriter(OutputStream,String);;;public static Writer newWriter(OutputStream stream, String charset) throws UnsupportedEncodingException {
        return new OutputStreamWriter(stream, charset);
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\runtime\typehandling\BigDecimalMath;unaryPlusImpl(Number);;;protected Number unaryPlusImpl(Number left) {
        return toBigDecimal(left);
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\runtime\typehandling\BigIntegerMath;unaryPlusImpl(Number);;;protected Number unaryPlusImpl(Number left) {
        return toBigInteger(left);
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\runtime\typehandling\FloatingPointMath;unaryPlusImpl(Number);;;protected Number unaryPlusImpl(Number left) {
        return new Double(left.doubleValue());
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\runtime\typehandling\IntegerMath;unaryPlusImpl(Number);;;protected Number unaryPlusImpl(Number left) {
        return Integer.valueOf(left.intValue());
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\runtime\typehandling\LongMath;unaryPlusImpl(Number);;;protected Number unaryPlusImpl(Number left) {
        return Long.valueOf(left.longValue());
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\runtime\typehandling\NumberMath;bitwiseNegate(Number);;;public static Number bitwiseNegate(Number left) {
        return getMath(left).bitwiseNegateImpl(left);
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\runtime\typehandling\NumberMath;unaryPlus(Number);;;public static Number unaryPlus(Number left) {
        return getMath(left).unaryPlusImpl(left);
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\runtime\typehandling\NumberMath;unaryPlusImpl(Number);;;protected abstract Number unaryPlusImpl(Number left);
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\runtime\typehandling\NumberMath;bitwiseNegateImpl(Number);;;protected Number bitwiseNegateImpl(Number left) {
        throw createUnsupportedException("bitwiseNegate()", left);
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\AbstractASTTransformation;shouldSkip(String,List<String>,List<String>);;;public static boolean shouldSkip(String name, List<String> excludes, List<String> includes) {
        return (excludes != null && excludes.contains(name)) || name.contains("$") || (includes != null && !includes.isEmpty() && !includes.contains(name));
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\AbstractASTTransformation;checkIncludeExclude(AnnotationNode,List<String>,List<String>,String);;;protected void checkIncludeExclude(AnnotationNode node, List<String> excludes, List<String> includes, String typeName) {
        if (includes != null && !includes.isEmpty() && excludes != null && !excludes.isEmpty()) {
            addError("Error during " + typeName + " processing: Only one of 'includes' and 'excludes' should be supplied not both.", node);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\AbstractASTTransformation;nonGeneric(ClassNode);;;public static ClassNode nonGeneric(ClassNode type) {
        if (type.isUsingGenerics()) {
            final ClassNode nonGen = ClassHelper.makeWithoutCaching(type.getName());
            nonGen.setRedirect(type);
            nonGen.setGenericsTypes(null);
            nonGen.setUsingGenerics(false);
            return nonGen;
        }
        if (type.isArray() && type.getComponentType().isUsingGenerics()) {
            return type.getComponentType().getPlainNodeReference().makeArray();
        }
        return type;
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\AbstractInterruptibleASTTransformation;visit(ASTNode[],SourceUnit);;;        } else if (!applyToAllMembers && annotatedNode instanceof MethodNode) {
            this.visitMethod((MethodNode) annotatedNode);
            this.visitClass(annotatedNode.getDeclaringClass());
        } else if (!applyToAllMembers && annotatedNode instanceof FieldNode) {
            this.visitField((FieldNode) annotatedNode);
            this.visitClass(annotatedNode.getDeclaringClass());
        } else if (!applyToAllMembers && annotatedNode instanceof DeclarationExpression) {
            this.visitDeclarationExpression((DeclarationExpression) annotatedNode);
            this.visitClass(annotatedNode.getDeclaringClass());
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\DelegateASTTransformation;visit(ASTNode[],SourceUnit);;;            List<String> excludes = getMemberList(node, MEMBER_EXCLUDES);
            List<String> includes = getMemberList(node, MEMBER_INCLUDES);
            // GROOVY-6329: awaiting resolution of GROOVY-6330
/*
            List<ClassNode> excludeTypes = getClassList(node, MEMBER_EXCLUDE_TYPES);
            List<ClassNode> includeTypes = getClassList(node, MEMBER_INCLUDE_TYPES);
            checkIncludeExclude(node, excludes, includes, excludeTypes, includeTypes, MY_TYPE_NAME);
*/
            checkIncludeExclude(node, excludes, includes, MY_TYPE_NAME);
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\DelegateASTTransformation;addDelegateMethod(AnnotationNode,FieldNode,ClassNode,List<MethodNode>,MethodNode,boolean,List<String>,List<String>);;;private void addDelegateMethod(AnnotationNode node, FieldNode fieldNode, ClassNode owner, List<MethodNode> ownMethods, MethodNode candidate, boolean includeDeprecated, List<String> includes, List<String> excludes/*, List<ClassNode> includeTypes, List<ClassNode> excludeTypes*/) {
        if (!candidate.isPublic() || candidate.isStatic() || 0 != (candidate.getModifiers () & Opcodes.ACC_SYNTHETIC))
            return;

        if (!candidate.getAnnotations(DEPRECATED_TYPE).isEmpty() && !includeDeprecated)
            return;

        if (shouldSkip(candidate.getName(), excludes, includes)) return;
        checkIncludeExclude(node, excludes, includes, MY_TYPE_NAME);
        // GROOVY-6329: awaiting resolution of GROOVY-6330
/*
        checkIncludeExclude(node, excludes, includes, excludeTypes, includeTypes, MY_TYPE_NAME);
        if (shouldSkipOnDescriptor(candidate.getTypeDescriptor(), excludeTypes, includeTypes)) return;
*/

        // ignore methods from GroovyObject
        for (MethodNode mn : GROOVYOBJECT_TYPE.getMethods()) {
            if (mn.getTypeDescriptor().equals(candidate.getTypeDescriptor())) {
                return;
            }
        }

        // ignore methods already in owner
        for (MethodNode mn : owner.getMethods()) {
            if (mn.getTypeDescriptor().equals(candidate.getTypeDescriptor())) {
                return;
            }
        }

        // give precedence to methods of self (but not abstract or static superclass methods)
        // also allows abstract or static self methods to be selected for overriding but they are ignored later
        MethodNode existingNode = null;
        for (MethodNode mn : ownMethods) {
            if (mn.getTypeDescriptor().equals(candidate.getTypeDescriptor()) && !mn.isAbstract() && !mn.isStatic()) {
                existingNode = mn;
                break;
            }
        }
        if (existingNode == null || existingNode.getCode() == null) {

            final boolean includeParameterAnnotations = hasBooleanValue(node.getMember(MEMBER_PARAMETER_ANNOTATIONS), true);

            final ArgumentListExpression args = new ArgumentListExpression();
            final Parameter[] params = candidate.getParameters();
            final Parameter[] newParams = new Parameter[params.length];
            for (int i = 0; i < newParams.length; i++) {
                Parameter newParam = new Parameter(nonGeneric(params[i].getType()), getParamName(params, i, fieldNode.getName()));
                newParam.setInitialExpression(params[i].getInitialExpression());

                if (includeParameterAnnotations) newParam.addAnnotations(copyAnnotatedNodeAnnotations(params[i].getAnnotations(), newParam));

                newParams[i] = newParam;
                args.addExpression(new VariableExpression(newParam));
            }
            // addMethod will ignore attempts to override abstract or static methods with same signature on self
            MethodNode newMethod = owner.addMethod(candidate.getName(),
                    candidate.getModifiers() & (~ACC_ABSTRACT) & (~ACC_NATIVE),
                    nonGeneric(candidate.getReturnType()),
                    newParams,
                    candidate.getExceptions(),
                    new ExpressionStatement(
                            new MethodCallExpression(
                                    new VariableExpression(fieldNode),
                                    candidate.getName(),
                                    args)));
            newMethod.setGenericsTypes(candidate.getGenericsTypes());

            if (hasBooleanValue(node.getMember(MEMBER_METHOD_ANNOTATIONS), true)) {
                newMethod.addAnnotations(copyAnnotatedNodeAnnotations(candidate.getAnnotations(), newMethod));
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\sc\transformers\StaticCompilationTransformer;transform(Expression);;;        if (expr instanceof VariableExpression) {
            return variableExpressionTransformer.transformVariableExpression((VariableExpression)expr);
        }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\sc\transformers\VariableExpressionTransformer;transformVariableExpression(VariableExpression);;;public Expression transformVariableExpression(VariableExpression expr) {
        // we need to transform variable expressions that go to a delegate
        // to a property expression, as ACG would loose the information
        // in processClassVariable before it reaches any makeCall, that could
        // handle it
        Object val = expr.getNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER);
        if (val==null) return expr;
        PropertyExpression pexp = new PropertyExpression(new VariableExpression("this"), expr.getName());
        pexp.copyNodeMetaData(expr);
        pexp.setImplicitThis(true);
        return pexp;
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;existsProperty(PropertyExpression,boolean,ClassCodeVisitorSupport);;;        super.visitPropertyExpression(pexp);
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;existsProperty(PropertyExpression,boolean,ClassCodeVisitorSupport);;;
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;existsProperty(PropertyExpression,boolean,ClassCodeVisitorSupport);;;            storeType(pexp, int_TYPE);
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;existsProperty(PropertyExpression,boolean,ClassCodeVisitorSupport);;;                            String delegationData = receiver.getData();
                            if (delegationData!=null) pexp.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, delegationData);
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;existsProperty(PropertyExpression,boolean,ClassCodeVisitorSupport);;;                            String delegationData = receiver.getData();
                            if (delegationData!=null) pexp.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, delegationData);
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;existsProperty(PropertyExpression,boolean,ClassCodeVisitorSupport);;;
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;existsProperty(PropertyExpression,boolean,ClassCodeVisitorSupport);;;            storeType(pexp, propertyType);
            String delegationData = receiver.getData();
            if (delegationData!=null) pexp.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, delegationData);
            return true;
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;getTypeForSpreadExpression(ClassNode,ClassNode,PropertyExpression);;;private ClassNode getTypeForSpreadExpression(ClassNode testClass, ClassNode objectExpressionType, PropertyExpression pexp) {
        if (!pexp.isSpreadSafe()) return null;
        MethodCallExpression mce = new MethodCallExpression(new VariableExpression("_", testClass), "iterator", ArgumentListExpression.EMPTY_ARGUMENTS);
        mce.visit(this);
        ClassNode callType = getType(mce);
        if (!implementsInterfaceOrIsSubclassOf(callType, Iterator_TYPE)) return null;
        GenericsType[] types = callType.getGenericsTypes();
        ClassNode contentType = OBJECT_TYPE;
        if (types!=null && types.length==1) contentType = types[0].getType();
        PropertyExpression subExp = new PropertyExpression(
                new VariableExpression("{}", contentType),
                pexp.getPropertyAsString());
        AtomicReference<ClassNode> result = new AtomicReference<ClassNode>();
        if (existsProperty(subExp, true, new PropertyLookupVisitor(result))) {
            ClassNode intf = LIST_TYPE.getPlainNodeReference();
            intf.setGenericsTypes(new GenericsType[] { new GenericsType(getWrapper(result.get()))});
            return intf;
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;getTypeForListPropertyExpression(ClassNode,ClassNode,PropertyExpression);;;private ClassNode getTypeForListPropertyExpression(ClassNode testClass, ClassNode objectExpressionType, PropertyExpression pexp) {
        if (!implementsInterfaceOrIsSubclassOf(testClass, LIST_TYPE)) return null;
        ClassNode intf = GenericsUtils.parameterizeType(objectExpressionType, LIST_TYPE.getPlainNodeReference());
        GenericsType[] types = intf.getGenericsTypes();
        if (types==null || types.length!=1) return OBJECT_TYPE;

        PropertyExpression subExp = new PropertyExpression(
                new VariableExpression("{}", types[0].getType()),
                pexp.getPropertyAsString());
        AtomicReference<ClassNode> result = new AtomicReference<ClassNode>();
        if (existsProperty(subExp, true, new PropertyLookupVisitor(result))) {
            intf = LIST_TYPE.getPlainNodeReference();
            intf.setGenericsTypes(new GenericsType[] { new GenericsType(getWrapper(result.get()))});
            return intf;
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;getTypeForMapPropertyExpression(ClassNode,ClassNode,PropertyExpression);;;private ClassNode getTypeForMapPropertyExpression(ClassNode testClass, ClassNode objectExpressionType, PropertyExpression pexp) {
        if (!implementsInterfaceOrIsSubclassOf(testClass, MAP_TYPE)) return null;
        ClassNode intf = GenericsUtils.parameterizeType(objectExpressionType, MAP_TYPE.getPlainNodeReference());
        // 0 is the key, 1 is the value
        GenericsType[] types = intf.getGenericsTypes();
        if (types == null || types.length != 2) return OBJECT_TYPE;

        if (pexp.isSpreadSafe()) {
            // map*.property syntax
            // only "key" and "value" are allowed
            if ("key".equals(pexp.getPropertyAsString())) {
                ClassNode listKey = LIST_TYPE.getPlainNodeReference();
                listKey.setGenericsTypes(new GenericsType[]{types[0]});
                return listKey;
            } else if ("value".equals(pexp.getPropertyAsString())) {
                ClassNode listValue = LIST_TYPE.getPlainNodeReference();
                listValue.setGenericsTypes(new GenericsType[]{types[1]});
                return listValue;
            } else {
                addStaticTypeError("Spread operator on map only allows one of [key,value]", pexp);
            }
        } else {
            return types[1].getType();
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;storeField(FieldNode,boolean,PropertyExpression,ClassNode,ClassCodeVisitorSupport,String);;;private boolean storeField(FieldNode field, boolean returnTrueIfFieldExists, PropertyExpression expressionToStoreOn, ClassNode receiver, ClassCodeVisitorSupport visitor, String delegationData) {
        if (field==null || !returnTrueIfFieldExists) return false;
        if (visitor != null) visitor.visitField(field);
        storeWithResolve(field.getOriginType(), receiver, field.getDeclaringClass(), field.isStatic(), expressionToStoreOn);
        checkOrMarkPrivateAccess(field);
        if (delegationData!=null) {
            expressionToStoreOn.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, delegationData);
        }
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;storeProperty(PropertyNode,PropertyExpression,ClassNode,ClassCodeVisitorSupport,String);;;private boolean storeProperty(PropertyNode propertyNode, PropertyExpression expressionToStoreOn, ClassNode receiver, ClassCodeVisitorSupport visitor, String delegationData) {
        if (propertyNode == null) return false;
        if (visitor != null) visitor.visitProperty(propertyNode);
        storeWithResolve(propertyNode.getOriginType(), receiver, propertyNode.getDeclaringClass(), propertyNode.isStatic(), expressionToStoreOn);
        if (delegationData!=null) {
            expressionToStoreOn.putNodeMetaData(StaticTypesMarker.IMPLICIT_RECEIVER, delegationData);
        }
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;visitMethodCallExpression(MethodCallExpression);;;            //TODO check if this should not be change to iterator based call logic
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;addArrayMethods(List<MethodNode>,ClassNode,String,ClassNode[]);;;private void addArrayMethods(List<MethodNode> methods, ClassNode receiver, String name, ClassNode[] args) {
        if (args.length!=1) return;
        if (!receiver.isArray()) return;
        if (!isIntCategory(args[0])) return;
        if ("getAt".equals(name)) {
            MethodNode node = new MethodNode(name, Opcodes.ACC_PUBLIC, receiver.getComponentType(), new Parameter[]{new Parameter(args[0],"arg")}, null, null);
            node.setDeclaringClass(receiver.redirect());
            methods.add(node);
        } else if ("setAt".equals(name)) {
            MethodNode node = new MethodNode(name, Opcodes.ACC_PUBLIC, VOID_TYPE, new Parameter[]{new Parameter(args[0],"arg")}, null, null);
            node.setDeclaringClass(receiver.redirect());
            methods.add(node);
        } else {
            return;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;findMethod(ClassNode,String,ClassNode);;;            if (methods.isEmpty()) {
                addArrayMethods(methods, receiver, name, args);
            }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\main\org\codehaus\groovy\transform\stc\StaticTypeCheckingVisitor;getType(ASTNode);;;
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\test\org\codehaus\groovy\tools\stubgenerator\Groovy5859Support;Groovy5859Support(SortedMap<?extendsK,?extendsV>);;;public Groovy5859Support(SortedMap<? extends K, ? extends V> map) {}
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\src\test\org\codehaus\groovy\tools\stubgenerator\Groovy5859Support;putAll(Map<?extendsK,?extendsV>);;;public void putAll(final Map<? extends K, ? extends V> m) {
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\subprojects\groovy-groovydoc\src\main\java\org\codehaus\groovy\tools\groovydoc\SimpleGroovyClassDoc;encodeAngleBracketsInTagBody(String,Pattern);;;public static String encodeAngleBracketsInTagBody(String text, Pattern regex) {
        Matcher matcher = regex.matcher(text);
        if (matcher.find()) {
            matcher.reset();
            StringBuffer sb = new StringBuffer();
            while (matcher.find()) {
                String tagName = matcher.group(1);
                String tagBody = matcher.group(2);
                String encodedBody = encodeAngleBrackets(tagBody);
                String replacement = "{@" + tagName + " " + encodedBody + "}";
                matcher.appendReplacement(sb, replacement);
            }
            matcher.appendTail(sb);
            return sb.toString();
        } else {
            return text;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\subprojects\groovy-groovydoc\src\main\java\org\codehaus\groovy\tools\groovydoc\SimpleGroovyClassDoc;encodeAngleBrackets(String);;;public static String encodeAngleBrackets(String text) {
        return text.replace("<", "&lt;").replace(">", "&gt;");
    }
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\subprojects\groovy-groovydoc\src\test\groovy\org\codehaus\groovy\tools\groovydoc\testfiles\Builder;setParent(Object,Object);;;@Override
	protected void setParent(Object parent, Object child) {
	}
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\subprojects\groovy-groovydoc\src\test\groovy\org\codehaus\groovy\tools\groovydoc\testfiles\Builder;createNode(Object);;;@Override
	protected Object createNode(Object name) {
		return null;
	}
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\subprojects\groovy-groovydoc\src\test\groovy\org\codehaus\groovy\tools\groovydoc\testfiles\Builder;createNode(Object,Object);;;@Override
	protected Object createNode(Object name, Object value) {
		return null;
	}
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\subprojects\groovy-groovydoc\src\test\groovy\org\codehaus\groovy\tools\groovydoc\testfiles\Builder;createNode(Object,Map);;;@Override
	protected Object createNode(Object name, Map attributes) {
		return null;
	}
E:\Mestrado\FPFNAnalysis\projects\groovy-core\revisions\rev_543f54f_0e7864d\rev_543f54f-0e7864d;\subprojects\groovy-groovydoc\src\test\groovy\org\codehaus\groovy\tools\groovydoc\testfiles\Builder;createNode(Object,Map,Object);;;@Override
	protected Object createNode(Object name, Map attributes, Object value) {
		return null;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\GridworksServlet;getVersion();;;public static String getVersion() {
        return VERSION;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\GridworksServlet;run();;;public void run() {
            try {
                ProjectManager.singleton.save(false); // quick, potentially incomplete save
            } finally {
                _timer.schedule(new AutoSaveTimerTask(), s_autoSavePeriod);
                // we don't use scheduleAtFixedRate because that might result in 
                // bunched up events when the computer is put in sleep mode
            }
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\GridworksServlet;init();;;@Override
    public void init() throws ServletException {
        logger.trace("> initialize");
        
        String data = getInitParameter("gridworks.data");
        
        if (data == null) {
            throw new ServletException("can't find servlet init config 'gridworks.data', I have to give up initializing");
        }
        
        registerCommands(commandNames);
        
        ProjectManager.initialize(new File(data));
                
        if (_timer == null) {
            _timer = new Timer("autosave");
            _timer.schedule(new AutoSaveTimerTask(), s_autoSavePeriod);
        }
        
        logger.trace("< initialize");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\GridworksServlet;destroy();;;@Override
    public void destroy() {
        logger.trace("> destroy");

        // cancel automatic periodic saving and force a complete save. 
        if (_timer != null) {
            _timer.cancel();
            _timer = null;
        }
        if (ProjectManager.singleton != null) {
            ProjectManager.singleton.save(true); // complete save
            ProjectManager.singleton = null;
        }

        this.config = null;
        
        super.destroy();

        logger.trace("< destroy");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\GridworksServlet;doGet(HttpServletRequest,HttpServletResponse);;;protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String commandName = getCommandName(request);
        Command command = commands.get(commandName);
        if (command != null) {
            logger.trace("> GET {}", commandName);
            command.doGet(request, response);
            logger.trace("< GET {}", commandName);
        } else {
            response.sendError(404);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\GridworksServlet;doPost(HttpServletRequest,HttpServletResponse);;;protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String commandName = getCommandName(request);
        Command command = commands.get(commandName);
        if (command != null) {
            logger.trace("> POST {}", commandName);
            command.doPost(request, response);
            logger.trace("< POST {}", commandName);
        } else {
            response.sendError(404);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\GridworksServlet;getCommandName(HttpServletRequest);;;protected String getCommandName(HttpServletRequest request) {
        // Remove extraneous path segments that might be there for other purposes,
        // e.g., for /export-rows/filename.ext, export-rows is the command while
        // filename.ext is only for the browser to prompt a convenient filename. 
        String commandName = request.getPathInfo().substring(1);
        int slash = commandName.indexOf('/');
        return slash > 0 ? commandName.substring(0, slash) : commandName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\GridworksServlet;getTempDir();;;public File getTempDir() { 
        if (tempDir == null) {
            File tempDir = (File) this.config.getServletContext().getAttribute(JAVAX_SERVLET_CONTEXT_TEMPDIR);
            if (tempDir == null) {
                throw new RuntimeException("This app server doesn't support temp directories");
            }
        }
        return tempDir;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\GridworksServlet;getTempFile(String);;;public File getTempFile(String name) {
        return new File(getTempDir(), name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\GridworksServlet;getConfiguration(String,String);;;public String getConfiguration(String name, String def) {
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\GridworksServlet;registerCommand(String,Command);;;protected boolean registerCommand(String name, Command commandObject) {
        if (commands.containsKey(name)) {
            return false;
        }
        commands.put(name, commandObject);
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\GridworksServlet;unregisterCommand(String);;;protected boolean unregisterCommand(String verb) {
        return commands.remove(verb) != null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\InterProjectModel;ProjectJoin(long,String,long,String);;;ProjectJoin(
            long   fromProjectID,
            String fromProjectColumnName,
            long   toProjectID,
            String toProjectColumnName
        ) {
            this.fromProjectID = fromProjectID;
            this.fromProjectColumnName = fromProjectColumnName;
            this.toProjectID = toProjectID;
            this.toProjectColumnName = toProjectColumnName;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\InterProjectModel;getRows(Object);;;public HasFieldsListImpl getRows(Object value) {
            if (ExpressionUtils.isNonBlankData(value) && valueToRowIndices.containsKey(value)) {
                Project toProject = ProjectManager.singleton.getProject(toProjectID);
                if (toProject != null) {
                    HasFieldsListImpl rows = new HasFieldsListImpl();
                    for (Integer r : valueToRowIndices.get(value)) {
                        Row row = toProject.rows.get(r);
                        rows.add(new WrappedRow(toProject, r, row));
                    }
                    
                    return rows;
                }
            }
            return null;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\InterProjectModel;getJoin(String,String,String,String);;;public ProjectJoin getJoin(String fromProject, String fromColumn, String toProject, String toColumn) {
        String key = fromProject + ";" + fromColumn + ";" + toProject + ";" + toColumn;
        if (!_joins.containsKey(key)) {
            ProjectJoin join = new ProjectJoin(
                ProjectManager.singleton.getProjectID(fromProject), 
                fromColumn, 
                ProjectManager.singleton.getProjectID(toProject), 
                toColumn
            );
            
            computeJoin(join);
            
            _joins.put(key, join);
        }
        
        return _joins.get(key);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\InterProjectModel;flushJoinsInvolvingProject(long);;;public void flushJoinsInvolvingProject(long projectID) {
        for (Entry<String, ProjectJoin> entry : _joins.entrySet()) {
            ProjectJoin join = entry.getValue();
            if (join.fromProjectID == projectID || join.toProjectID == projectID) {
                _joins.remove(entry.getKey());
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\InterProjectModel;flushJoinsInvolvingProjectColumn(long,String);;;public void flushJoinsInvolvingProjectColumn(long projectID, String columnName) {
        for (Entry<String, ProjectJoin> entry : _joins.entrySet()) {
            ProjectJoin join = entry.getValue();
            if (join.fromProjectID == projectID && join.fromProjectColumnName.equals(columnName) || 
                join.toProjectID == projectID && join.toProjectColumnName.equals(columnName)) {
                _joins.remove(entry.getKey());
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\InterProjectModel;computeJoin(ProjectJoin);;;protected void computeJoin(ProjectJoin join) {
        if (join.fromProjectID < 0 || join.toProjectID < 0) {
            return;
        }
        
        Project fromProject = ProjectManager.singleton.getProject(join.fromProjectID);
        Project toProject = ProjectManager.singleton.getProject(join.toProjectID);
        if (fromProject == null || toProject == null) {
            return;
        }
        
        Column fromColumn = fromProject.columnModel.getColumnByName(join.fromProjectColumnName);
        Column toColumn = toProject.columnModel.getColumnByName(join.toProjectColumnName);
        if (fromColumn == null || toColumn == null) {
            return;
        }
        
        for (Row fromRow : fromProject.rows) {
            Object value = fromRow.getCellValue(fromColumn.getCellIndex());
            if (ExpressionUtils.isNonBlankData(value) && !join.valueToRowIndices.containsKey(value)) {
                join.valueToRowIndices.put(value, new ArrayList<Integer>());
            }
        }
        
        int count = toProject.rows.size();
        for (int r = 0; r < count; r++) {
            Row toRow = toProject.rows.get(r);
            
            Object value = toRow.getCellValue(toColumn.getCellIndex());
            if (ExpressionUtils.isNonBlankData(value) && join.valueToRowIndices.containsKey(value)) {
                join.valueToRowIndices.get(value).add(r);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\Jsonizable;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options) throws JSONException;
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;initialize(File);;;static public synchronized void initialize(File dir) {
        if (singleton == null) {
            logger.info("Using workspace directory: {}", dir.getAbsolutePath());
            singleton = new ProjectManager(dir);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;ProjectManager(File);;;private ProjectManager(File dir) {
        _workspaceDir = dir;
        _workspaceDir.mkdirs();
        
        _projectsMetadata = new HashMap<Long, ProjectMetadata>();
        _expressions = new LinkedList<String>();
        _projects = new HashMap<Long, Project>();
        
        load();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;getInterProjectModel();;;public InterProjectModel getInterProjectModel() {
        return _interProjectModel;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;getWorkspaceDir();;;public File getWorkspaceDir() {
        return _workspaceDir;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;getProjectDir(File,long);;;static public File getProjectDir(File workspaceDir, long projectID) {
        File dir = new File(workspaceDir, projectID + ".project");
        if (!dir.exists()) {
            dir.mkdir();
        }
        return dir;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;getProjectDir(long);;;public File getProjectDir(long projectID) {
        return getProjectDir(_workspaceDir, projectID);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;registerProject(Project,ProjectMetadata);;;public void registerProject(Project project, ProjectMetadata projectMetadata) {
        synchronized (this) {
            _projects.put(project.id, project);
            _projectsMetadata.put(project.id, projectMetadata);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;importProject(long);;;public boolean importProject(long projectID) {
        synchronized (this) {
            ProjectMetadata metadata = ProjectMetadata.load(getProjectDir(projectID));
            if (metadata != null) {
                _projectsMetadata.put(projectID, metadata);
                return true;
            } else {
                return false;
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;ensureProjectSaved(long);;;public void ensureProjectSaved(long id) {
        synchronized (this) {
            File projectDir = getProjectDir(id);
            
            ProjectMetadata metadata = _projectsMetadata.get(id);
            if (metadata != null) {
                try {
                    metadata.save(projectDir);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            
            Project project = _projects.get(id);
            if (project != null && metadata.getModified().after(project.lastSave)) {
                try {
                    project.save();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;getProjectMetadata(long);;;public ProjectMetadata getProjectMetadata(long id) {
        return _projectsMetadata.get(id);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;getProjectMetadata(String);;;public ProjectMetadata getProjectMetadata(String name) {
        for (ProjectMetadata pm : _projectsMetadata.values()) {
            if (pm.getName().equals(name)) {
                return pm;
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;getProjectID(String);;;public long getProjectID(String name) {
        for (Entry<Long, ProjectMetadata> entry : _projectsMetadata.entrySet()) {
            if (entry.getValue().getName().equals(name)) {
                return entry.getKey();
            }
        }
        return -1;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;getAllProjectMetadata();;;public Map<Long, ProjectMetadata> getAllProjectMetadata() {
        return _projectsMetadata;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;getProject(long);;;public Project getProject(long id) {
        synchronized (this) {
            if (_projects.containsKey(id)) {
                return _projects.get(id);
            } else {
                Project project = Project.load(getProjectDir(id), id);
                
                _projects.put(id, project);
                
                return project;
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;setBusy(boolean);;;public void setBusy(boolean busy) {
        synchronized (this) {
            if (busy) {
                _busy++;
            } else {
                _busy--;
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;addLatestExpression(String);;;public void addLatestExpression(String s) {
        synchronized (this) {
            _expressions.remove(s);
            _expressions.add(0, s);
            while (_expressions.size() > s_expressionHistoryMax) {
                _expressions.remove(_expressions.size() - 1);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;getExpressions();;;public List<String> getExpressions() {
        return _expressions;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;save(boolean);;;public void save(boolean allModified) {
        if (allModified || _busy == 0) {
            saveProjects(allModified);
            saveWorkspace();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;saveWorkspace();;;protected void saveWorkspace() {
        synchronized (this) {
            File tempFile = new File(_workspaceDir, "workspace.temp.json");
            try {
                saveToFile(tempFile);
            } catch (Exception e) {
                e.printStackTrace();
                
                logger.warn("Failed to save workspace");
                return;
            }
            
            File file = new File(_workspaceDir, "workspace.json");
            File oldFile = new File(_workspaceDir, "workspace.old.json");
            
            if (file.exists()) {
                file.renameTo(oldFile);
            }
            
            tempFile.renameTo(file);
            if (oldFile.exists()) {
                oldFile.delete();
            }
            
            logger.info("Saved workspace");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;saveToFile(File);;;protected void saveToFile(File file) throws IOException, JSONException {
        FileWriter writer = new FileWriter(file);
        try {
            JSONWriter jsonWriter = new JSONWriter(writer);
            jsonWriter.object();
            jsonWriter.key("projectIDs");
                jsonWriter.array();
                for (Long id : _projectsMetadata.keySet()) {
                    ProjectMetadata metadata = _projectsMetadata.get(id);
                    if (metadata != null) {
                        jsonWriter.value(id);
                        
                        try {
                            metadata.save(getProjectDir(id));
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }
                jsonWriter.endArray();
                writer.write('\n');
                
            jsonWriter.key("expressions"); JSONUtilities.writeStringList(jsonWriter, _expressions);
            jsonWriter.endObject();
        } finally {
            writer.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;SaveRecord(Project,long);;;SaveRecord(Project project, long overdue) {
            this.project = project;
            this.overdue = overdue;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;saveProjects(boolean);;;protected void saveProjects(boolean allModified) {
        List<SaveRecord> records = new ArrayList<SaveRecord>();
        Date now = new Date();
        
        synchronized (this) {
            for (long id : _projectsMetadata.keySet()) {
                ProjectMetadata metadata = _projectsMetadata.get(id);
                Project project = _projects.get(id);
                
                if (project != null) {
                    boolean hasUnsavedChanges = 
                        metadata.getModified().getTime() > project.lastSave.getTime();
                    
                    if (hasUnsavedChanges) {
                        long msecsOverdue = now.getTime() - project.lastSave.getTime();
                        
                        records.add(new SaveRecord(project, msecsOverdue));
                        
                    } else if (now.getTime() - project.lastSave.getTime() > s_projectFlushDelay) {
                        /*
                         *  It's been a while since the project was last saved and it hasn't been
                         *  modified. We can safely remove it from the cache to save some memory.
                         */
                        _projects.remove(id);
                    }
                }
            }
        }
        
        if (records.size() > 0) {
            Collections.sort(records, new Comparator<SaveRecord>() {
                public int compare(SaveRecord o1, SaveRecord o2) {
                    if (o1.overdue < o2.overdue) {
                        return 1;
                    } else if (o1.overdue > o2.overdue) {
                        return -1;
                    } else {
                        return 0;
                    }
                }
            });
            
            logger.info(allModified ?
                "Saving all modified projects ..." :
                "Saving some modified projects ..."
            );
            
            for (int i = 0; 
                 i < records.size() && 
                    (allModified || (new Date().getTime() - now.getTime() < s_quickSaveTimeout));
                 i++) {
                
                try {
                    records.get(i).project.save();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;deleteProject(Project);;;public void deleteProject(Project project) {
        deleteProject(project.id);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;deleteProject(long);;;public void deleteProject(long projectID) {
        synchronized (this) {
            if (_projectsMetadata.containsKey(projectID)) {
                _projectsMetadata.remove(projectID);
            }
            if (_projects.containsKey(projectID)) {
                _projects.remove(projectID);
            }
            
            File dir = getProjectDir(projectID);
            if (dir.exists()) {
                deleteDir(dir);
            }
        }
        
        saveWorkspace();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;deleteDir(File);;;static protected void deleteDir(File dir) {
        for (File file : dir.listFiles()) {
            if (file.isDirectory()) {
                deleteDir(file);
            } else {
                file.delete();
            }
        }
        dir.delete();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;load();;;protected void load() {
        if (loadFromFile(new File(_workspaceDir, "workspace.json"))) return;
        if (loadFromFile(new File(_workspaceDir, "workspace.temp.json"))) return;
        if (loadFromFile(new File(_workspaceDir, "workspace.old.json"))) return;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectManager;loadFromFile(File);;;protected boolean loadFromFile(File file) {
        logger.info("Loading workspace: {}", file.getAbsolutePath());
        
        _projectsMetadata.clear();
        _expressions.clear();
        
        boolean found = false;
        
        if (file.exists() || file.canRead()) {
            FileReader reader = null;
            try {
                reader = new FileReader(file);
                JSONTokener tokener = new JSONTokener(reader);
                JSONObject obj = (JSONObject) tokener.nextValue();
                
                JSONArray a = obj.getJSONArray("projectIDs");
                int count = a.length();
                for (int i = 0; i < count; i++) {
                    long id = a.getLong(i);
                    
                    File projectDir = getProjectDir(id);
                    ProjectMetadata metadata = ProjectMetadata.load(projectDir);
                    
                    _projectsMetadata.put(id, metadata);
                }
                
                JSONUtilities.getStringList(obj, "expressions", _expressions);
                found = true;
            } catch (JSONException e) {
                logger.warn("Error reading file", e);
            } catch (IOException e) {
                logger.warn("Error reading file", e);
            } finally {
                try {
                    reader.close();
                } catch (IOException e) {
                    logger.warn("Exception closing file",e);
                }
            }
        }
        
        return found;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;ProjectMetadata(Date);;;protected ProjectMetadata(Date date) {
        _created = date;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;ProjectMetadata();;;public ProjectMetadata() {
        _created = new Date();
        _modified = _created;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("name"); writer.value(_name);
        writer.key("created"); writer.value(ParsingUtilities.dateToString(_created));
        writer.key("modified"); writer.value(ParsingUtilities.dateToString(_modified));
        
        if ("save".equals(options.getProperty("mode"))) {
            writer.key("password"); writer.value(_password);
            
            writer.key("encoding"); writer.value(_encoding);
            writer.key("encodingConfidence"); writer.value(_encodingConfidence);
            writer.key("expressions"); JSONUtilities.writeStringList(writer, _expressions);
        }
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;save(File);;;public void save(File projectDir) throws Exception {
        File tempFile = new File(projectDir, "metadata.temp.json");
        try {
            saveToFile(tempFile);
        } catch (Exception e) {
            e.printStackTrace();
            
            logger.warn("Failed to save project metadata");
            return;
        }
        
        File file = new File(projectDir, "metadata.json");
        File oldFile = new File(projectDir, "metadata.old.json");
        
        if (file.exists()) {
            file.renameTo(oldFile);
        }
        
        tempFile.renameTo(file);
        if (oldFile.exists()) {
            oldFile.delete();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;saveToFile(File);;;protected void saveToFile(File metadataFile) throws Exception {
        Writer writer = new OutputStreamWriter(new FileOutputStream(metadataFile));
        try {
            Properties options = new Properties();
            options.setProperty("mode", "save");
            
            JSONWriter jsonWriter = new JSONWriter(writer);
            
            write(jsonWriter, options);
        } finally {
            writer.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;load(File);;;static public ProjectMetadata load(File projectDir) {
        try {
            return loadFromFile(new File(projectDir, "metadata.json"));
        } catch (Exception e) {
        }
        
        try {
            return loadFromFile(new File(projectDir, "metadata.temp.json"));
        } catch (Exception e) {
        }
        
        try {
            return loadFromFile(new File(projectDir, "metadata.old.json"));
        } catch (Exception e) {
        }
        
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;loadFromFile(File);;;static protected ProjectMetadata loadFromFile(File metadataFile) throws Exception {
        FileReader reader = new FileReader(metadataFile);
        try {
            JSONTokener tokener = new JSONTokener(reader);
            JSONObject obj = (JSONObject) tokener.nextValue();
            
            return loadFromJSON(obj);
        } finally {
            reader.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;loadFromJSON(JSONObject);;;static protected ProjectMetadata loadFromJSON(JSONObject obj) {
        ProjectMetadata pm = new ProjectMetadata(JSONUtilities.getDate(obj, "modified", new Date()));
        
        pm._modified = JSONUtilities.getDate(obj, "modified", new Date());
        pm._name = JSONUtilities.getString(obj, "name", "<Error recovering project name>");
        pm._password = JSONUtilities.getString(obj, "password", "");
        
        pm._encoding = JSONUtilities.getString(obj, "encoding", "");
        pm._encodingConfidence = JSONUtilities.getInt(obj, "encodingConfidence", 0);
        
        JSONUtilities.getStringList(obj, "expressions", pm._expressions);
        
        return pm;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;getCreated();;;public Date getCreated() {
        return _created;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;setName(String);;;public void setName(String name) {
        this._name = name;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;getName();;;public String getName() {
        return _name;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;setEncoding(String);;;public void setEncoding(String encoding) {
        this._encoding = encoding;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;getEncoding();;;public String getEncoding() {
        return _encoding;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;setEncodingConfidence(int);;;public void setEncodingConfidence(int confidence) {
        this._encodingConfidence = confidence;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;setEncodingConfidence(String);;;public void setEncodingConfidence(String confidence) {
        if (confidence != null) {
            this.setEncodingConfidence(Integer.parseInt(confidence));
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;getEncodingConfidence();;;public int getEncodingConfidence() {
        return _encodingConfidence;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;setPassword(String);;;public void setPassword(String password) {
        this._password = password;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;getPassword();;;public String getPassword() {
        return _password;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;getModified();;;public Date getModified() {
        return _modified;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;updateModified();;;public void updateModified() {
        _modified = new Date();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;addLatestExpression(String);;;public void addLatestExpression(String s) {
        _expressions.remove(s);
        _expressions.add(0, s);
        while (_expressions.size() > s_expressionHistoryMax) {
            _expressions.remove(_expressions.size() - 1);
        }
        
        ProjectManager.singleton.addLatestExpression(s);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\ProjectMetadata;getExpressions();;;public List<String> getExpressions() {
        return _expressions;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\DecoratedValue;DecoratedValue(Object,String);;;public DecoratedValue(Object value, String label) {
        this.value = value;
        this.label = label;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\DecoratedValue;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        writer.object();
        writer.key("v"); writer.value(value);
        writer.key("l"); writer.value(label);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\Engine;modeToString(Mode);;;static public String modeToString(Mode mode) {
    	return mode == Mode.RowBased ? MODE_ROW_BASED : MODE_RECORD_BASED;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\Engine;stringToMode(String);;;static public Mode stringToMode(String s) {
    	return MODE_ROW_BASED.equals(s) ? Mode.RowBased : Mode.RecordBased;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\Engine;Engine(Project);;;public Engine(Project project) {
        _project  = project;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\Engine;getMode();;;public Mode getMode() {
    	return _mode;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\Engine;setMode(Mode);;;public void setMode(Mode mode) {
    	_mode = mode;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\Engine;getAllFilteredRows();;;public FilteredRows getAllFilteredRows() {
        return getFilteredRows(null);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\Engine;getFilteredRows(Facet);;;public FilteredRows getFilteredRows(Facet except) {
    	if (_mode == Mode.RecordBased) {
    		return new FilteredRecordsAsFilteredRows(getFilteredRecords(except));
    	} else if (_mode == Mode.RowBased) {
	        ConjunctiveFilteredRows cfr = new ConjunctiveFilteredRows();
	        for (Facet facet : _facets) {
	            if (facet != except) {
	                RowFilter rowFilter = facet.getRowFilter(_project);
	                if (rowFilter != null) {
	                    cfr.add(rowFilter);
	                }
	            }
	        }
	        return cfr;
    	}
    	throw new InternalError("Unknown mode.");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\Engine;getFilteredRecords();;;public FilteredRecords getFilteredRecords() {
    	return getFilteredRecords(null);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\Engine;getFilteredRecords(Facet);;;public FilteredRecords getFilteredRecords(Facet except) {
    	if (_mode == Mode.RecordBased) {
    		ConjunctiveFilteredRecords cfr = new ConjunctiveFilteredRecords();
            for (Facet facet : _facets) {
                if (facet != except) {
                    RecordFilter recordFilter = facet.getRecordFilter(_project);
                    if (recordFilter != null) {
                        cfr.add(recordFilter);
                    }
                }
            }
            return cfr;
    	}
    	throw new InternalError("This method should not be called when the engine is not in record mode.");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\Engine;initializeFromJSON(JSONObject);;;public void initializeFromJSON(JSONObject o) throws Exception {
        if (o == null) {
            return;
        }
        
        if (o.has("facets") && !o.isNull("facets")) {
            JSONArray a = o.getJSONArray("facets");
            int length = a.length();
            
            for (int i = 0; i < length; i++) {
                JSONObject fo = a.getJSONObject(i);
                String type = fo.has("type") ? fo.getString("type") : "list";
                
                Facet facet = null;
                if ("list".equals(type)) {
                    facet = new ListFacet();
                } else if ("range".equals(type)) {
                    facet = new RangeFacet();
                } else if ("scatterplot".equals(type)) {
                    facet = new ScatterplotFacet();
                } else if ("text".equals(type)) {
                    facet = new TextSearchFacet();
                }
                
                if (facet != null) {
                    facet.initializeFromJSON(_project, fo);
                    _facets.add(facet);
                }
            }
        }
        
        // for backward compatibility
        if (o.has(INCLUDE_DEPENDENT) && !o.isNull(INCLUDE_DEPENDENT)) {
            _mode = o.getBoolean(INCLUDE_DEPENDENT) ? Mode.RecordBased : Mode.RowBased;
        }
        
        if (o.has(MODE) && !o.isNull(MODE)) {
        	_mode = MODE_ROW_BASED.equals(o.getString(MODE)) ? Mode.RowBased : Mode.RecordBased;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\Engine;computeFacets();;;public void computeFacets() throws JSONException {
    	if (_mode == Mode.RowBased) {
	        for (Facet facet : _facets) {
	            FilteredRows filteredRows = getFilteredRows(facet);
	            
	            facet.computeChoices(_project, filteredRows);
	        }
    	} else if (_mode == Mode.RecordBased) {
	        for (Facet facet : _facets) {
	            FilteredRecords filteredRecords = getFilteredRecords(facet);
	            
	            facet.computeChoices(_project, filteredRecords);
	        }
    	} else {
        	throw new InternalError("Unknown mode.");
    	}
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\Engine;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("facets");
            writer.array();
            for (Facet facet : _facets) {
                facet.write(writer, options);
            }
            writer.endArray();
        writer.key(MODE); writer.value(_mode == Mode.RowBased ? MODE_ROW_BASED : MODE_RECORD_BASED);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\FilteredRecords;accept(Project,RecordVisitor);;;public void accept(Project project, RecordVisitor visitor);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\FilteredRows;accept(Project,RowVisitor);;;public void accept(Project project, RowVisitor visitor);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\RecordFilter;filterRecord(Project,Record);;;public boolean filterRecord(Project project, Record record);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\RecordVisitor;start(Project);;;public void start(Project project);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\RecordVisitor;visit(Project,Record);;;public boolean visit(
        Project project, 
        Record record
    );
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\RecordVisitor;end(Project);;;public void end(Project project);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\RowFilter;filterRow(Project,int,Row);;;public boolean filterRow(Project project, int rowIndex, Row row);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\RowVisitor;start(Project);;;public void start(Project project);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\RowVisitor;visit(Project,int,Row);;;public boolean visit(
        Project project, 
        int     rowIndex,   // zero-based row index 
        Row     row
    );
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\RowVisitor;end(Project);;;public void end(Project project);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\Facet;getRowFilter(Project);;;public RowFilter getRowFilter(Project project);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\Facet;getRecordFilter(Project);;;public RecordFilter getRecordFilter(Project project);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\Facet;computeChoices(Project,FilteredRows);;;public void computeChoices(Project project, FilteredRows filteredRows);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\Facet;computeChoices(Project,FilteredRecords);;;public void computeChoices(Project project, FilteredRecords filteredRecords);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\Facet;initializeFromJSON(Project,JSONObject);;;public void initializeFromJSON(Project project, JSONObject o) throws Exception;
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ListFacet;ListFacet();;;public ListFacet() {
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ListFacet;postProcessGrouper(ExpressionNominalValueGrouper);;;protected void postProcessGrouper(ExpressionNominalValueGrouper grouper) {
        _choices.clear();
        _choices.addAll(grouper.choices.values());
        
        for (NominalFacetChoice choice : _selection) {
            String valueString = choice.decoratedValue.value.toString();
            
            if (grouper.choices.containsKey(valueString)) {
                grouper.choices.get(valueString).selected = true;
            } else {
                /*
                 *  A selected choice can have zero count if it is selected together
                 *  with other choices, and some other facets' constraints eliminate
                 *  all rows projected to this choice altogether. For example, if you
                 *  select both "car" and "bicycle" in the "type of vehicle" facet, and
                 *  then constrain the "wheels" facet to more than 2, then the "bicycle"
                 *  choice now has zero count even if it's still selected. The grouper 
                 *  won't be able to detect the "bicycle" choice, so we need to inject
                 *  that choice into the choice list ourselves.
                 */
                choice.count = 0;
                _choices.add(choice);
            }
        }
        
        _blankCount = grouper.blankCount;
        _errorCount = grouper.errorCount;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ListFacet;createMatches();;;protected Object[] createMatches() {
        Object[] a = new Object[_selection.size()];
        for (int i = 0; i < a.length; i++) {
            a[i] = _selection.get(i).decoratedValue.value;
        }
        return a;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\NominalFacetChoice;NominalFacetChoice(DecoratedValue);;;public NominalFacetChoice(DecoratedValue decoratedValue) {
        this.decoratedValue = decoratedValue;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\NominalFacetChoice;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        writer.object();
        writer.key("v"); decoratedValue.write(writer, options);
        writer.key("c"); writer.value(count);
        writer.key("s"); writer.value(selected);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\RangeFacet;RangeFacet();;;public RangeFacet() {
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\RangeFacet;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("name"); writer.value(_name);
        writer.key("expression"); writer.value(_expression);
        writer.key("columnName"); writer.value(_columnName);
        
        if (_errorMessage != null) {
            writer.key("error"); writer.value(_errorMessage);
        } else {
            if (!Double.isInfinite(_min) && !Double.isInfinite(_max)) {
                writer.key(MIN); writer.value(_min);
                writer.key(MAX); writer.value(_max);
                writer.key("step"); writer.value(_step);
                
                writer.key("bins"); writer.array();
                for (int b : _bins) {
                    writer.value(b);
                }
                writer.endArray();
                
                writer.key("baseBins"); writer.array();
                for (int b : _baseBins) {
                    writer.value(b);
                }
                writer.endArray();
                
                writer.key(FROM); writer.value(_from);
                writer.key(TO); writer.value(_to);
            }
            
            writer.key("baseNumericCount"); writer.value(_baseNumericCount);
            writer.key("baseNonNumericCount"); writer.value(_baseNonNumericCount);
            writer.key("baseBlankCount"); writer.value(_baseBlankCount);
            writer.key("baseErrorCount"); writer.value(_baseErrorCount);
            
            writer.key("numericCount"); writer.value(_numericCount);
            writer.key("nonNumericCount"); writer.value(_nonNumericCount);
            writer.key("blankCount"); writer.value(_blankCount);
            writer.key("errorCount"); writer.value(_errorCount);
        }
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\RangeFacet;initializeFromJSON(Project,JSONObject);;;public void initializeFromJSON(Project project, JSONObject o) throws Exception {
        _name = o.getString("name");
        _expression = o.getString("expression");
        _columnName = o.getString("columnName");
        
        if (_columnName.length() > 0) {
            Column column = project.columnModel.getColumnByName(_columnName);
            if (column != null) {
                _cellIndex = column.getCellIndex();
            } else {
                _errorMessage = "No column named " + _columnName;
            }
        } else {
            _cellIndex = -1;
        }
        
        try {
            _eval = MetaParser.parse(_expression);
        } catch (ParsingException e) {
            _errorMessage = e.getMessage();
        }
        
        if (o.has(FROM) || o.has(TO)) {
            _from = o.has(FROM) ? o.getDouble(FROM) : _min;
            _to = o.has(TO) ? o.getDouble(TO) : _max;
            _selected = true;
        }
        
        _selectNumeric = JSONUtilities.getBoolean(o, "selectNumeric", true);
        _selectNonNumeric = JSONUtilities.getBoolean(o, "selectNonNumeric", true);
        _selectBlank = JSONUtilities.getBoolean(o, "selectBlank", true);
        _selectError = JSONUtilities.getBoolean(o, "selectError", true);
        
        if (!_selectNumeric || !_selectNonNumeric || !_selectBlank || !_selectError) {
            _selected = true;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\RangeFacet;getRowFilter(Project);;;public RowFilter getRowFilter(Project project) {
        if (_eval != null && _errorMessage == null && _selected) {
            return new ExpressionNumberComparisonRowFilter(
        		getRowEvaluable(project), _selectNumeric, _selectNonNumeric, _selectBlank, _selectError) {
                
                protected boolean checkValue(double d) {
                    return d >= _from && d < _to;
                };
            };
        } else {
            return null;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\RangeFacet;computeChoices(Project,FilteredRows);;;public void computeChoices(Project project, FilteredRows filteredRows) {
        if (_eval != null && _errorMessage == null) {
            RowEvaluable rowEvaluable = getRowEvaluable(project);
            
            Column column = project.columnModel.getColumnByCellIndex(_cellIndex);
            String key = "numeric-bin:row-based:" + _expression;
            NumericBinIndex index = (NumericBinIndex) column.getPrecompute(key);
            if (index == null) {
                index = new NumericBinRowIndex(project, rowEvaluable);
                column.setPrecompute(key, index);
            }
            
            retrieveDataFromBaseBinIndex(index);
            
            ExpressionNumericValueBinner binner = 
                new ExpressionNumericValueBinner(rowEvaluable, index);
            
            filteredRows.accept(project, binner);
            retrieveDataFromBinner(binner);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\RangeFacet;computeChoices(Project,FilteredRecords);;;public void computeChoices(Project project, FilteredRecords filteredRecords) {
        if (_eval != null && _errorMessage == null) {
            RowEvaluable rowEvaluable = getRowEvaluable(project);
            
            Column column = project.columnModel.getColumnByCellIndex(_cellIndex);
            String key = "numeric-bin:record-based:" + _expression;
            NumericBinIndex index = (NumericBinIndex) column.getPrecompute(key);
            if (index == null) {
                index = new NumericBinRecordIndex(project, rowEvaluable);
                column.setPrecompute(key, index);
            }
            
            retrieveDataFromBaseBinIndex(index);
            
            ExpressionNumericValueBinner binner = 
                new ExpressionNumericValueBinner(rowEvaluable, index);
            
            filteredRecords.accept(project, binner);
            
            retrieveDataFromBinner(binner);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\RangeFacet;getRowEvaluable(Project);;;protected RowEvaluable getRowEvaluable(Project project) {
    	return new ExpressionBasedRowEvaluable(_columnName, _cellIndex, _eval);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\RangeFacet;retrieveDataFromBaseBinIndex(NumericBinIndex);;;protected void retrieveDataFromBaseBinIndex(NumericBinIndex index) {
        _min = index.getMin();
        _max = index.getMax();
        _step = index.getStep();
        _baseBins = index.getBins();
        
        _baseNumericCount = index.getNumericRowCount();
        _baseNonNumericCount = index.getNonNumericRowCount();
        _baseBlankCount = index.getBlankRowCount();
        _baseErrorCount = index.getErrorRowCount();
        
        if (_selected) {
            _from = Math.max(_from, _min);
            _to = Math.min(_to, _max);
        } else {
            _from = _min;
            _to = _max;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\RangeFacet;retrieveDataFromBinner(ExpressionNumericValueBinner);;;protected void retrieveDataFromBinner(ExpressionNumericValueBinner binner) {
        _bins = binner.bins;
        _numericCount = binner.numericCount;
        _nonNumericCount = binner.nonNumericCount;
        _blankCount = binner.blankCount;
        _errorCount = binner.errorCount;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ScatterplotDrawingRowVisitor;ScatterplotDrawingRowVisitor(int,int,double,double,double,double,int,int,int,int,double,Color);;;public ScatterplotDrawingRowVisitor(
            int col_x, int col_y, double min_x, double max_x, double min_y, double max_y,
            int size, int dim_x, int dim_y, int rotation, double dot, Color color)  
    {
        this.col_x = col_x;
        this.col_y = col_y;
        this.min_x = min_x;
        this.min_y = min_y;
        this.max_x = max_x;
        this.max_y = max_y;
        this.dot = dot;
        this.dim_x = dim_x;
        this.dim_y = dim_y;
        this.rotation = rotation;
        
        l = (double) size;
        r = ScatterplotFacet.createRotationMatrix(rotation, l);

        image = new BufferedImage(size, size, BufferedImage.TYPE_4BYTE_ABGR);
        g2 = (Graphics2D) image.getGraphics();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g2.setStroke(new BasicStroke(1.0f));
        
        AffineTransform t = AffineTransform.getTranslateInstance(0, l);
        t.scale(1, -1);
        
        g2.setTransform(t);
        g2.setColor(color);
        g2.setPaint(color);
        
        if (r != null) {
            /*
             *  Fill in the negative quadrants to give a hint of how the plot has been rotated.
             */
            Graphics2D g2r = (Graphics2D) g2.create();
            g2r.transform(r);
            
            g2r.setPaint(Color.lightGray);
            g2r.fillRect(-size, 0, size, size);
            g2r.fillRect(0, -size, size, size);
            g2r.dispose();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ScatterplotDrawingRowVisitor;setColor(Color);;;public void setColor(Color color) {
        g2.setColor(color);
        g2.setPaint(color);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ScatterplotDrawingRowVisitor;getImage();;;public RenderedImage getImage() {
        return image;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ScatterplotFacet;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options) throws JSONException {
        
        writer.object();
        
        writer.key(NAME); writer.value(name);
        writer.key(X_COLUMN_NAME); writer.value(columnName_x);
        writer.key(X_EXPRESSION); writer.value(expression_x);
        writer.key(Y_COLUMN_NAME); writer.value(columnName_y);
        writer.key(Y_EXPRESSION); writer.value(expression_y);
        writer.key(SIZE); writer.value(size);
        writer.key(DOT); writer.value(dot);
        writer.key(ROTATION); writer.value(rotation);
        writer.key(DIM_X); writer.value(dim_x);
        writer.key(DIM_Y); writer.value(dim_y);
        writer.key(COLOR); writer.value(color_str);

        if (IMAGE_URI) {
            writer.key(IMAGE); writer.value(image);
        }
        
        if (errorMessage_x != null) {
            writer.key(ERROR_X); writer.value(errorMessage_x);
        } else {
            if (!Double.isInfinite(min_x) && !Double.isInfinite(max_x)) {
                writer.key(FROM_X); writer.value(from_x);
                writer.key(TO_X); writer.value(to_x);
            }
        }
            
        if (errorMessage_y != null) {
            writer.key(ERROR_Y); writer.value(errorMessage_y);
        } else {
            if (!Double.isInfinite(min_y) && !Double.isInfinite(max_y)) {
                writer.key(FROM_Y); writer.value(from_y);
                writer.key(TO_Y); writer.value(to_y);
            }
        }
        
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ScatterplotFacet;initializeFromJSON(Project,JSONObject);;;public void initializeFromJSON(Project project, JSONObject o) throws Exception {
        name = o.getString(NAME);
        l = size = (o.has(SIZE)) ? o.getInt(SIZE) : 100;
        dot = (o.has(DOT)) ? o.getInt(DOT) : 0.5d;
        
        dim_x = (o.has(DIM_X)) ? getAxisDim(o.getString(DIM_X)) : LIN;
        if (o.has(FROM_X) && o.has(TO_X)) {
            from_x = o.getDouble(FROM_X);
            to_x = o.getDouble(TO_X);
            selected = true;
        } else {
            from_x = 0;
            to_x = 1;
        }
        
        dim_y = (o.has(DIM_Y)) ? getAxisDim(o.getString(DIM_Y)) : LIN;
        if (o.has(FROM_Y) && o.has(TO_Y)) {
            from_y = o.getDouble(FROM_Y);
            to_y = o.getDouble(TO_Y);
            selected = true;
        } else {
            from_y = 0;
            to_y = 1;
        }
        
        rotation = (o.has(ROTATION)) ? getRotation(o.getString(ROTATION)) : NO_ROTATION;
        t = createRotationMatrix(rotation, l);
        
        color_str = (o.has(COLOR)) ? o.getString(COLOR) : "000000";
        color = new Color(Integer.parseInt(color_str,16));
        
        columnName_x = o.getString(X_COLUMN_NAME);
        expression_x = o.getString(X_EXPRESSION);
        
        if (columnName_x.length() > 0) {
            Column x_column = project.columnModel.getColumnByName(columnName_x);
            if (x_column != null) {
                columnIndex_x = x_column.getCellIndex();
                
                NumericBinIndex index_x = ScatterplotFacet.getBinIndex(project, x_column, eval_x, expression_x);
                min_x = index_x.getMin();
                max_x = index_x.getMax();
            } else {
                errorMessage_x = "No column named " + columnName_x;
            }
        } else {
            columnIndex_x = -1;
        }
        
        try {
            eval_x = MetaParser.parse(expression_x);
        } catch (ParsingException e) {
            errorMessage_x = e.getMessage();
        }
        
        columnName_y = o.getString(Y_COLUMN_NAME);
        expression_y = o.getString(Y_EXPRESSION);
        
        if (columnName_y.length() > 0) {
            Column y_column = project.columnModel.getColumnByName(columnName_y);
            if (y_column != null) {
                columnIndex_y = y_column.getCellIndex();
                
                NumericBinIndex index_y = ScatterplotFacet.getBinIndex(project, y_column, eval_y, expression_y);
                min_y = index_y.getMin();
                max_y = index_y.getMax();
            } else {
                errorMessage_y = "No column named " + columnName_y;
            }
        } else {
            columnIndex_y = -1;
        }
        
        try {
            eval_y = MetaParser.parse(expression_y);
        } catch (ParsingException e) {
            errorMessage_y = e.getMessage();
        }
        
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ScatterplotFacet;getRowFilter(Project);;;public RowFilter getRowFilter(Project project) {
        if (selected && 
            eval_x != null && errorMessage_x == null && 
            eval_y != null && errorMessage_y == null) 
        {
            return new DualExpressionsNumberComparisonRowFilter(
                    eval_x, columnName_x, columnIndex_x, eval_y, columnName_y, columnIndex_y) {
                
                double from_x_pixels = from_x * l;
                double to_x_pixels = to_x * l;
                double from_y_pixels = from_y * l;
                double to_y_pixels = to_y * l;
                
                protected boolean checkValues(double x, double y) {
                    Point2D.Double p = new Point2D.Double(x,y);
                    p = translateCoordinates(p, min_x, max_x, min_y, max_y, dim_x, dim_y, l, t);
                    return p.x >= from_x_pixels && p.x <= to_x_pixels && p.y >= from_y_pixels && p.y <= to_y_pixels;
                };
            };
        } else {
            return null;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ScatterplotFacet;computeChoices(Project,FilteredRows);;;public void computeChoices(Project project, FilteredRows filteredRows) {
        if (eval_x != null && eval_y != null && errorMessage_x == null && errorMessage_y == null) {
            Column column_x = project.columnModel.getColumnByCellIndex(columnIndex_x);
            NumericBinIndex index_x = getBinIndex(project, column_x, eval_x, expression_x, "row-based");
            
            Column column_y = project.columnModel.getColumnByCellIndex(columnIndex_y);
            NumericBinIndex index_y = getBinIndex(project, column_y, eval_y, expression_y, "row-based");

            retrieveDataFromBinIndices(index_x, index_y);
            
            if (IMAGE_URI) {
                if (index_x.isNumeric() && index_y.isNumeric()) {
                    ScatterplotDrawingRowVisitor drawer = new ScatterplotDrawingRowVisitor(
                      columnIndex_x, columnIndex_y, min_x, max_x, min_y, max_y, 
                      size, dim_x, dim_y, rotation, dot, color
                    );
                    filteredRows.accept(project, drawer);
                 
                    try {
                        image = serializeImage(drawer.getImage());
                    } catch (IOException e) {
                        logger.warn("Exception caught while generating the image", e);
                    }
                } else {
                    image = EMPTY_IMAGE;
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ScatterplotFacet;computeChoices(Project,FilteredRecords);;;public void computeChoices(Project project, FilteredRecords filteredRecords) {
        if (eval_x != null && eval_y != null && errorMessage_x == null && errorMessage_y == null) {
            Column column_x = project.columnModel.getColumnByCellIndex(columnIndex_x);
            NumericBinIndex index_x = getBinIndex(project, column_x, eval_x, expression_x, "record-based");
            
            Column column_y = project.columnModel.getColumnByCellIndex(columnIndex_y);
            NumericBinIndex index_y = getBinIndex(project, column_y, eval_y, expression_y, "record-based");
            
            retrieveDataFromBinIndices(index_x, index_y);
            
            if (IMAGE_URI) {
                if (index_x.isNumeric() && index_y.isNumeric()) {
                    ScatterplotDrawingRowVisitor drawer = new ScatterplotDrawingRowVisitor(
                      columnIndex_x, columnIndex_y, min_x, max_x, min_y, max_y, 
                      size, dim_x, dim_y, rotation, dot, color
                    );
                    filteredRecords.accept(project, drawer);
                 
                    try {
                        image = serializeImage(drawer.getImage());
                    } catch (IOException e) {
                        logger.warn("Exception caught while generating the image", e);
                    }
                } else {
                    image = EMPTY_IMAGE;
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ScatterplotFacet;retrieveDataFromBinIndices(NumericBinIndex,NumericBinIndex);;;protected void retrieveDataFromBinIndices(NumericBinIndex index_x, NumericBinIndex index_y) {
        min_x = index_x.getMin();
        max_x = index_x.getMax();
                    
        min_y = index_y.getMin();
        max_y = index_y.getMax();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ScatterplotFacet;serializeImage(RenderedImage);;;public static String serializeImage(RenderedImage image) throws IOException {
        ByteArrayOutputStream output = new ByteArrayOutputStream(4096);
        ImageIO.write(image, "png", output);
        output.close();
        String encoded = Base64.encodeBase64String(output.toByteArray());
        String url =  "data:image/png;base64," + encoded;
        return url;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ScatterplotFacet;getAxisDim(String);;;public static int getAxisDim(String type) {
        return ("log".equals(type.toLowerCase())) ? LOG : LIN;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ScatterplotFacet;getRotation(String);;;public static int getRotation(String rotation) {
        rotation = rotation.toLowerCase();
        if ("cw".equals(rotation) || "right".equals(rotation)) {
            return ScatterplotFacet.ROTATE_CW;
        } else if ("ccw".equals(rotation) || "left".equals(rotation)) {
            return ScatterplotFacet.ROTATE_CCW;
        } else {
            return NO_ROTATION;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ScatterplotFacet;getBinIndex(Project,Column,Evaluable,String);;;public static NumericBinIndex getBinIndex(Project project, Column column, Evaluable eval, String expression) {
    	return getBinIndex(project, column, eval, expression, "row-based");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ScatterplotFacet;getBinIndex(Project,Column,Evaluable,String,String);;;public static NumericBinIndex getBinIndex(Project project, Column column, Evaluable eval, String expression, String mode) {
        String key = "numeric-bin:" + mode + ":" + expression;
        if (eval == null) {
            try {
                eval = MetaParser.parse(expression);
            } catch (ParsingException e) {
                logger.warn("Error parsing expression",e);
            }
        }
        NumericBinIndex index = (NumericBinIndex) column.getPrecompute(key);
        if (index == null) {
            index = "row-based".equals(mode) ? 
            		new NumericBinRowIndex(project, new ExpressionBasedRowEvaluable(column.getName(), column.getCellIndex(), eval)) :
        			new NumericBinRecordIndex(project, new ExpressionBasedRowEvaluable(column.getName(), column.getCellIndex(), eval));
            		
            column.setPrecompute(key, index);
        }
        return index;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ScatterplotFacet;createRotationMatrix(int,double);;;public static AffineTransform createRotationMatrix(int rotation, double l) {
        if (rotation == ScatterplotFacet.ROTATE_CW) {
            AffineTransform t = AffineTransform.getTranslateInstance(0, l / 2);
            t.scale(s_rotateScale, s_rotateScale);
            t.rotate(-Math.PI / 4);
            return t;
        } else if (rotation == ScatterplotFacet.ROTATE_CCW) {
            AffineTransform t = AffineTransform.getTranslateInstance(l / 2, 0);
            t.scale(s_rotateScale, s_rotateScale);
            t.rotate(Math.PI / 4);
            return t;
        } else {
            return null;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\ScatterplotFacet;translateCoordinates(Point2D.Double,double,double,double,double,int,int,double,AffineTransform);;;public static Point2D.Double translateCoordinates(
            Point2D.Double p, 
            double min_x, double max_x, double min_y, double max_y,
            int dim_x, int dim_y, double l, AffineTransform t) {
        
        double x = p.x;
        double y = p.y;
        
        double relative_x = x - min_x;
        double range_x = max_x - min_x;
        if (dim_x == ScatterplotFacet.LOG) {
            x = Math.log10(relative_x + 1) * l / Math.log10(range_x + 1);
        } else {
            x = relative_x * l / range_x;
        }

        double relative_y = y - min_y;
        double range_y = max_y - min_y;
        if (dim_y == ScatterplotFacet.LOG) {
            y = Math.log10(relative_y + 1) * l / Math.log10(range_y + 1);
        } else {
            y = relative_y * l / range_y;
        }
        
        p.x = x;
        p.y = y;
        if (t != null) {
            t.transform(p, p);
        }
        
        return p;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\facets\TextSearchFacet;TextSearchFacet();;;public TextSearchFacet() {
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\AnyRowRecordFilter;AnyRowRecordFilter(RowFilter);;;public AnyRowRecordFilter(RowFilter rowFilter) {
		_rowFilter = rowFilter;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\DualExpressionsNumberComparisonRowFilter;DualExpressionsNumberComparisonRowFilter(Evaluable,String,int,Evaluable,String,int);;;public DualExpressionsNumberComparisonRowFilter (
        Evaluable x_evaluable,
        String x_columnName,
        int x_cellIndex,
        Evaluable y_evaluable,
        String y_columnName,
        int y_cellIndex
    ) {
        _x_evaluable = x_evaluable;
        _x_columnName = x_columnName;
        _x_cellIndex = x_cellIndex;
        _y_evaluable = y_evaluable;
        _y_columnName = y_columnName;
        _y_cellIndex = y_cellIndex;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\DualExpressionsNumberComparisonRowFilter;filterRow(Project,int,Row);;;public boolean filterRow(Project project, int rowIndex, Row row) {
        Cell x_cell = _x_cellIndex < 0 ? null : row.getCell(_x_cellIndex);
        Properties x_bindings = ExpressionUtils.createBindings(project);
        ExpressionUtils.bind(x_bindings, row, rowIndex, _x_columnName, x_cell);
        Object x_value = _x_evaluable.evaluate(x_bindings);
        
        Cell y_cell = _y_cellIndex < 0 ? null : row.getCell(_y_cellIndex);
        Properties y_bindings = ExpressionUtils.createBindings(project);
        ExpressionUtils.bind(y_bindings, row, rowIndex, _y_columnName, y_cell);
        Object y_value = _y_evaluable.evaluate(y_bindings);

        if (x_value != null && y_value != null) {
            if (x_value.getClass().isArray() || y_value.getClass().isArray()) {
                return false;
            } else if (x_value instanceof Collection<?> || y_value instanceof Collection<?>) {
                return false;
            } // else, fall through
        }
        
        return checkValue(x_value,y_value);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\DualExpressionsNumberComparisonRowFilter;checkValue(Object,Object);;;protected boolean checkValue(Object vx, Object vy) {
        if (ExpressionUtils.isError(vx) || ExpressionUtils.isError(vy)) {
            return false;
        } else if (ExpressionUtils.isNonBlankData(vx) && ExpressionUtils.isNonBlankData(vy)) {
            if (vx instanceof Number && vy instanceof Number) {
                double dx = ((Number) vx).doubleValue();
                double dy = ((Number) vy).doubleValue();
                return (!Double.isInfinite(dx) && 
                        !Double.isNaN(dx) && 
                        !Double.isInfinite(dy) && 
                        !Double.isNaN(dy) && 
                        checkValues(dx,dy));
            } else {
                return false;
            }
        } else {
            return false;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\DualExpressionsNumberComparisonRowFilter;checkValues(double,double);;;abstract protected boolean checkValues(double dx, double dy);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\ExpressionEqualRowFilter;ExpressionEqualRowFilter(Evaluable,String,int,Object[],boolean,boolean,boolean);;;public ExpressionEqualRowFilter(
        Evaluable evaluable,
        String columnName,
        int cellIndex, 
        Object[] matches, 
        boolean selectBlank, 
        boolean selectError,
        boolean invert
    ) {
        _evaluable = evaluable;
        _columnName = columnName;
        _cellIndex = cellIndex;
        _matches = matches;
        _selectBlank = selectBlank;
        _selectError = selectError;
        _invert = invert;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\ExpressionEqualRowFilter;filterRow(Project,int,Row);;;public boolean filterRow(Project project, int rowIndex, Row row) {
        return _invert != internalFilterRow(project, rowIndex, row);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\ExpressionEqualRowFilter;internalFilterRow(Project,int,Row);;;public boolean internalFilterRow(Project project, int rowIndex, Row row) {
        Cell cell = _cellIndex < 0 ? null : row.getCell(_cellIndex);
        
        Properties bindings = ExpressionUtils.createBindings(project);
        ExpressionUtils.bind(bindings, row, rowIndex, _columnName, cell);
        
        Object value = _evaluable.evaluate(bindings);
        if (value != null) {
            if (value.getClass().isArray()) {
                Object[] a = (Object[]) value;
                for (Object v : a) {
                    if (testValue(v)) {
                        return true;
                    }
                }
                return false;
            } else if (value instanceof Collection<?>) {
                for (Object v : ExpressionUtils.toObjectCollection(value)) {
                    if (testValue(v)) {
                        return true;
                    }
                }
                return false;
            } // else, fall through
        }
        
        return testValue(value);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\ExpressionEqualRowFilter;testValue(Object);;;protected boolean testValue(Object v) {
        if (ExpressionUtils.isError(v)) {
            return _selectError;
        } else if (ExpressionUtils.isNonBlankData(v)) {
            for (Object match : _matches) {
                if (testValue(v, match)) {
                    return true;
                }
            }
            return false;
        } else {
            return _selectBlank;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\ExpressionEqualRowFilter;testValue(Object,Object);;;protected boolean testValue(Object v, Object match) {
        return (v instanceof Number && match instanceof Number) ?
                ((Number) match).doubleValue() == ((Number) v).doubleValue() :
                match.equals(v);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\ExpressionNumberComparisonRowFilter;ExpressionNumberComparisonRowFilter(RowEvaluable,boolean,boolean,boolean,boolean);;;public ExpressionNumberComparisonRowFilter(
    	RowEvaluable rowEvaluable,
        boolean selectNumeric,
        boolean selectNonNumeric,
        boolean selectBlank,
        boolean selectError
    ) {
    	_rowEvaluable = rowEvaluable;
        _selectNumeric = selectNumeric;
        _selectNonNumeric = selectNonNumeric;
        _selectBlank = selectBlank;
        _selectError = selectError;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\ExpressionNumberComparisonRowFilter;filterRow(Project,int,Row);;;public boolean filterRow(Project project, int rowIndex, Row row) {
        Properties bindings = ExpressionUtils.createBindings(project);
        
        Object value = _rowEvaluable.eval(project, rowIndex, row, bindings);
        if (value != null) {
            if (value.getClass().isArray()) {
                Object[] a = (Object[]) value;
                for (Object v : a) {
                    if (checkValue(v)) {
                        return true;
                    }
                }
                return false;
            } else if (value instanceof Collection<?>) {
                for (Object v : ExpressionUtils.toObjectCollection(value)) {
                    if (checkValue(v)) {
                        return true;
                    }
                }
                return false;
            } // else, fall through
        }
        
        return checkValue(value);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\ExpressionNumberComparisonRowFilter;checkValue(Object);;;protected boolean checkValue(Object v) {
        if (ExpressionUtils.isError(v)) {
            return _selectError;
        } else if (ExpressionUtils.isNonBlankData(v)) {
            if (v instanceof Number) {
                double d = ((Number) v).doubleValue();
                if (Double.isInfinite(d) || Double.isNaN(d)) {
                    return _selectError;
                } else {
                    return _selectNumeric && checkValue(d);
                }
            } else {
                return _selectNonNumeric;
            }
        } else {
            return _selectBlank;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\ExpressionNumberComparisonRowFilter;checkValue(double);;;abstract protected boolean checkValue(double d);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\ExpressionStringComparisonRowFilter;ExpressionStringComparisonRowFilter(Evaluable,String,int);;;public ExpressionStringComparisonRowFilter(Evaluable evaluable, String columnName, int cellIndex) {
        _evaluable = evaluable;
        _columnName = columnName;
        _cellIndex = cellIndex;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\ExpressionStringComparisonRowFilter;filterRow(Project,int,Row);;;public boolean filterRow(Project project, int rowIndex, Row row) {
        Cell cell = _cellIndex < 0 ? null : row.getCell(_cellIndex);
        
        Properties bindings = ExpressionUtils.createBindings(project);
        ExpressionUtils.bind(bindings, row, rowIndex, _columnName, cell);
        
        Object value = _evaluable.evaluate(bindings);
        if (value != null) {
            if (value.getClass().isArray()) {
                Object[] a = (Object[]) value;
                for (Object v : a) {
                    if (checkValue(v instanceof String ? ((String) v) : v.toString())) {
                        return true;
                    }
                }
            } else {
                if (checkValue(value instanceof String ? ((String) value) : value.toString())) {
                    return true;
                }
            }
        }
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\filters\ExpressionStringComparisonRowFilter;checkValue(String);;;abstract protected boolean checkValue(String s);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ConjunctiveFilteredRecords;add(RecordFilter);;;public void add(RecordFilter recordFilter) {
        _recordFilters.add(recordFilter);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ConjunctiveFilteredRecords;matchRecord(Project,Record);;;protected boolean matchRecord(Project project, Record record) {
        for (RecordFilter recordFilter : _recordFilters) {
            if (!recordFilter.filterRecord(project, record)) {
                return false;
            }
        }
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ConjunctiveFilteredRows;add(RowFilter);;;public void add(RowFilter rowFilter) {
        _rowFilters.add(rowFilter);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ConjunctiveFilteredRows;accept(Project,RowVisitor);;;public void accept(Project project, RowVisitor visitor) {
    	try {
    		visitor.start(project);
    		
	        int c = project.rows.size();
	        for (int rowIndex = 0; rowIndex < c; rowIndex++) {
	            Row row = project.rows.get(rowIndex);
	            if (matchRow(project, rowIndex, row)) {
	                visitRow(project, visitor, rowIndex, row);
	            }
	        }
    	} finally {
    		visitor.end(project);
    	}
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ConjunctiveFilteredRows;visitRow(Project,RowVisitor,int,Row);;;protected void visitRow(Project project, RowVisitor visitor, int rowIndex, Row row) {
        visitor.visit(project, rowIndex, row);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ConjunctiveFilteredRows;matchRow(Project,int,Row);;;protected boolean matchRow(Project project, int rowIndex, Row row) {
        for (RowFilter rowFilter : _rowFilters) {
            if (!rowFilter.filterRow(project, rowIndex, row)) {
                return false;
            }
        }
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ExpressionBasedRowEvaluable;ExpressionBasedRowEvaluable(String,int,Evaluable);public ExpressionBasedRowEvaluable(
        String columnName, int cellIndex, Evaluable eval) {
    
        _columnName = columnName;
        _cellIndex = cellIndex;
        _eval = eval;
    };;public ExpressionBasedRowEvaluable(String columnName, int cellIndex, Evaluable eval) {
	
		_columnName = columnName;
		_cellIndex = cellIndex;
		_eval = eval;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ExpressionNominalValueGrouper;IndexedNominalFacetChoice(DecoratedValue,int);;;public IndexedNominalFacetChoice(DecoratedValue decoratedValue, int latestIndex) {
			super(decoratedValue);
			_latestIndex = latestIndex;
		}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ExpressionNominalValueGrouper;ExpressionNominalValueGrouper(Evaluable,String,int);;;public ExpressionNominalValueGrouper(Evaluable evaluable, String columnName, int cellIndex) {
        _evaluable = evaluable;
        _columnName = columnName;
        _cellIndex = cellIndex;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ExpressionNominalValueGrouper;visit(Project,int,Row);;;public boolean visit(Project project, int rowIndex, Row row) {
    	hasError = false;
    	hasBlank = false;
    	
        Properties bindings = ExpressionUtils.createBindings(project);
        
        visitRow(project, rowIndex, row, bindings, rowIndex);
        
        if (hasError) {
        	errorCount++;
        }
        if (hasBlank) {
        	blankCount++;
        }
        
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ExpressionNominalValueGrouper;visitRow(Project,int,Row,Properties,int);;;protected void visitRow(Project project, int rowIndex, Row row, Properties bindings, int index) {
    	Object value = evalRow(project, rowIndex, row, bindings);
        if (value != null) {
            if (value.getClass().isArray()) {
                Object[] a = (Object[]) value;
                for (Object v : a) {
                    processValue(v, rowIndex);
                }
            } else if (value instanceof Collection<?>) {
                for (Object v : ExpressionUtils.toObjectCollection(value)) {
                    processValue(v, rowIndex);
                }
            } else {
            	processValue(value, rowIndex);
            }
        } else {
        	processValue(value, rowIndex);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ExpressionNominalValueGrouper;evalRow(Project,int,Row,Properties);;;protected Object evalRow(Project project, int rowIndex, Row row, Properties bindings) {
	    Cell cell = _cellIndex < 0 ? null : row.getCell(_cellIndex);
	
	    ExpressionUtils.bind(bindings, row, rowIndex, _columnName, cell);
	    
	    return _evaluable.evaluate(bindings);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ExpressionNominalValueGrouper;processValue(Object,int);;;protected void processValue(Object value, int index) {
        if (ExpressionUtils.isError(value)) {
            hasError = true;
        } else if (ExpressionUtils.isNonBlankData(value)) {
            String valueString = value.toString();
            IndexedNominalFacetChoice facetChoice = choices.get(valueString);
            
            if (facetChoice != null) {
            	if (facetChoice._latestIndex < index) {
            		facetChoice._latestIndex = index;
            		facetChoice.count++;
            	}
            } else {
            	String label = value.toString();
            	DecoratedValue dValue = new DecoratedValue(value, label);
            	IndexedNominalFacetChoice choice = 
            		new IndexedNominalFacetChoice(dValue, index);
            	
                choice.count = 1;
                choices.put(valueString, choice);
            }
        } else {
        	hasBlank = true;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ExpressionNominalValueGrouper;getChoiceValueCountMultiple(Object);;;public Object getChoiceValueCountMultiple(Object value) {
        if (value != null) {
	        if (value.getClass().isArray()) {
                Object[] choiceValues = (Object[]) value;
                List<Integer> counts = new ArrayList<Integer>(choiceValues.length);
                
                for (int i = 0; i < choiceValues.length; i++) {
                	counts.add(getChoiceValueCount(choiceValues[i]));
                }
                return counts;
            } else if (value instanceof Collection<?>) {
            	List<Object> choiceValues = ExpressionUtils.toObjectList(value);
                List<Integer> counts = new ArrayList<Integer>(choiceValues.size());
                
            	int count = choiceValues.size();
                for (int i = 0; i < count; i++) {
                	counts.add(getChoiceValueCount(choiceValues.get(i)));
                }
                return counts;
            }
        }
	        
        return getChoiceValueCount(value);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ExpressionNominalValueGrouper;getChoiceValueCount(Object);;;public Integer getChoiceValueCount(Object choiceValue) {
        if (ExpressionUtils.isError(choiceValue)) {
            return errorCount;
        } else if (ExpressionUtils.isNonBlankData(choiceValue)) {
            IndexedNominalFacetChoice choice = choices.get(choiceValue);
            return choice != null ? choice.count : 0;
        } else {
            return blankCount;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ExpressionNumericValueBinner;ExpressionNumericValueBinner(RowEvaluable,NumericBinIndex);;;public ExpressionNumericValueBinner(RowEvaluable rowEvaluable, NumericBinIndex index) {
    	_rowEvaluable = rowEvaluable;
        _index = index;
        bins = new int[_index.getBins().length];
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ExpressionNumericValueBinner;resetFlags();;;protected void resetFlags() {
        hasError = false;
        hasBlank = false;
        hasNumeric = false;
        hasNonNumeric = false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ExpressionNumericValueBinner;updateCounts();;;protected void updateCounts() {
        if (hasError) {
            errorCount++;
        }
        if (hasBlank) {
            blankCount++;
        }
        if (hasNumeric) {
            numericCount++;
        }
        if (hasNonNumeric) {
            nonNumericCount++;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ExpressionNumericValueBinner;processRow(Project,int,Row,Properties);;;protected void processRow(Project project, int rowIndex, Row row, Properties bindings) {
        Object value = _rowEvaluable.eval(project, rowIndex, row, bindings);
        if (value != null) {
            if (value.getClass().isArray()) {
                Object[] a = (Object[]) value;
                for (Object v : a) {
                    processValue(v);
                }
                return;
            } else if (value instanceof Collection<?>) {
                for (Object v : ExpressionUtils.toObjectCollection(value)) {
                    processValue(v);
                }
                return;
            } // else, fall through
        }
        
        processValue(value);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\ExpressionNumericValueBinner;processValue(Object);;;protected void processValue(Object value) {
        if (ExpressionUtils.isError(value)) {
            hasError = true;
        } else if (ExpressionUtils.isNonBlankData(value)) {
            if (value instanceof Number) {
                double d = ((Number) value).doubleValue();
                if (!Double.isInfinite(d) && !Double.isNaN(d)) {
                    hasNumeric = true;
                    
                    int bin = (int) Math.floor((d - _index.getMin()) / _index.getStep());
                    if (bin >= 0 && bin < bins.length) { // as a precaution
                        bins[bin]++;
                    }
                } else {
                    hasError = true;
                }
            } else {
                hasNonNumeric = true;
            }
        } else {
            hasBlank = true;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\FilteredRecordsAsFilteredRows;FilteredRecordsAsFilteredRows(FilteredRecords);public FilteredRecordsAsFilteredRows(FilteredRecords filteredRecords) {
        _filteredRecords = filteredRecords;
    };;public FilteredRecordsAsFilteredRows(FilteredRecords filteredRecords) {
		_filteredRecords = filteredRecords;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinIndex;iterate(Project,RowEvaluable,List<Double>);;;abstract protected void iterate(Project project, RowEvaluable rowEvaluable, List<Double> allValues);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinIndex;NumericBinIndex(Project,RowEvaluable);;;public NumericBinIndex(Project project, RowEvaluable rowEvaluable) {
        _min = Double.POSITIVE_INFINITY;
        _max = Double.NEGATIVE_INFINITY;
        
        List<Double> allValues = new ArrayList<Double>();
        
        iterate(project, rowEvaluable, allValues);
        
        _numbericValueCount = allValues.size();
        
        if (_min >= _max) {
            _step = 1;
            _min = Math.min(_min, _max);
            _max = _step;
            _bins = new int[1];
            
            return;
        }
        
        double diff = _max - _min;
        
        _step = 1;
        if (diff > 10) {
            while (_step * 100 < diff) {
                _step *= 10;
            }
        } else {
            while (_step * 100 > diff) {
                _step /= 10;
            }
        }
        
        double originalMax = _max;
        _min = (Math.floor(_min / _step) * _step);
        _max = (Math.ceil(_max / _step) * _step);
        
        double binCount = (_max - _min) / _step;
        if (binCount > 100) {
            _step *= 2;
            binCount = (binCount + 1) / 2;
        }
        
        if (_max <= originalMax) {
            _max += _step;
            binCount++;
        }
        
        _bins = new int[(int) Math.round(binCount)];
        for (double d : allValues) {
            int bin = Math.max((int) Math.floor((d - _min) / _step),0);
            _bins[bin]++;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinIndex;isNumeric();;;public boolean isNumeric() {
        return _numbericValueCount > _totalValueCount / 2;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinIndex;getMin();;;public double getMin() {
        return _min;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinIndex;getMax();;;public double getMax() {
        return _max;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinIndex;getStep();;;public double getStep() {
        return _step;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinIndex;getBins();;;public int[] getBins() {
        return _bins;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinIndex;getNumericRowCount();;;public int getNumericRowCount() {
        return _numericRowCount;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinIndex;getNonNumericRowCount();;;public int getNonNumericRowCount() {
        return _nonNumericRowCount;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinIndex;getBlankRowCount();;;public int getBlankRowCount() {
        return _blankRowCount;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinIndex;getErrorRowCount();;;public int getErrorRowCount() {
        return _errorRowCount;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinIndex;processRow(Project,RowEvaluable,List<Double>,int,Row,Properties);;;protected void processRow(
        Project         project, 
        RowEvaluable    rowEvaluable,
        List<Double>     allValues,
        int             rowIndex,
        Row             row,
        Properties         bindings
    ) {
        Object value = rowEvaluable.eval(project, rowIndex, row, bindings);
        
        if (ExpressionUtils.isError(value)) {
            _hasError = true;
        } else if (ExpressionUtils.isNonBlankData(value)) {
            if (value.getClass().isArray()) {
                Object[] a = (Object[]) value;
                for (Object v : a) {
                    _totalValueCount++;
                    
                    if (ExpressionUtils.isError(v)) {
                        _hasError = true;
                    } else if (ExpressionUtils.isNonBlankData(v)) {
                        if (v instanceof Number) {
                            _hasNumeric = true;
                            processValue(((Number) v).doubleValue(), allValues);
                        } else {
                            _hasNonNumeric = true;
                        }
                    } else {
                        _hasBlank = true;
                    }
                }
            } else if (value instanceof Collection<?>) {
                for (Object v : ExpressionUtils.toObjectCollection(value)) {
                    _totalValueCount++;
                    
                    if (ExpressionUtils.isError(v)) {
                        _hasError = true;
                    } else if (ExpressionUtils.isNonBlankData(v)) {
                        if (v instanceof Number) {
                            _hasNumeric = true;
                            processValue(((Number) v).doubleValue(), allValues);
                        } else {
                            _hasNonNumeric = true;
                        }
                    } else {
                        _hasBlank = true;
                    }
                }
            } else {
                _totalValueCount++;
                
                if (value instanceof Number) {
                    _hasNumeric = true;
                    processValue(((Number) value).doubleValue(), allValues);
                } else {
                    _hasNonNumeric = true;
                }
            }
        } else {
            _hasBlank = true;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinIndex;preprocessing();;;protected void preprocessing() {
        _hasBlank = false;
        _hasError = false;
        _hasNonNumeric = false;
        _hasNumeric = false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinIndex;postprocessing();;;protected void postprocessing() {
        if (_hasError) {
            _errorRowCount++;
        }
        if (_hasBlank) {
            _blankRowCount++;
        }
        if (_hasNumeric) {
            _numericRowCount++;
        }
        if (_hasNonNumeric) {
            _nonNumericRowCount++;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinIndex;processValue(double,List<Double>);;;protected void processValue(double v, List<Double> allValues) {
        if (!Double.isInfinite(v) && !Double.isNaN(v)) {
            _min = Math.min(_min, v);
            _max = Math.max(_max, v);
            allValues.add(v);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinRecordIndex;NumericBinRecordIndex(Project,RowEvaluable);;;public NumericBinRecordIndex(Project project, RowEvaluable rowEvaluable) {
        super(project, rowEvaluable);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinRecordIndex;iterate(Project,RowEvaluable,List<Double>);;;@Override
    protected void iterate(
        Project project, RowEvaluable rowEvaluable, List<Double> allValues) {
        
        Properties bindings = ExpressionUtils.createBindings(project);
        int count = project.recordModel.getRecordCount();
        
        for (int r = 0; r < count; r++) {
            Record record = project.recordModel.getRecord(r);
            
            preprocessing();
            
            for (int i = record.fromRowIndex; i < record.toRowIndex; i++) {
                Row row = project.rows.get(i);
                
                processRow(project, rowEvaluable, allValues, i, row, bindings);
            }
            
            postprocessing();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinRowIndex;NumericBinRowIndex(Project,RowEvaluable);;;public NumericBinRowIndex(Project project, RowEvaluable rowEvaluable) {
        
        super(project, rowEvaluable);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\NumericBinRowIndex;iterate(Project,RowEvaluable,List<Double>);;;@Override
    protected void iterate(
        Project project, RowEvaluable rowEvaluable, List<Double> allValues) {
        
        Properties bindings = ExpressionUtils.createBindings(project);
        
        for (int i = 0; i < project.rows.size(); i++) {
            Row row = project.rows.get(i);
            
            preprocessing();
            
            processRow(project, rowEvaluable, allValues, i, row, bindings);
            
            postprocessing();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\RowEvaluable;eval(Project,int,Row,Properties);;;public Object eval(Project project, int rowIndex, Row row, Properties bindings);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\browsing\util\RowVisitorAsRecordVisitor;RowVisitorAsRecordVisitor(RowVisitor);public RowVisitorAsRecordVisitor(RowVisitor rowVisitor) {
        _rowVisitor = rowVisitor;
    };;public RowVisitorAsRecordVisitor(RowVisitor rowVisitor) {
		_rowVisitor = rowVisitor;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\Clusterer;computeClusters(Engine);;;public abstract void computeClusters(Engine engine);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\Clusterer;initializeFromJSON(Project,JSONObject);;;public void initializeFromJSON(Project project, JSONObject o) throws Exception {
        _project = project;
        _config = o;

        String colname = o.getString("column");
        for (Column column : project.columnModel.columns) {
            if (column.getName().equals(colname)) {
                _colindex = column.getCellIndex();
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\BinningClusterer;BinningRowVisitor(Keyer,JSONObject);;;public BinningRowVisitor(Keyer k, JSONObject o) {
            _keyer = k;
            _config = o;
            if (k instanceof NGramFingerprintKeyer) {
                try {
                    int size = _config.getJSONObject("params").getInt("ngram-size");
                    logger.debug("Using ngram size: {}", size);
                    _params = new Object[1];
                    _params[0] = size;
                } catch (JSONException e) {
                    //Gridworks.warn("No params specified, using default");
                }
            }
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\BinningClusterer;visit(Project,int,Row);;;public boolean visit(Project project, int rowIndex, Row row) {
            Cell cell = row.getCell(_colindex);
            if (cell != null && cell.value != null) {
                Object v = cell.value;
                String s = (v instanceof String) ? ((String) v) : v.toString();
                String key = _keyer.key(s,_params);
                if (_map.containsKey(key)) {
                    Map<String,Integer> m = _map.get(key);
                    if (m.containsKey(s)) {
                        m.put(s, m.get(s) + 1);
                    } else {
                        m.put(s,1);
                    }
                } else {
                    Map<String,Integer> m = new TreeMap<String,Integer>();
                    m.put(s,1);
                    _map.put(key, m);
                }
            }
            return false;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\BinningClusterer;getMap();;;public Map<String,Map<String,Integer>> getMap() {
            return _map;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\BinningClusterer;compare(Map<String,Integer>,Map<String,Integer>);;;public int compare(Map<String,Integer> o1, Map<String,Integer> o2) {
            int s1 = o1.size();
            int s2 = o2.size();
            if (o1 == o2) {
                int total1 = 0;
                for (int i : o1.values()) {
                    total1 += i;
                }
                int total2 = 0;
                for (int i : o2.values()) {
                    total2 += i;
                }
                return total2 - total1;
            } else {
                return s2 - s1;
            }
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\BinningClusterer;compare(Entry<String,Integer>,Entry<String,Integer>);;;public int compare(Entry<String,Integer> o1, Entry<String,Integer> o2) {
            return o2.getValue() - o1.getValue();
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\BinningClusterer;initializeFromJSON(Project,JSONObject);;;public void initializeFromJSON(Project project, JSONObject o) throws Exception {
        super.initializeFromJSON(project, o);
        _keyer = _keyers.get(o.getString("function").toLowerCase());
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\BinningClusterer;computeClusters(Engine);;;public void computeClusters(Engine engine) {
        BinningRowVisitor visitor = new BinningRowVisitor(_keyer,_config);
        FilteredRows filteredRows = engine.getAllFilteredRows();
        filteredRows.accept(_project, visitor);
     
        Map<String,Map<String,Integer>> map = visitor.getMap();
        _clusters = new ArrayList<Map<String,Integer>>(map.values());
        Collections.sort(_clusters, new SizeComparator());
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\BinningClusterer;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options) throws JSONException {
        EntriesComparator c = new EntriesComparator();
        
        writer.array();        
        for (Map<String,Integer> m : _clusters) {
            if (m.size() > 1) {
                writer.array();        
                List<Entry<String,Integer>> entries = new ArrayList<Entry<String,Integer>>(m.entrySet());
                Collections.sort(entries,c);
                for (Entry<String,Integer> e : entries) {
                    writer.object();
                    writer.key("v"); writer.value(e.getKey());
                    writer.key("c"); writer.value(e.getValue());
                    writer.endObject();
                }
                writer.endArray();
            }
        }
        writer.endArray();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\DoubleMetaphoneKeyer;DoubleMetaphoneKeyer();;;public DoubleMetaphoneKeyer() {
        _metaphone2 = new DoubleMetaphone();
        _metaphone2.setMaxCodeLen(2000);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\DoubleMetaphoneKeyer;key(String,Object);;;public String key(String s, Object... o) {
        return _metaphone2.doubleMetaphone(s);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\Keyer;key(String);;;public String key(String s) {
        return this.key(s, (Object[]) null);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\Keyer;key(String,Object);;;public abstract String key(String string, Object... params);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\MetaphoneKeyer;MetaphoneKeyer();;;public MetaphoneKeyer() {
        _metaphone = new Metaphone();
        _metaphone.setMaxCodeLen(2000);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\MetaphoneKeyer;key(String,Object);;;public String key(String s, Object... o) {
        return _metaphone.metaphone(s);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\NGramFingerprintKeyer;key(String,Object);;;public String key(String s, Object... o) {
        int ngram_size = 2;
        if (o != null && o.length > 0 && o[0] instanceof Number) {
            ngram_size = (Integer) o[0];
        }
        s = s.toLowerCase(); // then lowercase it
        s = alphanum.matcher(s).replaceAll(""); // then remove all punctuation and control chars
        TreeSet<String> set = ngram_split(s,ngram_size);
        StringBuffer b = new StringBuffer();
        Iterator<String> i = set.iterator();
        while (i.hasNext()) { // join ordered fragments back together
            b.append(i.next());
        }
        return asciify(b.toString()); // find ASCII equivalent to characters 
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\NGramFingerprintKeyer;ngram_split(String,int);;;protected TreeSet<String> ngram_split(String s, int size) {
        TreeSet<String> set = new TreeSet<String>();
        char[] chars = s.toCharArray();
        for (int i = 0; i + size <= chars.length; i++) {
            set.add(new String(chars,i,size));
        }
        return set;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\SoundexKeyer;SoundexKeyer();;;public SoundexKeyer() {
        _soundex = new Soundex();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\binning\SoundexKeyer;key(String,Object);;;public String key(String s, Object... o) {
        return _soundex.soundex(s);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\knn\kNNClusterer;VPTreeClusteringRowVisitor(Distance,JSONObject);;;public VPTreeClusteringRowVisitor(Distance d, JSONObject o) {
            _distance = d;
            _config = o;
            _clusterer = new VPTreeClusterer(_distance);
            try {
                JSONObject params = o.getJSONObject("params");
                _radius = params.getDouble("radius");
            } catch (JSONException e) {
                //Gridworks.warn("No parameters found, using defaults");
            }
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\knn\kNNClusterer;visit(Project,int,Row);;;public boolean visit(Project project, int rowIndex, Row row) {
            Cell cell = row.getCell(_colindex);
            if (cell != null && cell.value != null) {
                Object v = cell.value;
                String s = (v instanceof String) ? ((String) v) : v.toString();
                _clusterer.populate(s);
                count(s);
            }
            return false;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\knn\kNNClusterer;getClusters();;;public List<Set<Serializable>> getClusters() {
            return _clusterer.getClusters(_radius);
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\knn\kNNClusterer;BlockingClusteringRowVisitor(Distance,JSONObject);;;public BlockingClusteringRowVisitor(Distance d, JSONObject o) {
            _distance = d;
            _config = o;
            _data = new HashSet<String>();
            try {
                JSONObject params = o.getJSONObject("params");
                _radius = params.getDouble("radius");
                logger.debug("Use radius: {}", _radius);
                _blockingNgramSize = params.getInt("blocking-ngram-size");
                logger.debug("Use blocking ngram size: {}",_blockingNgramSize);
            } catch (JSONException e) {
                logger.debug("No parameters found, using defaults");
            }
            _clusterer = new NGramClusterer(_distance, _blockingNgramSize);
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\knn\kNNClusterer;visit(Project,int,Row);;;public boolean visit(Project project, int rowIndex, Row row) {
            Cell cell = row.getCell(_colindex);
            if (cell != null && cell.value != null) {
                Object v = cell.value;
                String s = (v instanceof String) ? ((String) v) : v.toString().intern();
                _clusterer.populate(s);
                count(s);
            }
            return false;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\knn\kNNClusterer;getClusters();;;public List<Set<Serializable>> getClusters() {
            return _clusterer.getClusters(_radius);
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\knn\kNNClusterer;initializeFromJSON(Project,JSONObject);;;public void initializeFromJSON(Project project, JSONObject o) throws Exception {
        super.initializeFromJSON(project, o);
        _distance = _distances.get(o.getString("function").toLowerCase());
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\knn\kNNClusterer;computeClusters(Engine);;;public void computeClusters(Engine engine) {
        //VPTreeClusteringRowVisitor visitor = new VPTreeClusteringRowVisitor(_distance,_config);
        BlockingClusteringRowVisitor visitor = new BlockingClusteringRowVisitor(_distance,_config);
        FilteredRows filteredRows = engine.getAllFilteredRows();
        filteredRows.accept(_project, visitor);
     
        _clusters = visitor.getClusters();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\knn\kNNClusterer;compare(Entry<Serializable,Integer>,Entry<Serializable,Integer>);;;public int compare(Entry<Serializable,Integer> o1, Entry<Serializable,Integer> o2) {
            return o2.getValue() - o1.getValue();
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\knn\kNNClusterer;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options) throws JSONException {
        writer.array();        
        for (Set<Serializable> m : _clusters) {
            if (m.size() > 1) {
                Map<Serializable,Integer> internal_counts = new HashMap<Serializable,Integer>();
                for (Serializable s : m) {
                    internal_counts.put(s,_counts.get(s));
                }
                List<Entry<Serializable,Integer>> values = new ArrayList<Entry<Serializable,Integer>>(internal_counts.entrySet());
                Collections.sort(values, new ValuesComparator());
                writer.array();        
                for (Entry<Serializable,Integer> e : values) {
                    writer.object();
                    writer.key("v"); writer.value(e.getKey());
                    writer.key("c"); writer.value(e.getValue());
                    writer.endObject();
                }
                writer.endArray();
            }
        }
        writer.endArray();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\clustering\knn\kNNClusterer;count(Serializable);;;private void count(Serializable s) {
        if (_counts.containsKey(s)) {
            _counts.put(s, _counts.get(s) + 1);
        } else {
            _counts.put(s, 1);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\Command;init(GridworksServlet);;;public void init(GridworksServlet servlet) {
        this.servlet = servlet;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\Command;doPost(HttpServletRequest,HttpServletResponse);;;public void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {

        throw new UnsupportedOperationException();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\Command;doGet(HttpServletRequest,HttpServletResponse);;;public void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException {

        throw new UnsupportedOperationException();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\Command;getEngineConfig(HttpServletRequest);;;static protected JSONObject getEngineConfig(HttpServletRequest request)
    throws JSONException {
        if (request == null) throw new IllegalArgumentException("parameter 'request' should not be null");

        String json = request.getParameter("engine");
        try{
            return (json == null) ? null : ParsingUtilities.evaluateJsonStringToObject(json);
        } catch (JSONException e){
            logger.debug( json + " could not be parsed to JSON");
            return null;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\Command;getEngine(HttpServletRequest,Project);;;static protected Engine getEngine(HttpServletRequest request, Project project)
    throws Exception {
        if (request == null) throw new IllegalArgumentException("parameter 'request' should not be null");
        if (project == null) throw new IllegalArgumentException("parameter 'project' should not be null");

        Engine engine = new Engine(project);
        JSONObject o = getEngineConfig(request);
        if (o != null)
            engine.initializeFromJSON(o);
        return engine;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\Command;getProject(HttpServletRequest);;;protected Project getProject(HttpServletRequest request) throws ServletException {
        if (request == null) throw new IllegalArgumentException("parameter 'request' should not be null");
        try {
            Project p = ProjectManager.singleton.getProject(Long.parseLong(request.getParameter("project")));
            if (p != null) {
                return p;
            }
        } catch (Exception e) {
            // ignore
        }
        throw new ServletException("Can't find project: missing or bad URL parameter");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\Command;getProjectMetadata(HttpServletRequest);;;protected ProjectMetadata getProjectMetadata(HttpServletRequest request) throws ServletException {
        if (request == null) throw new IllegalArgumentException("parameter 'request' should not be null");
        try {
            ProjectMetadata pm = ProjectManager.singleton.getProjectMetadata(Long.parseLong(request.getParameter("project")));
            if (pm != null) {
                return pm;
            }
        } catch (Exception e) {
            // ignore
        }
        throw new ServletException("Can't find project metadata: missing or bad URL parameter");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\Command;getIntegerParameter(HttpServletRequest,String,int);;;static protected int getIntegerParameter(HttpServletRequest request, String name, int def) {
        if (request == null) throw new IllegalArgumentException("parameter 'request' should not be null");
        try {
            return Integer.parseInt(request.getParameter(name));
        } catch (Exception e) {
            // ignore
        }
        return def;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\Command;getJsonParameter(HttpServletRequest,String);;;static protected JSONObject getJsonParameter(HttpServletRequest request, String name) {
        if (request == null) throw new IllegalArgumentException("parameter 'request' should not be null");
        String value = request.getParameter(name);
        if (value != null) {
            try {
                return ParsingUtilities.evaluateJsonStringToObject(value);
            } catch (JSONException e) {
                logger.warn("error getting json parameter",e);
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\Command;performProcessAndRespond(HttpServletRequest,HttpServletResponse,Project,Process);;;static protected void performProcessAndRespond(
        HttpServletRequest request,
        HttpServletResponse response,
        Project project,
        Process process
    ) throws Exception {
        response.setCharacterEncoding("UTF-8");
        response.setHeader("Content-Type", "application/json");

        HistoryEntry historyEntry = project.processManager.queueProcess(process);
        if (historyEntry != null) {
            Writer w = response.getWriter();
            JSONWriter writer = new JSONWriter(w);
            Properties options = new Properties();

            writer.object();
            writer.key("code"); writer.value("ok");
            writer.key("historyEntry"); historyEntry.write(writer, options);
            writer.endObject();

            w.flush();
            w.close();
        } else {
            respond(response, "{ \"code\" : \"pending\" }");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\Command;respond(HttpServletResponse,String);;;static protected void respond(HttpServletResponse response, String content)
        throws IOException, ServletException {

        response.setCharacterEncoding("UTF-8");
        response.setStatus(HttpServletResponse.SC_OK);
        Writer w = response.getWriter();
        if (w != null) {
            w.write(content);
            w.flush();
            w.close();
        } else {
            throw new ServletException("response returned a null writer");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\Command;respond(HttpServletResponse,String,String);;;static protected void respond(HttpServletResponse response, String status, String message)
        throws IOException, JSONException {

        Writer w = response.getWriter();
        JSONWriter writer = new JSONWriter(w);
        writer.object();
        writer.key("status"); writer.value(status);
        writer.key("message"); writer.value(message);
        writer.endObject();
        w.flush();
        w.close();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\Command;respondJSON(HttpServletResponse,Jsonizable);;;static protected void respondJSON(HttpServletResponse response, Jsonizable o)
        throws IOException, JSONException {

        respondJSON(response, o, new Properties());
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\Command;respondJSON(HttpServletResponse,Jsonizable,Properties);;;static protected void respondJSON(
            HttpServletResponse response, Jsonizable o, Properties options)
            throws IOException, JSONException {

        response.setCharacterEncoding("UTF-8");
        response.setHeader("Content-Type", "application/json");

        Writer w = response.getWriter();
        JSONWriter writer = new JSONWriter(w);

        o.write(writer, options);
        w.flush();
        w.close();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\Command;respondException(HttpServletResponse,Exception);;;static protected void respondException(HttpServletResponse response, Exception e)
        throws IOException, ServletException {

        logger.warn("Exception caught", e);

        if (response == null) {
            throw new ServletException("Response object can't be null");
        }

        try {
            JSONObject o = new JSONObject();
            o.put("code", "error");
            o.put("message", e.getMessage());

            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            e.printStackTrace(pw);
            pw.flush();
            sw.flush();

            o.put("stack", sw.toString());

            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            respond(response, o.toString());
        } catch (JSONException e1) {
            e.printStackTrace(response.getWriter());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\Command;redirect(HttpServletResponse,String);;;static protected void redirect(HttpServletResponse response, String url) throws IOException {
        response.sendRedirect(url);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\EngineDependentCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            
            AbstractOperation op = createOperation(project, request, getEngineConfig(request));
            Process process = op.createProcess(project, new Properties());
            
            performProcessAndRespond(request, response, project, process);
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\EngineDependentCommand;createOperation(Project,HttpServletRequest,JSONObject);;;abstract protected AbstractOperation createOperation(
            Project project, HttpServletRequest request, JSONObject engineConfig) throws Exception;
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\auth\AuthorizeCommand;doGet(HttpServletRequest,HttpServletResponse);;;public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        // get the provider from the request
        Provider provider = OAuthUtilities.getProvider(request);

        try {
            
            // see if the request comes with access credentials
            Credentials access_credentials = Credentials.getCredentials(request, provider, Credentials.Type.ACCESS);
                                    
            // prepare the continuation URL that the OAuth provider will redirect the user to
            // (we need to make sure this URL points back to this code or the dance will never complete)
            String callbackURL = getBaseURL(request,provider);
            
            if (access_credentials == null) {
                // access credentials are not available so we need to check 
                // to see at what stage of the OAuth dance we are
                
                // get the request token credentials
                Credentials request_credentials = Credentials.getCredentials(request, provider, Credentials.Type.REQUEST);

                OAuthConsumer consumer = OAuthUtilities.getConsumer(request_credentials, provider);
                OAuthProvider pp = OAuthUtilities.getOAuthProvider(provider);
                
                if (request_credentials == null) {
                    // no credentials were found, so let's start the dance

                    // get the request token

                    String url = pp.retrieveRequestToken(consumer, callbackURL);
                    
                    request_credentials = new Credentials(consumer.getToken(), consumer.getTokenSecret(), provider);

                    // and set them to that we can retrieve them later in the second part of the dance
                    Credentials.setCredentials(request, response, request_credentials, Credentials.Type.REQUEST, 3600);
                    
                    // now redirect the user to the Authorize URL where she can authenticate against the
                    // service provider and authorize us. 
                    // The provider will bounce the user back here for us to continue the dance.
                    
                    response.sendRedirect(url);
                } else {
                    // we are at the second stage of the dance, so we need need to obtain the access credentials now
                    
                    // if we got here, it means that the user performed a valid authentication against the
                    // service provider and authorized us, so now we can request more permanent credentials
                    // to the service provider and save those as well for later use.

                    // this is set only for OAuth 1.0a  
                    String verificationCode = request.getParameter(OAUTH_VERIFIER_PARAM);
                    
                    pp.retrieveAccessToken(consumer, verificationCode);

                    access_credentials = new Credentials(consumer.getToken(), consumer.getTokenSecret(), provider);

                    // no matter the result, we need to remove the request token
                    Credentials.deleteCredentials(request, response, provider, Credentials.Type.REQUEST);
                    
                    if (access_credentials == null) {

                        // in some circumstances, a request token is present in the user cookies
                        // but it's not valid to obtain an access token (for example, if the user first
                        // denied access and then changed her mind and wanted to do the oauth dance again).
                        // So we need to reset the dance by removing the request token from the cookies
                        // redirect back to here.

                        response.sendRedirect(callbackURL);
                    } else {
                        Credentials.setCredentials(request, response, access_credentials, Credentials.Type.ACCESS, 30 * 24 * 3600);
                    }

                    finish(response);
                }
            } else {
                finish(response);
            }
        } catch (Exception e) {
            Credentials.deleteCredentials(request, response, provider, Credentials.Type.REQUEST);
            Credentials.deleteCredentials(request, response, provider, Credentials.Type.ACCESS);
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\auth\AuthorizeCommand;finish(HttpServletResponse);;;private void finish(HttpServletResponse response) throws IOException {
        response.setCharacterEncoding("UTF-8");
        response.setHeader("Content-Type", "text/html");

        PrintWriter writer = response.getWriter();
        writer.write(
            "<html>" + 
                "<body></body>" + 
                "<script type='text/javascript'>" +
                    "if (top.opener && top.opener.onauthorization) {" +
                    "   top.opener.onauthorization(window);" +
                    "}" +
                    "self.close();" +
                "</script>" +
            "</html>"
        );
        writer.flush();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\auth\AuthorizeCommand;getBaseURL(HttpServletRequest,Provider);;;private String getBaseURL(HttpServletRequest request, Provider provider) {
        String host = request.getHeader("host");
        if (host == null) {
            String referrer = request.getHeader("referer");
            if (referrer != null) {
                URI url;
                try {
                    url = new URI(referrer);
                    int port = url.getPort();
                    host = url.getHost() + ((port > -1) ? ":" + url.getPort() : "");
                } catch (URISyntaxException e) {
                    throw new RuntimeException("referrer '" + referrer + "' can't be parsed as a URL");
                }
            } else {
                throw new RuntimeException("neither the 'host' nor 'referer' headers were present in the HTTP response, I can't determine what URL gridworks is listening to.");
            }
        }
        return "http://" + host + "/command/authorize/" + provider.getHost();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\auth\CheckAuthorizationCommand;doGet(HttpServletRequest,HttpServletResponse);;;public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        
        try {
            Provider provider = OAuthUtilities.getProvider(request);
                        
            // this cookie should not be there, but this is good hygiene practice
            Credentials.deleteCredentials(request, response, provider, Credentials.Type.REQUEST);
            
            Credentials access_credentials = Credentials.getCredentials(request, provider, Credentials.Type.ACCESS);
            
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            
            if (access_credentials != null) {
                String user_info = FreebaseUtils.getUserInfo(access_credentials, provider);
                response.getWriter().write(user_info);
            } else {    
                respond(response, "401 Unauthorized", "You don't have the right credentials");
            }
        } catch (Exception e) {
            logger.info("error",e);
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\auth\DeAuthorizeCommand;doGet(HttpServletRequest,HttpServletResponse);;;public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        
        try {
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            
            Provider provider = OAuthUtilities.getProvider(request);
            
            Credentials.deleteCredentials(request, response, provider, Credentials.Type.ACCESS);
            
            respond(response, "200 OK", "");
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\auth\GetUserBadgesCommand;doGet(HttpServletRequest,HttpServletResponse);;;public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        
        try {
            Provider provider = OAuthUtilities.getProvider(request);
            String user_id = request.getParameter("user_id");
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            String user_badges = FreebaseUtils.getUserBadges(provider, user_id);
            response.getWriter().write(user_badges);
        } catch (Exception e) {
            logger.info("error",e);
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\browsing\ComputeClustersCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            long start = System.currentTimeMillis();
            Project project = getProject(request);
            Engine engine = getEngine(request, project);
            JSONObject clusterer_conf = getJsonParameter(request,"clusterer");

            Clusterer clusterer = null;
            String type = clusterer_conf.has("type") ? clusterer_conf.getString("type") : "binning";
            
            if ("knn".equals(type)) {
                clusterer = new kNNClusterer();
            } else  {
                clusterer = new BinningClusterer();
            }
                
            clusterer.initializeFromJSON(project, clusterer_conf);
            
            clusterer.computeClusters(engine);
            
            respondJSON(response, clusterer);
            logger.info("computed clusters [{},{}] in {}ms", new Object[] { type, clusterer_conf.getString("function"), Long.toString(System.currentTimeMillis() - start) });
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\browsing\ComputeFacetsCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            Engine engine = getEngine(request, project);
            
            engine.computeFacets();
            
            respondJSON(response, engine);
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\browsing\GetScatterplotCommand;doGet(HttpServletRequest,HttpServletResponse);;;public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            long start = System.currentTimeMillis();
            
            Project project = getProject(request);
            Engine engine = getEngine(request, project);
            JSONObject conf = getJsonParameter(request,"plotter");
            
            response.setHeader("Content-Type", "image/png");
            
            ServletOutputStream sos = null;
            
            try {
                sos = response.getOutputStream();
                draw(sos, project, engine, conf);
            } finally {
                sos.close();
            }
            
            logger.trace("Drawn scatterplot in {} ms", Long.toString(System.currentTimeMillis() - start));
        } catch (Exception e) {
            e.printStackTrace();
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\browsing\GetScatterplotCommand;draw(OutputStream,Project,Engine,JSONObject);;;public void draw(OutputStream output, Project project, Engine engine, JSONObject o) throws IOException, JSONException {

        double min_x = 0;
        double min_y = 0;
        double max_x = 0;
        double max_y = 0;
        
        int columnIndex_x = 0;
        int columnIndex_y = 0;
        
        Evaluable eval_x = null;
        Evaluable eval_y = null;
        
        int size = (o.has(ScatterplotFacet.SIZE)) ? o.getInt(ScatterplotFacet.SIZE) : 100;

        double dot = (o.has(ScatterplotFacet.DOT)) ? o.getDouble(ScatterplotFacet.DOT) : 100;
        
        int dim_x = (o.has(ScatterplotFacet.DIM_X)) ? ScatterplotFacet.getAxisDim(o.getString(ScatterplotFacet.DIM_X)) : ScatterplotFacet.LIN;
        int dim_y = (o.has(ScatterplotFacet.DIM_Y)) ? ScatterplotFacet.getAxisDim(o.getString(ScatterplotFacet.DIM_Y)) : ScatterplotFacet.LIN;

        int rotation = (o.has(ScatterplotFacet.ROTATION)) ? ScatterplotFacet.getRotation(o.getString(ScatterplotFacet.ROTATION)) : ScatterplotFacet.NO_ROTATION;
        
        String color_str = (o.has(ScatterplotFacet.COLOR)) ? o.getString(ScatterplotFacet.COLOR) : "000000";
        Color color = new Color(Integer.parseInt(color_str,16));
        
        String base_color_str = (o.has(ScatterplotFacet.BASE_COLOR)) ? o.getString(ScatterplotFacet.BASE_COLOR) : null;
        Color base_color = base_color_str != null ? new Color(Integer.parseInt(base_color_str,16)) : null;
        
        String columnName_x = o.getString(ScatterplotFacet.X_COLUMN_NAME);
        String expression_x = (o.has(ScatterplotFacet.X_EXPRESSION)) ? o.getString(ScatterplotFacet.X_EXPRESSION) : "value";
        
        if (columnName_x.length() > 0) {
            Column x_column = project.columnModel.getColumnByName(columnName_x);
            if (x_column != null) {
                columnIndex_x = x_column.getCellIndex();
            }
        } else {
            columnIndex_x = -1;
        }
        
        try {
            eval_x = MetaParser.parse(expression_x);
        } catch (ParsingException e) {
            logger.warn("error parsing expression", e);
        }
        
        String columnName_y = o.getString(ScatterplotFacet.Y_COLUMN_NAME);
        String expression_y = (o.has(ScatterplotFacet.Y_EXPRESSION)) ? o.getString(ScatterplotFacet.Y_EXPRESSION) : "value";
        
        if (columnName_y.length() > 0) {
            Column y_column = project.columnModel.getColumnByName(columnName_y);
            if (y_column != null) {
                columnIndex_y = y_column.getCellIndex();
            }
        } else {
            columnIndex_y = -1;
        }
        
        try {
            eval_y = MetaParser.parse(expression_y);
        } catch (ParsingException e) {
            logger.warn("error parsing expression", e);
        }
        
        NumericBinIndex index_x = null;
        NumericBinIndex index_y = null;
        
        String col_x_name = o.getString(ScatterplotFacet.X_COLUMN_NAME);
        Column column_x = project.columnModel.getColumnByName(col_x_name);
        if (column_x != null) {
            columnIndex_x = column_x.getCellIndex();
            index_x = ScatterplotFacet.getBinIndex(project, column_x, eval_x, expression_x);
            min_x = index_x.getMin();
            max_x = index_x.getMax();
        }

        String col_y_name = o.getString(ScatterplotFacet.Y_COLUMN_NAME);
        Column column_y = project.columnModel.getColumnByName(col_y_name);
        if (column_y != null) {
            columnIndex_y = column_y.getCellIndex();
            index_y = ScatterplotFacet.getBinIndex(project, column_y, eval_y, expression_y);
            min_y = index_y.getMin();
            max_y = index_y.getMax();
        }
        
        if (index_x != null && index_y != null && index_x.isNumeric() && index_y.isNumeric()) {
            ScatterplotDrawingRowVisitor drawer = new ScatterplotDrawingRowVisitor(
                columnIndex_x, columnIndex_y, min_x, max_x, min_y, max_y, 
                size, dim_x, dim_y, rotation, dot, color
            );
            
            if (base_color != null) {
                drawer.setColor(base_color);
                
                FilteredRows filteredRows = engine.getAllRows();
                filteredRows.accept(project, drawer);
                
                drawer.setColor(color);
            }
            
            {
                FilteredRows filteredRows = engine.getAllFilteredRows();
                filteredRows.accept(project, drawer);
            }
            
            ImageIO.write(drawer.getImage(), "png", output);
        } else {
            ImageIO.write(new BufferedImage(1, 1, BufferedImage.TYPE_4BYTE_ABGR), "png", output);
        }
        
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\cell\EditOneCellCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            request.setCharacterEncoding("UTF-8");
            response.setCharacterEncoding("UTF-8");
            
            Project project = getProject(request);
            
            int rowIndex = Integer.parseInt(request.getParameter("row"));
            int cellIndex = Integer.parseInt(request.getParameter("cell"));
            
            String type = request.getParameter("type");
            String valueString = request.getParameter("value");
            Serializable value = null;
            
            if ("number".equals(type)) {
                value = Double.parseDouble(valueString);
            } else if ("boolean".equals(type)) {
                value = "true".equalsIgnoreCase(valueString);
            } else if ("date".equals(type)) {
                value = ParsingUtilities.stringToDate(valueString);
            } else {
                value = valueString;
            }

            EditOneCellProcess process = new EditOneCellProcess(
                project, 
                "Edit single cell",
                rowIndex, 
                cellIndex, 
                value
            );
            
            HistoryEntry historyEntry = project.processManager.queueProcess(process);
            if (historyEntry != null) {
                /*
                 * If the operation has been done, return the new cell's data
                 * so the client side can update the cell's rendering right away.
                 */
                JSONWriter writer = new JSONWriter(response.getWriter());
                
                Pool pool = new Pool();
                Properties options = new Properties();
                options.put("pool", pool);
                
                writer.object();
                writer.key("code"); writer.value("ok");
                writer.key("historyEntry"); historyEntry.write(writer, options);
                writer.key("cell"); process.newCell.write(writer, options);
                writer.key("pool"); pool.write(writer, options);
                writer.endObject();
            } else {
                respond(response, "{ \"code\" : \"pending\" }");
            }
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\cell\EditOneCellCommand;EditOneCellProcess(Project,String,int,int,Serializable);;;EditOneCellProcess(
            Project project, 
            String briefDescription, 
            int rowIndex, 
            int cellIndex, 
            Serializable value
        ) {
            super(project, briefDescription);
            
            this.rowIndex = rowIndex;
            this.cellIndex = cellIndex;
            this.value = value;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\cell\EditOneCellCommand;createHistoryEntry(long);;;protected HistoryEntry createHistoryEntry(long historyEntryID) throws Exception {
            Cell cell = _project.rows.get(rowIndex).getCell(cellIndex);
            Column column = _project.columnModel.getColumnByCellIndex(cellIndex);
            if (column == null) {
                throw new Exception("No such column");
            }
            
            newCell = new Cell(
                value, 
                cell != null ? cell.recon : null
            );
            
            String description = 
                "Edit single cell on row " + (rowIndex + 1) + 
                ", column " + column.getName();

            Change change = new CellChange(rowIndex, cellIndex, cell, newCell);
                
            return new HistoryEntry(
                historyEntryID, _project, description, null, change);
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\cell\JoinMultiValueCellsCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            
            String columnName = request.getParameter("columnName");
            String keyColumnName = request.getParameter("keyColumnName");
            String separator = request.getParameter("separator");
            
            AbstractOperation op = new MultiValuedCellJoinOperation(columnName, keyColumnName, separator);
            Process process = op.createProcess(project, new Properties());
            
            performProcessAndRespond(request, response, project, process);
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\cell\MassEditCommand;createOperation(Project,HttpServletRequest,JSONObject);;;@Override
    protected AbstractOperation createOperation(Project project,
            HttpServletRequest request, JSONObject engineConfig) throws Exception {
        
        String columnName = request.getParameter("columnName");
        String expression = request.getParameter("expression");
        String editsString = request.getParameter("edits");
        
        return new MassEditOperation(
            engineConfig,
            columnName,
            expression,
            MassEditOperation.reconstructEdits(ParsingUtilities.evaluateJsonStringToArray(editsString))
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\cell\SplitMultiValueCellsCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            
            String columnName = request.getParameter("columnName");
            String keyColumnName = request.getParameter("keyColumnName");
            String separator = request.getParameter("separator");
            String mode = request.getParameter("mode");
            
            AbstractOperation op = new MultiValuedCellSplitOperation(columnName, keyColumnName, separator, mode);
            Process process = op.createProcess(project, new Properties());
            
            performProcessAndRespond(request, response, project, process);
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\cell\TextTransformCommand;createOperation(Project,HttpServletRequest,JSONObject);;;@Override
    protected AbstractOperation createOperation(Project project,
            HttpServletRequest request, JSONObject engineConfig) throws Exception {
        
        String columnName = request.getParameter("columnName");
        String expression = request.getParameter("expression");
        String onError = request.getParameter("onError");
        boolean repeat = "true".equals(request.getParameter("repeat"));
        
        int repeatCount = 10;
        String repeatCountString = request.getParameter("repeatCount");
        try {
            repeatCount = Math.max(Math.min(Integer.parseInt(repeatCountString), 10), 0);
        } catch (Exception e) {
        }
        
        return new TextTransformOperation(
            engineConfig, 
            columnName, 
            expression, 
            TextTransformOperation.stringToOnError(onError),
            repeat,
            repeatCount
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\column\AddColumnCommand;createOperation(Project,HttpServletRequest,JSONObject);;;@Override
    protected AbstractOperation createOperation(Project project,
            HttpServletRequest request, JSONObject engineConfig) throws Exception {
        
        String baseColumnName = request.getParameter("baseColumnName");
        String expression = request.getParameter("expression");
        String newColumnName = request.getParameter("newColumnName");
        int columnInsertIndex = Integer.parseInt(request.getParameter("columnInsertIndex"));
        String onError = request.getParameter("onError");
        
        return new ColumnAdditionOperation(
            engineConfig, 
            baseColumnName, 
            expression,
            TextTransformOperation.stringToOnError(onError),
            newColumnName,
            columnInsertIndex
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\column\ExtendDataCommand;createOperation(Project,HttpServletRequest,JSONObject);;;@Override
    protected AbstractOperation createOperation(Project project,
            HttpServletRequest request, JSONObject engineConfig) throws Exception {
        
        String baseColumnName = request.getParameter("baseColumnName");
        int columnInsertIndex = Integer.parseInt(request.getParameter("columnInsertIndex"));
        
        String jsonString = request.getParameter("extension");
        JSONObject extension = ParsingUtilities.evaluateJsonStringToObject(jsonString);
        
        return new ExtendDataOperation(
            engineConfig, 
            baseColumnName, 
            extension,
            columnInsertIndex
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\column\GetColumnsInfoCommand;doGet(HttpServletRequest,HttpServletResponse);;;public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            //long start = System.currentTimeMillis();

            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");

            Project project = getProject(request);
            //Engine engine = getEngine(request, project);
            
            JSONWriter writer = new JSONWriter(response.getWriter());

            writer.array();
            for (Column column : project.columnModel.columns) {
                writer.object();
                    write(project, column, writer);
                writer.endObject();
            }
            writer.endArray();
            
            //Gridworks.log("Obtained columns info in " + (System.currentTimeMillis() - start) + "ms");
        } catch (Exception e) {
            e.printStackTrace();
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\column\GetColumnsInfoCommand;getBinIndex(Project,Column);;;private NumericBinIndex getBinIndex(Project project, Column column) {
        String expression = "value";
        String key = "numeric-bin:" + expression;
        Evaluable eval = null;
        try {
            eval = MetaParser.parse(expression);
        } catch (ParsingException e) {
            // this should never happen
        }
        NumericBinIndex index = (NumericBinIndex) column.getPrecompute(key);
        if (index == null) {
            index = new NumericBinRowIndex(project, new ExpressionBasedRowEvaluable(column.getName(), column.getCellIndex(), eval));
            column.setPrecompute(key, index);
        }
        return index;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\column\GetColumnsInfoCommand;write(Project,Column,JSONWriter);;;private void write(Project project, Column column, JSONWriter writer) throws JSONException {
        NumericBinIndex columnIndex = getBinIndex(project, column);
        if (columnIndex != null) {
            writer.key("name");
            writer.value(column.getName());
            boolean is_numeric = columnIndex.isNumeric();
            writer.key("is_numeric");
            writer.value(is_numeric);
            writer.key("numeric_row_count");
            writer.value(columnIndex.getNumericRowCount());
            writer.key("non_numeric_row_count");
            writer.value(columnIndex.getNonNumericRowCount());
            writer.key("error_row_count");
            writer.value(columnIndex.getErrorRowCount());
            writer.key("blank_row_count");
            writer.value(columnIndex.getBlankRowCount());
            if (is_numeric) {
                writer.key("min");
                writer.value(columnIndex.getMin());
                writer.key("max");
                writer.value(columnIndex.getMax());
                writer.key("step");
                writer.value(columnIndex.getStep());
            }
        } else {
            writer.key("error");
            writer.value("error finding numeric information on the '" + column.getName() + "' column");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\column\PreviewExtendDataCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            String columnName = request.getParameter("columnName");
            
            String rowIndicesString = request.getParameter("rowIndices");
            if (rowIndicesString == null) {
                respond(response, "{ \"code\" : \"error\", \"message\" : \"No row indices specified\" }");
                return;
            }
            
            String jsonString = request.getParameter("extension");
            JSONObject json = ParsingUtilities.evaluateJsonStringToObject(jsonString);
            
            JSONArray rowIndices = ParsingUtilities.evaluateJsonStringToArray(rowIndicesString);
            int length = rowIndices.length();
            int cellIndex = project.columnModel.getColumnByName(columnName).getCellIndex();
            
            List<String> topicNames = new ArrayList<String>();
            List<String> topicGuids = new ArrayList<String>();
            Set<String> guids = new HashSet<String>();
            for (int i = 0; i < length; i++) {
                int rowIndex = rowIndices.getInt(i);
                if (rowIndex >= 0 && rowIndex < project.rows.size()) {
                    Row row = project.rows.get(rowIndex);
                    Cell cell = row.getCell(cellIndex);
                    if (cell != null && cell.recon != null && cell.recon.match != null) {
                        topicNames.add(cell.recon.match.topicName);
                        topicGuids.add(cell.recon.match.topicGUID);
                        guids.add(cell.recon.match.topicGUID);
                    } else {
                        topicNames.add(null);
                        topicGuids.add(null);
                        guids.add(null);
                    }
                }
            }
            
            Map<String, ReconCandidate> reconCandidateMap = new HashMap<String, ReconCandidate>();
            FreebaseDataExtensionJob job = new FreebaseDataExtensionJob(json);
            Map<String, DataExtension> map = job.extend(guids, reconCandidateMap);
            
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            
            JSONWriter writer = new JSONWriter(response.getWriter());
            writer.object();
            writer.key("code"); writer.value("ok");
            writer.key("columns");
                writer.array();
                for (ColumnInfo info : job.columns) {
                    writer.object();
                    writer.key("names");
                        writer.array();
                        for (String name : info.names) {
                            writer.value(name);
                        }
                        writer.endArray();
                    writer.key("path");
                        writer.array();
                        for (String id : info.path) {
                            writer.value(id);
                        }
                        writer.endArray();
                    writer.endObject();
                }
                writer.endArray();
            
            writer.key("rows");
                writer.array();
                for (int r = 0; r < topicNames.size(); r++) {
                    String guid = topicGuids.get(r);
                    String topicName = topicNames.get(r);
                    
                    if (guid != null && map.containsKey(guid)) {
                        DataExtension ext = map.get(guid);
                        boolean first = true;
                        
                        if (ext.data.length > 0) {
                            for (Object[] row : ext.data) {
                                writer.array();
                                if (first) {
                                    writer.value(topicName);
                                    first = false;
                                } else {
                                    writer.value(null);
                                }
                                
                                for (Object cell : row) {
                                    if (cell != null && cell instanceof ReconCandidate) {
                                        ReconCandidate rc = (ReconCandidate) cell;
                                        writer.object();
                                        writer.key("id"); writer.value(rc.topicID);
                                        writer.key("name"); writer.value(rc.topicName);
                                        writer.endObject();
                                    } else {
                                        writer.value(cell);
                                    }
                                }
                                
                                writer.endArray();
                            }
                            continue;
                        }
                    }
                    
                    writer.array();
                    if (guid != null) {
                        writer.object();
                        writer.key("id"); writer.value("/guid/" + guid.substring(1));
                        writer.key("name"); writer.value(topicName);
                        writer.endObject();
                    } else {
                        writer.value("<not reconciled>");
                    }
                    writer.endArray();
                }
                writer.endArray();
                
            writer.endObject();
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\column\RemoveColumnCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            
            String columnName = request.getParameter("columnName");
            
            AbstractOperation op = new ColumnRemovalOperation(columnName);
            Process process = op.createProcess(project, new Properties());
            
            performProcessAndRespond(request, response, project, process);
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\column\RenameColumnCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            
            String oldColumnName = request.getParameter("oldColumnName");
            String newColumnName = request.getParameter("newColumnName");
            
            AbstractOperation op = new ColumnRenameOperation(oldColumnName, newColumnName);
            Process process = op.createProcess(project, new Properties());
            
            performProcessAndRespond(request, response, project, process);
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\column\SplitColumnCommand;createOperation(Project,HttpServletRequest,JSONObject);;;@Override
    protected AbstractOperation createOperation(Project project,
            HttpServletRequest request, JSONObject engineConfig) throws Exception {
        
        String columnName = request.getParameter("columnName");
        boolean guessCellType = Boolean.parseBoolean(request.getParameter("guessCellType"));
        boolean removeOriginalColumn = Boolean.parseBoolean(request.getParameter("removeOriginalColumn"));
        String mode = request.getParameter("mode");
        if ("separator".equals(mode)) {
            String maxColumns = request.getParameter("maxColumns");
            
            return new ColumnSplitOperation(
                engineConfig, 
                columnName, 
                guessCellType,
                removeOriginalColumn,
                request.getParameter("separator"),
                Boolean.parseBoolean(request.getParameter("regex")),
                maxColumns != null && maxColumns.length() > 0 ? Integer.parseInt(maxColumns) : 0
            );
        } else {
            String s = request.getParameter("fieldLengths");
            
            JSONArray a = ParsingUtilities.evaluateJsonStringToArray(s);
            int[] fieldLengths = new int[a.length()];
            
            for (int i = 0; i < fieldLengths.length; i++) {
                fieldLengths[i] = a.getInt(i);
            }
            
            return new ColumnSplitOperation(
                engineConfig, 
                columnName, 
                guessCellType,
                removeOriginalColumn,
                fieldLengths
            );
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\expr\GetExpressionHistoryCommand;doGet(HttpServletRequest,HttpServletResponse);;;@Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            ProjectMetadata pm = ProjectManager.singleton.getProjectMetadata(project.id);
            
            List<String> localExpressions = pm.getExpressions();
            List<String> globalExpressions = ProjectManager.singleton.getExpressions();
            Set<String> done = new HashSet<String>();
            
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            
            JSONWriter writer = new JSONWriter(response.getWriter());
            writer.object();
            writer.key("expressions");
                writer.array();
                for (String s : localExpressions) {
                    writer.object();
                    writer.key("code"); writer.value(s);
                    writer.key("global"); writer.value(false);
                    writer.endObject();
                    done.add(s);
                }
                for (String s : globalExpressions) {
                    if (!done.contains(s)) {
                        writer.object();
                        writer.key("code"); writer.value(s);
                        writer.key("global"); writer.value(true);
                        writer.endObject();
                    }
                }
                writer.endArray();
            writer.endObject();
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\expr\GetExpressionLanguageInfoCommand;doGet(HttpServletRequest,HttpServletResponse);;;@Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            
            JSONWriter writer = new JSONWriter(response.getWriter());
            Properties options = new Properties();
            
            writer.object();
            
            writer.key("functions");
            writer.object();
            {
                for (Entry<String, Function> entry : ControlFunctionRegistry.getFunctionMapping()) {
                    writer.key(entry.getKey());
                    entry.getValue().write(writer, options);
                }
            }
            writer.endObject();
            
            writer.key("controls");
            writer.object();
            {
                for (Entry<String, Control> entry : ControlFunctionRegistry.getControlMapping()) {
                    writer.key(entry.getKey());
                    entry.getValue().write(writer, options);
                }
            }
            writer.endObject();
            
            writer.endObject();
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\expr\LogExpressionCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            String expression = request.getParameter("expression");
            
            project.getMetadata().addLatestExpression(expression);
            
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            response.getWriter().write("{ \"code\" : \"ok\" }");
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\expr\PreviewExpressionCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            
            int cellIndex = Integer.parseInt(request.getParameter("cellIndex"));
            String columnName = cellIndex < 0 ? "" : project.columnModel.getColumnByCellIndex(cellIndex).getName();
            
            String expression = request.getParameter("expression");
            String rowIndicesString = request.getParameter("rowIndices");
            if (rowIndicesString == null) {
                respond(response, "{ \"code\" : \"error\", \"message\" : \"No row indices specified\" }");
                return;
            }
            
            boolean repeat = "true".equals(request.getParameter("repeat"));
            int repeatCount = 10;
            if (repeat) {
                String repeatCountString = request.getParameter("repeatCount");
                try {
                    repeatCount = Math.max(Math.min(Integer.parseInt(repeatCountString), 10), 0);
                } catch (Exception e) {
                }
            }
            
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            
            JSONArray rowIndices = ParsingUtilities.evaluateJsonStringToArray(rowIndicesString);
            int length = rowIndices.length();
            
            JSONWriter writer = new JSONWriter(response.getWriter());
            writer.object();
            
            try {
                Evaluable eval = MetaParser.parse(expression);
                
                writer.key("code"); writer.value("ok");
                writer.key("results"); writer.array();
                
                Properties bindings = ExpressionUtils.createBindings(project);
                for (int i = 0; i < length; i++) {
                    Object result = null;
                    
                    int rowIndex = rowIndices.getInt(i);
                    if (rowIndex >= 0 && rowIndex < project.rows.size()) {
                        Row row = project.rows.get(rowIndex);
                        Cell cell = row.getCell(cellIndex);
                            
                        try {
                            ExpressionUtils.bind(bindings, row, rowIndex, columnName, cell);
                            result = eval.evaluate(bindings);
                            
                            if (repeat) {
                                for (int r = 0; r < repeatCount && ExpressionUtils.isStorable(result); r++) {
                                    Cell newCell = new Cell((Serializable) result, (cell != null) ? cell.recon : null);
                                    ExpressionUtils.bind(bindings, row, rowIndex, columnName, newCell);
                                    
                                    Object newResult = eval.evaluate(bindings);
                                    if (ExpressionUtils.isError(newResult)) {
                                        break;
                                    } else if (ExpressionUtils.sameValue(result, newResult)) {
                                        break;
                                    } else {
                                        result = newResult;
                                    }
                                }
                            }
                        } catch (Exception e) {
                            // ignore
                        }
                    }
                    
                    if (result == null) {
                        writer.value(null);
                    } else if (ExpressionUtils.isError(result)) {
                        writer.object();
                        writer.key("message"); writer.value(((EvalError) result).message);
                        writer.endObject();
                    } else {
                        StringBuffer sb = new StringBuffer();
                        
                        writeValue(sb, result, false);
                        
                        writer.value(sb.toString());
                    }
                }
                writer.endArray();
            } catch (ParsingException e) {
                writer.key("code"); writer.value("error");
                writer.key("type"); writer.value("parser");
                writer.key("message"); writer.value(e.getMessage());
            } catch (Exception e) {
                writer.key("code"); writer.value("error");
                writer.key("type"); writer.value("other");
                writer.key("message"); writer.value(e.getMessage());
            }
            
            writer.endObject();
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\expr\PreviewExpressionCommand;writeValue(StringBuffer,Object,boolean);;;static protected void writeValue(StringBuffer sb, Object v, boolean quote) throws JSONException {
        if (ExpressionUtils.isError(v)) {
            sb.append("[error: " + ((EvalError) v).message + "]");
        } else {
            if (v == null) {
                sb.append("null");
            } else {
                if (v instanceof WrappedCell) {
                    sb.append("[object Cell]");
                } else if (v instanceof WrappedRow) {
                    sb.append("[object Row]");
                } else if (ExpressionUtils.isArray(v)) {
                    Object[] a = (Object[]) v;
                    sb.append("[ ");
                    for (int i = 0; i < a.length; i++) {
                        if (i > 0) {
                            sb.append(", ");
                        }
                        writeValue(sb, a[i], true);
                    }
                    sb.append(" ]");
                } else if (ExpressionUtils.isArrayOrList(v)) {
                    List<Object> list = ExpressionUtils.toObjectList(v);
                    sb.append("[ ");
                    for (int i = 0; i < list.size(); i++) {
                        if (i > 0) {
                            sb.append(", ");
                        }
                        writeValue(sb, list.get(i), true);
                    }
                    sb.append(" ]");
                } else if (v instanceof HasFields) {
                    sb.append("[object " + v.getClass().getSimpleName() + "]");
                } else if (v instanceof Calendar) {
                    Calendar c = (Calendar) v;
                    
                    sb.append("[date " + 
                        ParsingUtilities.dateToString(c.getTime()) +"]");
                } else if (v instanceof Date) {
                    sb.append("[date " + 
                            ParsingUtilities.dateToString((Date) v) +"]");
                } else if (v instanceof String) {
                    if (quote) {
                        sb.append(JSONObject.quote((String) v));
                    } else {
                        sb.append((String) v);
                    }
                } else {
                    sb.append(v.toString());
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\freebase\GuessTypesOfColumnCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            String columnName = request.getParameter("columnName");
            
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            
            JSONWriter writer = new JSONWriter(response.getWriter());
            writer.object();
            
            Column column = project.columnModel.getColumnByName(columnName);
            if (column == null) {
                writer.key("code"); writer.value("error");
                writer.key("message"); writer.value("No such column");
            } else {
                try {
                    writer.key("code"); writer.value("ok");
                    writer.key("types"); writer.array();
                    
                    List<TypeGroup> typeGroups = guessTypes(project, column);
                    for (TypeGroup tg : typeGroups) {
                        writer.object();
                        writer.key("id"); writer.value(tg.id);
                        writer.key("name"); writer.value(tg.name);
                        writer.key("score"); writer.value(tg.score);
                        writer.key("count"); writer.value(tg.count);
                        writer.endObject();
                    }
                    
                    writer.endArray();
                } catch (Exception e) {
                    writer.key("code"); writer.value("error");
                }
            }
            
            writer.endObject();
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\freebase\GuessTypesOfColumnCommand;guessTypes(Project,Column);;;protected List<TypeGroup> guessTypes(Project project, Column column) {
        Map<String, TypeGroup> map = new HashMap<String, TypeGroup>();
        
        int cellIndex = column.getCellIndex();
        
        List<String> samples = new ArrayList<String>(s_sampleSize);
        Set<String> sampleSet = new HashSet<String>();
        
        for (Row row : project.rows) {
            Object value = row.getCellValue(cellIndex);
            if (ExpressionUtils.isNonBlankData(value)) {
                String s = value.toString().trim();
                if (!sampleSet.contains(s)) {
                    samples.add(s);
                    sampleSet.add(s);
                    if (samples.size() >= s_sampleSize) {
                        break;
                    }
                }
            }
        }
        
        try {
            StringWriter stringWriter = new StringWriter();
            JSONWriter jsonWriter = new JSONWriter(stringWriter);
            
            jsonWriter.object();
            for (int i = 0; i < samples.size(); i++) {
                jsonWriter.key("q" + i + ":search");
                jsonWriter.object();
                
                jsonWriter.key("query"); jsonWriter.value(samples.get(i));
                jsonWriter.key("limit"); jsonWriter.value(3);
                
                jsonWriter.endObject();
            }
            jsonWriter.endObject();
            
            StringBuffer sb = new StringBuffer(1024);
            sb.append("http://api.freebase.com/api/service/search?queries=");
            sb.append(ParsingUtilities.encode(stringWriter.toString()));
            
            URL url = new URL(sb.toString());
            URLConnection connection = url.openConnection();
            connection.setConnectTimeout(5000);
            connection.connect();
            
            InputStream is = connection.getInputStream();
            try {
                String s = ParsingUtilities.inputStreamToString(is);
                JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
                
                for (int i = 0; i < samples.size(); i++) {
                    String key = "q" + i + ":search";
                    if (!o.has(key)) {
                        continue;
                    }
                    
                    JSONObject o2 = o.getJSONObject(key);
                    if (!(o2.has("result"))) {
                        continue;
                    }
                    
                    JSONArray results = o2.getJSONArray("result");
                    int count = results.length();
                    
                    for (int j = 0; j < count; j++) {
                        JSONObject result = results.getJSONObject(j);
                        double score = 1.0 / (1 + j); // score by each result's rank
                        
                        JSONArray types = result.getJSONArray("type");
                        int typeCount = types.length();
                        
                        for (int t = 0; t < typeCount; t++) {
                            JSONObject type = types.getJSONObject(t);
                            String id = type.getString("id");
                            if (id.equals("/common/topic") ||
                                id.equals("/base/ontologies/ontology_instance") ||
                                (id.startsWith("/base/") && id.endsWith("/topic")) ||
                                id.startsWith("/user/") ||
                                id.startsWith("/freebase/")
                            ) {
                                continue;
                            }
                            
                            if (map.containsKey(id)) {
                                TypeGroup tg = map.get(id);
                                tg.score += score;
                                tg.count++;
                            } else {
                                map.put(id, new TypeGroup(id, type.getString("name"), score));
                            }
                        }
                    }
                }
            } finally {
                is.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        List<TypeGroup> types = new ArrayList<TypeGroup>(map.values());
        Collections.sort(types, new Comparator<TypeGroup>() {
            public int compare(TypeGroup o1, TypeGroup o2) {
                int c = Math.min(s_sampleSize, o2.count) - Math.min(s_sampleSize, o1.count);
                if (c != 0) {
                    return c;
                }
                return (int) Math.signum(o2.score / o2.count - o1.score / o1.count);
            }
        });
        
        return types;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\freebase\GuessTypesOfColumnCommand;TypeGroup(String,String,double);;;TypeGroup(String id, String name, double score) {
            this.id = id;
            this.name = name;
            this.score = score;
            this.count = 1;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\freebase\MQLReadCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Provider provider = OAuthUtilities.getProvider(request);
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            String query = request.getParameter("query");
            String result = FreebaseUtils.mqlread(provider,query);
            response.getWriter().write(result);
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\freebase\MQLWriteCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Provider provider = OAuthUtilities.getProvider(request);
            
            Credentials access_credentials = Credentials.getCredentials(request, provider, Credentials.Type.ACCESS);
            
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            
            if (access_credentials != null) {
                String query = request.getParameter("query");
                String result = FreebaseUtils.mqlwrite(access_credentials, provider, query);
                response.getWriter().write(result);
            } else {    
                respond(response, "401 Unauthorized", "You don't have the right credentials");
            }
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\freebase\PreviewProtographCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            Engine engine = getEngine(request, project);
            FilteredRows filteredRows = engine.getAllFilteredRows();
            
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            
            String jsonString = request.getParameter("protograph");
            JSONObject json = ParsingUtilities.evaluateJsonStringToObject(jsonString);
            Protograph protograph = Protograph.reconstruct(json);
            
            StringBuffer sb = new StringBuffer(2048);
            sb.append("{ ");
            
            {
                StringWriter stringWriter = new StringWriter();
                TripleLoaderTransposedNodeFactory nodeFactory = new TripleLoaderTransposedNodeFactory(stringWriter);
                
                Transposer.transpose(project, filteredRows, protograph, protograph.getRootNode(0), nodeFactory);
                nodeFactory.flush();
                
                sb.append("\"tripleloader\" : ");
                sb.append(JSONObject.quote(stringWriter.toString()));
            }
            
            {
                StringWriter stringWriter = new StringWriter();
                MqlwriteLikeTransposedNodeFactory nodeFactory = new MqlwriteLikeTransposedNodeFactory(stringWriter);
                
                Transposer.transpose(project, filteredRows, protograph, protograph.getRootNode(0), nodeFactory);
                nodeFactory.flush();
                
                sb.append(", \"mqllike\" : ");
                sb.append(stringWriter.toString());
            }

            sb.append(" }");
            
            respond(response, sb.toString());
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\freebase\SaveProtographCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            
            String jsonString = request.getParameter("protograph");
            JSONObject json = ParsingUtilities.evaluateJsonStringToObject(jsonString);
            Protograph protograph = Protograph.reconstruct(json);
            
            AbstractOperation op = new SaveProtographOperation(protograph);
            Process process = op.createProcess(project, new Properties());
            
            performProcessAndRespond(request, response, project, process);
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\freebase\UploadDataCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        ProjectManager.singleton.setBusy(true);
        try {
            Project project = getProject(request);
            Engine engine = getEngine(request, project);
            TripleLoaderExporter exporter = new TripleLoaderExporter();
            StringWriter triples = new StringWriter(10 * 1024 * 1024);
            exporter.export(project, new Properties(), engine, triples);

            String source_name = request.getParameter("source_name");
            String source_id = request.getParameter("source_id");
            String graph = request.getParameter("graph");
                        
            String result = FreebaseUtils.uploadTriples(request, graph, source_name, source_id, triples.toString());

            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            
            try {
                new JSONObject(result);
                response.getWriter().write(result);
            } catch (JSONException e) {
                respond(response,"500 Error", result);
            }
            
        } catch (Exception e) {
            respondException(response, e);
        } finally {
            ProjectManager.singleton.setBusy(false);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\history\ApplyOperationsCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        Project project = getProject(request);
        String jsonString = request.getParameter("operations");
        try {
            JSONArray a = ParsingUtilities.evaluateJsonStringToArray(jsonString);
            int count = a.length();
            for (int i = 0; i < count; i++) {
                JSONObject obj = a.getJSONObject(i);
                
                reconstructOperation(project, obj);
            }

            if (project.processManager.hasPending()) {
                respond(response, "{ \"code\" : \"pending\" }");
            } else {
                respond(response, "{ \"code\" : \"ok\" }");
            }
        } catch (JSONException e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\history\ApplyOperationsCommand;reconstructOperation(Project,JSONObject);;;protected void reconstructOperation(Project project, JSONObject obj) {
        AbstractOperation operation = OperationRegistry.reconstruct(project, obj);
        if (operation != null) {
            try {
                Process process = operation.createProcess(project, new Properties());
                
                project.processManager.queueProcess(process);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\history\CancelProcessesCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if( request == null ) throw new IllegalArgumentException("parameter 'request' should not be null");
        if( response == null ) throw new IllegalArgumentException("parameter 'request' should not be null");

        try {
            Project project = getProject(request);
            project.getProcessManager().cancelAll();

            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            response.getWriter().write("{ \"code\" : \"ok\" }");
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\history\GetHistoryCommand;doGet(HttpServletRequest,HttpServletResponse);;;@Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        Project project = getProject(request);
        try {
            respondJSON(response, project.history);
        } catch (JSONException e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\history\GetOperationsCommand;doGet(HttpServletRequest,HttpServletResponse);;;@Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        Project project = getProject(request);
        
        try {
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            
            Properties options = new Properties();
            JSONWriter writer = new JSONWriter(response.getWriter());
            
            writer.object();
            writer.key("entries"); writer.array();
            
            for (HistoryEntry entry : project.history.getLastPastEntries(-1)) {
                writer.object();
                writer.key("description"); writer.value(entry.description);
                if (entry.operation != null) {
                    writer.key("operation");
                    entry.operation.write(writer, options);
                }
                writer.endObject();
            }
            writer.endArray();
            writer.endObject();
        } catch (JSONException e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\history\GetProcessesCommand;doGet(HttpServletRequest,HttpServletResponse);;;@Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        Project project = getProject(request);
        
        try {
            respondJSON(response, project.processManager);
        } catch (JSONException e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\history\UndoRedoCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        Project project = getProject(request);
        
        long lastDoneID = -1;
        String lastDoneIDString = request.getParameter("lastDoneID");
        if (lastDoneIDString != null) {
            lastDoneID = Long.parseLong(lastDoneIDString);
        } else {
            String undoIDString = request.getParameter("undoID");
            if (undoIDString != null) {
                long undoID = Long.parseLong(undoIDString);
                
                lastDoneID = project.history.getPrecedingEntryID(undoID);
            }
        }
        
        boolean done = lastDoneID == -1 ||
            project.processManager.queueProcess(
                new HistoryProcess(project, lastDoneID));

        respond(response, "{ \"code\" : " + (done ? "\"ok\"" : "\"pending\"") + " }");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;registerImporters(String[][]);;;static public boolean registerImporters(String[][] importers) {
        boolean status = true;
        for (String[] importer : importerNames) {
            String importerName = importer[0];
            String className = importer[1];
            logger.debug("Loading command " + importerName + " class: " + className);
            Importer cmd;
            try {
                // TODO: May need to use the servlet container's class loader here
                cmd = (Importer) Class.forName(className).newInstance();
            } catch (InstantiationException e) {
                logger.error("Failed to load importer class " + className, e);
                status = false;
                continue;
            } catch (IllegalAccessException e) {
                logger.error("Failed to load importer class " + className, e);
                status = false;
                continue;
            } catch (ClassNotFoundException e) {
                logger.error("Failed to load importer class " + className, e);
                status = false;
                continue;
            }
            status |= registerImporter(importerName, cmd);
        }
        return status;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;registerImporter(String,Importer);;;static public boolean registerImporter(String name,
            Importer importerObject) {
        if (importers.containsKey(name)) {
            return false;
        }
        importers.put(name, importerObject);
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;unregisterImporter(String);;;static protected boolean unregisterImporter(String verb) {
        return importers.remove(verb) != null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        ProjectManager.singleton.setBusy(true);
        try {
            /*
             * The uploaded file is in the POST body as a "file part". If
             * we call request.getParameter() then the POST body will get
             * read and we won't have a chance to parse the body ourselves.
             * This is why we have to parse the URL for parameters ourselves.
             * Don't call request.getParameter() before calling internalImport().
             */
            Properties options = ParsingUtilities.parseUrlParameters(request);

            Project project = new Project();

            internalImport(request, project, options);

            /*
             * The import process above populates options with parameters
             * in the POST body. That's why we're constructing the project
             * metadata object after calling internalImport().
             */
            ProjectMetadata pm = new ProjectMetadata();
            pm.setName(options.getProperty("project-name"));
            pm.setPassword(options.getProperty("project-password"));
            pm.setEncoding(options.getProperty("encoding"));
            pm.setEncodingConfidence(options.getProperty("encoding_confidence"));
            ProjectManager.singleton.registerProject(project, pm);

            project.update();

            redirect(response, "/project.html?project=" + project.id);
        } catch (Exception e) {
            redirect(response, "/error.html?redirect=index.html&msg=" +
                ParsingUtilities.encode("Failed to import file: " + e.getLocalizedMessage())
            );
            e.printStackTrace();
        } finally {
            ProjectManager.singleton.setBusy(false);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;internalImport(HttpServletRequest,Project,Properties);;;protected void internalImport(
        HttpServletRequest    request,
        Project               project,
        Properties            options
    ) throws Exception {

        ServletFileUpload upload = new ServletFileUpload();
        String url = null;

        FileItemIterator iter = upload.getItemIterator(request);
        while (iter.hasNext()) {
            FileItemStream item = iter.next();
            String name = item.getFieldName().toLowerCase();
            InputStream stream = item.openStream();
            if (item.isFormField()) {
                if (name.equals("raw-text")) {
                    Reader reader = new InputStreamReader(stream,"UTF-8");
                    try {
                        internalInvokeImporter(project, new TsvCsvImporter(), options, reader);
                    } finally {
                        reader.close();
                    }
                } else if (name.equals("url")) {
                    url = Streams.asString(stream);
                } else {
                    options.put(name, Streams.asString(stream));
                }
            } else {
                String fileName = item.getName().toLowerCase();
                try {
                    internalImportFile(project, options, fileName, stream);
                } finally {
                    stream.close();
                }
            }
        }

        if (url != null && url.length() > 0) {
            internalImportURL(request, project, options, url);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;SafeInputStream(InputStream);;;public SafeInputStream(InputStream stream) {
            super(stream);
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;close();;;@Override
        public void close() {
            // some libraries attempt to close the input stream while they can't
            // read anymore from it... unfortunately this behavior prevents
            // the zip input stream from functioning correctly so we just have
            // to ignore those close() calls and just close it ourselves
            // forcefully later
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;reallyClose();;;public void reallyClose() throws IOException {
            super.close();
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;internalImportFile(Project,Properties,String,InputStream);;;protected void internalImportFile(
        Project     project,
        Properties  options,
        String    fileName,
        InputStream inputStream
    ) throws Exception {

        logger.info("Importing '{}'", fileName);

        if (fileName.endsWith(".zip") || fileName.endsWith(".tar.gz") || fileName.endsWith(".tgz") || fileName.endsWith(".tar.bz2")) {

            // first, save the file on disk, since we need two passes and we might
            // not have enough memory to keep it all in there
            File file = save(inputStream);

            // in the first pass, gather statistics about what files are in there
            // unfortunately, we have to rely on files extensions, which is horrible but
            // better than nothing
            HashMap<String,Integer> ext_map = new HashMap<String,Integer>();

            FileInputStream fis = new FileInputStream(file);
            InputStream is = getStream(fileName, fis);

            // NOTE(SM): unfortunately, java.io does not provide any generalized class for
            // archive-like input streams so while both TarInputStream and ZipInputStream
            // behave precisely the same, there is no polymorphic behavior so we have
            // to treat each instance explicitly... one of those times you wish you had
            // closures
            try {
                if (is instanceof TarInputStream) {
                    TarInputStream tis = (TarInputStream) is;
                    TarEntry te;
                    while ((te = tis.getNextEntry()) != null) {
                        if (!te.isDirectory()) {
                            mapExtension(te.getName(),ext_map);
                        }
                    }
                } else if (is instanceof ZipInputStream) {
                    ZipInputStream zis = (ZipInputStream) is;
                    ZipEntry ze;
                    while ((ze = zis.getNextEntry()) != null) {
                        if (!ze.isDirectory()) {
                            mapExtension(ze.getName(),ext_map);
                        }
                    }
                }
            } finally {
                try {
                    is.close();
                    fis.close();
                } catch (IOException e) {}
            }

            // sort extensions by how often they appear
            List<Entry<String,Integer>> values = new ArrayList<Entry<String,Integer>>(ext_map.entrySet());
            Collections.sort(values, new ValuesComparator());

            if (values.size() == 0) {
                throw new RuntimeException("The archive contains no files.");
            }

            // this will contain the set of extensions we'll load from the archive
            HashSet<String> exts = new HashSet<String>();

            // find the extension that is most frequent or those who share the highest frequency value
            if (values.size() == 1) {
                exts.add(values.get(0).getKey());
            } else {
                Entry<String,Integer> most_frequent = values.get(0);
                Entry<String,Integer> second_most_frequent = values.get(1);
                if (most_frequent.getValue() > second_most_frequent.getValue()) { // we have a winner
                    exts.add(most_frequent.getKey());
                } else { // multiple extensions have the same frequency
                    int winning_frequency = most_frequent.getValue();
                    for (Entry<String,Integer> e : values) {
                        if (e.getValue() == winning_frequency) {
                            exts.add(e.getKey());
                        }
                    }
                }
            }

            logger.info("Most frequent extensions: {}", exts.toString());

            // second pass, load the data for real
            is = getStream(fileName, new FileInputStream(file));
            SafeInputStream sis = new SafeInputStream(is);
            try {
                if (is instanceof TarInputStream) {
                    TarInputStream tis = (TarInputStream) is;
                    TarEntry te;
                    while ((te = tis.getNextEntry()) != null) {
                        if (!te.isDirectory()) {
                            String name = te.getName();
                            String ext = getExtension(name)[1];
                            if (exts.contains(ext)) {
                                internalImportFile(project, options, name, sis);
                            }
                        }
                    }
                } else if (is instanceof ZipInputStream) {
                    ZipInputStream zis = (ZipInputStream) is;
                    ZipEntry ze;
                    while ((ze = zis.getNextEntry()) != null) {
                        if (!ze.isDirectory()) {
                            String name = ze.getName();
                            String ext = getExtension(name)[1];
                            if (exts.contains(ext)) {
                                internalImportFile(project, options, name, sis);
                            }
                        }
                    }
                }
            } finally {
                try {
                    sis.reallyClose();
                } catch (IOException e) {}
            }

        } else if (fileName.endsWith(".gz")) {
            internalImportFile(project, options, getExtension(fileName)[0], new GZIPInputStream(inputStream));
        } else if (fileName.endsWith(".bz2")) {
            internalImportFile(project, options, getExtension(fileName)[0], new CBZip2InputStream(inputStream));
        } else {
            load(project, options, fileName, inputStream);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;compare(Entry<String,Integer>,Entry<String,Integer>);;;public int compare(Entry<String,Integer> o1, Entry<String,Integer> o2) {
            return o2.getValue() - o1.getValue();
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;load(Project,Properties,String,InputStream);;;private void load(Project project, Properties options, String fileName, InputStream inputStream) throws Exception {
        Importer importer = guessImporter(null, fileName);
        internalInvokeImporter(project, importer, options, inputStream, null);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;save(InputStream);;;private File save(InputStream is) throws IOException {
        File temp = this.servlet.getTempFile(Long.toString(System.currentTimeMillis()));
        temp.deleteOnExit();
        IOUtils.copy(is,temp);
        is.close();
        return temp;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;mapExtension(String,Map<String,Integer>);;;private void mapExtension(String name, Map<String,Integer> ext_map) {
        String ext = getExtension(name)[1];
        if (ext_map.containsKey(ext)) {
            ext_map.put(ext, ext_map.get(ext) + 1);
        } else {
            ext_map.put(ext, 1);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;getStream(String,InputStream);;;private InputStream getStream(String fileName, InputStream is) throws IOException {
        if (fileName.endsWith(".tar.gz") || fileName.endsWith(".tgz")) {
            return new TarInputStream(new GZIPInputStream(is));
        } else if (fileName.endsWith(".tar.bz2")) {
            return new TarInputStream(new CBZip2InputStream(is));
        } else {
            return new ZipInputStream(is);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;getExtension(String);;;private String[] getExtension(String filename) {
        String[] result = new String[2];
        int ext_index = filename.lastIndexOf('.');
        result[0] = (ext_index == -1) ? filename : filename.substring(0,ext_index);
        result[1] = (ext_index == -1) ? "" : filename.substring(ext_index + 1);
        return result;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;internalImportURL(HttpServletRequest,Project,Properties,String);;;protected void internalImportURL(
        HttpServletRequest    request,
        Project               project,
        Properties            options,
        String                urlString
    ) throws Exception {
        URL url = new URL(urlString);
        URLConnection connection = null;

        try {
            connection = url.openConnection();
            connection.setConnectTimeout(5000);
            connection.connect();
        } catch (Exception e) {
            throw new Exception("Cannot connect to " + urlString, e);
        }

        InputStream inputStream = null;
        try {
            inputStream = connection.getInputStream();
        } catch (Exception e) {
            throw new Exception("Cannot retrieve content from " + url, e);
        }

        try {
            Importer importer = guessImporter(
                connection.getContentType(),
                url.getPath()
            );

            internalInvokeImporter(project, importer, options, inputStream, connection.getContentEncoding());
        } finally {
            inputStream.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;internalInvokeImporter(Project,Importer,Properties,InputStream,String);;;protected void internalInvokeImporter(
        Project     project,
        Importer    importer,
        Properties  options,
        InputStream rawInputStream,
        String      encoding
    ) throws Exception {
        if (importer.takesReader()) {

            BufferedInputStream inputStream = new BufferedInputStream(rawInputStream);

            // NOTE(SM): The ICU4J char detection code requires the input stream to support mark/reset.
            // Unfortunately, not all ServletInputStream implementations are marking, so we need do
            // this memory-expensive wrapping to make it work. It's far from ideal but I don't have
            // a more efficient solution.
            byte[] bytes = new byte[1024 * 4];
            inputStream.mark(bytes.length);
            inputStream.read(bytes);
            inputStream.reset();

            CharsetDetector detector = new CharsetDetector();
            detector.setDeclaredEncoding("utf8"); // most of the content on the web is encoded in UTF-8 so start with that

            Reader reader = null;
            CharsetMatch[] charsetMatches = detector.setText(bytes).detectAll();
            for (CharsetMatch charsetMatch : charsetMatches) {
                try {
                    reader = new InputStreamReader(inputStream, charsetMatch.getName());

                    options.setProperty("encoding", charsetMatch.getName());
                    options.setProperty("encoding_confidence", Integer.toString(charsetMatch.getConfidence()));

                    logger.info("Best encoding guess: {} [confidence: {}]", charsetMatch.getName(), charsetMatch.getConfidence());

                    break;
                } catch (UnsupportedEncodingException e) {
                    // silent
                }
            }

            if (reader == null) { // when all else fails
                reader = encoding != null ?
                        new InputStreamReader(inputStream, encoding) :
                        new InputStreamReader(inputStream);
            }

            importer.read(reader, project, options);
        } else {
            importer.read(rawInputStream, project, options);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;internalInvokeImporter(Project,Importer,Properties,Reader);;;protected void internalInvokeImporter(
        Project     project,
        Importer    importer,
        Properties  options,
        Reader      reader
    ) throws Exception {
        importer.read(reader, project, options);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\CreateProjectCommand;guessImporter(String,String);;;protected Importer guessImporter(String contentType, String fileName) {
        for(Importer i : importers.values()){
            if(i.canImportData(contentType, fileName)){
                return i;
            }
        }

        return new TsvCsvImporter(); //default
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\DeleteProjectCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            long projectID = Long.parseLong(request.getParameter("project"));
            
            ProjectManager.singleton.deleteProject(projectID);
            
            respond(response, "{ \"code\" : \"ok\" }");
            
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\ExportProjectCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            ProjectManager.singleton.ensureProjectSaved(project.id);
            
            response.setHeader("Content-Type", "application/x-gzip");
            
            OutputStream os = response.getOutputStream();
            try {
                gzipTarToOutputStream(
                    ProjectManager.singleton.getProjectDir(project.id),
                    os
                );
            } finally {
                os.close();
            }
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\ExportProjectCommand;gzipTarToOutputStream(File,OutputStream);;;protected void gzipTarToOutputStream(File dir, OutputStream os) throws IOException {
        GZIPOutputStream gos = new GZIPOutputStream(os);
        try {
            tarToOutputStream(dir, gos);
        } finally {
            gos.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\ExportProjectCommand;tarToOutputStream(File,OutputStream);;;protected void tarToOutputStream(File dir, OutputStream os) throws IOException {
        TarOutputStream tos = new TarOutputStream(os);
        try {
            tarDir("", dir, tos);
        } finally {
            tos.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\ExportProjectCommand;tarDir(String,File,TarOutputStream);;;protected void tarDir(String relative, File dir, TarOutputStream tos) throws IOException {
        File[] files = dir.listFiles();
        for (File file : files) {
            if (!file.isHidden()) {
                String path = relative + file.getName();
                
                if (file.isDirectory()) {
                    tarDir(path + File.separator, file, tos);
                } else {
                    TarEntry entry = new TarEntry(path);
                    
                    entry.setMode(TarEntry.DEFAULT_FILE_MODE);
                    entry.setSize(file.length());
                    entry.setModTime(file.lastModified());
                    
                    tos.putNextEntry(entry);
                    
                    copyFile(file, tos);
                    
                    tos.closeEntry();
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\ExportProjectCommand;copyFile(File,OutputStream);;;protected void copyFile(File file, OutputStream os) throws IOException {
        final int buffersize = 4096;
        
        FileInputStream fis = new FileInputStream(file);
        try {
            byte[] buf = new byte[buffersize];
            int count;
            
            while((count = fis.read(buf, 0, buffersize)) != -1) {
                os.write(buf, 0, count);      
            }  
        } finally {
            fis.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\ExportRowsCommand;getRequestParameters(HttpServletRequest);;;@SuppressWarnings("unchecked")
	static public Properties getRequestParameters(HttpServletRequest request) {
        Properties options = new Properties();
        
        Enumeration<String> en = request.getParameterNames();
        while (en.hasMoreElements()) {
        	String name = en.nextElement();
        	options.put(name, request.getParameter(name));
        }
    	return options;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\ExportRowsCommand;doPost(HttpServletRequest,HttpServletResponse);;;public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        ProjectManager.singleton.setBusy(true);
        try {
            Project project = getProject(request);
            Engine engine = getEngine(request, project);
            String format = request.getParameter("format");
            Properties options = getRequestParameters(request);

            Exporter exporter = s_formatToExporter.get(format.toLowerCase());
            if (exporter == null){
                exporter = new CsvExporter('\t');
            }

            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", exporter.getContentType());

            if (exporter.takeWriter()) {
                PrintWriter writer = response.getWriter();
                exporter.export(project, options, engine, writer);
            } else {
                exporter.export(project, options, engine, response.getOutputStream());
            }
        } catch (Exception e) {
            respondException(response, e);
        } finally {
            ProjectManager.singleton.setBusy(false);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\GetModelsCommand;doGet(HttpServletRequest,HttpServletResponse);;;@Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        Project project = getProject(request);
        
        try {
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            
            Properties options = new Properties();
            JSONWriter writer = new JSONWriter(response.getWriter());
            
            writer.object();
            writer.key("columnModel"); project.columnModel.write(writer, options);
            writer.key("recordModel"); project.recordModel.write(writer, options);
            writer.key("protograph"); 
            if (project.protograph == null) {
                writer.value(null);
            } else {
                project.protograph.write(writer, options);
            }
            writer.endObject();
        } catch (JSONException e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\GetProjectMetadataCommand;doGet(HttpServletRequest,HttpServletResponse);;;@Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        Project project = getProject(request);
        
        try {
            respondJSON(response, ProjectManager.singleton.getProjectMetadata(project.id));
        } catch (JSONException e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\ImportProjectCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        ProjectManager.singleton.setBusy(true);
        try {
            Properties options = ParsingUtilities.parseUrlParameters(request);
            
            long projectID = Project.generateID();
            logger.info("Importing existing project using new ID {}", projectID);
            
            internalImport(request, options, projectID);

            ProjectManager.singleton.importProject(projectID);
            
            ProjectMetadata pm = ProjectManager.singleton.getProjectMetadata(projectID);
            if (pm != null) {
                if (options.containsKey("project-name")) {
                    String projectName = options.getProperty("project-name");
                    if (projectName != null && projectName.length() > 0) {
                        pm.setName(projectName);
                    }
                }
                
                redirect(response, "/project.html?project=" + projectID);
            } else {
                redirect(response, "/error.html?redirect=index.html&msg=" +
                    ParsingUtilities.encode("Failed to import project")
                );
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            ProjectManager.singleton.setBusy(false);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\ImportProjectCommand;internalImport(HttpServletRequest,Properties,long);;;protected void internalImport(
        HttpServletRequest    request,
        Properties            options,
        long                  projectID
    ) throws Exception {
        
        String url = null;
        
        ServletFileUpload upload = new ServletFileUpload();
        
        FileItemIterator iter = upload.getItemIterator(request);
        while (iter.hasNext()) {
            FileItemStream item = iter.next();
            String name = item.getFieldName().toLowerCase();
            InputStream stream = item.openStream();
            if (item.isFormField()) {
                if (name.equals("url")) {
                    url = Streams.asString(stream);
                } else {
                    options.put(name, Streams.asString(stream));
                }
            } else {
                String fileName = item.getName().toLowerCase();
                try {
                    internalImportInputStream(projectID, stream, !fileName.endsWith(".tar"));
                } finally {
                    stream.close();
                }
            }
        }        

        if (url != null && url.length() > 0) {
            internalImportURL(request, options, projectID, url);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\ImportProjectCommand;internalImportURL(HttpServletRequest,Properties,long,String);;;protected void internalImportURL(
        HttpServletRequest    request,
        Properties            options,
        long                  projectID,
        String                urlString
    ) throws Exception {
        URL url = new URL(urlString);
        URLConnection connection = null;
        
        try {
            connection = url.openConnection();
            connection.setConnectTimeout(5000);
            connection.connect();
        } catch (Exception e) {
            throw new Exception("Cannot connect to " + urlString, e);
        }
        
        InputStream inputStream = null;
        try {
            inputStream = connection.getInputStream();
        } catch (Exception e) {
            throw new Exception("Cannot retrieve content from " + url, e);
        }
        
        try {
            internalImportInputStream(projectID, inputStream, !urlString.endsWith(".tar"));
        } finally {
            inputStream.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\ImportProjectCommand;internalImportInputStream(long,InputStream,boolean);;;protected void internalImportInputStream(long projectID, InputStream inputStream, boolean gziped) throws IOException {
        File destDir = ProjectManager.singleton.getProjectDir(projectID);
        destDir.mkdirs();
        
        if (gziped) {
            GZIPInputStream gis = new GZIPInputStream(inputStream);
            untar(destDir, gis);
        } else {
            untar(destDir, inputStream);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\ImportProjectCommand;untar(File,InputStream);;;protected void untar(File destDir, InputStream inputStream) throws IOException {
        TarInputStream tin = new TarInputStream(inputStream);
        TarEntry tarEntry = null;
        
        while ((tarEntry = tin.getNextEntry()) != null) {
            File destEntry = new File(destDir, tarEntry.getName());
            File parent = destEntry.getParentFile();
            
            if (!parent.exists()) {
                parent.mkdirs();
            }
            
            if (tarEntry.isDirectory()) {
                destEntry.mkdirs();
            } else {
                FileOutputStream fout = new FileOutputStream(destEntry);
                try {
                    tin.copyEntryContents(fout);
                } finally {
                    fout.close();
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\project\RenameProjectCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            String name = request.getParameter("name");
            ProjectMetadata pm = getProjectMetadata(request);
            
            pm.setName(name);
            
            respond(response, "{ \"code\" : \"ok\" }");
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\recon\ReconcileCommand;createOperation(Project,HttpServletRequest,JSONObject);;;@Override
    protected AbstractOperation createOperation(Project project,
            HttpServletRequest request, JSONObject engineConfig) throws Exception {
        
        String columnName = request.getParameter("columnName");
        String configString = request.getParameter("config");
        
        JSONTokener t = new JSONTokener(configString);
        JSONObject config = (JSONObject) t.nextValue();
        
        return new ReconOperation(engineConfig, columnName, ReconConfig.reconstruct(config));
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\recon\ReconDiscardJudgmentsCommand;createOperation(Project,HttpServletRequest,JSONObject);;;@Override
    protected AbstractOperation createOperation(Project project,
            HttpServletRequest request, JSONObject engineConfig) throws Exception {
        
        String columnName = request.getParameter("columnName");
        
        return new ReconDiscardJudgmentsOperation(engineConfig, columnName);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\recon\ReconJudgeOneCellCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            
            int rowIndex = Integer.parseInt(request.getParameter("row"));
            int cellIndex = Integer.parseInt(request.getParameter("cell"));
            Judgment judgment = Recon.stringToJudgment(request.getParameter("judgment"));
            
            ReconCandidate match = null;
            String topicID = request.getParameter("topicID");
            if (topicID != null) {
                String scoreString = request.getParameter("score");
                
                match = new ReconCandidate(
                    topicID,
                    request.getParameter("topicGUID"),
                    request.getParameter("topicName"),
                    request.getParameter("types").split(","),
                    scoreString != null ? Double.parseDouble(scoreString) : 100
                );
            }
        
            JudgeOneCellProcess process = new JudgeOneCellProcess(
                project, 
                "Judge one cell's recon result",
                judgment,
                rowIndex, 
                cellIndex, 
                match
            );
            
            HistoryEntry historyEntry = project.processManager.queueProcess(process);
            if (historyEntry != null) {
                /*
                 * If the process is done, write back the cell's data so that the
                 * client side can update its UI right away.
                 */
                JSONWriter writer = new JSONWriter(response.getWriter());
                
                Pool pool = new Pool();
                Properties options = new Properties();
                options.put("pool", pool);
                
                writer.object();
                writer.key("code"); writer.value("ok");
                writer.key("historyEntry"); historyEntry.write(writer, options);
                writer.key("cell"); process.newCell.write(writer, options);
                writer.key("pool"); pool.write(writer, options);
                writer.endObject();
            } else {
                respond(response, "{ \"code\" : \"pending\" }");
            }
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\recon\ReconJudgeOneCellCommand;JudgeOneCellProcess(Project,String,Judgment,int,int,ReconCandidate);;;JudgeOneCellProcess(
            Project project, 
            String briefDescription, 
            Judgment judgment, 
            int rowIndex, 
            int cellIndex, 
            ReconCandidate match
        ) {
            super(project, briefDescription);
            
            this.judgment = judgment;
            this.rowIndex = rowIndex;
            this.cellIndex = cellIndex;
            this.match = match;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\recon\ReconJudgeOneCellCommand;createHistoryEntry(long);;;protected HistoryEntry createHistoryEntry(long historyEntryID) throws Exception {
            Cell cell = _project.rows.get(rowIndex).getCell(cellIndex);
            if (cell == null || !ExpressionUtils.isNonBlankData(cell.value)) {
                throw new Exception("Cell is blank or error");
            }
            
            Column column = _project.columnModel.getColumnByCellIndex(cellIndex);
            if (column == null) {
                throw new Exception("No such column");
            }
            
            Judgment oldJudgment = cell.recon == null ? Judgment.None : cell.recon.judgment;
            
            newCell = new Cell(
                cell.value, 
                cell.recon == null ? new Recon(historyEntryID) : cell.recon.dup(historyEntryID)
            );
            
            String cellDescription = 
                "single cell on row " + (rowIndex + 1) + 
                ", column " + column.getName() + 
                ", containing \"" + cell.value + "\"";
            
            String description = null;
            
            newCell.recon.matchRank = -1;
            newCell.recon.judgmentAction = "single";
            newCell.recon.judgmentBatchSize = 1;
            
            if (judgment == Judgment.None) {
                newCell.recon.judgment = Recon.Judgment.None;
                newCell.recon.match = null;
                
                description = "Discard recon judgment for " + cellDescription;
            } else if (judgment == Judgment.New) {
                newCell.recon.judgment = Recon.Judgment.New;
                newCell.recon.match = null;
                
                description = "Mark to create new topic for " + cellDescription;
            } else {
                newCell.recon.judgment = Recon.Judgment.Matched;
                newCell.recon.match = this.match;
                
                for (int m = 0; m < newCell.recon.candidates.size(); m++) {
                    if (newCell.recon.candidates.get(m).topicGUID.equals(this.match.topicGUID)) {
                        newCell.recon.matchRank = m;
                        break;
                    }
                }
                
                description = "Match " + this.match.topicName +
                    " (" + match.topicID + ") to " + 
                    cellDescription;
            }
            
            ReconStats stats = column.getReconStats();
            if (stats == null) {
                stats = ReconStats.create(_project, cellIndex);
            } else {
                int newChange = 0;
                int matchChange = 0;
                
                if (oldJudgment == Judgment.New) {
                    newChange--;
                }
                if (oldJudgment == Judgment.Matched) {
                    matchChange--;
                }
                if (newCell.recon.judgment == Judgment.New) {
                    newChange++;
                }
                if (newCell.recon.judgment == Judgment.Matched) {
                    matchChange++;
                }
                
                stats = new ReconStats(
                    stats.nonBlanks, 
                    stats.newTopics + newChange, 
                    stats.matchedTopics + matchChange);
            }
            
            Change change = new ReconChange(
                new CellChange(rowIndex, cellIndex, cell, newCell), 
                column.getName(), 
                column.getReconConfig(),
                stats
            );
                
            return new HistoryEntry(
                historyEntryID, _project, description, null, change);
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\recon\ReconJudgeSimilarCellsCommand;createOperation(Project,HttpServletRequest,JSONObject);;;@Override
    protected AbstractOperation createOperation(
            Project project, HttpServletRequest request, JSONObject engineConfig) throws Exception {
        
        String columnName = request.getParameter("columnName");
        String similarValue = request.getParameter("similarValue");
        Judgment judgment = Recon.stringToJudgment(request.getParameter("judgment"));
        
        ReconCandidate match = null;
        String topicID = request.getParameter("topicID");
        if (topicID != null) {
            String scoreString = request.getParameter("score");
            
            match = new ReconCandidate(
                topicID,
                request.getParameter("topicGUID"),
                request.getParameter("topicName"),
                request.getParameter("types").split(","),
                scoreString != null ? Double.parseDouble(scoreString) : 100
            );
        }
        
        String shareNewTopics = request.getParameter("shareNewTopics");
        
        return new ReconJudgeSimilarCellsOperation(
            engineConfig, 
            columnName,
            similarValue,
            judgment,
            match,
            "true".equals(shareNewTopics)
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\recon\ReconMarkNewTopicsCommand;createOperation(Project,HttpServletRequest,JSONObject);;;@Override
    protected AbstractOperation createOperation(Project project,
            HttpServletRequest request, JSONObject engineConfig) throws Exception {
        
        return new ReconMarkNewTopicsOperation(
            engineConfig, 
            request.getParameter("columnName"),
            "true".equals(request.getParameter("shareNewTopics"))
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\recon\ReconMatchBestCandidatesCommand;createOperation(Project,HttpServletRequest,JSONObject);;;@Override
    protected AbstractOperation createOperation(Project project,
            HttpServletRequest request, JSONObject engineConfig) throws Exception {
        
        String columnName = request.getParameter("columnName");
        
        return new ReconMatchBestCandidatesOperation(engineConfig, columnName);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\recon\ReconMatchSpecificTopicCommand;createOperation(Project,HttpServletRequest,JSONObject);;;@Override
    protected AbstractOperation createOperation(Project project,
            HttpServletRequest request, JSONObject engineConfig) throws Exception {
        
        String columnName = request.getParameter("columnName");
        ReconCandidate match = new ReconCandidate(
            request.getParameter("topicID"),
            request.getParameter("topicGUID"),
            request.getParameter("topicName"),
            request.getParameter("types").split(","),
            100
        );
        
        return new ReconMatchSpecificTopicOperation(engineConfig, columnName, match);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\row\AnnotateOneRowCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        response.setCharacterEncoding("UTF-8");
        response.setHeader("Content-Type", "application/json");
        
        try {
            Project project = getProject(request);
            
            int rowIndex = Integer.parseInt(request.getParameter("row"));
            
            String starredString = request.getParameter("starred");
            if (starredString != null) {
                boolean starred = "true".endsWith(starredString);
                String description = (starred ? "Star row " : "Unstar row ") + (rowIndex + 1); 

                StarOneRowProcess process = new StarOneRowProcess(
                    project, 
                    description,
                    rowIndex, 
                    starred
                );
                
                performProcessAndRespond(request, response, project, process);
                return;
            }

            String flaggedString = request.getParameter("flagged");
            if (flaggedString != null) {
                boolean flagged = "true".endsWith(flaggedString);
                String description = (flagged ? "Flag row " : "Unflag row ") + (rowIndex + 1); 

                FlagOneRowProcess process = new FlagOneRowProcess(
                    project, 
                    description,
                    rowIndex, 
                    flagged
                );
                
                performProcessAndRespond(request, response, project, process);
                return;
            }

            respond(response, "{ \"code\" : \"error\", \"message\" : \"invalid command parameters\" }");
            
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\row\AnnotateOneRowCommand;StarOneRowProcess(Project,String,int,boolean);;;StarOneRowProcess(
            Project project, 
            String briefDescription, 
            int rowIndex, 
            boolean starred
        ) {
            super(project, briefDescription);
            
            this.rowIndex = rowIndex;
            this.starred = starred;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\row\AnnotateOneRowCommand;createHistoryEntry(long);;;protected HistoryEntry createHistoryEntry(long historyEntryID) throws Exception {
            return new HistoryEntry(
                historyEntryID,
                _project, 
                (starred ? "Star row " : "Unstar row ") + (rowIndex + 1), 
                null, 
                new RowStarChange(rowIndex, starred)
            );
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\row\AnnotateOneRowCommand;FlagOneRowProcess(Project,String,int,boolean);;;FlagOneRowProcess(
            Project project, 
            String briefDescription, 
            int rowIndex, 
            boolean flagged
        ) {
            super(project, briefDescription);
            
            this.rowIndex = rowIndex;
            this.flagged = flagged;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\row\AnnotateOneRowCommand;createHistoryEntry(long);;;protected HistoryEntry createHistoryEntry(long historyEntryID) throws Exception {
            return new HistoryEntry(
                historyEntryID,
                _project, 
                (flagged ? "Flag row " : "Unflag row ") + (rowIndex + 1), 
                null, 
                new RowFlagChange(rowIndex, flagged)
            );
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\row\AnnotateRowsCommand;createOperation(Project,HttpServletRequest,JSONObject);;;@Override
    protected AbstractOperation createOperation(Project project,
            HttpServletRequest request, JSONObject engineConfig) throws Exception {
        
        String starredString = request.getParameter("starred");
        if (starredString != null) {
            boolean starred = "true".endsWith(starredString);
            
            return new RowStarOperation(engineConfig, starred);
        }
        
        String flaggedString = request.getParameter("flagged");
        if (flaggedString != null) {
            boolean flagged = "true".endsWith(flaggedString);
            
            return new RowFlagOperation(engineConfig, flagged);
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\row\DenormalizeCommand;doPost(HttpServletRequest,HttpServletResponse);;;@Override
    public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            
            AbstractOperation op = new DenormalizeOperation();
            Process process = op.createProcess(project, new Properties());
            
            performProcessAndRespond(request, response, project, process);
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\row\GetRowsCommand;doPost(HttpServletRequest,HttpServletResponse);;;public void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            Project project = getProject(request);
            Engine engine = getEngine(request, project);
            
            int start = Math.min(project.rows.size(), Math.max(0, getIntegerParameter(request, "start", 0)));
            int limit = Math.min(project.rows.size() - start, Math.max(0, getIntegerParameter(request, "limit", 20)));
            
            Pool pool = new Pool();
            Properties options = new Properties();
            options.put("project", project);
            options.put("reconCandidateOmitTypes", true);
            options.put("pool", pool);
            
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            
            JSONWriter writer = new JSONWriter(response.getWriter());
            writer.object();
            
            RowWritingVisitor rwv = new RowWritingVisitor(start, limit, writer, options);
            
            JSONObject sortingJson = null;
            try{
                String json = request.getParameter("sorting");
                sortingJson = (json == null) ? null : 
                	ParsingUtilities.evaluateJsonStringToObject(json);
            } catch (JSONException e) {
            }

            if (engine.getMode() == Mode.RowBased) {
                FilteredRows filteredRows = engine.getAllFilteredRows();
                RowVisitor visitor = rwv;
                
                if (sortingJson != null) {
                	SortingRowVisitor srv = new SortingRowVisitor(visitor);
                	
                	srv.initializeFromJSON(project, sortingJson);
            		if (srv.hasCriteria()) {
            			visitor = srv;
            		}
                }
                
                writer.key("mode"); writer.value("row-based");
                writer.key("rows"); writer.array();
                filteredRows.accept(project, visitor);
                writer.endArray();
                writer.key("filtered"); writer.value(rwv.total);
                writer.key("total"); writer.value(project.rows.size());
            } else {
                FilteredRecords filteredRecords = engine.getFilteredRecords();
                RecordVisitor visitor = rwv;
                
                if (sortingJson != null) {
                	SortingRecordVisitor srv = new SortingRecordVisitor(visitor);
                	
                	srv.initializeFromJSON(project, sortingJson);
            		if (srv.hasCriteria()) {
            			visitor = srv;
            		}
                }
                
                writer.key("mode"); writer.value("record-based");
                writer.key("rows"); writer.array();
                filteredRecords.accept(project, visitor);
                writer.endArray();
                writer.key("filtered"); writer.value(rwv.total);
                writer.key("total"); writer.value(project.recordModel.getRecordCount());
            }
            
            
            writer.key("start"); writer.value(start);
            writer.key("limit"); writer.value(limit);
            writer.key("pool"); pool.write(writer, options);
            
            writer.endObject();
        } catch (Exception e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\row\GetRowsCommand;RowWritingVisitor(int,int,JSONWriter,Properties);;;public RowWritingVisitor(int start, int limit, JSONWriter writer, Properties options) {
            this.start = start;
            this.limit = limit;
            this.writer = writer;
            this.options = options;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\row\GetRowsCommand;visit(Project,int,Row);;;public boolean visit(Project project, int rowIndex, Row row) {
            if (total >= start && total < start + limit) {
                internalVisit(project, rowIndex, row);
            }
        	total++;
        	
            return false;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\row\GetRowsCommand;internalVisit(Project,int,Row);;;public boolean internalVisit(Project project, int rowIndex, Row row) {
            try {
                options.put("rowIndex", rowIndex);
                row.write(writer, options);
            } catch (JSONException e) {
            }
            return false;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\row\GetRowsCommand;internalVisit(Project,Record);;;protected boolean internalVisit(Project project, Record record) {
            options.put("recordIndex", record.recordIndex);
            
        	for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {
                try {
                	Row row = project.rows.get(r);
                	
                    options.put("rowIndex", r);
                    
                    row.write(writer, options);
                    
                } catch (JSONException e) {
                }
                
                options.remove("recordIndex");
        	}
        	return false;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\row\RemoveRowsCommand;createOperation(Project,HttpServletRequest,JSONObject);;;@Override
    protected AbstractOperation createOperation(Project project,
            HttpServletRequest request, JSONObject engineConfig) throws Exception {
        
        return new RowRemovalOperation(engineConfig);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\row\ReorderRowsCommand;createOperation(Project,HttpServletRequest,JSONObject);;;@Override
    protected AbstractOperation createOperation(Project project,
            HttpServletRequest request, JSONObject engineConfig) throws Exception {
    	
    	String mode = request.getParameter("mode");
    	JSONObject sorting = null;
    	
        try{
            String json = request.getParameter("sorting");
            
            sorting = (json == null) ? null : ParsingUtilities.evaluateJsonStringToObject(json);
        } catch (JSONException e) {
        	// ignore
        }

        return new RowReorderOperation(Engine.stringToMode(mode), sorting);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\commands\workspace\GetAllProjectMetadataCommand;doGet(HttpServletRequest,HttpServletResponse);;;@Override
    public void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        try {
            response.setCharacterEncoding("UTF-8");
            response.setHeader("Content-Type", "application/json");
            
            JSONWriter writer = new JSONWriter(response.getWriter());
            Properties options = new Properties();
            
            writer.object();
            writer.key("projects");
                writer.object();
                Map<Long, ProjectMetadata> m = ProjectManager.singleton.getAllProjectMetadata();
                for (Entry<Long,ProjectMetadata> e : m.entrySet()) {
                    ProjectMetadata pm = e.getValue();
                    if (pm != null) {
                        writer.key(e.getKey().toString());
                        e.getValue().write(writer, options);
                    }
                }
                writer.endObject();
            writer.endObject();
        } catch (JSONException e) {
            respondException(response, e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\CsvExporter;CsvExporter();public CsvExporter(){
        separator = ','; //Comma separated-value is default
    };;public CsvExporter() {
        separator = ','; //Comma separated-value is default
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\CsvExporter;CsvExporter(char);public CsvExporter(char separator){
        this.separator = separator;
    };;public CsvExporter(char separator) {
        this.separator = separator;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\Exporter;getContentType();;;public String getContentType();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\Exporter;takeWriter();;;public boolean takeWriter();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\Exporter;export(Project,Properties,Engine,OutputStream);;;public void export(Project project, Properties options, Engine engine, OutputStream outputStream) throws IOException;
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\Exporter;export(Project,Properties,Engine,Writer);;;public void export(Project project, Properties options, Engine engine, Writer writer) throws IOException;
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\HtmlTableExporter;getContentType();;;public String getContentType() {
        return "text/html";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\HtmlTableExporter;takeWriter();;;public boolean takeWriter() {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\HtmlTableExporter;export(Project,Properties,Engine,OutputStream);;;public void export(Project project, Properties options, Engine engine,
            OutputStream outputStream) throws IOException {
        throw new RuntimeException("Not implemented");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\ProtographTransposeExporter;ProtographTransposeExporter(String);;;public ProtographTransposeExporter(String contentType) {
		_contentType = contentType;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\ProtographTransposeExporter;getContentType();;;public String getContentType() {
        return "application/x-unknown";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\ProtographTransposeExporter;takeWriter();;;public boolean takeWriter() {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\ProtographTransposeExporter;export(Project,Properties,Engine,OutputStream);;;public void export(Project project, Properties options, Engine engine,
            OutputStream outputStream) throws IOException {
        throw new RuntimeException("Not implemented");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\ProtographTransposeExporter;export(Project,Properties,Engine,Writer);;;public void export(Project project, Properties options, Engine engine,
            Writer writer) throws IOException {
        
        if (project.protograph != null) {
            Protograph protograph = project.protograph;
            
            TransposedNodeFactory nodeFactory = createNodeFactory(writer);
            
            Transposer.transpose(project, engine.getAllFilteredRows(), protograph, protograph.getRootNode(0), nodeFactory, -1);
            
            nodeFactory.flush();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\ProtographTransposeExporter;createNodeFactory(Writer);;;abstract protected TransposedNodeFactory createNodeFactory(Writer writer);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\ProtographTransposeExporter;TripleLoaderExporter();;;public TripleLoaderExporter() {
			super("application/x-unknown");
		}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\ProtographTransposeExporter;createNodeFactory(Writer);;;@Override
		protected TransposedNodeFactory createNodeFactory(Writer writer) {
			return new TripleLoaderTransposedNodeFactory(writer);
		}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\ProtographTransposeExporter;MqlwriteLikeExporter();;;public MqlwriteLikeExporter() {
			super("application/x-unknown");
		}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\ProtographTransposeExporter;createNodeFactory(Writer);;;@Override
		protected TransposedNodeFactory createNodeFactory(Writer writer) {
			return new MqlwriteLikeTransposedNodeFactory(writer);
		}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\TemplatingExporter;getContentType();;;public String getContentType() {
        return "application/x-unknown";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\TemplatingExporter;takeWriter();;;public boolean takeWriter() {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\TemplatingExporter;export(Project,Properties,Engine,OutputStream);;;public void export(Project project, Properties options, Engine engine,
            OutputStream outputStream) throws IOException {
        throw new RuntimeException("Not implemented");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\TemplatingExporter;export(Project,Properties,Engine,Writer);;;public void export(Project project, Properties options, Engine engine, Writer writer) throws IOException {
    	String limitString = options.getProperty("limit");
    	int limit = limitString != null ? Integer.parseInt(limitString) : -1;
    	
        JSONObject sortingJson = null;
        try{
            String json = options.getProperty("sorting");
            sortingJson = (json == null) ? null : 
            	ParsingUtilities.evaluateJsonStringToObject(json);
        } catch (JSONException e) {
        }
        
        Template template;
        try {
			template = Parser.parse(options.getProperty("template"));
		} catch (ParsingException e) {
			throw new IOException("Missing or bad template", e);
		}
		
		template.setPrefix(options.getProperty("prefix"));
		template.setSuffix(options.getProperty("suffix"));
		template.setSeparator(options.getProperty("separator"));

        if (engine.getMode() == Mode.RowBased) {
            FilteredRows filteredRows = engine.getAllFilteredRows();
            RowVisitor visitor = template.getRowVisitor(writer, limit);
            
            if (sortingJson != null) {
            	try {
                	SortingRowVisitor srv = new SortingRowVisitor(visitor);
					srv.initializeFromJSON(project, sortingJson);
					
            		if (srv.hasCriteria()) {
            			visitor = srv;
            		}
				} catch (JSONException e) {
					e.printStackTrace();
				}
            }
            
            filteredRows.accept(project, visitor);
        } else {
            FilteredRecords filteredRecords = engine.getFilteredRecords();
            RecordVisitor visitor = template.getRecordVisitor(writer, limit);
            
            if (sortingJson != null) {
            	try {
            		SortingRecordVisitor srv = new SortingRecordVisitor(visitor);
            		srv.initializeFromJSON(project, sortingJson);
            		
            		if (srv.hasCriteria()) {
            			visitor = srv;
            		}
				} catch (JSONException e) {
					e.printStackTrace();
				}
            }
            
            filteredRecords.accept(project, visitor);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\XlsExporter;getContentType();;;public String getContentType() {
        return "application/xls";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\XlsExporter;takeWriter();;;public boolean takeWriter() {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\exporters\XlsExporter;export(Project,Properties,Engine,Writer);;;public void export(Project project, Properties options, Engine engine, Writer writer) throws IOException {
        throw new RuntimeException("Not implemented");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\CellTuple;CellTuple(Project,Row);;;public CellTuple(Project project, Row row) {
        this.project = project;
        this.row = row;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\CellTuple;getField(String,Properties);;;public Object getField(String name, Properties bindings) {
        Column column = project.columnModel.getColumnByName(name);
        if (column != null) {
            int cellIndex = column.getCellIndex();
            Cell cell = row.getCell(cellIndex);
            
            if (cell != null) {
                return new WrappedCell(project, name, cell);
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\CellTuple;fieldAlsoHasFields(String);;;public boolean fieldAlsoHasFields(String name) {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\EvalError;EvalError(String);;;public EvalError(String message) {
        this.message = message;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\EvalError;toString();;;public String toString() {
        return this.message;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\EvalError;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("type"); writer.value("error");
        writer.key("message"); writer.value(message);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\Evaluable;evaluate(Properties);;;public Object evaluate(Properties bindings);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\ExpressionUtils;createBindings(Project);;;static public Properties createBindings(Project project) {
        Properties bindings = new Properties();
        
        bindings.put("true", true);
        bindings.put("false", false);
        
        bindings.put("project", project);
        
        return bindings;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\ExpressionUtils;bind(Properties,Row,int,String,Cell);;;static public void bind(Properties bindings, Row row, int rowIndex, String columnName, Cell cell) {
        Project project = (Project) bindings.get("project");
        
        bindings.put("rowIndex", rowIndex);
        bindings.put("row", new WrappedRow(project, rowIndex, row));
        bindings.put("cells", new CellTuple(project, row));
        
        if (columnName != null) {
            bindings.put("columnName", columnName);
        }
        
        if (cell == null) {
            bindings.remove("cell");
            bindings.remove("value");
        } else {
            bindings.put("cell", new WrappedCell(project, columnName, cell));
            if (cell.value == null) {
                bindings.remove("value");
            } else {
                bindings.put("value", cell.value);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\ExpressionUtils;isError(Object);;;static public boolean isError(Object o) {
        return o != null && o instanceof EvalError;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\ExpressionUtils;isNonBlankData(Object);;;static public boolean isNonBlankData(Object o) {
        return 
            o != null && 
            !(o instanceof EvalError) &&
            (!(o instanceof String) || ((String) o).length() > 0);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\ExpressionUtils;isTrue(Object);;;static public boolean isTrue(Object o) {
        return o != null && 
            (o instanceof Boolean ? 
                ((Boolean) o).booleanValue() : 
                Boolean.parseBoolean(o.toString()));
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\ExpressionUtils;sameValue(Object,Object);;;static public boolean sameValue(Object v1, Object v2) {
        if (v1 == null) {
            return (v2 == null)
                    || (v2 instanceof String && ((String) v2).length() == 0);
        } else if (v2 == null) {
            return (v1 == null)
                    || (v1 instanceof String && ((String) v1).length() == 0);
        } else {
            return v1.equals(v2);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\ExpressionUtils;isStorable(Object);;;static public boolean isStorable(Object v) {
        return v == null ||
            v instanceof Number ||
            v instanceof String ||
            v instanceof Boolean ||
            v instanceof Date ||
            v instanceof Calendar ||
            v instanceof EvalError;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\ExpressionUtils;wrapStorable(Object);;;static public Serializable wrapStorable(Object v) {
        return isStorable(v) ? 
            (Serializable) v : 
            new EvalError(v.getClass().getSimpleName() + " value not storable");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\ExpressionUtils;isArray(Object);;;static public boolean isArray(Object v) {
        return v != null && v.getClass().isArray();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\ExpressionUtils;isArrayOrCollection(Object);;;static public boolean isArrayOrCollection(Object v) {
        return v != null && (v.getClass().isArray() || v instanceof Collection<?>);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\ExpressionUtils;isArrayOrList(Object);;;static public boolean isArrayOrList(Object v) {
        return v != null && (v.getClass().isArray() || v instanceof List<?>);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\ExpressionUtils;toObjectList(Object);;;@SuppressWarnings("unchecked")
    static public List<Object> toObjectList(Object v) {
        return (List<Object>) v;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\ExpressionUtils;toObjectCollection(Object);;;@SuppressWarnings("unchecked")
    static public Collection<Object> toObjectCollection(Object v) {
        return (Collection<Object>) v;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\HasFields;getField(String,Properties);;;public Object getField(String name, Properties bindings);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\HasFields;fieldAlsoHasFields(String);;;public boolean fieldAlsoHasFields(String name);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\HasFieldsList;length();;;public int length();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\HasFieldsListImpl;getField(String,Properties);;;public Object getField(String name, Properties bindings) {
        int c = size();
        if (c > 0 && get(0).fieldAlsoHasFields(name)) {
            HasFieldsListImpl l = new HasFieldsListImpl();
            for (int i = 0; i < size(); i++) {
                l.add(i, (HasFields) this.get(i).getField(name, bindings));
            }
            return l;
        } else {
            Object[] r = new Object[this.size()];
            for (int i = 0; i < r.length; i++) {
                r[i] = this.get(i).getField(name, bindings);
            }
            return r;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\HasFieldsListImpl;length();;;public int length() {
        return size();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\HasFieldsListImpl;fieldAlsoHasFields(String);;;public boolean fieldAlsoHasFields(String name) {
        int c = size();
        return (c > 0 && get(0).fieldAlsoHasFields(name));
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\JythonEvaluable;JythonEvaluable(String);;;public JythonEvaluable(String s) {
        // indent and create a function out of the code
        String[] lines = s.split("\r\n|\r|\n");
        
        StringBuffer sb = new StringBuffer(1024);
        sb.append("def ");
        sb.append(s_functionName);
        sb.append("(value, cell, cells, row, rowIndex):");
        for (int i = 0; i < lines.length; i++) {
            sb.append("\n  ");
            sb.append(lines[i]);
        }

        _engine.exec(sb.toString());
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\JythonEvaluable;evaluate(Properties);;;public Object evaluate(Properties bindings) {
        try {
            // call the temporary PyFunction directly
            Object result = ((PyFunction)_engine.get(s_functionName)).__call__(
                new PyObject[] {
                    Py.java2py( bindings.get("value") ),
                    new JythonHasFieldsWrapper((HasFields) bindings.get("cell"), bindings),
                    new JythonHasFieldsWrapper((HasFields) bindings.get("cells"), bindings),
                    new JythonHasFieldsWrapper((HasFields) bindings.get("row"), bindings),
                    Py.java2py( bindings.get("rowIndex") )
                }
            );

            return unwrap(result);
        } catch (PyException e) {
            return new EvalError(e.getMessage());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\JythonEvaluable;unwrap(Object);;;protected Object unwrap(Object result) {
        if (result != null) {
            if (result instanceof JythonObjectWrapper) {
                return ((JythonObjectWrapper) result)._obj;
            } else if (result instanceof JythonHasFieldsWrapper) {
                return ((JythonHasFieldsWrapper) result)._obj;
            } else if (result instanceof PyString) {
                return ((PyString) result).asString();
            } else if (result instanceof PyObject) {
                return unwrap((PyObject) result);
            }
        }
        
        return result;      
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\JythonEvaluable;unwrap(PyObject);;;protected Object unwrap(PyObject po) {
        if (po instanceof PyNone) {
            return null;
        } else if (po.isNumberType()) {
            return po.asDouble();
        } else if (po.isSequenceType()) {
            Iterator<PyObject> i = po.asIterable().iterator();
            
            List<Object> list = new ArrayList<Object>();
            while (i.hasNext()) {
                list.add(unwrap((Object) i.next()));
            }
            
            return list.toArray();
        } else {
            return po;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\JythonHasFieldsWrapper;JythonHasFieldsWrapper(HasFields,Properties);;;public JythonHasFieldsWrapper(HasFields obj, Properties bindings) {
        _obj = obj;
        _bindings = bindings;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\JythonHasFieldsWrapper;__finditem__(PyObject);;;public PyObject __finditem__(PyObject key) {
        String k = (String) key.__tojava__(String.class);
        Object v = _obj.getField(k, _bindings);
        if (v != null) {
            if (v instanceof PyObject) {
                return (PyObject) v;
            } else if (v instanceof HasFields) {
                return new JythonHasFieldsWrapper((HasFields) v, _bindings);
            } else if (Py.getAdapter().canAdapt(v)) {
                return Py.java2py(v);
            } else {
                return new JythonObjectWrapper(v);
            }
        } else {
            return null;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\JythonObjectWrapper;JythonObjectWrapper(Object);;;public JythonObjectWrapper(Object obj) {
        _obj = obj;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\JythonObjectWrapper;toString();;;public String toString() {
        return _obj.getClass().getSimpleName();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\MetaParser;parse(String);;;static public Evaluable parse(String s) throws ParsingException {
        String language = "gel";
        
        int colon = s.indexOf(':');
        if (colon >= 0) {
            language = s.substring(0, colon);
        }
        
        if ("jython".equalsIgnoreCase(language)) {
            return parseJython(s.substring(colon + 1));
        } else if ("clojure".equalsIgnoreCase(language)) {
            return parseClojure(s.substring(colon + 1));
        } else if ("gel".equalsIgnoreCase(language)) {
            return parseGEL(s.substring(colon + 1));
        } else {
            return parseGEL(s);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\MetaParser;parseGEL(String);;;static protected Evaluable parseGEL(String s) throws ParsingException {
        Parser parser = new Parser(s);
        
        return parser.getExpression();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\MetaParser;parseJython(String);;;static protected Evaluable parseJython(String s) throws ParsingException {
        return new JythonEvaluable(s);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\MetaParser;parseClojure(String);;;static protected Evaluable parseClojure(String s) throws ParsingException {
        try {
            IFn fn = (IFn) clojure.lang.Compiler.load(new StringReader(
                "(fn [value cell cells row rowIndex] " + s + ")"
            ));
            
            return new Evaluable() {
                private IFn _fn;
                
                public Evaluable init(IFn fn) {
                    _fn = fn;
                    return this;
                }
                
                public Object evaluate(Properties bindings) {
                    try {
                        return _fn.invoke(
                            bindings.get("value"),
                            bindings.get("cell"),
                            bindings.get("cells"),
                            bindings.get("row"),
                            bindings.get("rowIndex")
                        );
                    } catch (Exception e) {
                        return new EvalError(e.getMessage());
                    }
                }
            }.init(fn);
        } catch (Exception e) {
            throw new ParsingException(e.getMessage());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\ParsingException;ParsingException(String);;;public ParsingException(String message) {
        super(message);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\ParsingException;ParsingException(String,Throwable);;;public ParsingException(String message, Throwable cause) {
        super(message, cause);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\WrappedCell;WrappedCell(Project,String,Cell);;;public WrappedCell(Project project, String columnName, Cell cell) {
        this.project = project;
        this.columnName = columnName;
        this.cell = cell;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\WrappedCell;getField(String,Properties);;;public Object getField(String name, Properties bindings) {
        return cell.getField(name, bindings);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\WrappedCell;fieldAlsoHasFields(String);;;public boolean fieldAlsoHasFields(String name) {
        return cell.fieldAlsoHasFields(name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\WrappedRow;WrappedRow(Project,int,Row);;;public WrappedRow(Project project, int rowIndex, Row row) {
        this.project = project;
        this.rowIndex = rowIndex;
        this.row = row;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\WrappedRow;getField(String,Properties);;;public Object getField(String name, Properties bindings) {
        if ("cells".equals(name)) {
            return new CellTuple(project, row);
        } else if ("index".equals(name)) {
            return rowIndex;
        } else if ("record".equals(name)) {
            int rowIndex = (Integer) bindings.get("rowIndex");
            
            return new WrappedRecord(project.recordModel.getRecordOfRow(rowIndex));
        } else if ("columnNames".equals(name)) {
            Project project = (Project) bindings.get("project");
            
            return project.columnModel.getColumnNames();
        } else {
            return row.getField(name, bindings);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\WrappedRow;fieldAlsoHasFields(String);;;public boolean fieldAlsoHasFields(String name) {
        return row.fieldAlsoHasFields(name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\WrappedRow;WrappedRecord(Record);;;protected WrappedRecord(Record record) {
        	_record = record;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\WrappedRow;getField(String,Properties);;;public Object getField(String name, Properties bindings) {
            if ("cells".equals(name)) {
                return new RecordCells(_record);
            }
            return null;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\WrappedRow;fieldAlsoHasFields(String);;;public boolean fieldAlsoHasFields(String name) {
            return "cells".equals(name);
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\WrappedRow;RecordCells(Record);;;protected RecordCells(Record record) {
            _record = record;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\WrappedRow;getField(String,Properties);;;public Object getField(String name, Properties bindings) {
            Column column = project.columnModel.getColumnByName(name);
            if (column != null) {
                int cellIndex = column.getCellIndex();
                
                HasFieldsListImpl cells = new HasFieldsListImpl();
                for (int r = _record.fromRowIndex; r < _record.toRowIndex; r++) {
                    Row row = project.rows.get(r);
                    Cell cell = row.getCell(cellIndex);
                    if (cell != null && ExpressionUtils.isNonBlankData(cell.value)) {
                        cells.add(new WrappedCell(project, name, cell));
                    }
                }
                
                return cells;
            }
            return null;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\WrappedRow;fieldAlsoHasFields(String);;;public boolean fieldAlsoHasFields(String name) {
            return true;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\Cross;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 3) {
            // from project is implied
            
            Object wrappedCell = args[0]; // from cell
            Object toProjectName = args[1];
            Object toColumnName = args[2];
            
            if (wrappedCell != null && wrappedCell instanceof WrappedCell &&
                toProjectName != null && toProjectName instanceof String &&
                toColumnName != null && toColumnName instanceof String) {
                
                ProjectJoin join = ProjectManager.singleton.getInterProjectModel().getJoin(
                    ProjectManager.singleton.getProjectMetadata(
                            ((Project) bindings.get("project")).id).getName(),
                    ((WrappedCell) wrappedCell).columnName,
                    (String) toProjectName,
                    (String) toColumnName
                );
                
                return join.getRows(((WrappedCell) wrappedCell).cell.value);
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a cell, a project name to join with, and a column name in that project");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\Cross;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("TODO");
        writer.key("params"); writer.value("cell c, string projectName, string columnName");
        writer.key("returns"); writer.value("array");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\FacetCount;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 3 && args[1] instanceof String && args[2] instanceof String) {
        	Object choiceValue = args[0]; // choice value to look up
        	String facetExpression = (String) args[1];
        	String columnName = (String) args[2];
        	
        	Project project = (Project) bindings.get("project");
            Column column = project.columnModel.getColumnByName(columnName);
            if (column == null) {
                return new EvalError("No such column named " + columnName);
            }
            
            String key = "nominal-bin:" + facetExpression;
            ExpressionNominalValueGrouper grouper = (ExpressionNominalValueGrouper) column.getPrecompute(key);
            if (grouper == null) {
				try {
	            	Evaluable eval = MetaParser.parse(facetExpression);
	            	Engine engine = new Engine(project);
	            	
	            	grouper = new ExpressionNominalValueGrouper(eval, columnName, column.getCellIndex());
	            	engine.getAllRows().accept(project, grouper);
	            	
	                column.setPrecompute(key, grouper);
				} catch (ParsingException e) {
					return new EvalError("Error parsing facet expression " + facetExpression);
				}
            }
            
            return grouper.getChoiceValueCountMultiple(choiceValue);
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + 
        	" expects a choice value, an expression as a string, and a column name");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\FacetCount;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the facet count corresponding to the given choice value");
        writer.key("params"); writer.value("choiceValue, string facetExpression, string columnName");
        writer.key("returns"); writer.value("number");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\Get;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length > 1 && args.length <= 3) {
            Object v = args[0];
            Object from = args[1];
            Object to = (args.length == 3) ? args[2] : null;
            
            if (v != null && from != null) {
                if (v instanceof HasFields) {
                    if (from instanceof String) {
                        return ((HasFields) v).getField((String) from, bindings);
                    }
                } else {
                    if (from instanceof Number && (to == null || to instanceof Number)) {
                        if (v.getClass().isArray() || v instanceof List<?>) {
                            int length = v.getClass().isArray() ? 
                                ((Object[]) v).length :
                                ExpressionUtils.toObjectList(v).size();
                            
                            int start = ((Number) from).intValue();
                            if (start < 0) {
                                start = length + start;
                            }
                            start = Math.min(length, Math.max(0, start));
                            
                            if (to == null) {
                                return start >= length ? null :
                                    (v.getClass().isArray() ? 
                                        ((Object[]) v)[start] :
                                        ExpressionUtils.toObjectList(v).get(start));
                            } else {
                                int end = (to != null) ? ((Number) to).intValue() : length;
                                            
                                if (end < 0) {
                                    end = length + end;
                                }
                                end = Math.min(length, Math.max(start, end));
                                
                                if (end > start) {
                                    if (v.getClass().isArray()) {
                                        Object[] a2 = new Object[end - start];
                                        
                                        System.arraycopy((Object[]) v, start, a2, 0, end - start);
                                        
                                        return a2;
                                    } else {
                                        return ExpressionUtils.toObjectList(v).subList(start, end);
                                    }
                                }
                            }
                        } else {
                            String s = (v instanceof String) ? (String) v : v.toString();
                            
                            int start = ((Number) from).intValue();
                            if (start < 0) {
                                start = s.length() + start;
                            }
                            start = Math.min(s.length(), Math.max(0, start));
                            
                            if (to != null) {
                                int end = ((Number) to).intValue();
                                if (end < 0) {
                                    end = s.length() + end;
                                }
                                end = Math.min(s.length(), Math.max(start, end));
                                
                                return s.substring(start, end);
                            } else {
                                return s.substring(start, start + 1);
                            }
                        }
                    }
                }
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\Get;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value(
            "If o has fields, returns the field named 'from' of o. " +
            "If o is an array, returns o[from, to]. " +
            "if o is a string, returns o.substring(from, to)"
        );
        writer.key("params"); writer.value("o, number or string from, optional number to");
        writer.key("returns"); writer.value("Depends on actual arguments");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\Jsonize;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length >= 1) {
            Object o1 = args[0];
            if (o1 == null) {
            	return "null";
            } else if (o1 instanceof Number || o1 instanceof Boolean) {
            	return o1.toString();
            } else {
            	return JSONObject.quote(o1 instanceof String ? (String) o1 : o1.toString());
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\Jsonize;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Quotes a value as a JSON literal value");
        writer.key("params"); writer.value("value");
        writer.key("returns"); writer.value("JSON literal value");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\Length;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1) {
            Object v = args[0];
            
            if (v != null) {
                if (v.getClass().isArray()) {
                    Object[] a = (Object[]) v;
                    return a.length;
                } else if (v instanceof Collection<?>) {
                    return ((Collection<?>) v).size();
                } else {
                    String s = (v instanceof String ? (String) v : v.toString());
                    return s.length();
                }
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects an array or a string");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\Length;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the length of o");
        writer.key("params"); writer.value("array or string o");
        writer.key("returns"); writer.value("number");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\Slice;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length > 1 && args.length <= 3) {
            Object v = args[0];
            Object from = args[1];
            Object to = (args.length == 3) ? args[2] : null;
            
            if (v != null && from != null && from instanceof Number && (to == null || to instanceof Number)) {
                if (v.getClass().isArray() || v instanceof List<?>) {
                    int length = v.getClass().isArray() ? 
                            ((Object[]) v).length :
                            ExpressionUtils.toObjectList(v).size();
                    
                    int start = ((Number) from).intValue();
                    int end = (to != null) ? ((Number) to).intValue() : length;
                                
                    if (start < 0) {
                        start = length + start;
                    }
                    start = Math.min(length, Math.max(0, start));
                    
                    if (end < 0) {
                        end = length + end;
                    }
                    end = Math.min(length, Math.max(start, end));
                    
                    if (v.getClass().isArray()) {
                        Object[] a2 = new Object[end - start];
                        
                        System.arraycopy((Object[]) v, start, a2, 0, end - start);
                        
                        return a2;
                    } else {
                        return ExpressionUtils.toObjectList(v).subList(start, end);
                    }
                } else {
                    String s = (v instanceof String) ? (String) v : v.toString();
                    
                    int start = ((Number) from).intValue();
                    if (start < 0) {
                        start = s.length() + start;
                    }
                    start = Math.min(s.length(), Math.max(0, start));
                    
                    if (to != null) {
                        int end = ((Number) to).intValue();
                        if (end < 0) {
                            end = s.length() + end;
                        }
                        end = Math.min(s.length(), Math.max(start, end));
                        
                        return s.substring(start, end);
                    } else {
                        return s.substring(start);
                    }
                }
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\Slice;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value(
            "If o is an array, returns o[from, to]. " +
            "if o is a string, returns o.substring(from, to)"
        );
        writer.key("params"); writer.value("o, number from, optional number to");
        writer.key("returns"); writer.value("Depends on actual arguments");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\ToDate;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 0) {
            // missing value, can this happen?
            return null;
        }
        if (!(args[0] instanceof String)) {
            // ignore cell values that aren't strings
            return null;
        }
        String o1 = (String) args[0];

        // "o, boolean month_first (optional)"
        if (args.length == 1 || (args.length == 2 && args[1] instanceof Boolean)) {
            boolean month_first = true;
            if (args.length == 2) {
                month_first = (Boolean) args[1];
            }
            try {
                return CalendarParser.parse( o1, (month_first) ? CalendarParser.MM_DD_YY : CalendarParser.DD_MM_YY);
            } catch (CalendarParserException e) {
                // do something about 
            }
        }

        // "o, format1, format2 (optional), ..."
        if (args.length>=2) {
            for (int i=1;i<args.length;i++) {
                if (!(args[i] instanceof String)) {
                    // skip formats that aren't strings
                    continue;
                }
                String format  = (String) args[i];
                SimpleDateFormat formatter = new SimpleDateFormat(format);
                Date date = null;
                try {
                    date = formatter.parse(o1);
                } catch (java.text.ParseException e) {
                    // ignore
                }
                if (date != null) {
                    GregorianCalendar c = new GregorianCalendar();
                    c.setTime(date);
                    return c;
                }
            }
        }

        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\ToDate;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
    throws JSONException {

        writer.object();
        writer.key("description"); writer.value("Returns o converted to a date object, you can hint if the day or the month is listed first, or give an ordered list of possible formats using this syntax: http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html");
        writer.key("params"); writer.value("o, boolean month_first / format1, format2, ... (all optional)");
        writer.key("returns"); writer.value("date");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\ToNumber;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1 && args[0] != null) {
            if (args[0] instanceof Number) {
                return args[0];
            } else {
                String s = args[0].toString();
                try {
                    return Double.parseDouble(s);
                } catch (NumberFormatException e) {
                    return new EvalError("Cannot parse to number");
                }
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\ToNumber;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns o converted to a number");
        writer.key("params"); writer.value("o");
        writer.key("returns"); writer.value("number");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\ToString;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length >= 1) {
            Object o1 = args[0];
            if (o1 != null) {
                if (o1 instanceof Calendar) {
                    if (args.length == 2) {
                       Object o2 = args[1];
                       if (o2 != null && o2 instanceof String) {
                           SimpleDateFormat formatter = new SimpleDateFormat((String) o2);
                           return formatter.format(((Calendar) o1).getTime());
                       }
                    }
                } else {
                    return (o1 instanceof String) ? o1 : o1.toString();
                }
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\ToString;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns o converted to a string");
        writer.key("params"); writer.value("o, string format (optional)");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\Type;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1) {
            Object v = args[0];
            
            if (v != null) {
                if (v instanceof String) {
                    return "string";
                } else if (v instanceof Calendar || v instanceof Date) {
                    return "date";
                } else if (v instanceof Number) {
                    return "number";
                } else if (v.getClass().isArray() || v instanceof List<?>) {
                    return "array";
                } else if (v instanceof EvalError) {
                    return "error";
                } else {
                    return v.getClass().getName();
                }
            }
            return "undefined";
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects one argument");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\Type;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the type of o");
        writer.key("params"); writer.value("object o");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\arrays\ArgsToArray;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
    	return args;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\arrays\ArgsToArray;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns all arguments passed to it as an array");
        writer.key("params"); writer.value("a1, a2, ...");
        writer.key("returns"); writer.value("array");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\arrays\Join;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 2) {
            Object v = args[0];
            Object s = args[1];
            
            if (v != null && (v.getClass().isArray() || v instanceof List<?>) &&
                s != null && s instanceof String) {
                
                String separator = (String) s;
                
                StringBuffer sb = new StringBuffer();
                if (v.getClass().isArray()) {
                    for (Object o : (Object[]) v) {
                        if (o != null) {
                            if (sb.length() > 0) {
                                sb.append(separator);
                            }
                            sb.append(o.toString());
                        }
                    }
                } else {
                    for (Object o : ExpressionUtils.toObjectList(v)) {
                        if (o != null) {
                            if (sb.length() > 0) {
                                sb.append(separator);
                            }
                            sb.append(o.toString());
                        }
                    }
                }
                
                return sb.toString();
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects an array and a string");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\arrays\Join;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the string obtained by joining the array a with the separator sep");
        writer.key("params"); writer.value("array a, string sep");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\arrays\Reverse;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1) {
            Object v = args[0];
            
            if (v != null && (v.getClass().isArray() || v instanceof List<?>)) {
                int length = v.getClass().isArray() ? 
                        ((Object[]) v).length :
                        ExpressionUtils.toObjectList(v).size();
                
                Object[] r = new Object[length];
                if (v.getClass().isArray()) {
                    Object[] a = (Object[]) v;
                    for (int i = 0; i < length; i++) {
                        r[i] = a[r.length - i - 1];
                    }
                } else {
                    List<Object> a = ExpressionUtils.toObjectList(v);
                    for (int i = 0; i < length; i++) {
                        r[i] = a.get(r.length - i - 1);
                    }
                }
                return r;
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects an array");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\arrays\Reverse;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Reverses array a");
        writer.key("params"); writer.value("array a");
        writer.key("returns"); writer.value("array");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\arrays\Sort;call(Properties,Object[]);;;@SuppressWarnings("unchecked")
    public Object call(Properties bindings, Object[] args) {
        if (args.length == 1) {
            Object v = args[0];
            
            if (v != null) {
                if (v.getClass().isArray()) {
                    Object[] a = (Object[]) v;
                    Object[] r = a.clone();
                    
                    Arrays.sort(r, 0, r.length);
                    
                    return r;
                } else if (v instanceof List<?>) {
                    List<? extends Comparable> a = (List<? extends Comparable>) v;
                    Collections.sort(a);
                    
                    return a;
                }
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects an array");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\arrays\Sort;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Sorts array a");
        writer.key("params"); writer.value("array a");
        writer.key("returns"); writer.value("array");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\booleans\And;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        for (Object o : args) {
            if (!Not.objectToBoolean(o)) {
                return false;
            }
        }
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\booleans\And;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("description"); writer.value("ANDs two boolean values");
        writer.key("params"); writer.value("boolean a, boolean b");
        writer.key("returns"); writer.value("boolean");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\booleans\Not;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1) {
            return !objectToBoolean(args[0]);
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a boolean");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\booleans\Not;objectToBoolean(Object);;;public static boolean objectToBoolean(Object o) {
        return o == null ? false : (
            (o instanceof Boolean) ? ((Boolean) o).booleanValue() : Boolean.parseBoolean(o.toString()));
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\booleans\Not;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the opposite of b");
        writer.key("params"); writer.value("boolean b");
        writer.key("returns"); writer.value("boolean");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\booleans\Or;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        for (Object o : args) {
            if (Not.objectToBoolean(o)) {
                return true;
            }
        }
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\booleans\Or;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns a OR b");
        writer.key("params"); writer.value("boolean a, boolean b");
        writer.key("returns"); writer.value("boolean");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\date\DatePart;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 2 && 
                args[0] != null && (args[0] instanceof Calendar || args[0] instanceof Date) && 
                args[1] != null && args[1] instanceof String) {
            
            String part = (String) args[1];
            if (args[0] instanceof Calendar) {
                return getPart((Calendar) args[0], part);
            } else {
                Calendar c = Calendar.getInstance();
                c.setTime((Date) args[0]);
                
                return getPart(c, part);
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a date, a number and a string");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\date\DatePart;getPart(Calendar,String);;;private Object getPart(Calendar c, String part) {
        if ("hours".equals(part) || "hour".equals(part) || "h".equals(part)) {
            return c.get(Calendar.HOUR_OF_DAY);
        } else if ("minutes".equals(part) || "minute".equals(part) || "min".equals(part)) { // avoid 'm' to avoid confusion with month
            return c.get(Calendar.MINUTE);
        } else if ("seconds".equals(part) || "sec".equals(part) || "s".equals(part)) {
            return c.get(Calendar.SECOND);
            
        } else if ("years".equals(part) || "year".equals(part)) {
            return c.get(Calendar.YEAR);
        } else if ("months".equals(part) || "month".equals(part)) { // avoid 'm' to avoid confusion with minute
            return c.get(Calendar.MONTH);
        } else if ("weeks".equals(part) || "week".equals(part) || "w".equals(part)) {
            return c.get(Calendar.WEEK_OF_MONTH);
        } else if ("days".equals(part) || "day".equals(part) || "d".equals(part)) {
            return c.get(Calendar.DAY_OF_MONTH);
        } else if ("weekday".equals(part)) {
            int r = c.get(Calendar.DAY_OF_WEEK);
            
            return s_daysOfWeek[r];
            
        } else if ("time".equals(part)) {
            return c.getTimeInMillis();
            
        } else {
            return new EvalError("Date unit '" + part + "' not recognized.");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\date\DatePart;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options) throws JSONException {
        writer.object();
        writer.key("description"); writer.value("Returns part of a date");
        writer.key("params"); writer.value("date d, string part");
        writer.key("returns"); writer.value("date");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\date\Inc;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 3 && 
                args[0] != null && args[0] instanceof Calendar && 
                args[1] != null && args[1] instanceof Number && 
                args[2] != null && args[2] instanceof String) {
            Calendar date = (Calendar) args[0];
            int amount = ((Number) args[1]).intValue();
            String unit = (String) args[2];
            
            date.add(getField(unit), amount);
            
            return date; 
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a date, a number and a string");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\date\Inc;getField(String);;;private int getField(String unit) {
        if ("hours".equals(unit) || "hour".equals(unit) || "h".equals(unit)) {
            return Calendar.HOUR;
        } else if ("days".equals(unit) || "day".equals(unit) || "d".equals(unit)) {
            return Calendar.DAY_OF_MONTH;
        } else if ("years".equals(unit) || "year".equals(unit)) {
            return Calendar.YEAR;
        } else if ("months".equals(unit) || "month".equals(unit)) { // avoid 'm' to avoid confusion with minute
            return Calendar.MONTH;
        } else if ("minutes".equals(unit) || "minute".equals(unit) || "min".equals(unit)) { // avoid 'm' to avoid confusion with month
            return Calendar.MINUTE;
        } else if ("weeks".equals(unit) || "week".equals(unit) || "w".equals(unit)) {
            return Calendar.WEEK_OF_MONTH;
        } else if ("seconds".equals(unit) || "sec".equals(unit) || "s".equals(unit)) {
            return Calendar.SECOND;
        } else {
            throw new RuntimeException("Unit '" + unit + "' not recognized.");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\date\Inc;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options) throws JSONException {
        writer.object();
        writer.key("description"); writer.value("Returns a date changed by the given amount in the given unit of time");
        writer.key("params"); writer.value("date d, number value, string unit (default to 'hour')");
        writer.key("returns"); writer.value("date");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\date\Now;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 0) {
            return Calendar.getInstance();
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\date\Now;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the current time");
        writer.key("returns"); writer.value("date");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Ceil;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
            return (long) Math.ceil(((Number) args[0]).doubleValue());
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Ceil;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the ceiling of a number");
        writer.key("params"); writer.value("number d");
        writer.key("returns"); writer.value("number");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Exp;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1 && args[0] instanceof Number) {
            return Math.exp(((Number) args[0]).doubleValue());
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Exp;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns e^n");
        writer.key("params"); writer.value("number n");
        writer.key("returns"); writer.value("number");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Floor;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
            return (long) Math.floor(((Number) args[0]).doubleValue());
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Floor;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the floor of a number");
        writer.key("params"); writer.value("number d");
        writer.key("returns"); writer.value("number");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Ln;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
            return Math.log(((Number) args[0]).doubleValue());
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Ln;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the natural log of n");
        writer.key("params"); writer.value("number n");
        writer.key("returns"); writer.value("number");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Log;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
            return Math.log10(((Number) args[0]).doubleValue());
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Log;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the base 10 log of n");
        writer.key("params"); writer.value("number n");
        writer.key("returns"); writer.value("number");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Max;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 2 && 
                args[0] != null && args[0] instanceof Number &&
                args[1] != null && args[1] instanceof Number) {
            return Math.max(
                ((Number) args[0]).doubleValue(),
                ((Number) args[1]).doubleValue());
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 numbers");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Max;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the greater of two numbers");
        writer.key("params"); writer.value("number a, number b");
        writer.key("returns"); writer.value("number");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Min;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 2 && 
                args[0] != null && args[0] instanceof Number && 
                args[1] != null && args[1] instanceof Number) {
            return Math.min(
                ((Number) args[0]).doubleValue(),
                ((Number) args[1]).doubleValue());
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 numbers");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Min;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the smaller of two numbers");
        writer.key("params"); writer.value("number a, number b");
        writer.key("returns"); writer.value("number");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Mod;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 2 && 
                args[0] != null && args[0] instanceof Number && 
                args[1] != null && args[1] instanceof Number) {
            int a = ((Number) args[0]).intValue();
            int b = ((Number) args[0]).intValue();
            
            return a % b;
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 numbers");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Mod;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns a modulus b");
        writer.key("params"); writer.value("number a, number b");
        writer.key("returns"); writer.value("number");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Pow;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 2 && args[0] instanceof Number && args[1] instanceof Number) {
            return Math.pow(
                ((Number) args[0]).doubleValue(),
                ((Number) args[1]).doubleValue()
            );
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Pow;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns a^b");
        writer.key("params"); writer.value("number a, number b");
        writer.key("returns"); writer.value("number");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Round;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1 && args[0] != null && args[0] instanceof Number) {
            return ((Number) args[0]).longValue();
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a number");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Round;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns n rounded");
        writer.key("params"); writer.value("number n");
        writer.key("returns"); writer.value("number");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Sum;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1) {
            Object v = args[0];
            
            if (v != null && (v.getClass().isArray() || v instanceof List<?>)) {
                int length = v.getClass().isArray() ? 
                        ((Object[]) v).length :
                        ExpressionUtils.toObjectList(v).size();
                
                double total = 0;
                
                if (v.getClass().isArray()) {
                    Object[] a = (Object[]) v;
                    for (int i = 0; i < length; i++) {
                        Object n = a[length - i - 1];
                        if (n instanceof Number) {
                            total += ((Number) n).doubleValue();
                        }
                    }
                } else {
                    List<Object> a = ExpressionUtils.toObjectList(v);
                    for (int i = 0; i < length; i++) {
                        Object n = a.get(length - i - 1);
                        if (n instanceof Number) {
                            total += ((Number) n).doubleValue();
                        }
                    }
                }
                return total;
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects an array of numbers");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\math\Sum;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Sums numbers in array a");
        writer.key("params"); writer.value("array a");
        writer.key("returns"); writer.value("number");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Chomp;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 2) {
            Object o1 = args[0];
            Object o2 = args[1];
            if (o1 != null && o2 != null && o1 instanceof String && o2 instanceof String) {
                return StringUtils.chomp((String) o1, (String) o2);
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Chomp;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Removes separator from the end of str if it's there, otherwise leave it alone.");
        writer.key("params"); writer.value("string str, string separator");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Contains;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 2) {
            Object s1 = args[0];
            Object s2 = args[1];
            if (s1 != null && s2 != null && s1 instanceof String && s2 instanceof String) {
                return ((String) s1).indexOf((String) s2) > -1;
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Contains;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns whether s contains frag");
        writer.key("params"); writer.value("string s, string frag");
        writer.key("returns"); writer.value("boolean");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Diff;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length >= 2 && args.length <= 3) {
            Object o1 = args[0];
            Object o2 = args[1];
            if (o1 != null && o2 != null) {
                if (o1 instanceof String && o2 instanceof String) {
                    return StringUtils.difference((String) o1,(String) o2);
                } else if (o1 instanceof Calendar && args.length == 3) {
                    Object o3 = args[3];
                    if (o3 != null && o3 instanceof String) {
                        try {
                            String unit = ((String) o3).toLowerCase();
                            Calendar c1 = (Calendar) o1;
                            Calendar c2 = (o2 instanceof Calendar) ? (Calendar) o2 : CalendarParser.parse((o2 instanceof String) ? (String) o2 : o2.toString());
                            long delta = (c1.getTimeInMillis() - c2.getTimeInMillis()) / 1000;
                            if ("seconds".equals(unit)) return delta;
                            delta /= 60;
                            if ("minutes".equals(unit)) return delta;
                            delta /= 60;
                            if ("hours".equals(unit)) return delta;
                            long days = delta / 24;
                            if ("days".equals(unit)) return days;
                            if ("weeks".equals(unit)) return days / 7;
                            if ("months".equals(unit)) return days / 30;
                            if ("years".equals(unit)) return days / 365;
                        } catch (CalendarParserException e) {
                            // we should throw at this point because it's important to know that date parsing failed
                        }
                    }
                }
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Diff;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("For strings, returns the portion where they differ. For dates, it returns the difference in given time units");
        writer.key("params"); writer.value("o1, o2, time unit (optional)");
        writer.key("returns"); writer.value("string for strings, number for dates");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\EndsWith;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 2) {
            Object s1 = args[0];
            Object s2 = args[1];
            if (s1 != null && s2 != null && s1 instanceof String && s2 instanceof String) {
                return ((String) s1).endsWith((String) s2);
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 strings");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\EndsWith;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns whether s ends with sub");
        writer.key("params"); writer.value("string s, string sub");
        writer.key("returns"); writer.value("boolean");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Fingerprint;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1 && args[0] != null) {
            Object o = args[0];
            String s = (o instanceof String) ? (String) o : o.toString();
            return fingerprint.key(s);
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Fingerprint;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the fingerprint of s, a derived string that aims to be a more canonical form of it (this is mostly useful for finding clusters of strings related to the same information).");
        writer.key("params"); writer.value("string s");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\IndexOf;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 2) {
            Object s1 = args[0];
            Object s2 = args[1];
            if (s1 != null && s2 != null && s1 instanceof String && s2 instanceof String) {
                return ((String) s1).indexOf((String) s2);
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 strings");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\IndexOf;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the index of sub first ocurring in s");
        writer.key("params"); writer.value("string s, string sub");
        writer.key("returns"); writer.value("number");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\LastIndexOf;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 2) {
            Object s1 = args[0];
            Object s2 = args[1];
            if (s1 != null && s2 != null && s1 instanceof String && s2 instanceof String) {
                return ((String) s1).lastIndexOf((String) s2);
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 strings");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\LastIndexOf;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the index of sub last ocurring in s");
        writer.key("params"); writer.value("string s, string sub");
        writer.key("returns"); writer.value("number");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\MD5;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1 && args[0] != null) {
            Object o = args[0];
            String s = (o instanceof String) ? (String) o : o.toString();
            return DigestUtils.md5Hex(s);
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\MD5;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the MD5 hash of s");
        writer.key("params"); writer.value("string s");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\NGramFingerprint;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1 || args.length == 2) {
            if (args[0] != null) {
                int ngram_size = 1;
                if (args.length == 2 && args[1] != null) {
                    ngram_size = (args[1] instanceof Number) ? ((Number) args[1]).intValue() : Integer.parseInt(args[1].toString());
                }
                Object o = args[0];
                String s = (o instanceof String) ? (String) o : o.toString();
                return ngram_fingerprint.key(s,ngram_size);
            }
            return null;
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects at least a string");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\NGramFingerprint;ngram_split(String,int);;;protected TreeSet<String> ngram_split(String s, int size) {
        TreeSet<String> set = new TreeSet<String>();
        char[] chars = s.toCharArray();
        for (int i = 0; i + size <= chars.length; i++) {
            set.add(new String(chars,i,size));
        }
        return set;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\NGramFingerprint;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the n-gram fingerprint of s");
        writer.key("params"); writer.value("string s, number n");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Partition;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length >= 2 && args.length <= 3) {
            Object o1 = args[0];
            Object o2 = args[1];
            
            boolean omitFragment = false;
            if (args.length == 3) {
                Object o3 = args[2];
                if (o3 instanceof Boolean) {
                    omitFragment = ((Boolean) o3).booleanValue();
                }
            }
            
            if (o1 != null && o2 != null && o1 instanceof String) {
                String s = (String) o1;
                
                int from = -1;
                int to = -1;
                
                if (o2 instanceof String) {
                    String frag = (String) o2;
                    
                    from = s.indexOf(frag);
                    to = from + frag.length();
                } else if (o2 instanceof Pattern) {
                    Pattern pattern = (Pattern) o2;
                    Matcher matcher = pattern.matcher(s);
                    if (matcher.find()) {
                        from = matcher.start();
                        to = matcher.end();
                    }
                }
                
                String[] output = omitFragment ? new String[2] : new String[3];
                if (from > -1) {
                    output[0] = s.substring(0, from);
                    if (omitFragment) {
                        output[1] = s.substring(to);
                    } else {
                        output[1] = s.substring(from, to);
                        output[2] = s.substring(to);
                    }
                } else {
                    output[0] = s;
                    output[1] = "";
                    if (!omitFragment) {
                        output[2] = "";
                    }
                }
                return output;
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Partition;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value(
            "Returns an array of strings [a,frag,b] where a is the string part before the first occurrence of frag in s and b is what's left. If omitFragment is true, frag is not returned.");
        writer.key("params"); writer.value("string s, string or regex frag, optional boolean omitFragment");
        writer.key("returns"); writer.value("array");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Phonetic;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 2) {
            Object o1 = args[0];
            Object o2 = args[1];
            if (o1 != null && o2 != null && o2 instanceof String) {
                String str = (o1 instanceof String) ? (String) o1 : o1.toString();
                String encoding = ((String) o2).toLowerCase();
                if ("doublemetaphone".equals(encoding)) {
                    return metaphone2.key(str);
                } else if ("metaphone".equals(encoding)) {
                    return metaphone.key(str);
                } else if ("soundex".equals(encoding)) {
                    return soundex.key(str);
                } else {
                    return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " doesn't know how to handle the '" + encoding + "' encoding.");
                }
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 3 strings");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Phonetic;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the a phonetic encoding of s (optionally indicating which encoding to use')");
        writer.key("params"); writer.value("string s, string encoding (optional, defaults to 'DoubleMetaphone')");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Reinterpret;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 2) {
            Object o1 = args[0];
            Object o2 = args[1];
            if (o1 != null && o2 != null && o2 instanceof String) {
                String str = (o1 instanceof String) ? (String) o1 : o1.toString();
                Project project = (Project) bindings.get("project");
                ProjectMetadata metadata = ProjectManager.singleton.getProjectMetadata(project.id);
                String decoder = (String) metadata.getEncoding();
                String encoder = (String) o2;
                String reinterpreted = null;

                try {
                    reinterpreted = new String(str.getBytes(decoder), encoder);
                } catch (UnsupportedEncodingException e) {
                    return new EvalError(ControlFunctionRegistry.getFunctionName(this) + ": encoding '" + encoder + "' is not available or recognized.");
                }
                                
                return reinterpreted;
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 arguments");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Reinterpret;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns s reinterpreted thru the given encoder.");
        writer.key("params"); writer.value("string s, string encoder");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Replace;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 3) {
            Object o1 = args[0];
            Object o2 = args[1];
            Object o3 = args[2];
            if (o1 != null && o2 != null && o3 != null && o3 instanceof String) {
                String str = (o1 instanceof String) ? (String) o1 : o1.toString();
                
                if (o2 instanceof String) {
                    return str.replace((String) o2, (String) o3);
                } else if (o2 instanceof Pattern) {
                    Pattern pattern = (Pattern) o2;
                    return pattern.matcher(str).replaceAll((String) o3);
                }
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 3 strings, or 1 string, 1 regex, and 1 string");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Replace;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the string obtained by replacing f with r in s");
        writer.key("params"); writer.value("string s, string or regex f, string r");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\ReplaceChars;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 3) {
            Object o1 = args[0];
            Object o2 = args[1];
            Object o3 = args[2];
            if (o1 != null && o2 != null && o3 != null && o2 instanceof String && o3 instanceof String) {
                String str = (o1 instanceof String) ? (String) o1 : o1.toString();
                return StringUtils.replaceChars(str, (String) o2, (String) o3);
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 3 strings");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\ReplaceChars;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the string obtained by replacing all chars in f with the char in s at that same position");
        writer.key("params"); writer.value("string s, string f, string r");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\RPartition;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length >= 2 && args.length <= 3) {
            Object o1 = args[0];
            Object o2 = args[1];
            
            boolean omitFragment = false;
            if (args.length == 3) {
                Object o3 = args[2];
                if (o3 instanceof Boolean) {
                    omitFragment = ((Boolean) o3).booleanValue();
                }
            }
            
            if (o1 != null && o2 != null && o1 instanceof String) {
                String s = (String) o1;
                
                int from = -1;
                int to = -1;
                
                if (o2 instanceof String) {
                    String frag = (String) o2;
                    
                    from = s.lastIndexOf(frag);
                    to = from + frag.length();
                } else if (o2 instanceof Pattern) {
                    Pattern pattern = (Pattern) o2;
                    Matcher matcher = pattern.matcher(s);
                    
                    while (matcher.find()) {
                        from = matcher.start();
                        to = matcher.end();
                    }
                }
                
                String[] output = omitFragment ? new String[2] : new String[3];
                if (from > -1) {
                    output[0] = s.substring(0, from);
                    if (omitFragment) {
                        output[1] = s.substring(to);
                    } else {
                        output[1] = s.substring(from, to);
                        output[2] = s.substring(to);
                    }
                } else {
                    output[0] = s;
                    output[1] = "";
                    if (!omitFragment) {
                        output[2] = "";
                    }
                }
                return output;
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\RPartition;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value(
            "Returns an array of strings [a,frag,b] where a is the string part before the last occurrence of frag in s and b is what's left. If omitFragment is true, frag is not returned.");
        writer.key("params"); writer.value("string s, string or regex frag, optional boolean omitFragment");
        writer.key("returns"); writer.value("array");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\SHA1;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1 && args[0] != null) {
            Object o = args[0];
            String s = (o instanceof String) ? (String) o : o.toString();
            return DigestUtils.shaHex(s);
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\SHA1;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the SHA-1 hash of s");
        writer.key("params"); writer.value("string s");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Split;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 2) {
            Object v = args[0];
            Object split = args[1];
            if (v != null && split != null) {
                String str = (v instanceof String ? (String) v : v.toString());
                if (split instanceof String) {
                    return StringUtils.splitByWholeSeparator(str, (String) split);
                } else if (split instanceof Pattern) {
                    Pattern pattern = (Pattern) split;
                    return pattern.split(str);
                }
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 strings, or 1 string and 1 regex");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Split;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the array of strings obtained by splitting s with separator sep");
        writer.key("params"); writer.value("string s, string or regex sep");
        writer.key("returns"); writer.value("array");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\SplitByCharType;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1) {
            Object o = args[0];
            if (o != null) {
                String s = (o instanceof String) ? (String) o : o.toString();
                return StringUtils.splitByCharacterType(s);
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 strings");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\SplitByCharType;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns an array of strings obtained by splitting s grouping consecutive chars by their unicode type");
        writer.key("params"); writer.value("string s");
        writer.key("returns"); writer.value("array");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\SplitByLengths;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length >= 2 && args[0] != null) {
            Object o = args[0];
            String s = o instanceof String ? (String) o : o.toString();
            
            String[] results = new String[args.length - 1];
            
            int lastIndex = 0;
            
            for (int i = 1; i < args.length; i++) {
                int thisIndex = lastIndex;
                
                Object o2 = args[i];
                if (o2 instanceof Number) {
                    thisIndex = Math.min(s.length(), lastIndex + Math.max(0, ((Number) o2).intValue()));
                }
                
                results[i - 1] = s.substring(lastIndex, thisIndex);
                lastIndex = thisIndex;
            }
            
            return results;
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 1 string and 1 or more numbers");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\SplitByLengths;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns the array of strings obtained by splitting s into substrings with the given lengths");
        writer.key("params"); writer.value("string s, number n, ...");
        writer.key("returns"); writer.value("array");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\StartsWith;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 2) {
            Object s1 = args[0];
            Object s2 = args[1];
            if (s1 != null && s2 != null && s1 instanceof String && s2 instanceof String) {
                return ((String) s1).startsWith((String) s2);
            }
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects 2 strings");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\StartsWith;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns whether s starts with sub");
        writer.key("params"); writer.value("string s, string sub");
        writer.key("returns"); writer.value("boolean");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\ToLowercase;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1 && args[0] != null) {
            Object o = args[0];
            return (o instanceof String ? (String) o : o.toString()).toLowerCase();
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\ToLowercase;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns s converted to lowercase");
        writer.key("params"); writer.value("string s");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\ToTitlecase;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1 && args[0] != null) {
            Object o = args[0];
            String s = o instanceof String ? (String) o : o.toString();
            
            return WordUtils.capitalizeFully(s);
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\ToTitlecase;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns s converted to titlecase");
        writer.key("params"); writer.value("string s");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\ToUppercase;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1 && args[0] != null) {
            Object o = args[0];
            return (o instanceof String ? (String) o : o.toString()).toUpperCase();
        }
        return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " expects a string");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\ToUppercase;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns s converted to uppercase");
        writer.key("params"); writer.value("string s");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Trim;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1) {
            Object s1 = args[0];
            if (s1 != null && s1 instanceof String) {
                return ((String) s1).trim();
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Trim;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns copy of the string, with leading and trailing whitespace omitted.");
        writer.key("params"); writer.value("string s");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Unescape;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 2) {
            Object o1 = args[0];
            Object o2 = args[1];
            if (o1 != null && o2 != null && o1 instanceof String && o2 instanceof String) {
                String s = (String) o1;
                String mode = ((String) o2).toLowerCase();
                if ("html".equals(mode)) {
                    return StringEscapeUtils.unescapeHtml(s);
                } else if ("xml".equals(mode)) {
                    return StringEscapeUtils.unescapeXml(s);
                } else if ("csv".equals(mode)) {
                    return StringEscapeUtils.unescapeCsv(s);
                } else if ("javascript".equals(mode)) {
                    return StringEscapeUtils.unescapeJavaScript(s);
                } else if ("url".equals(mode)) {
                    try {
                        return URLDecoder.decode(s,"UTF-8");
                    } catch (UnsupportedEncodingException e) {}
                } else {
                    return new EvalError(ControlFunctionRegistry.getFunctionName(this) + " does not recognize mode '" + mode + "'.");
                }
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Unescape;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Unescapes all escaped parts of the string depending on the given escaping mode.");
        writer.key("params"); writer.value("string s, string mode ['html','xml','csv','url','javascript']");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Unicode;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1 && args[0] != null) {
            Object o = args[0];
            String s = (o instanceof String) ? (String) o : o.toString();
            Integer[] output = new Integer[s.length()];
            for (int i = 0; i < s.length(); i++) {
                output[i] = s.codePointAt(i);
            }
            return output;
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\Unicode;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns an array of strings describing each character of s in their full unicode notation");
        writer.key("params"); writer.value("string s");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\UnicodeType;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args) {
        if (args.length == 1 && args[0] != null) {
            Object o = args[0];
            String s = (o instanceof String) ? (String) o : o.toString();
            String[] output = new String[s.length()];
            for (int i = 0; i < s.length(); i++) {
                output[i] = translateType(Character.getType(s.codePointAt(i)));
            }
            return output;
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\UnicodeType;translateType(int);;;private String translateType(int type) {
        switch(type) {
            case 0: return "unassigned";
            case 1: return "uppercase letter";
            case 2: return "lowercase letter";
            case 3: return "titlecase letter";
            case 4: return "modifier letter";
            case 5: return "other letter";
            case 6: return "non spacing mark";
            case 7: return "enclosing mark";
            case 8: return "combining spacing mark";
            case 9: return "decimal digit number";
            case 10: return "letter number";
            case 11: return "other number";
            case 12: return "space separator";
            case 13: return "line separator";
            case 14: return "paragraph separator";
            case 15: return "control";
            case 16: return "format";
            // 17 does not seem to be used
            case 18: return "private use";
            case 19: return "surrogate";
            case 20: return "dash punctuation";
            case 21: return "start punctuation";
            case 22: return "end punctuation";
            case 23: return "connector punctuation";
            case 24: return "other punctuation";
            case 25: return "math symbol";
            case 26: return "currency symbol";
            case 27: return "modifier symbol";
            case 28: return "other symbol";
            case 29: return "initial quote punctuation";
            case 30: return "final quote punctuation";
            default: return "unknown";
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\functions\strings\UnicodeType;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value("Returns an array of strings describing each character of s in their full unicode notation");
        writer.key("params"); writer.value("string s");
        writer.key("returns"); writer.value("string");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;ParserState(int);;;ParserState(int order) {
        yearBeforeMonth = (order & YEAR_BEFORE_MONTH) == YEAR_BEFORE_MONTH;
        yearBeforeDay = (order & YEAR_BEFORE_DAY) == YEAR_BEFORE_DAY;
        monthBeforeDay = (order & MONTH_BEFORE_DAY) == MONTH_BEFORE_DAY;

        year = UNSET;
        month = UNSET;
        day = UNSET;
        hour = UNSET;
        minute = UNSET;
        second = UNSET;
        timePostMeridian = false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;getDate();;;int getDate() {
        return day;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;getHour();;;int getHour() {
        return hour;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;getMillisecond();;;int getMillisecond() {
        return milli;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;getMinute();;;int getMinute() {
        return minute;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;getMonth();;;int getMonth() {
        return month;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;getSecond();;;int getSecond() {
        return second;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;getTimeZone();;;TimeZone getTimeZone() {
        return timeZone;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;getYear();;;int getYear() {
        return year;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;isDateSet();;;boolean isDateSet() {
        return (day != UNSET);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;isHourSet();;;boolean isHourSet() {
        return (hour != UNSET);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;isMillisecondSet();;;boolean isMillisecondSet() {
        return (milli != UNSET);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;isMinuteSet();;;boolean isMinuteSet() {
        return (minute != UNSET);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;isMonthBeforeDay();;;boolean isMonthBeforeDay() {
        return monthBeforeDay;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;isMonthSet();;;boolean isMonthSet() {
        return (month != UNSET);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;isSecondSet();;;boolean isSecondSet() {
        return (second != UNSET);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;isTimePostMeridian();;;boolean isTimePostMeridian() {
        return (timePostMeridian || hour > 12);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;isYearBeforeDay();;;boolean isYearBeforeDay() {
        return yearBeforeDay;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;isYearBeforeMonth();;;boolean isYearBeforeMonth() {
        return yearBeforeMonth;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;isYearSet();;;boolean isYearSet() {
        return (year != UNSET);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;setCalendar(GregorianCalendar,boolean);;;void setCalendar(GregorianCalendar cal, boolean ignoreChanges)
            throws CalendarParserException {
        cal.clear();
        if (year != UNSET && month != UNSET && day != UNSET) {
            cal.set(Calendar.YEAR, year);
            cal.set(Calendar.MONTH, month - 1);
            cal.set(Calendar.DATE, day);

            if (!ignoreChanges) {
                final int calYear = cal.get(Calendar.YEAR);
                final int calMonth = cal.get(Calendar.MONTH);
                final int calDay = cal.get(Calendar.DATE);

                if (calYear != year || (calMonth + 1) != month || calDay != day) {
                    throw new CalendarParserException("Date was set to "
                            + calYear + "/" + (calMonth + 1) + "/" + calDay
                            + " not requested " + year + "/" + month + "/"
                            + day);
                }
            }
        }

        cal.clear(Calendar.HOUR);
        cal.clear(Calendar.MINUTE);
        cal.clear(Calendar.SECOND);
        cal.clear(Calendar.MILLISECOND);

        if (hour != UNSET && minute != UNSET) {
            cal.set(Calendar.HOUR, hour);
            cal.set(Calendar.MINUTE, minute);
            if (second != UNSET) {
                cal.set(Calendar.SECOND, second);
                if (milli != UNSET) {
                    cal.set(Calendar.MILLISECOND, milli);
                }
            }

            if (timeZone != null) {
                cal.setTimeZone(timeZone);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;setDate(int);;;void setDate(int val) throws CalendarParserException {
        if (val < 1 || val > 31) {
            throw new CalendarParserException("Bad day " + val);
        }

        day = val;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;setHour(int);;;void setHour(int val) throws CalendarParserException {
        final int tmpHour;
        if (timePostMeridian) {
            tmpHour = val + 12;
            timePostMeridian = false;
        } else {
            tmpHour = val;
        }

        if (tmpHour < 0 || tmpHour > 23) {
            throw new CalendarParserException("Bad hour " + val);
        }

        hour = tmpHour;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;setMillisecond(int);;;void setMillisecond(int val) throws CalendarParserException {
        if (val < 0 || val > 999) {
            throw new CalendarParserException("Bad millisecond " + val);
        }

        milli = val;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;setMinute(int);;;void setMinute(int val) throws CalendarParserException {
        if (val < 0 || val > 59) {
            throw new CalendarParserException("Bad minute " + val);
        }

        minute = val;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;setMonth(int);;;void setMonth(int val) throws CalendarParserException {
        if (val < 1 || val > 12) {
            throw new CalendarParserException("Bad month " + val);
        }

        month = val;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;setSecond(int);;;void setSecond(int val) throws CalendarParserException {
        if (val < 0 || val > 59) {
            throw new CalendarParserException("Bad second " + val);
        }

        second = val;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;setTimePostMeridian(boolean);;;void setTimePostMeridian(boolean val) {
        timePostMeridian = val;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;setTimeZone(TimeZone);;;void setTimeZone(TimeZone tz) {
        timeZone = tz;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;setYear(int);;;void setYear(int val) throws CalendarParserException {
        if (val < 0) {
            throw new CalendarParserException("Bad year " + val);
        }

        year = val;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;appendTimeString(StringBuffer,Calendar,boolean);;;private static final void appendTimeString(StringBuffer buf, Calendar cal, boolean needSpace) {
        final int hour = cal.get(Calendar.HOUR_OF_DAY);
        final int minute = cal.get(Calendar.MINUTE);
        final int second = cal.get(Calendar.SECOND);
        final int milli = cal.get(Calendar.MILLISECOND);

        if (hour != 0 || minute != 0 || second != 0 || milli != 0) {
            if (needSpace) {
                buf.append(' ');
            }
            if (hour < 10) {
                buf.append(' ');
            }
            buf.append(hour);

            if (minute < 10) {
                buf.append(":0");
            } else {
                buf.append(':');
            }
            buf.append(minute);

            if (second != 0 || milli != 0) {
                if (second < 10) {
                    buf.append(":0");
                } else {
                    buf.append(':');
                }
                buf.append(second);

                if (milli != 0) {
                    if (milli < 10) {
                        buf.append(".00");
                    } else if (milli < 100) {
                        buf.append(".0");
                    } else {
                        buf.append('.');
                    }
                    buf.append(milli);
                }
            }
        }

        TimeZone tz = cal.getTimeZone();
        if (tz.getRawOffset() == 0) {
            buf.append(" GMT");
        } else {
            buf.append(' ');

            int offset = tz.getRawOffset() / (60 * 1000);
            if (offset < 0) {
                buf.append('-');
                offset = -offset;
            } else {
                buf.append('+');
            }

            int hrOff = offset / 60;
            if (hrOff < 10) {
                buf.append('0');
            }
            buf.append(hrOff);
            buf.append(':');

            int minOff = offset % 60;
            if (minOff < 10) {
                buf.append('0');
            }
            buf.append(minOff);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;getOrderString(int);;;public static final String getOrderString(int order) {
        switch (order) {
        case DD_MM_YY:
            return "DD_MM_YY";
        case MM_DD_YY:
            return "MM_DD_YY";
        case MM_YY_DD:
            return "MM_YY_DD";
        case DD_YY_MM:
            return "DD_YY_MM";
        case YY_DD_MM:
            return "YY_DD_MM";
        case YY_MM_DD:
            return "YY_MM_DD";
        default:
            break;
        }

        return "??" + order + "??";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;getOrdinalNumber(String);;;private static final int getOrdinalNumber(String str) {
        final int len = (str == null ? 0 : str.length());
        if (len >= 3) {

            String suffix = str.substring(len - 2);
            if (suffix.equalsIgnoreCase("st") || suffix.equalsIgnoreCase("nd")
                    || suffix.equalsIgnoreCase("rd")
                    || suffix.equalsIgnoreCase("th")) {
                try {
                    return Integer.parseInt(str.substring(0, len - 2));
                } catch (NumberFormatException nfe) {
                    // fall through if number was not parsed
                }
            }
        }

        return UNSET;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;getTimePlaceString(int);;;private static final String getTimePlaceString(int place) {
        switch (place) {
        case PLACE_HOUR:
            return "hour";
        case PLACE_MINUTE:
            return "minute";
        case PLACE_SECOND:
            return "second";
        case PLACE_MILLI:
            return "millisecond";
        default:
            break;
        }

        return "unknown";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;isWeekdayName(String);;;private static final boolean isWeekdayName(String str) {
        if (str == null || str.length() < 3) {
            return false;
        }

        String lstr = str.toLowerCase();
        for (int i = 0; i < WEEKDAY_NAMES.length; i++) {
            if (lstr.startsWith(WEEKDAY_NAMES[i])
                    || WEEKDAY_NAMES[i].toLowerCase().startsWith(lstr)) {
                return true;
            }
        }

        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;loadTimeZoneNames();;;private static final String[] loadTimeZoneNames() {
        Class<?> zoneInfo;
        try {
            zoneInfo = Class.forName("sun.util.calendar.ZoneInfo");
        } catch (ClassNotFoundException cnfe) {
            return null;
        }

        Method method;
        try {
            method = zoneInfo.getDeclaredMethod("getAvailableIDs", new Class[0]);
        } catch (NoSuchMethodException nsme) {
            return null;
        }

        Object result;
        try {
            result = method.invoke((Object) null);
        } catch (IllegalAccessException iae) {
            return null;
        } catch (InvocationTargetException ite) {
            return null;
        }

        String[] tmpList = (String[]) result;

        int numSaved = 0;
        String[] finalList = null;

        for (int i = 0; i < 2; i++) {
            if (i > 0) {
                if (numSaved == 0) {
                    return null;
                }

                finalList = new String[numSaved];
                numSaved = 0;
            }

            for (int j = 0; j < tmpList.length; j++) {
                final int len = tmpList[j].length();
                if ((len > 2 && Character.isUpperCase(tmpList[j].charAt(1)))
                        && (len != 7 || !Character.isDigit(tmpList[j].charAt(3)))) {
                    if (finalList == null) {
                        numSaved++;
                    } else {
                        finalList[numSaved++] = tmpList[j];
                    }

                    if (len == 3 && tmpList[j].charAt(1) == 'S'
                            && tmpList[j].charAt(2) == 'T') {
                        if (finalList == null) {
                            numSaved++;
                        } else {
                            StringBuffer dst = new StringBuffer();
                            dst.append(tmpList[j].charAt(0));
                            dst.append("DT");
                            finalList[numSaved++] = dst.toString();
                        }
                    }
                }
            }
        }

        return finalList;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;monthNameToNumber(String);;;public static int monthNameToNumber(String str) {
        if (str != null && str.length() >= 3) {
            String lstr = str.toLowerCase();
            for (int i = 0; i < MONTHS.length; i++) {
                if (lstr.startsWith(MONTHS[i][0])
                        || MONTHS[i][1].toLowerCase().startsWith(lstr)) {
                    return i + 1;
                }
            }
        }

        return UNSET;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;parse(String);;;public static final Calendar parse(String dateStr)
            throws CalendarParserException {
        return parse(dateStr, YY_MM_DD);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;parse(String,int);;;public static final Calendar parse(String dateStr, int order)
            throws CalendarParserException {
        return parse(dateStr, order, true);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;parse(String,int,boolean);;;public static final Calendar parse(String dateStr, int order,
            boolean ignoreChanges) throws CalendarParserException {
        if (dateStr == null) {
            return null;
        }

        return parseString(dateStr, order, ignoreChanges);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;parseNonNumericToken(String,ParserState,String);;;private static final void parseNonNumericToken(String dateStr,
            ParserState state, String token) throws CalendarParserException {
        // if it's a weekday name, ignore it
        if (isWeekdayName(token)) {
            if (DEBUG) {
                System.err.println("IGNORE \"" + token + "\" (weekday)");
            }
            return;
        }

        // if it looks like a time, deal with it
        if (token.indexOf(':') > 0) {
            final char firstChar = token.charAt(0);
            if (Character.isDigit(firstChar)) {
                parseTime(dateStr, state, token);
                return;
            } else if (firstChar == '+' || firstChar == '-') {
                parseTimeZoneOffset(dateStr, state, token);
                return;
            } else {
                throw new CalendarParserException("Unrecognized time \""
                        + token + "\" in date \"" + dateStr + "\"");
            }
        }

        // try to parse month name
        int tmpMon = monthNameToNumber(token);

        // if token isn't a month name ... PUKE
        if (tmpMon != UNSET) {

            // if month number is unset, set it and move on
            if (!state.isMonthSet()) {
                state.setMonth(tmpMon);
                if (DEBUG) {
                    System.err.println("MONTH="
                            + MONTHS[state.getMonth() - 1][0] + " (" + token
                            + ") name");
                }
                return;
            }

            // try to move the current month value to the year or day
            if (!state.isYearSet()) {
                if (state.isDateSet() || state.isYearBeforeDay()) {
                    state.setYear(state.getMonth());
                    state.setMonth(tmpMon);
                    if (DEBUG) {
                        System.err.println("MONTH="
                                + MONTHS[state.getMonth() - 1][0] + ", YEAR="
                                + state.getYear() + " (" + token
                                + ") name swap");
                    }
                } else {
                    state.setDate(state.getMonth());
                    state.setMonth(tmpMon);
                    if (DEBUG) {
                        System.err.println("MONTH="
                                + MONTHS[state.getMonth() - 1][0] + ", DAY="
                                + state.getDate() + " (" + token
                                + ") name swap");
                    }
                }

                return;
            }

            // year was already set, so try to move month value to day
            if (!state.isDateSet()) {
                state.setDate(state.getMonth());
                state.setMonth(tmpMon);
                if (DEBUG) {
                    System.err.println("MONTH="
                            + MONTHS[state.getMonth() - 1][0] + ", DAY="
                            + state.getDate() + " (" + token + ") name swap 2");
                }

                return;
            }

            // can't move month value to year or day ... PUKE
            if (DEBUG) {
                System.err.println("*** Too many numbers in \"" + dateStr
                        + "\"");
            }
            throw new CalendarParserException("Too many numbers in"
                    + " date \"" + dateStr + "\"");
        }

        // maybe it's an ordinal number list "1st", "23rd", etc.
        int val = getOrdinalNumber(token);
        if (val == UNSET) {
            final String lToken = token.toLowerCase();

            if (lToken.equals("am")) {
                // don't need to do anything
                if (DEBUG) {
                    System.err.println("TIME=AM (" + token + ")");
                }
                return;
            } else if (lToken.equals("pm")) {
                if (!state.isHourSet()) {
                    state.setTimePostMeridian(true);
                } else {
                    state.setHour(state.getHour() + 12);
                }

                if (DEBUG) {
                    System.err.println("TIME=PM (" + token + ")");
                }
                return;
            } else if (zoneNames != null) {
                // maybe it's a time zone name
                for (int z = 0; z < zoneNames.length; z++) {
                    if (token.equalsIgnoreCase(zoneNames[z])) {
                        TimeZone tz = TimeZone.getTimeZone(token);
                        if (tz.getRawOffset() != 0 || lToken.equals("gmt")) {
                            state.setTimeZone(tz);
                            return;
                        }
                    }
                }
            }

            if (DEBUG) {
                System.err.println("*** Unknown string \"" + token + "\"");
            }
            throw new CalendarParserException("Unknown string \"" + token
                    + "\" in date \"" + dateStr + "\"");
        }

        // if no day yet, we're done
        if (!state.isDateSet()) {
            state.setDate(val);
            if (DEBUG) {
                System.err.println("DAY=" + state.getDate() + " (" + token
                        + ") ord");
            }
            return;
        }

        // if either year or month is unset...
        if (!state.isYearSet() || !state.isMonthSet()) {

            // if day can't be a month, shift it into year
            if (state.getDate() > 12) {
                if (!state.isYearSet()) {
                    state.setYear(state.getDate());
                    state.setDate(val);
                    if (DEBUG) {
                        System.err.println("YEAR=" + state.getYear() + ", DAY="
                                + state.getDate() + " (" + token
                                + ") ord>12 swap");
                    }
                    return;
                }

                // year was already set, maybe we can move it to month
                if (state.getYear() <= 12) {
                    state.setMonth(state.getYear());
                    state.setYear(state.getDate());
                    state.setDate(val);

                    if (DEBUG) {
                        System.err.println("YEAR=" + state.getYear()
                                + ", MONTH=" + state.getMonth() + ", DAY="
                                + state.getDate() + " (" + token
                                + ") ord megaswap");
                    }

                    return;
                }

                // try to shift day value to either year or month
            } else if (!state.isYearSet()) {
                if (!state.isMonthSet() && !state.isYearBeforeMonth()) {
                    state.setMonth(state.getDate());
                    state.setDate(val);
                    if (DEBUG) {
                        System.err.println("MONTH=" + state.getMonth()
                                + ", DAY=" + state.getDate() + " (" + token
                                + ") ord swap");
                    }
                    return;
                }

                state.setYear(state.getDate());
                state.setDate(val);
                if (DEBUG) {
                    System.err.println("YEAR=" + state.getYear() + ", DAY="
                            + state.getDate() + " (" + token + ") ord swap");
                }
                return;

                // year was set, so we know month is unset
            } else {

                state.setMonth(state.getDate());
                state.setDate(val);
                if (DEBUG) {
                    System.err.println("MONTH=" + state.getMonth() + ", DAY="
                            + state.getDate() + " (" + token + ") ord swap#2");
                }
                return;
            }
        }

        if (DEBUG) {
            System.err.println("*** Extra number \"" + token + "\"");
        }
        throw new CalendarParserException("Cannot assign ordinal in \""
                + dateStr + "\"");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;parseNumericBlob(String,ParserState,int);;;private static final void parseNumericBlob(String dateStr,
            ParserState state, int val) throws CalendarParserException {
        if (state.isYearSet() || state.isMonthSet() || state.isDateSet()) {
            throw new CalendarParserException("Unknown value " + val
                    + " in date \"" + dateStr + "\"");
        }

        int tmpVal = val;
        if (state.isYearBeforeMonth()) {
            if (state.isYearBeforeDay()) {
                final int last = tmpVal % 100;
                tmpVal /= 100;

                final int middle = tmpVal % 100;
                tmpVal /= 100;

                state.setYear(tmpVal);
                if (state.isMonthBeforeDay()) {
                    // YYYYMMDD
                    state.setMonth(middle);
                    state.setDate(last);
                } else {
                    // YYYYDDMM
                    state.setDate(middle);
                    state.setMonth(last);
                }
            } else {
                // DDYYYYMM
                state.setMonth(tmpVal % 100);
                tmpVal /= 100;

                state.setYear(tmpVal % 10000);
                tmpVal /= 10000;

                state.setDate(tmpVal);
            }
        } else if (state.isYearBeforeDay()) {
            // MMYYYYDD
            state.setDate(tmpVal % 100);
            tmpVal /= 100;

            state.setYear(tmpVal % 10000);
            tmpVal /= 10000;

            state.setMonth(tmpVal);
        } else {
            state.setYear(tmpVal % 10000);
            tmpVal /= 10000;

            final int middle = tmpVal % 100;
            tmpVal /= 100;
            if (state.isMonthBeforeDay()) {
                // MMDDYYYY
                state.setDate(middle);
                state.setMonth(tmpVal);
            } else {
                // DDMMYYYY
                state.setDate(tmpVal);
                state.setMonth(middle);
            }
        }

        if (DEBUG) {
            System.err.println("YEAR=" + state.getYear() + " MONTH="
                    + state.getMonth() + " DAY=" + state.getDate() + " (" + val
                    + ") blob");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;parseNumericToken(String,ParserState,int);;;private static final void parseNumericToken(String dateStr,
            ParserState state, int val) throws CalendarParserException {
        // puke if we've already found 3 values
        if (state.isYearSet() && state.isMonthSet() && state.isDateSet()) {
            if (DEBUG) {
                System.err.println("*** Extra number " + val);
            }
            throw new CalendarParserException("Extra value \"" + val
                    + "\" in date \"" + dateStr + "\"");
        }

        // puke up on negative numbers
        if (val < 0) {
            if (DEBUG) {
                System.err.println("*** Negative number " + val);
            }
            throw new CalendarParserException("Found negative number in"
                    + " date \"" + dateStr + "\"");
        }

        if (val > 9999) {
            parseNumericBlob(dateStr, state, val);
            return;
        }

        // deal with obvious years first
        if (val > 31) {

            // if no year yet, assign it and move on
            if (!state.isYearSet()) {
                state.setYear(val);
                if (DEBUG) {
                    System.err.println("YEAR=" + state.getYear() + " (" + val
                            + ") >31");
                }
                return;
            }

            // puke if the year value can't possibly be a day or month
            if (state.getYear() > 31) {
                if (DEBUG) {
                    System.err.println("*** Ambiguous year " + state.getYear()
                            + " vs. " + val);
                }
                String errMsg = "Couldn't decide on year number in date \""
                        + dateStr + "\"";
                throw new CalendarParserException(errMsg);
            }

            // if the year value can't be a month...
            if (state.getYear() > 12) {

                // if day isn't set, use old val as day and new val as year
                if (!state.isDateSet()) {
                    state.setDate(state.getYear());
                    state.setYear(val);

                    if (DEBUG) {
                        System.err.println("YEAR=" + state.getYear() + ", DAY="
                                + state.getDate() + " (" + val + ") >31 swap");
                    }

                    return;
                }

                // NOTE: both day and year are set

                // try using day value as month so we can move year
                // value to day and use new value as year
                if (state.getDate() <= 12) {
                    state.setMonth(state.getDate());
                    state.setDate(state.getYear());
                    state.setYear(val);

                    if (DEBUG) {
                        System.err.println("YEAR=" + state.getYear()
                                + ", MONTH=" + state.getMonth() + ", DAY="
                                + state.getDate() + " (" + val
                                + ") >31 megaswap");
                    }

                    return;
                }

                if (DEBUG) {
                    System.err.println("*** Unassignable year-like"
                            + " number " + val);
                }
                throw new CalendarParserException("Bad number " + val
                        + " found in date \"" + dateStr + "\"");
            }

            // NOTE: year <= 12

            if (!state.isDateSet() && !state.isMonthSet()) {
                if (state.isMonthBeforeDay()) {
                    state.setMonth(state.getYear());
                    state.setYear(val);
                    if (DEBUG) {
                        System.err.println("YEAR=" + state.getYear()
                                + ", MONTH=" + state.getMonth() + " (" + val
                                + ") >31 swap");
                    }
                } else {
                    state.setDate(state.getYear());
                    state.setYear(val);
                    if (DEBUG) {
                        System.err
                                .println("YEAR=" + state.getYear() + ", DAY="
                                        + state.getDate() + " (" + val
                                        + ") >31 swap#2");
                    }
                }

                return;
            }

            if (!state.isDateSet()) {
                state.setDate(state.getYear());
                state.setYear(val);
                if (DEBUG) {
                    System.err.println("YEAR=" + state.getYear() + ", DAY="
                            + state.getDate() + " (" + val + ") >31 day swap");
                }
                return;
            }

            // assume this was a mishandled month
            state.setMonth(state.getYear());
            state.setYear(val);

            if (DEBUG) {
                System.err.println("YEAR=" + state.getYear() + ", MONTH="
                        + state.getMonth() + " (" + val + ") >31 mon swap");
            }

            return;
        }

        // now deal with non-month values
        if (val > 12) {

            // if no year value yet...
            if (!state.isYearSet()) {

                // if the day is set, or if we assign year before day...
                if (state.isDateSet() || state.isYearBeforeDay()) {
                    state.setYear(val);
                    if (DEBUG) {
                        System.err.println("YEAR=" + state.getYear() + " ("
                                + val + ") >12");
                    }
                } else {
                    state.setDate(val);
                    if (DEBUG) {
                        System.err.println("DAY=" + state.getDate() + " ("
                                + val + ") >12");
                    }
                }

                return;
            }

            // NOTE: year is set

            // if no day value yet, assign it and move on
            if (!state.isDateSet()) {
                state.setDate(val);

                if (DEBUG) {
                    System.err.println("DAY=" + state.getDate() + " (" + val
                            + ") >12 !yr");
                }

                return;
            }

            // NOTE: both year and day are set

            // XXX see if we can shift things around

            if (DEBUG) {
                System.err.println("*** Unassignable year/day number " + val);
            }
            throw new CalendarParserException("Bad number " + val
                    + " found in date \"" + dateStr + "\"");
        }

        // NOTE: ambiguous value

        // if year is set, this must be either the month or day
        if (state.isYearSet()) {
            if (state.isMonthSet()
                    || (!state.isDateSet() && !state.isMonthBeforeDay())) {
                state.setDate(val);
                if (DEBUG) {
                    System.err.println("DAY=" + state.getDate() + " (" + val
                            + ") ambig!yr");
                }
            } else {
                state.setMonth(val);
                if (DEBUG) {
                    System.err.println("MONTH=" + state.getMonth() + " (" + val
                            + ") ambig!yr");
                }
            }

            return;
        }

        // NOTE: year not set

        // if month is set, this must be either the year or day
        if (state.isMonthSet()) {
            if (state.isDateSet() || state.isYearBeforeDay()) {
                state.setYear(val);
                if (DEBUG) {
                    System.err.println("YEAR=" + state.getYear() + " (" + val
                            + ") ambig!mo");
                }
            } else {
                state.setDate(val);
                if (DEBUG) {
                    System.err.println("DAY=" + state.getDate() + " (" + val
                            + ") ambig!mo");
                }
            }

            return;
        }

        // NOTE: neither year nor month is set

        // if day is set, this must be either the year or month
        if (state.isDateSet()) {
            if (state.isYearBeforeMonth()) {
                state.setYear(val);
                if (DEBUG) {
                    System.err.println("YEAR=" + state.getYear() + " (" + val
                            + ") ambig!day");
                }
            } else {
                state.setMonth(val);
                if (DEBUG) {
                    System.err.println("MONTH=" + state.getMonth() + " (" + val
                            + ") ambig!day");
                }
            }

            return;
        }

        // NOTE: no value set yet
        if (state.isYearBeforeMonth()) {
            if (state.isYearBeforeDay()) {
                state.setYear(val);
                if (DEBUG) {
                    System.err.println("YEAR=" + state.getYear() + " (" + val
                            + ") YM|YD");
                }
            } else {
                state.setDate(val);
                if (DEBUG) {
                    System.err.println("DAY=" + state.getDate() + " (" + val
                            + ") YM!YD");
                }
            }
        } else if (state.isMonthBeforeDay()) {
            state.setMonth(val);
            if (DEBUG) {
                System.err.println("MONTH=" + state.getMonth() + " (" + val
                        + ") !YM|MD");
            }
        } else {
            state.setDate(val);
            if (DEBUG) {
                System.err.println("DAY=" + state.getDate() + " (" + val
                        + ") !YM!MD");
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;parseString(String,int,boolean);;;private static final Calendar parseString(String dateStr, int order,
            boolean ignoreChanges) throws CalendarParserException {
        ParserState state = new ParserState(order);

        Pattern pat = Pattern.compile("([\\s/,]+|(\\S)\\-)");
        Matcher matcher = pat.matcher(dateStr);

        int prevEnd = 0;
        while (prevEnd < dateStr.length()) {
            String token;
            if (!matcher.find()) {
                token = dateStr.substring(prevEnd);
                prevEnd = dateStr.length();
            } else {
                final boolean isMinus = (matcher.groupCount() == 2 && matcher
                        .group(2) != null);

                if (!isMinus) {
                    token = dateStr.substring(prevEnd, matcher.start());
                } else {
                    token = dateStr.substring(prevEnd, matcher.start())
                            + matcher.group(2);
                }

                prevEnd = matcher.end();
            }

            if (DEBUG) {
                System.err.println("YEAR "
                        + (state.isYearSet() ? Integer
                                .toString(state.getYear()) : "UNSET")
                        + ", MONTH "
                        + (state.isMonthSet() ? Integer.toString(state
                                .getMonth()) : "UNSET")
                        + ", DAY "
                        + (state.isDateSet() ? Integer
                                .toString(state.getDate()) : "UNSET")
                        + ", TOKEN=\"" + token + "\"");
            }

            // try to decipher next token as a number
            try {
                final int val = Integer.parseInt(token);
                parseNumericToken(dateStr, state, val);
            } catch (NumberFormatException e) {
                parseNonNumericToken(dateStr, state, token);
            }
        }

        // before checking for errors, check for missing year
        if (!state.isDateSet() && state.getYear() <= 31) {
            int tmp = state.getDate();
            state.setDate(state.getYear());
            state.setYear(tmp);
        }

        if (!state.isDateSet()) {
            if (!state.isMonthSet()) {
                if (!state.isYearSet()) {
                    throw new CalendarParserException("No date found in \""
                            + dateStr + "\"");
                } else {
                    throw new CalendarParserException("Day and month missing"
                            + " from \"" + dateStr + "\"");
                }
            } else {
                throw new CalendarParserException("Day missing from \""
                        + dateStr + "\"");
            }
        } else if (!state.isMonthSet()) {
            if (!state.isYearSet()) {
                throw new CalendarParserException("Year and month missing"
                        + " from \"" + dateStr + "\"");
            } else {
                throw new CalendarParserException("Month missing from \""
                        + dateStr + "\"");
            }
        } else if (!state.isYearSet()) {
            throw new CalendarParserException("Year missing from \"" + dateStr
                    + "\"");
        }

        final int tmpYear = state.getYear();
        if (tmpYear < 50) {
            state.setYear(tmpYear + CENTURY_OFFSET);
        } else if (tmpYear < 100) {
            state.setYear(tmpYear + (CENTURY_OFFSET - 100));
        }

        GregorianCalendar cal = new GregorianCalendar();

        state.setCalendar(cal, ignoreChanges);

        if (DEBUG) {
            System.err.println("Y" + state.getYear() + " M" + state.getMonth()
                    + " D" + state.getDate() + " H" + state.getHour() + " M"
                    + state.getMinute() + " S" + state.getSecond() + " L"
                    + state.getMillisecond() + " => " + toString(cal));
        }

        return cal;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;parseTime(String,ParserState,String);;;private static final void parseTime(String dateStr, ParserState state,
            String timeStr) throws CalendarParserException {
        int place = PLACE_HOUR;

        String tmpTime;

        final char lastChar = timeStr.charAt(timeStr.length() - 1);
        if (lastChar != 'm' && lastChar != 'M') {
            if (DEBUG) {
                System.err.println("No AM/PM in \"" + timeStr + "\" (time)");
            }
            tmpTime = timeStr;
        } else {
            final char preLast = timeStr.charAt(timeStr.length() - 2);
            if (preLast == 'a' || preLast == 'A') {
                state.setTimePostMeridian(false);
            } else if (preLast == 'p' || preLast == 'P') {
                state.setTimePostMeridian(true);
            } else {
                throw new CalendarParserException("Bad time \"" + timeStr
                        + "\" in date \"" + dateStr + "\"");
            }

            tmpTime = timeStr.substring(0, timeStr.length() - 2);
            if (DEBUG) {
                System.err.println("Found "
                        + (state.isTimePostMeridian() ? "PM" : "AM")
                        + ". now \"" + tmpTime + "\" (time)");
            }
        }

        String[] tList = tmpTime.split("[:\\.]");
        for (int i = 0; i < tList.length; i++) {
            String token = tList[i];

            if (DEBUG) {
                System.err.println("HOUR "
                        + (state.isHourSet() ? Integer
                                .toString(state.getHour()) : "UNSET")
                        + ", MINUTE "
                        + (state.isMinuteSet() ? Integer.toString(state
                                .getMinute()) : "UNSET")
                        + ", SECOND "
                        + (state.isSecondSet() ? Integer.toString(state
                                .getSecond()) : "UNSET")
                        + ", MILLISECOND "
                        + (state.isMillisecondSet() ? Integer.toString(state
                                .getMillisecond()) : "UNSET") + ", TOKEN=\""
                        + token + "\"");
            }

            final int val;
            try {
                val = Integer.parseInt(token);
            } catch (NumberFormatException nfe) {
                throw new CalendarParserException("Bad "
                        + getTimePlaceString(place) + " string \"" + token
                        + "\" in \"" + dateStr + "\"");
            }

            switch (place) {
            case PLACE_HOUR:
                try {
                    state.setHour(val);
                } catch (CalendarParserException dfe) {
                    throw new CalendarParserException(dfe.getMessage()
                            + " in \"" + dateStr + "\"");
                }
                if (DEBUG) {
                    System.err.println("Set hour to " + val);
                }
                place = PLACE_MINUTE;
                break;
            case PLACE_MINUTE:
                try {
                    state.setMinute(val);
                } catch (CalendarParserException dfe) {
                    throw new CalendarParserException(dfe.getMessage()
                            + " in \"" + dateStr + "\"");
                }
                if (DEBUG) {
                    System.err.println("Set minute to " + val);
                }
                place = PLACE_SECOND;
                break;
            case PLACE_SECOND:
                try {
                    state.setSecond(val);
                } catch (CalendarParserException dfe) {
                    throw new CalendarParserException(dfe.getMessage()
                            + " in \"" + dateStr + "\"");
                }
                if (DEBUG) {
                    System.err.println("Set second to " + val);
                }
                place = PLACE_MILLI;
                break;
            case PLACE_MILLI:
                try {
                    state.setMillisecond(val);
                } catch (CalendarParserException dfe) {
                    throw new CalendarParserException(dfe.getMessage()
                            + " in \"" + dateStr + "\"");
                }
                if (DEBUG) {
                    System.err.println("Set millisecond to " + val);
                }
                place = PLACE_UNKNOWN;
                break;
            default:
                throw new CalendarParserException("Unexpected place value "
                        + place);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;parseTimeZoneOffset(String,ParserState,String);;;private static final void parseTimeZoneOffset(String dateStr,
            ParserState state, String zoneStr) throws CalendarParserException {
        int place = PLACE_HOUR;

        final boolean isNegative = (zoneStr.charAt(0) == '-');
        if (!isNegative && zoneStr.charAt(0) != '+') {
            throw new CalendarParserException("Bad time zone offset \""
                    + zoneStr + "\" in date \"" + dateStr + "\"");
        }

        int hour = UNSET;
        int minute = UNSET;

        String[] tList = zoneStr.substring(1).split(":");
        for (int i = 0; i < tList.length; i++) {
            String token = tList[i];

            if (DEBUG) {
                System.err
                        .println("TZ_HOUR "
                                + (hour != UNSET ? Integer.toString(hour)
                                        : "UNSET")
                                + ", TZ_MINUTE "
                                + (minute != UNSET ? Integer.toString(minute)
                                        : "UNSET") + ", TOKEN=\"" + token
                                + "\"");
            }

            final int val;
            try {
                val = Integer.parseInt(token);
            } catch (NumberFormatException nfe) {
                throw new CalendarParserException("Bad time zone "
                        + getTimePlaceString(place) + " offset \"" + token
                        + "\" in \"" + dateStr + "\"");
            }

            switch (place) {
            case PLACE_HOUR:
                hour = val;
                if (DEBUG) {
                    System.err.println("Set time zone offset hour to " + val);
                }
                place = PLACE_MINUTE;
                break;
            case PLACE_MINUTE:
                minute = val;
                if (DEBUG) {
                    System.err.println("Set time zone offset minute to " + val);
                }
                place = PLACE_UNKNOWN;
                break;
            default:
                throw new CalendarParserException("Unexpected place value "
                        + place);
            }
        }

        String customID = "GMT" + (isNegative ? "-" : "+") + hour + ":"
                + (minute < 10 ? "0" : "") + minute;

        state.setTimeZone(TimeZone.getTimeZone(customID));
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;prettyString(Calendar);;;public static final String prettyString(Calendar cal) {
        if (cal == null) {
            return null;
        }

        final int calYear = cal.get(Calendar.YEAR);
        final int calMonth = cal.get(Calendar.MONTH);
        final int calDay = cal.get(Calendar.DATE);

        boolean needSpace = false;
        StringBuffer buf = new StringBuffer();

        if (calMonth >= 0 && calMonth < MONTHS.length) {
            if (needSpace) {
                buf.append(' ');
            }
            buf.append(MONTHS[calMonth][1]);
            needSpace = true;
        }
        if (calDay > 0) {
            if (needSpace) {
                buf.append(' ');
            }
            buf.append(calDay);
            if (calYear > UNSET) {
                buf.append(',');
            }
            needSpace = true;
        }
        if (calYear > UNSET) {
            if (needSpace) {
                buf.append(' ');
            }
            buf.append(calYear);
        }

        appendTimeString(buf, cal, needSpace);

        return buf.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;toString(Calendar);;;public static final String toString(Calendar cal) {
        if (cal == null) {
            return null;
        }

        final int calYear = cal.get(Calendar.YEAR);
        final int calMonth = cal.get(Calendar.MONTH);
        final int calDay = cal.get(Calendar.DATE);

        boolean needSpace = false;
        StringBuffer buf = new StringBuffer();

        if (calDay > 0) {
            if (needSpace) {
                buf.append(' ');
            }
            buf.append(calDay);
            needSpace = true;
        }
        if (calMonth >= 0 && calMonth < MONTHS.length) {
            if (needSpace) {
                buf.append(' ');
            }
            buf.append(MONTHS[calMonth][1].substring(0, 3));
            needSpace = true;
        }
        if (calYear > UNSET) {
            if (needSpace) {
                buf.append(' ');
            }
            buf.append(calYear);
        }

        appendTimeString(buf, cal, needSpace);

        return buf.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParser;toSQLString(Calendar);;;public static final String toSQLString(Calendar cal) {
        if (cal == null) {
            return null;
        }

        final int calYear = cal.get(Calendar.YEAR);
        final int calMonth = cal.get(Calendar.MONTH);
        final int calDay = cal.get(Calendar.DATE);

        StringBuffer buf = new StringBuffer();

        buf.append(calYear);
        buf.append('-');
        if ((calMonth + 1) < 10) {
            buf.append('0');
        }
        buf.append(calMonth + 1);
        buf.append('-');
        if (calDay < 10) {
            buf.append('0');
        }
        buf.append(calDay);

        appendTimeString(buf, cal, true);

        return buf.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParserException;CalendarParserException();;;public CalendarParserException() { super(); }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\expr\util\CalendarParserException;CalendarParserException(String);;;public CalendarParserException(String str) { super(str); }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Control;call(Properties,Evaluable[]);;;public Object call(Properties bindings, Evaluable[] args);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Control;checkArguments(Evaluable[]);;;public String checkArguments(Evaluable[] args);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ControlFunctionRegistry;getFunction(String);;;static public Function getFunction(String name) {
        return s_nameToFunction.get(name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ControlFunctionRegistry;getFunctionName(Function);;;static public String getFunctionName(Function f) {
        return s_functionToName.get(f);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ControlFunctionRegistry;getFunctionMapping();;;static public Set<Entry<String, Function>> getFunctionMapping() {
        return s_nameToFunction.entrySet();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ControlFunctionRegistry;getControl(String);;;static public Control getControl(String name) {
        return s_nameToControl.get(name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ControlFunctionRegistry;getControlName(Control);;;static public String getControlName(Control f) {
        return s_controlToName.get(f);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ControlFunctionRegistry;getControlMapping();;;static public Set<Entry<String, Control>> getControlMapping() {
        return s_nameToControl.entrySet();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ControlFunctionRegistry;registerFunction(String,Function);;;static protected void registerFunction(String name, Function f) {
        s_nameToFunction.put(name, f);
        s_functionToName.put(f, name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ControlFunctionRegistry;registerControl(String,Control);;;static protected void registerControl(String name, Control c) {
        s_nameToControl.put(name, c);
        s_controlToName.put(c, name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Function;call(Properties,Object[]);;;public Object call(Properties bindings, Object[] args);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Parser;Parser(String);;;public Parser(String s) throws ParsingException {
        this(s, 0, s.length());
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Parser;Parser(String,int,int);;;public Parser(String s, int from, int to) throws ParsingException {
        _scanner = new Scanner(s, from, to);
        _token = _scanner.next(true);
        
        _root = parseExpression();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Parser;getExpression();;;public Evaluable getExpression() {
        return _root;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Parser;next(boolean);;;protected void next(boolean regexPossible) {
        _token = _scanner.next(regexPossible);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Parser;makeException(String);;;protected ParsingException makeException(String desc) {
        int index = _token != null ? _token.start : _scanner.getIndex();
        
        return new ParsingException("Parsing error at offset " + index + ": " + desc);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Parser;parseExpression();;;protected Evaluable parseExpression() throws ParsingException {
        Evaluable sub = parseSubExpression();
        
        while (_token != null && 
                _token.type == TokenType.Operator && 
                ">=<==!=".indexOf(_token.text) >= 0) {
            
            String op = _token.text;
            
            next(true);
            
            Evaluable sub2 = parseSubExpression();
            
            sub = new OperatorCallExpr(new Evaluable[] { sub, sub2 }, op);
        }
        
        return sub;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Parser;parseSubExpression();;;protected Evaluable parseSubExpression() throws ParsingException {
        Evaluable sub = parseTerm();
        
        while (_token != null && 
                _token.type == TokenType.Operator && 
                "+-".indexOf(_token.text) >= 0) {
            
            String op = _token.text;
            
            next(true);
            
            Evaluable sub2 = parseSubExpression();
            
            sub = new OperatorCallExpr(new Evaluable[] { sub, sub2 }, op);
        }
        
        return sub;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Parser;parseTerm();;;protected Evaluable parseTerm() throws ParsingException {
        Evaluable factor = parseFactor();
        
        while (_token != null && 
                _token.type == TokenType.Operator && 
                "*/".indexOf(_token.text) >= 0) {
            
            String op = _token.text;
            
            next(true);
            
            Evaluable factor2 = parseFactor();
            
            factor = new OperatorCallExpr(new Evaluable[] { factor, factor2 }, op);
        }
        
        return factor;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Parser;parseFactor();;;protected Evaluable parseFactor() throws ParsingException {
        if (_token == null) {
            throw makeException("Expecting something more at end of expression");
        }
        
        Evaluable eval = null;
        
        if (_token.type == TokenType.String) {
            eval = new LiteralExpr(_token.text);
            next(false);
        } else if (_token.type == TokenType.Regex) {
            RegexToken t = (RegexToken) _token;
            
            try {
                Pattern pattern = Pattern.compile(_token.text, t.caseInsensitive ? Pattern.CASE_INSENSITIVE : 0);
                eval = new LiteralExpr(pattern);
                next(false);
            } catch (Exception e) {
                throw makeException("Bad regular expression (" + e.getMessage() + ")");
            }
        } else if (_token.type == TokenType.Number) {
            eval = new LiteralExpr(((NumberToken)_token).value);
            next(false);
        } else if (_token.type == TokenType.Operator && _token.text.equals("-")) { // unary minus?
            next(true);
            
            if (_token != null && _token.type == TokenType.Number) {
                eval = new LiteralExpr(-((NumberToken)_token).value);
                next(false);
            } else {
                throw makeException("Bad negative number");
            }
        } else if (_token.type == TokenType.Identifier) {
            String text = _token.text;
            next(false);
            
            if (_token == null || _token.type != TokenType.Delimiter || !_token.text.equals("(")) {
                eval = "null".equals(text) ? new LiteralExpr(null) : new VariableExpr(text);
            } else {
                Function f = ControlFunctionRegistry.getFunction(text);
                Control c = ControlFunctionRegistry.getControl(text);
                if (f == null && c == null) {
                    throw makeException("Unknown function or control named " + text);
                }
                
                next(true); // swallow (
                
                List<Evaluable> args = parseExpressionList(")");
                
                if (c != null) {
                    Evaluable[] argsA = makeArray(args);
                    String errorMessage = c.checkArguments(argsA);
                    if (errorMessage != null) {
                        throw makeException(errorMessage);
                    }
                    eval = new ControlCallExpr(argsA, c);
                } else {
                    eval = new FunctionCallExpr(makeArray(args), f);
                }
            }
        } else if (_token.type == TokenType.Delimiter && _token.text.equals("(")) {
            next(true);
            
            eval = parseExpression();
            
            if (_token != null && _token.type == TokenType.Delimiter && _token.text.equals(")")) {
                next(false);
            } else {
                throw makeException("Missing )");
            }
        } else if (_token.type == TokenType.Delimiter && _token.text.equals("[")) { // [ ... ] array
        	next(true); // swallow [
        	
            List<Evaluable> args = parseExpressionList("]");

            eval = new FunctionCallExpr(makeArray(args), new ArgsToArray());
        } else {
            throw makeException("Missing number, string, identifier, regex, or parenthesized expression");
        }
        
        while (_token != null) {
            if (_token.type == TokenType.Operator && _token.text.equals(".")) {
                next(false); // swallow .
                
                if (_token == null || _token.type != TokenType.Identifier) {
                    throw makeException("Missing function name");
                }
                
                String identifier = _token.text;
                next(false);
                
                if (_token != null && _token.type == TokenType.Delimiter && _token.text.equals("(")) {
                    next(true); // swallow (
                    
                    Function f = ControlFunctionRegistry.getFunction(identifier);
                    if (f == null) {
                        throw makeException("Unknown function " + identifier);
                    }
                    
                    List<Evaluable> args = parseExpressionList(")");
                    args.add(0, eval);
                    
                    eval = new FunctionCallExpr(makeArray(args), f);
                } else {
                    eval = new FieldAccessorExpr(eval, identifier);
                }
            } else if (_token.type == TokenType.Delimiter && _token.text.equals("[")) {
                next(true); // swallow [
                
                List<Evaluable> args = parseExpressionList("]");
                args.add(0, eval);
                
                eval = new FunctionCallExpr(makeArray(args), ControlFunctionRegistry.getFunction("get"));
            } else {
                break;
            }
        }
        
        return eval;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Parser;parseExpressionList(String);;;protected List<Evaluable> parseExpressionList(String closingDelimiter) throws ParsingException {
        List<Evaluable> l = new LinkedList<Evaluable>();
        
        if (_token != null && 
            (_token.type != TokenType.Delimiter || !_token.text.equals(closingDelimiter))) {
            
            while (_token != null) {
                Evaluable eval = parseExpression();
                
                l.add(eval);
                
                if (_token != null && _token.type == TokenType.Delimiter && _token.text.equals(",")) {
                    next(true); // swallow comma, loop back for more
                } else {
                    break;
                }
            }
        }
        
        if (_token != null && _token.type == TokenType.Delimiter && _token.text.equals(closingDelimiter)) {
            next(false); // swallow closing delimiter
        } else {
            throw makeException("Missing " + closingDelimiter);
        }
        
        return l;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Parser;makeArray(List<Evaluable>);;;protected Evaluable[] makeArray(List<Evaluable> l) {
        Evaluable[] a = new Evaluable[l.size()];
        l.toArray(a);
        
        return a;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Scanner;Token(int,int,TokenType,String);;;Token(int start, int end, TokenType type, String text) {
            this.start = start;
            this.end = end;
            this.type = type;
            this.text = text;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Scanner;ErrorToken(int,int,String,String);;;public ErrorToken(int start, int end, String text, String detail) {
            super(start, end, TokenType.Error, text);
            this.detail = detail;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Scanner;NumberToken(int,int,String,double);;;public NumberToken(int start, int end, String text, double value) {
            super(start, end, TokenType.Number, text);
            this.value = value;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Scanner;RegexToken(int,int,String,boolean);;;public RegexToken(int start, int end, String text, boolean caseInsensitive) {
            super(start, end, TokenType.Regex, text);
            this.caseInsensitive = caseInsensitive;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Scanner;Scanner(String);;;public Scanner(String s) {
        this(s, 0, s.length());
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Scanner;Scanner(String,int,int);;;public Scanner(String s, int from, int to) {
        _text = s;
        _index = from;
        _limit = to;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Scanner;getIndex();;;public int getIndex() {
        return _index;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\Scanner;next(boolean);;;public Token next(boolean regexPossible) {
        // skip whitespace
        while (_index < _limit && Character.isWhitespace(_text.charAt(_index))) {
            _index++;
        }
        if (_index == _limit) {
            return null;
        }
        
        char c = _text.charAt(_index);
        int start = _index;
        String detail = null;
        
        if (Character.isDigit(c)) { // number literal
            double value = 0;
            
            while (_index < _limit && Character.isDigit(c = _text.charAt(_index))) {
                value = value * 10 + (c - '0');
                _index++;
            }
            
            if (_index < _limit && c == '.') {
                _index++;
                
                double division = 1;
                while (_index < _limit && Character.isDigit(c = _text.charAt(_index))) {
                    value = value * 10 + (c - '0');
                    division *= 10;
                    _index++;
                }
                
                value /= division;
            }
            
            // TODO: support exponent e notation
            
            return new NumberToken(
                start, 
                _index, 
                _text.substring(start, _index),
                value
            );
        } else if (c == '"' || c == '\'') { 
            /*
             *  String Literal
             */
            
            StringBuffer sb = new StringBuffer();
            char delimiter = c;
            
            _index++; // skip opening delimiter
            
            while (_index < _limit) {
                c = _text.charAt(_index);
                if (c == delimiter) {
                    _index++; // skip closing delimiter
                    
                    return new Token(
                        start, 
                        _index, 
                        TokenType.String, 
                        sb.toString()
                    );
                } else if (c == '\\') {
                    _index++; // skip escaping marker
                    if (_index < _limit) {
                        char c2 = _text.charAt(_index);
                        if (c2 == 't') {
                            sb.append('\t');
                        } else if (c2 == 'n') {
                            sb.append('\n');
                        } else if (c2 == 'r') {
                            sb.append('\r');
                        } else if (c2 == '\\') {
                            sb.append('\\');
                        } else {
                            sb.append(c2);
                        }
                    }
                } else {
                    sb.append(c);
                }
                _index++;
            }
            
            detail = "String not properly closed";
            // fall through
            
        } else if (Character.isLetter(c) || c == '_') { // identifier
            while (_index < _limit) {
                char c1 = _text.charAt(_index);
                if (c1 == '_' || Character.isLetterOrDigit(c1)) {
                    _index++;
                } else {
                    break;
                }
            }
            
            return new Token(
                start, 
                _index, 
                TokenType.Identifier, 
                _text.substring(start, _index)
            );
        } else if (c == '/' && regexPossible) {
            /*
             *  Regex literal
             */
            StringBuffer sb = new StringBuffer();
            
            _index++; // skip opening delimiter
            
            while (_index < _limit) {
                c = _text.charAt(_index);
                if (c == '/') {
                    _index++; // skip closing delimiter
                    
                    boolean caseInsensitive = false;
                    if (_index < _limit && _text.charAt(_index) == 'i') {
                        caseInsensitive = true;
                        _index++;
                    }
                    
                    return new RegexToken(
                        start, 
                        _index, 
                        sb.toString(),
                        caseInsensitive
                    );
                } else if (c == '\\') {
                    sb.append(c);
                    
                    _index++; // skip escaping marker
                    if (_index < _limit) {
                        sb.append(_text.charAt(_index));
                    }
                } else {
                    sb.append(c);
                }
                _index++;
            }
            
            detail = "Regex not properly closed";
            // fall through
        } else if ("+-*/.".indexOf(c) >= 0) { // operator
            _index++;
            
            return new Token(
                start, 
                _index, 
                TokenType.Operator, 
                _text.substring(start, _index)
            );
        } else if ("()[],".indexOf(c) >= 0) { // delimiter
            _index++;
            
            return new Token(
                start, 
                _index, 
                TokenType.Delimiter, 
                _text.substring(start, _index)
            );
        } else if (c == '!' && _index < _limit - 1 && _text.charAt(_index + 1) == '=') {
            _index += 2;
            return new Token(
                start, 
                _index, 
                TokenType.Operator, 
                _text.substring(start, _index)
            );
        } else if (c == '<') {
            if (_index < _limit - 1 && 
                    (_text.charAt(_index + 1) == '=' || 
                     _text.charAt(_index + 1) == '>')) {
                
                _index += 2;
                return new Token(
                    start, 
                    _index, 
                    TokenType.Operator, 
                    _text.substring(start, _index)
                );
            } else {
                _index++;
                return new Token(
                    start, 
                    _index, 
                    TokenType.Operator, 
                    _text.substring(start, _index)
                );
            }
        } else if (">=".indexOf(c) >= 0) { // operator
            if (_index < _limit - 1 && _text.charAt(_index + 1) == '=') {
                _index += 2;
                return new Token(
                    start, 
                    _index, 
                    TokenType.Operator, 
                    _text.substring(start, _index)
                );
            } else {
                _index++;
                return new Token(
                    start, 
                    _index, 
                    TokenType.Operator, 
                    _text.substring(start, _index)
                );
            }
        } else {
            _index++;
            detail = "Unrecognized symbol";
        }
        
        return new ErrorToken(
            start, 
            _index, 
            _text.substring(start, _index),
            detail
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\ControlCallExpr;ControlCallExpr(Evaluable[],Control);;;public ControlCallExpr(Evaluable[] args, Control c) {
        _args = args;
        _control = c;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\ControlCallExpr;evaluate(Properties);;;public Object evaluate(Properties bindings) {
        return _control.call(bindings, _args);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\ControlCallExpr;toString();;;@Override
    public String toString() {
        StringBuffer sb = new StringBuffer();
        
        for (Evaluable ev : _args) {
            if (sb.length() > 0) {
                sb.append(", ");
            }
            sb.append(ev.toString());
        }
        
        return _control.getClass().getSimpleName() + "(" + sb.toString() + ")";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\FieldAccessorExpr;FieldAccessorExpr(Evaluable,String);;;public FieldAccessorExpr(Evaluable inner, String fieldName) {
        _inner = inner;
        _fieldName = fieldName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\FieldAccessorExpr;evaluate(Properties);;;public Object evaluate(Properties bindings) {
        Object o = _inner.evaluate(bindings);
        if (ExpressionUtils.isError(o)) {
            return o; // bubble the error up
        } else if (o == null) {
            return new EvalError("Cannot retrieve field from null");
        } else if (o instanceof HasFields) {
            return ((HasFields) o).getField(_fieldName, bindings);
        } else {
            return new EvalError("Object does not have any field, including " + _fieldName);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\FieldAccessorExpr;toString();;;@Override
    public String toString() {
        return _inner.toString() + "." + _fieldName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\FunctionCallExpr;FunctionCallExpr(Evaluable[],Function);;;public FunctionCallExpr(Evaluable[] args, Function f) {
        _args = args;
        _function = f;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\FunctionCallExpr;evaluate(Properties);;;public Object evaluate(Properties bindings) {
        Object[] args = new Object[_args.length];
        for (int i = 0; i < _args.length; i++) {
            Object v = _args[i].evaluate(bindings);
            if (ExpressionUtils.isError(v)) {
                return v; // bubble up the error
            }
             args[i] = v;
        }
        return _function.call(bindings, args);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\FunctionCallExpr;toString();;;public String toString() {
        StringBuffer sb = new StringBuffer();
        
        for (Evaluable ev : _args) {
            if (sb.length() > 0) {
                sb.append(", ");
            }
            sb.append(ev.toString());
        }
        
        return _function.getClass().getSimpleName() + "(" + sb.toString() + ")";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\LiteralExpr;LiteralExpr(Object);;;public LiteralExpr(Object value) {
        _value = value;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\LiteralExpr;evaluate(Properties);;;public Object evaluate(Properties bindings) {
        return _value;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\LiteralExpr;toString();;;public String toString() {
        return _value instanceof String ? JSONObject.quote((String) _value) : _value.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\OperatorCallExpr;OperatorCallExpr(Evaluable[],String);;;public OperatorCallExpr(Evaluable[] args, String op) {
        _args = args;
        _op = op;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\OperatorCallExpr;evaluate(Properties);;;public Object evaluate(Properties bindings) {
        Object[] args = new Object[_args.length];
        for (int i = 0; i < _args.length; i++) {
            Object v = _args[i].evaluate(bindings);
            if (ExpressionUtils.isError(v)) {
                return v;
            }
            args[i] = v;
        }
        
        if (args.length == 2) {
            if (args[0] != null && args[1] != null) {
                if (args[0] instanceof Number && args[1] instanceof Number) {
                    if ("+".equals(_op)) {
                        return ((Number) args[0]).doubleValue() + ((Number) args[1]).doubleValue();
                    } else if ("-".equals(_op)) {
                        return ((Number) args[0]).doubleValue() - ((Number) args[1]).doubleValue();
                    } else if ("*".equals(_op)) {
                        return ((Number) args[0]).doubleValue() * ((Number) args[1]).doubleValue();
                    } else if ("/".equals(_op)) {
                        return ((Number) args[0]).doubleValue() / ((Number) args[1]).doubleValue();
                    } else if (">".equals(_op)) {
                        return ((Number) args[0]).doubleValue() > ((Number) args[1]).doubleValue();
                    } else if (">=".equals(_op)) {
                        return ((Number) args[0]).doubleValue() >= ((Number) args[1]).doubleValue();
                    } else if ("<".equals(_op)) {
                        return ((Number) args[0]).doubleValue() < ((Number) args[1]).doubleValue();
                    } else if ("<=".equals(_op)) {
                        return ((Number) args[0]).doubleValue() <= ((Number) args[1]).doubleValue();
                    }
                }
                
                if ("+".equals(_op)) {
                    return args[0].toString() + args[1].toString();
                }
            }
            
            if ("==".equals(_op)) {
                if (args[0] != null) {
                    return args[0].equals(args[1]);
                } else {
                    return args[1] == null;
                }
            } else if ("!=".equals(_op)) {
                if (args[0] != null) {
                    return !args[0].equals(args[1]);
                } else {
                    return args[1] != null;
                }
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\OperatorCallExpr;toString();;;@Override
    public String toString() {
        StringBuffer sb = new StringBuffer();
        
        for (Evaluable ev : _args) {
            if (sb.length() > 0) {
                sb.append(' ');
                sb.append(_op);
                sb.append(' ');
            }
            sb.append(ev.toString());
        }
        
        return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\VariableExpr;VariableExpr(String);;;public VariableExpr(String name) {
        _name = name;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\VariableExpr;evaluate(Properties);;;public Object evaluate(Properties bindings) {
        return bindings.get(_name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\VariableExpr;toString();;;public String toString() {
        return _name;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\ast\VariableExpr;getName();;;public String getName() {
        return _name;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\ForEach;checkArguments(Evaluable[]);;;public String checkArguments(Evaluable[] args) {
        if (args.length != 3) {
            return ControlFunctionRegistry.getControlName(this) + " expects 3 arguments";
        } else if (!(args[1] instanceof VariableExpr)) {
            return ControlFunctionRegistry.getControlName(this) + 
                " expects second argument to be a variable name";
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\ForEach;call(Properties,Evaluable[]);;;public Object call(Properties bindings, Evaluable[] args) {
        Object o = args[0].evaluate(bindings);
        if (ExpressionUtils.isError(o)) {
            return o;
        } else if (!ExpressionUtils.isArrayOrCollection(o)) {
            return new EvalError("First argument to forEach is not an array");
        }
        
        String name = ((VariableExpr) args[1]).getName();
        
        Object oldValue = bindings.get(name);
        try {
            List<Object> results = null;
            
            if (o.getClass().isArray()) {
                Object[] values = (Object[]) o;
                
                results = new ArrayList<Object>(values.length);
                for (Object v : values) {
                    bindings.put(name, v);
                    
                    Object r = args[2].evaluate(bindings);
                    
                    results.add(r);
                }
            } else {
                Collection<Object> collection = ExpressionUtils.toObjectCollection(o);
                
                results = new ArrayList<Object>(collection.size());
                
                for (Object v : collection) {
                    bindings.put(name, v);
                    
                    Object r = args[2].evaluate(bindings);
                    
                    results.add(r);
                }
            }
            
            return results.toArray(); 
        } finally {
            /*
             *  Restore the old value bound to the variable, if any.
             */
            if (oldValue != null) {
                bindings.put(name, oldValue);
            } else {
                bindings.remove(name);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\ForEach;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value(
            "Evaluates expression a to an array. Then for each array element, binds its value to variable name v, evaluates expression e, and pushes the result onto the result array."
        );
        writer.key("params"); writer.value("expression a, variable v, expression e");
        writer.key("returns"); writer.value("array");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\ForNonBlank;checkArguments(Evaluable[]);;;public String checkArguments(Evaluable[] args) {
        if (args.length != 4) {
            return ControlFunctionRegistry.getControlName(this) + " expects 4 arguments";
        } else if (!(args[1] instanceof VariableExpr)) {
            return ControlFunctionRegistry.getControlName(this) + 
                " expects second argument to be a variable name";
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\ForNonBlank;call(Properties,Evaluable[]);;;public Object call(Properties bindings, Evaluable[] args) {
        Object o = args[0].evaluate(bindings);
        
        Evaluable var = args[1];
        String name = ((VariableExpr) var).getName();
        
        if (ExpressionUtils.isNonBlankData(o)) {
            Object oldValue = bindings.get(name);
            bindings.put(name, o);
            
            try {
                return args[2].evaluate(bindings);
            } finally {
                /*
                 *  Restore the old value bound to the variable, if any.
                 */
                if (oldValue != null) {
                    bindings.put(name, oldValue);
                } else {
                    bindings.remove(name);
                }
            }
        } else {
            return args[3].evaluate(bindings);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\ForNonBlank;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value(
            "Evaluates expression o. If it is non-blank, binds its value to variable name v, evaluates expression eNonBlank and returns the result. " +
            "Otherwise (if o evaluates to blank), evaluates expression eBlank and returns that result instead."
        );
        writer.key("params"); writer.value("expression o, variable v, expression eNonBlank, expression eBlank");
        writer.key("returns"); writer.value("Depends on actual arguments");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\If;checkArguments(Evaluable[]);;;public String checkArguments(Evaluable[] args) {
        if (args.length != 3) {
            return ControlFunctionRegistry.getControlName(this) + " expects 3 arguments";
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\If;call(Properties,Evaluable[]);;;public Object call(Properties bindings, Evaluable[] args) {
        Object o = args[0].evaluate(bindings);
        if (ExpressionUtils.isError(o)) {
            return o; // bubble the error up
        } else if (ExpressionUtils.isTrue(o)) {
            return args[1].evaluate(bindings);
        } else {
            return args[2].evaluate(bindings);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\If;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value(
            "Evaluates expression o. If it is true, evaluates expression eTrue and returns the result. " +
            "Otherwise, evaluates expression eFalse and returns that result instead."
        );
        writer.key("params"); writer.value("expression o, expression eTrue, expression eFalse");
        writer.key("returns"); writer.value("Depends on actual arguments");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsBlank;getDescription();;;@Override
    protected String getDescription() {
        return "Returns whether o is null or an empty string";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsBlank;test(Object);;;@Override
    protected boolean test(Object o) {
        return !ExpressionUtils.isNonBlankData(o);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsError;getDescription();;;@Override
    protected String getDescription() {
        return "Returns whether o is an error";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsError;test(Object);;;@Override
    protected boolean test(Object o) {
        return ExpressionUtils.isError(o);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsNonBlank;getDescription();;;@Override
    protected String getDescription() {
        return "Returns whether o is not null and not an empty string";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsNonBlank;test(Object);;;@Override
    protected boolean test(Object o) {
        return ExpressionUtils.isNonBlankData(o);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsNotNull;getDescription();;;@Override
    protected String getDescription() {
        return "Returns whether o is not null";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsNotNull;test(Object);;;@Override
    protected boolean test(Object o) {
        return o != null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsNull;getDescription();;;@Override
    protected String getDescription() {
        return "Returns whether o is null";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsNull;test(Object);;;@Override
    protected boolean test(Object o) {
        return o == null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsNumeric;getDescription();;;@Override
    protected String getDescription() {
        return "Returns whether o can represent a number";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsNumeric;test(Object);;;@Override
    protected boolean test(Object o) {
        if (o instanceof Number) return true;
        
        String s = (o instanceof String) ? (String) o : o.toString();
        
        return StringUtils.isNumeric(s);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsTest;checkArguments(Evaluable[]);;;public String checkArguments(Evaluable[] args) {
        if (args.length != 1) {
            return ControlFunctionRegistry.getControlName(this) + " expects one argument";
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsTest;call(Properties,Evaluable[]);;;public Object call(Properties bindings, Evaluable[] args) {
        Object o = args[0].evaluate(bindings);
        
        return test(o);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsTest;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value(getDescription());
        writer.key("params"); writer.value("expression o");
        writer.key("returns"); writer.value("boolean");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsTest;test(Object);;;abstract protected boolean test(Object v);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\IsTest;getDescription();;;abstract protected String getDescription();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\With;checkArguments(Evaluable[]);;;public String checkArguments(Evaluable[] args) {
        if (args.length != 3) {
            return ControlFunctionRegistry.getControlName(this) + " expects 3 arguments";
        } else if (!(args[1] instanceof VariableExpr)) {
            return ControlFunctionRegistry.getControlName(this) + 
                " expects second argument to be a variable name";
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\With;call(Properties,Evaluable[]);;;public Object call(Properties bindings, Evaluable[] args) {
        Object o = args[0].evaluate(bindings);
        String name = ((VariableExpr) args[1]).getName();
        
        Object oldValue = bindings.get(name);
        try {
            if (o != null) {
                bindings.put(name, o);
            } else {
                bindings.remove(name);
            }
            
            return args[2].evaluate(bindings);
        } finally {
            /*
             *  Restore the old value bound to the variable, if any.
             */
            if (oldValue != null) {
                bindings.put(name, oldValue);
            } else {
                bindings.remove(name);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\gel\controls\With;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("description"); writer.value(
            "Evaluates expression o and binds its value to variable name v. Then evaluates expression e and returns that result"
        );
        writer.key("params"); writer.value("expression o, variable v, expression e");
        writer.key("returns"); writer.value("Depends on actual arguments");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\Change;apply(Project);;;public void apply(Project project);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\Change;revert(Project);;;public void revert(Project project);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\Change;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException;
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\ChangeSequence;ChangeSequence(Change[]);;;public ChangeSequence(Change[] changes) {
        _changes = changes;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\ChangeSequence;apply(Project);;;public void apply(Project project) {
        synchronized (project) {
            for (int i = 0; i < _changes.length; i++) {
                _changes[i].apply(project);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\ChangeSequence;revert(Project);;;public void revert(Project project) {
        synchronized (project) {
            for (int i = _changes.length - 1; i >= 0 ; i--) {
                _changes[i].apply(project);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\ChangeSequence;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
        writer.write("count="); writer.write(Integer.toString(_changes.length)); writer.write('\n');
        for (int i = 0; i < _changes.length; i++) {
            Change change = _changes[i];
            
            writer.write(change.getClass().getName()); writer.write('\n');
            
            change.save(writer, options);
        }
        writer.write("/ec/\n"); // end of change marker
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\ChangeSequence;load(LineNumberReader,Pool);;;static public Change load(LineNumberReader reader, Pool pool) throws Exception {
        String line = reader.readLine();
        if (line == null) line = "";
        int equal = line.indexOf('=');
        
        assert "count".equals(line.substring(0, equal));
        
        int count = Integer.parseInt(line.substring(equal + 1));
        Change[] changes = new Change[count];
        
        for (int i = 0; i < count; i++) {
            changes[i] = History.readOneChange(reader, pool);
        }
        
        line = reader.readLine();
        assert "/ec/".equals(line);
        
        return new ChangeSequence(changes);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;readOneChange(InputStream,Pool);;;static public Change readOneChange(InputStream in, Pool pool) throws Exception {
        LineNumberReader reader = new LineNumberReader(new InputStreamReader(in));
        try {
            return readOneChange(reader, pool);
        } finally {
            reader.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;readOneChange(LineNumberReader,Pool);;;static public Change readOneChange(LineNumberReader reader, Pool pool) throws Exception {
        /* String version = */ reader.readLine();
        
        String className = reader.readLine();
        Class<? extends Change> klass = getChangeClass(className);
        
        Method load = klass.getMethod("load", LineNumberReader.class, Pool.class);
        
        return (Change) load.invoke(null, reader, pool);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;writeOneChange(OutputStream,Change,Pool);;;static public void writeOneChange(OutputStream out, Change change, Pool pool) throws IOException {
        Writer writer = new OutputStreamWriter(out);
        try {
            History.writeOneChange(writer, change, pool);
        } finally {
            writer.flush();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;writeOneChange(Writer,Change,Pool);;;static public void writeOneChange(Writer writer, Change change, Pool pool) throws IOException {
        Properties options = new Properties();
        options.setProperty("mode", "save");
        options.put("pool", pool);
        
        writeOneChange(writer, change, options);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;writeOneChange(Writer,Change,Properties);;;static public void writeOneChange(Writer writer, Change change, Properties options) throws IOException {
        writer.write(GridworksServlet.getVersion()); writer.write('\n');
        writer.write(change.getClass().getName()); writer.write('\n');
            
        change.save(writer, options);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;getChangeClass(String);;;@SuppressWarnings("unchecked")
    static public Class<? extends Change> getChangeClass(String className) throws ClassNotFoundException {
        return (Class<? extends Change>) Class.forName(className);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;History(Project);;;public History(Project project) {
        _projectID = project.id;
        _pastEntries = new ArrayList<HistoryEntry>();
        _futureEntries = new ArrayList<HistoryEntry>();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;addEntry(HistoryEntry);;;synchronized public void addEntry(HistoryEntry entry) {
        entry.apply(ProjectManager.singleton.getProject(_projectID));
        _pastEntries.add(entry);
        
        setModified();
        
        // Any new change will clear all future entries.
        List<HistoryEntry> futureEntries = _futureEntries;
        _futureEntries = new ArrayList<HistoryEntry>();
        
        for (HistoryEntry entry2 : futureEntries) {
            try {
                // remove residual data on disk
                entry2.delete();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;setModified();;;protected void setModified() {
        ProjectManager.singleton.getProjectMetadata(_projectID).updateModified();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;getLastPastEntries(int);;;synchronized public List<HistoryEntry> getLastPastEntries(int count) {
        if (count <= 0) {
            return new LinkedList<HistoryEntry>(_pastEntries);
        } else {
            return _pastEntries.subList(Math.max(_pastEntries.size() - count, 0), _pastEntries.size());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;undoRedo(long);;;synchronized public void undoRedo(long lastDoneEntryID) {
        if (lastDoneEntryID == 0) {
            // undo all the way back to the start of the project
            undo(_pastEntries.size());
        } else {
            for (int i = 0; i < _pastEntries.size(); i++) {
                if (_pastEntries.get(i).id == lastDoneEntryID) {
                    undo(_pastEntries.size() - i - 1);
                    return;
                }
            }
            
            for (int i = 0; i < _futureEntries.size(); i++) {
                if (_futureEntries.get(i).id == lastDoneEntryID) {
                    redo(i + 1);
                    return;
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;getPrecedingEntryID(long);;;synchronized public long getPrecedingEntryID(long entryID) {
        if (entryID == 0) {
            return -1;
        } else {
            for (int i = 0; i < _pastEntries.size(); i++) {
                if (_pastEntries.get(i).id == entryID) {
                    return i == 0 ? 0 : _pastEntries.get(i - 1).id;
                }
            }
            
            for (int i = 0; i < _futureEntries.size(); i++) {
                if (_futureEntries.get(i).id == entryID) {
                    if (i > 0) {
                        return _futureEntries.get(i - 1).id;
                    } else if (_pastEntries.size() > 0) {
                        return _pastEntries.get(_pastEntries.size() - 1).id;
                    } else {
                        return 0;
                    }
                }
            }
        }
        return -1;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;getEntry(long);;;protected HistoryEntry getEntry(long entryID) {
        for (int i = 0; i < _pastEntries.size(); i++) {
            if (_pastEntries.get(i).id == entryID) {
                return _pastEntries.get(i);
            }
        }
        
        for (int i = 0; i < _futureEntries.size(); i++) {
            if (_futureEntries.get(i).id == entryID) {
                return _futureEntries.get(i);
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;undo(int);;;protected void undo(int times) {
        Project project = ProjectManager.singleton.getProject(_projectID);
        
        while (times > 0 && _pastEntries.size() > 0) {
            HistoryEntry entry = _pastEntries.get(_pastEntries.size() - 1);
            
            entry.revert(project);
            
            setModified();
            times--;
            
            _pastEntries.remove(_pastEntries.size() - 1);
            _futureEntries.add(0, entry);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;redo(int);;;protected void redo(int times) {
        Project project = ProjectManager.singleton.getProject(_projectID);
        
        while (times > 0 && _futureEntries.size() > 0) {
            HistoryEntry entry = _futureEntries.get(0);
            
            entry.apply(project);
            
            setModified();
            times--;
            
            _pastEntries.add(entry);
            _futureEntries.remove(0);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;write(JSONWriter,Properties);;;synchronized public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        
        writer.key("past"); writer.array();
        for (HistoryEntry entry : _pastEntries) {
            entry.write(writer, options);
        }
        writer.endArray();
        
        writer.key("future"); writer.array();
        for (HistoryEntry entry : _futureEntries) {
            entry.write(writer, options);
        }
        writer.endArray();
        
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;save(Writer,Properties);;;synchronized public void save(Writer writer, Properties options) throws IOException {
        writer.write("pastEntryCount="); writer.write(Integer.toString(_pastEntries.size())); writer.write('\n');
        for (HistoryEntry entry : _pastEntries) {
            entry.save(writer, options); writer.write('\n');
        }
        
        writer.write("futureEntryCount="); writer.write(Integer.toString(_futureEntries.size())); writer.write('\n');
        for (HistoryEntry entry : _futureEntries) {
            entry.save(writer, options); writer.write('\n');
        }
        
        writer.write("/e/\n");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\History;load(Project,LineNumberReader);;;synchronized public void load(Project project, LineNumberReader reader) throws Exception {
        String line;
        while ((line = reader.readLine()) != null && !"/e/".equals(line)) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            String value = line.substring(equal + 1);
            
            if ("pastEntryCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                for (int i = 0; i < count; i++) {
                    _pastEntries.add(HistoryEntry.load(project, reader.readLine()));
                }
            } else if ("futureEntryCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                for (int i = 0; i < count; i++) {
                    _futureEntries.add(HistoryEntry.load(project, reader.readLine()));
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryEntry;allocateID();;;static public long allocateID() {
        return Math.round(Math.random() * 1000000) + System.currentTimeMillis();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryEntry;HistoryEntry(long,Project,String,AbstractOperation,Change);;;public HistoryEntry(long id, Project project, String description, AbstractOperation operation, Change change) {
        this.id = id;
        this.projectID = project.id;
        this.description = description;
        this.operation = operation;
        this.time = new Date();
        
        _change = change;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryEntry;HistoryEntry(long,long,String,AbstractOperation,Date);;;protected HistoryEntry(long id, long projectID, String description, AbstractOperation operation, Date time) {
        this.id = id;
        this.projectID = projectID;
        this.description = description;
        this.operation = operation;
        this.time = time;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryEntry;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("id"); writer.value(id);
        writer.key("description"); writer.value(description);
        writer.key("time"); writer.value(ParsingUtilities.dateToString(time));
        if ("save".equals(options.getProperty("mode")) && operation != null) {
            writer.key(OPERATION); operation.write(writer, options);
        }
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryEntry;apply(Project);;;public void apply(Project project) {
        if (_change == null) {
            loadChange();
        }
        
        synchronized (project) {
            _change.apply(project);
            
            // When a change is applied, it can hang on to old data (in order to be able
            // to revert later). Hence, we need to save the change out.
            
            try {
                saveChange();
            } catch (Exception e) {
                e.printStackTrace();
                
                _change.revert(project);
                
                throw new RuntimeException("Failed to apply change", e);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryEntry;revert(Project);;;public void revert(Project project) {
        if (_change == null) {
            loadChange();
        }
        _change.revert(project);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryEntry;delete();;;public void delete() {
        File file = getChangeFile();
        if (file.exists()) {
            file.delete();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryEntry;save(Writer,Properties);;;public void save(Writer writer, Properties options) {
        JSONWriter jsonWriter = new JSONWriter(writer);
        try {
            write(jsonWriter, options);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryEntry;load(Project,String);;;static public HistoryEntry load(Project project, String s) throws Exception {
        JSONObject obj = ParsingUtilities.evaluateJsonStringToObject(s);
        
        AbstractOperation operation = null;
        if (obj.has(OPERATION) && !obj.isNull(OPERATION)) {
            operation = OperationRegistry.reconstruct(project, obj.getJSONObject(OPERATION));
        }
        
        return new HistoryEntry(
            obj.getLong("id"),
            project.id,
            obj.getString("description"),
            operation,
            ParsingUtilities.stringToDate(obj.getString("time"))
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryEntry;loadChange();;;protected void loadChange() {
        File changeFile = getChangeFile();
        
        try {
            loadChange(changeFile);
        } catch (Exception e) {
            throw new RuntimeException("Failed to load change file " + changeFile.getAbsolutePath(), e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryEntry;loadChange(File);;;protected void loadChange(File file) throws Exception {
        ZipFile zipFile = new ZipFile(file);
        try {
            Pool pool = new Pool();
            ZipEntry poolEntry = zipFile.getEntry("pool.txt");
            if (poolEntry != null) {
                pool.load(new InputStreamReader(
                    zipFile.getInputStream(poolEntry)));
            } // else, it's a legacy project file
            
            _change = History.readOneChange(
                    zipFile.getInputStream(zipFile.getEntry("change.txt")), pool);
        } finally {
            zipFile.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryEntry;saveChange();;;protected void saveChange() throws Exception {
        File changeFile = getChangeFile();
        if (!(changeFile.exists())) {
            saveChange(changeFile);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryEntry;saveChange(File);;;protected void saveChange(File file) throws Exception {
        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file));
        try {
            Pool pool = new Pool();
            
            out.putNextEntry(new ZipEntry("change.txt"));
            try {
                History.writeOneChange(out, _change, pool);
            } finally {
                out.closeEntry();
            }
            
            out.putNextEntry(new ZipEntry("pool.txt"));
            try {
                pool.save(out);
            } finally {
                out.closeEntry();
            }
        } finally {
            out.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryEntry;getChangeFile();;;protected File getChangeFile() {
        return new File(getHistoryDir(), id + ".change.zip");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryEntry;getHistoryDir();;;protected File getHistoryDir() {
        File dir = new File(ProjectManager.singleton.getProjectDir(projectID), "history");
        dir.mkdirs();
        
        return dir;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryProcess;HistoryProcess(Project,long);;;public HistoryProcess(Project project, long lastDoneID) {
        _project = project;
        _lastDoneID = lastDoneID;
        
        if (_lastDoneID == 0) {
            _description = "Undo all";
        } else {
            HistoryEntry entry = _project.history.getEntry(_lastDoneID);
            _description = "Undo/redo until after " + entry.description;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryProcess;cancel();;;public void cancel() {
        throw new RuntimeException(WARN);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryProcess;isImmediate();;;public boolean isImmediate() {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryProcess;performImmediate();;;public HistoryEntry performImmediate() {
        _project.history.undoRedo(_lastDoneID);
        _done = true;
        
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryProcess;startPerforming(ProcessManager);;;public void startPerforming(ProcessManager manager) {
        throw new RuntimeException(WARN);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryProcess;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("description"); writer.value(_description);
        writer.key("immediate"); writer.value(true);
        writer.key("status"); writer.value(_done ? "done" : "pending");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryProcess;isDone();;;public boolean isDone() {
        throw new RuntimeException(WARN);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\history\HistoryProcess;isRunning();;;public boolean isRunning() {
        throw new RuntimeException(WARN);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\ExcelImporter;takesReader();;;public boolean takesReader() {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\ExcelImporter;read(Reader,Project,Properties);;;public void read(Reader reader, Project project, Properties options) throws Exception {
        throw new UnsupportedOperationException();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\ExcelImporter;read(InputStream,Project,Properties);;;public void read(InputStream inputStream, Project project, Properties options) throws Exception {
        int ignoreLines = ImporterUtilities.getIntegerOption("ignore", options, -1);
        int limit = ImporterUtilities.getIntegerOption("limit",options,-1);
        int skip = ImporterUtilities.getIntegerOption("skip",options,0);

        Workbook wb = null;
        try {
            wb = _xmlBased ?
                new XSSFWorkbook(inputStream) :
                new HSSFWorkbook(new POIFSFileSystem(inputStream));
        } catch (IOException e) {
            throw new Exception(
                "Attempted to parse file as Excel file but failed. " +
                "Try to use Excel to re-save the file as a different Excel version or as TSV and upload again.",
                e
            );
        }

        Sheet sheet = wb.getSheetAt(0);

        int firstRow = sheet.getFirstRowNum();
        int lastRow = sheet.getLastRowNum();
        int r = firstRow;

        List<Integer>    nonBlankIndices = null;
        List<String>     nonBlankHeaderStrings = null;

        /*
         *  Find the header row
         */
        for (; r <= lastRow; r++) {
            org.apache.poi.ss.usermodel.Row row = sheet.getRow(r);
            if (row == null) {
                continue;
            } else if (ignoreLines > 0) {
                ignoreLines--;
                continue;
            }

            short firstCell = row.getFirstCellNum();
            short lastCell = row.getLastCellNum();
            if (firstCell >= 0 && firstCell <= lastCell) {
                nonBlankIndices = new ArrayList<Integer>(lastCell - firstCell + 1);
                nonBlankHeaderStrings = new ArrayList<String>(lastCell - firstCell + 1);

                for (int c = firstCell; c <= lastCell; c++) {
                    org.apache.poi.ss.usermodel.Cell cell = row.getCell(c);
                    if (cell != null) {
                        String text = cell.getStringCellValue().trim();
                        if (text.length() > 0) {
                            nonBlankIndices.add((int) c);
                            nonBlankHeaderStrings.add(text);
                        }
                    }
                }

                if (nonBlankIndices.size() > 0) {
                    r++;
                    break;
                }
            }
        }

        if (nonBlankIndices == null || nonBlankIndices.size() == 0) {
            return;
        }

        /*
         *  Create columns
         */
        Map<String, Integer> nameToIndex = new HashMap<String, Integer>();
        for (int c = 0; c < nonBlankIndices.size(); c++) {
            String cell = nonBlankHeaderStrings.get(c);
            if (nameToIndex.containsKey(cell)) {
                int index = nameToIndex.get(cell);
                nameToIndex.put(cell, index + 1);

                cell = cell.contains(" ") ? (cell + " " + index) : (cell + index);
            } else {
                nameToIndex.put(cell, 2);
            }

            Column column = new Column(c, cell);
            project.columnModel.columns.add(column);
        }

        /*
         *  Now process the data rows
         */
        int rowsWithData = 0;
        Map<String, Recon> reconMap = new HashMap<String, Recon>();

        for (; r <= lastRow; r++) {
            org.apache.poi.ss.usermodel.Row row = sheet.getRow(r);
            if (row == null) {
                continue;
            }

            short firstCell = row.getFirstCellNum();
            short lastCell = row.getLastCellNum();
            if (firstCell >= 0 && firstCell <= lastCell) {
                Row newRow = new Row(nonBlankIndices.size());
                boolean hasData = false;

                for (int c = 0; c < nonBlankIndices.size(); c++) {
                    if (c < firstCell || c > lastCell) {
                        continue;
                    }

                    org.apache.poi.ss.usermodel.Cell cell = row.getCell(c);
                    if (cell == null) {
                        continue;
                    }

                    int cellType = cell.getCellType();
                    if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_ERROR ||
                        cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BLANK) {
                        continue;
                    }
                    if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_FORMULA) {
                        cellType = cell.getCachedFormulaResultType();
                    }

                    Serializable value = null;
                    if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_BOOLEAN) {
                        value = cell.getBooleanCellValue();
                    } else if (cellType == org.apache.poi.ss.usermodel.Cell.CELL_TYPE_NUMERIC) {
                        double d = cell.getNumericCellValue();

                        if (HSSFDateUtil.isCellDateFormatted(cell)) {
                            value = HSSFDateUtil.getJavaDate(d);
                        } else {
                            value = d;
                        }
                    } else {
                        String text = cell.getStringCellValue().trim();
                        if (text.length() > 0) {
                            value = text;
                        }
                    }

                    if (value != null) {
                        Recon recon = null;

                        Hyperlink hyperlink = cell.getHyperlink();
                        if (hyperlink != null) {
                            String url = hyperlink.getAddress();

                            if (url.startsWith("http://") ||
                                url.startsWith("https://")) {

                                final String sig = "freebase.com/view";

                                int i = url.indexOf(sig);
                                if (i > 0) {
                                    String id = url.substring(i + sig.length());

                                    int q = id.indexOf('?');
                                    if (q > 0) {
                                        id = id.substring(0, q);
                                    }
                                    int h = id.indexOf('#');
                                    if (h > 0) {
                                        id = id.substring(0, h);
                                    }

                                    if (reconMap.containsKey(id)) {
                                        recon = reconMap.get(id);
                                        recon.judgmentBatchSize++;
                                    } else {
                                        recon = new Recon(0);
                                        recon.service = "import";
                                        recon.match = new ReconCandidate(id, "", value.toString(), new String[0], 100);
                                        recon.matchRank = 0;
                                        recon.judgment = Judgment.Matched;
                                        recon.judgmentAction = "auto";
                                        recon.judgmentBatchSize = 1;
                                        recon.addCandidate(recon.match);

                                        reconMap.put(id, recon);
                                    }

                                }
                            }
                        }

                        newRow.setCell(c, new Cell(value, recon));
                        hasData = true;
                    }
                }

                if (hasData) {
                    rowsWithData++;

                    if (skip <= 0 || rowsWithData > skip) {
                        project.rows.add(newRow);
                        project.columnModel.setMaxCellIndex(newRow.cells.size());

                        if (limit > 0 && project.rows.size() >= limit) {
                            break;
                        }
                    }
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\ExcelImporter;canImportData(String,String);;;public boolean canImportData(String contentType, String fileName) {
        if (contentType != null) {
            contentType = contentType.toLowerCase().trim();
            if ("application/msexcel".equals(contentType) ||
                "application/x-msexcel".equals(contentType) ||
                "application/x-ms-excel".equals(contentType) ||
                "application/vnd.ms-excel".equals(contentType) ||
                "application/x-excel".equals(contentType) ||
                "application/xls".equals(contentType)) {
                this._xmlBased = false;
                return true;
            } else if("application/x-xls".equals(contentType)) {
                this._xmlBased = true;
                return true;
            }
        } else if (fileName != null) {
            fileName = fileName.toLowerCase();
            if (fileName.endsWith(".xls")) {
                this._xmlBased = false;
                return true;
            } else if (fileName.endsWith(".xlsx")) {
                this._xmlBased = true;
                return true;
            }
        }
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\Importer;takesReader();;;public boolean takesReader();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\Importer;read(Reader,Project,Properties);;;public void read(Reader reader, Project project, Properties options) throws Exception;
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\Importer;read(InputStream,Project,Properties);;;public void read(InputStream inputStream, Project project, Properties options) throws Exception;
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\Importer;canImportData(String,String);;;public boolean canImportData(String contentType, String fileName);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\ImporterUtilities;parseCellValue(String);;;static public Serializable parseCellValue(String text) {
        if (text.length() > 0) {
            if (text.length() > 1 && text.startsWith("\"") && text.endsWith("\"")) {
                return text.substring(1, text.length() - 1);
            }

            try {
                return Long.parseLong(text);
            } catch (NumberFormatException e) {
            }

            try {
                double d = Double.parseDouble(text);
                if (!Double.isInfinite(d) && !Double.isNaN(d)) {
                    return d;
                }
            } catch (NumberFormatException e) {
            }
            text = text.trim();
        }
        return text;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\ImporterUtilities;getIntegerOption(String,Properties,int);;;static public int getIntegerOption(String name, Properties options, int def) {
        int value = def;
        if (options.containsKey(name)) {
            String s = options.getProperty(name);
            try {
                value = Integer.parseInt(s);
            } catch (Exception e) {
            }
        }
        return value;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\ImporterUtilities;getBooleanOption(String,Properties,boolean);;;static public boolean getBooleanOption(String name, Properties options, boolean def) {
        boolean value = def;
        if (options.containsKey(name)) {
            String s = options.getProperty(name);
            try {
                value = Boolean.parseBoolean(s);
            } catch (Exception e) {
            }
        }
        return value;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\ImporterUtilities;appendColumnName(List<String>,int,String);;;static public void appendColumnName(List<String> columnNames, int index, String name) {
        name = name.trim();

        while (columnNames.size() <= index) {
            columnNames.add("");
        }

        if (!name.isEmpty()) {
            String oldName = columnNames.get(index);
            if (!oldName.isEmpty()) {
                name = oldName + " " + name;
            }

            columnNames.set(index, name);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\ImporterUtilities;ensureColumnsInRowExist(List<String>,Row);;;static public void ensureColumnsInRowExist(List<String> columnNames, Row row) {
        int count = row.cells.size();
        while (count > columnNames.size()) {
            columnNames.add("");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\ImporterUtilities;setupColumns(Project,List<String>);;;static public void setupColumns(Project project, List<String> columnNames) {
        Map<String, Integer> nameToIndex = new HashMap<String, Integer>();
        for (int c = 0; c < columnNames.size(); c++) {
            String cell = columnNames.get(c).trim();
            if (cell.isEmpty()) {
                cell = "Column";
            } else if (cell.startsWith("\"") && cell.endsWith("\"")) {
                cell = cell.substring(1, cell.length() - 1).trim(); //FIXME is trimming quotation marks appropriate?
            }

            if (nameToIndex.containsKey(cell)) {
                int index = nameToIndex.get(cell);
                nameToIndex.put(cell, index + 1);

                cell = cell.contains(" ") ? (cell + " " + index) : (cell + index);
            } else {
                nameToIndex.put(cell, 2);
            }

            Column column = new Column(c, cell);

            project.columnModel.columns.add(column);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\MarcImporter;takesReader();;;public boolean takesReader() {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\MarcImporter;read(Reader,Project,Properties);;;public void read(Reader reader, Project project, Properties options)
        throws Exception {

        throw new UnsupportedOperationException();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\MarcImporter;read(InputStream,Project,Properties);;;public void read(
        InputStream inputStream,
        Project project,
        Properties options
    ) throws Exception {
        int limit = ImporterUtilities.getIntegerOption("limit",options,-1);
        int skip = ImporterUtilities.getIntegerOption("skip",options,0);

        File tempFile = File.createTempFile("gridworks-import-", ".marc.xml");
        try {
            OutputStream os = new FileOutputStream(tempFile);
            try {
                MarcPermissiveStreamReader reader = new MarcPermissiveStreamReader(
                    inputStream,
                    true,
                    true
                );
                MarcWriter writer = new MarcXmlWriter(os, true);

                int count = 0;
                while (reader.hasNext()) {
                    Record record = reader.next();
                    if (skip <= 0) {
                        if (limit == -1 || count < limit) {
                            writer.write(record);
                            count++;
                        } else {
                            break;
                        }
                    } else {
                        skip--;
                    }
                }
                writer.close();
            } finally {
                os.close();
            }

            InputStream is = new FileInputStream(tempFile);
            try {
                new XmlImporter().read(is, project, options);
            } finally {
                is.close();
            }
        } finally {
            tempFile.delete();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\MarcImporter;canImportData(String,String);;;public boolean canImportData(String contentType, String fileName) {
        if (contentType != null) {
            contentType = contentType.toLowerCase().trim();

            if ("application/marc".equals(contentType)) {
                return true;
            }
        } else if (fileName != null) {
            fileName = fileName.toLowerCase();
            if (
                    fileName.endsWith(".mrc") ||
                    fileName.endsWith(".marc") ||
                    fileName.contains(".mrc.") ||
                    fileName.contains(".marc.")
                ) {
                return true;
            }
        }
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\RdfTripleImporter;RdfTripleImporter();;;public RdfTripleImporter(){
        JrdfFactory = SortedMemoryJRDFFactory.getFactory();
        nTriplesParserFactory = new NTriplesParserFactory();
        newMapFactory = new MemMapFactory();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\RdfTripleImporter;canImportData(String,String);;;public boolean canImportData(String contentType, String fileName) {
        if (contentType != null) {
            contentType = contentType.toLowerCase().trim();

            if("application/rdf+xml".equals(contentType)) {
                return true;
            }
        } else if (fileName != null) {
            fileName = fileName.toLowerCase();
            if (
                    fileName.endsWith(".rdf")) {
                return true;
            }
        }
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\TsvCsvImporter;read(Reader,Project,Properties);;;public void read(Reader reader, Project project, Properties options) throws Exception {
        boolean splitIntoColumns = ImporterUtilities.getBooleanOption("split-into-columns", options, true);

        String sep = options.getProperty("separator"); // auto-detect if not present
        int ignoreLines = ImporterUtilities.getIntegerOption("ignore", options, -1);
        int headerLines = ImporterUtilities.getIntegerOption("header-lines", options, 1);

        int limit = ImporterUtilities.getIntegerOption("limit",options,-1);
        int skip = ImporterUtilities.getIntegerOption("skip",options,0);
        boolean guessValueType = ImporterUtilities.getBooleanOption("guess-value-type", options, true);

        LineNumberReader lnReader = new LineNumberReader(reader);


        read(lnReader, project, sep,
    		limit, skip, ignoreLines, headerLines,
    		guessValueType, splitIntoColumns
    	);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\TsvCsvImporter;read(LineNumberReader,Project,String,int,int,int,int,boolean,boolean);;;public void read(LineNumberReader lnReader, Project project, String sep, int limit, int skip, int ignoreLines, int headerLines, boolean guessValueType, boolean splitIntoColumns ) throws IOException{
        CSVParser parser = (sep != null && sep.length() > 0 && splitIntoColumns) ?
                        new CSVParser(sep.toCharArray()[0]) : null;//HACK changing string to char - won't work for multi-char separators.
        List<String> columnNames = new ArrayList<String>();
        String line = null;
        int rowsWithData = 0;

        while ((line = lnReader.readLine()) != null) {
            if (ignoreLines > 0) {
                ignoreLines--;
                continue;
            } else if (StringUtils.isBlank(line)) {
                continue;
            }

            //guess separator
            if (parser == null) {
                int tab = line.indexOf('\t');
                if (tab >= 0) {
                    parser = new CSVParser('\t');
                } else {
                    parser = new CSVParser(',');
                }
            }


            if (headerLines > 0) {
                //column headers
                headerLines--;

                ArrayList<String> cells = getCells(line, parser, lnReader, splitIntoColumns);

                for (int c = 0; c < cells.size(); c++) {
                    String cell = cells.get(c).trim();
                    //add column even if cell is blank
                    ImporterUtilities.appendColumnName(columnNames, c, cell);
                }
            } else {
                //data
                Row row = new Row(columnNames.size());

                ArrayList<String> cells = getCells(line, parser, lnReader, splitIntoColumns);

                if( cells != null && cells.size() > 0 )
                    rowsWithData++;

                if (skip <=0  || rowsWithData > skip){
                    //add parsed data to row
                    for(String s : cells){
                        s = s.trim();
                        if (ExpressionUtils.isNonBlankData(s)) {
                            Serializable value = guessValueType ? ImporterUtilities.parseCellValue(s) : s;
                            row.cells.add(new Cell(value, null));
                        }else{
                            row.cells.add(null);
                        }
                    }
                    project.rows.add(row);
                    project.columnModel.setMaxCellIndex(row.cells.size());

                    ImporterUtilities.ensureColumnsInRowExist(columnNames, row);

                    if (limit > 0 && project.rows.size() >= limit) {
                        break;
                    }
                }
            }
        }

        ImporterUtilities.setupColumns(project, columnNames);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\TsvCsvImporter;getCells(String,CSVParser,LineNumberReader,boolean);;;protected ArrayList<String> getCells(String line, CSVParser parser, LineNumberReader lnReader, boolean splitIntoColumns) throws IOException{
        ArrayList<String> cells = new ArrayList<String>();
        if(splitIntoColumns){
            String[] tokens = parser.parseLineMulti(line);
            for(String s : tokens){
                cells.add(s);
            }
            while(parser.isPending()){
                tokens = parser.parseLineMulti(lnReader.readLine());
                for(String s : tokens){
                    cells.add(s);
                }
            }
        }else{
            cells.add(line);
        }
        return cells;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\TsvCsvImporter;read(InputStream,Project,Properties);;;public void read(InputStream inputStream, Project project, Properties options) throws Exception {
        read(new InputStreamReader(inputStream), project, options);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\TsvCsvImporter;takesReader();;;public boolean takesReader() {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\TsvCsvImporter;canImportData(String,String);;;public boolean canImportData(String contentType, String fileName) {
        if (contentType != null) {
            contentType = contentType.toLowerCase().trim();
            return false;
        } else if (fileName != null) {
            fileName = fileName.toLowerCase();
            if (fileName.endsWith(".tsv")) {
                return true;
            }else if (fileName.endsWith(".csv")){
                return true;
            }
        }
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImporter;takesReader();;;public boolean takesReader() {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImporter;read(Reader,Project,Properties);;;public void read(Reader reader, Project project, Properties options)
            throws Exception {

        throw new UnsupportedOperationException();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImporter;read(InputStream,Project,Properties);;;public void read(
        InputStream inputStream,
        Project project,
        Properties options
    ) throws Exception {
        logger.trace("XmlImporter.read");
        PushbackInputStream pis = new PushbackInputStream(inputStream,BUFFER_SIZE);

        String[] recordPath = null;
        {
            byte[] buffer = new byte[BUFFER_SIZE];
            int bytes_read = 0;
            while (bytes_read < BUFFER_SIZE) {
                int c = pis.read(buffer, bytes_read, BUFFER_SIZE - bytes_read);
                if (c == -1) break;
                bytes_read +=c ;
            }
            pis.unread(buffer, 0, bytes_read);

            if (options.containsKey("importer-record-tag")) {
                recordPath = XmlImportUtilities.detectPathFromTag(
                        new ByteArrayInputStream(buffer, 0, bytes_read),
                        options.getProperty("importer-record-tag"));
            } else {
                recordPath = XmlImportUtilities.detectRecordElement(
                        new ByteArrayInputStream(buffer, 0, bytes_read));
            }
        }

        if(recordPath == null)
            return;

        ImportColumnGroup rootColumnGroup = new ImportColumnGroup();

        XmlImportUtilities.importXml(pis, project, recordPath, rootColumnGroup);
        XmlImportUtilities.createColumnsFromImport(project, rootColumnGroup);

        project.columnModel.update();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImporter;canImportData(String,String);;;public boolean canImportData(String contentType, String fileName) {
        if (contentType != null) {
            contentType = contentType.toLowerCase().trim();

            if("application/xml".equals(contentType) ||
                      "text/xml".equals(contentType) ||
                      "application/rss+xml".equals(contentType) ||
                      "application/atom+xml".equals(contentType)) {
                return true;
            }
        } else if (fileName != null) {
            fileName = fileName.toLowerCase();
            if (
                    fileName.endsWith(".xml") ||
                    fileName.endsWith(".atom") ||
                    fileName.endsWith(".rss")
                ) {
                return true;
            }
        }
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;tabulate();;;abstract void tabulate();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;tabulate();;;@Override
        void tabulate() {
            for (ImportColumn c : columns.values()) {
                c.tabulate();
                nonBlankCount = Math.max(nonBlankCount, c.nonBlankCount);
            }
            for (ImportColumnGroup g : subgroups.values()) {
                g.tabulate();
                nonBlankCount = Math.max(nonBlankCount, g.nonBlankCount);
            }
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;tabulate();;;@Override
        void tabulate() {
            // already done the tabulation elsewhere
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;detectPathFromTag(InputStream,String);;;static public String[] detectPathFromTag(InputStream inputStream, String tag) {
        try {
            XMLStreamReader parser = XMLInputFactory.newInstance().createXMLStreamReader(inputStream);

            while (parser.hasNext()) {
                int eventType = parser.next();
                if (eventType == XMLStreamConstants.START_ELEMENT) {
                    List<String> path = detectRecordElement(parser, tag);
                    if (path != null) {
                        String[] path2 = new String[path.size()];

                        path.toArray(path2);

                        return path2;
                    }
                }
            }
        } catch (Exception e) {
            // silent
            // e.printStackTrace();
        }

        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;detectRecordElement(XMLStreamReader,String);;;static protected List<String> detectRecordElement(XMLStreamReader parser, String tag) throws XMLStreamException {
        if(parser.getEventType() == XMLStreamConstants.START_DOCUMENT)
            parser.next();
        String localName = parser.getLocalName();
        String fullName = composeName(parser.getPrefix(), localName);
        if (tag.equals(parser.getLocalName()) || tag.equals(fullName)) {
            List<String> path = new LinkedList<String>();
            path.add(localName);

            return path;
        }

        while (parser.hasNext()) {
            int eventType = parser.next();
            if (eventType == XMLStreamConstants.END_ELEMENT) {
                break;
            } else if (eventType == XMLStreamConstants.START_ELEMENT) {
                List<String> path = detectRecordElement(parser, tag);
                if (path != null) {
                    path.add(0, localName);
                    return path;
                }
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;detectRecordElement(InputStream);;;static public String[] detectRecordElement(InputStream inputStream) {
        logger.trace("detectRecordElement(inputStream)");
        List<RecordElementCandidate> candidates = new ArrayList<RecordElementCandidate>();

        try {
            XMLStreamReader parser = XMLInputFactory.newInstance().createXMLStreamReader(inputStream);

            while (parser.hasNext()) {
                int eventType = parser.next();
                if (eventType == XMLStreamConstants.START_ELEMENT) {
                    RecordElementCandidate candidate =
                        detectRecordElement(
                            parser,
                            new String[] { parser.getLocalName() });

                    if (candidate != null) {
                        candidates.add(candidate);
                    }
                }
            }
        } catch (Exception e) {
            // silent
            // e.printStackTrace();
        }

        if (candidates.size() > 0) {
            sortRecordElementCandidates(candidates);

            return candidates.get(0).path;
        }
        logger.info("No candidate elements were found in Xml - at least 6 similar elements are required");
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;detectRecordElement(XMLStreamReader,String[]);;;static protected RecordElementCandidate detectRecordElement(XMLStreamReader parser, String[] path) {
        logger.trace("detectRecordElement(XMLStreamReader, String[])");
        List<RecordElementCandidate> descendantCandidates = new ArrayList<RecordElementCandidate>();

        Map<String, Integer> immediateChildCandidateMap = new HashMap<String, Integer>();
        int textNodeCount = 0;
        int childElementNodeCount = 0;

        try {
            while (parser.hasNext()) {
                int eventType = parser.next();
                if (eventType == XMLStreamConstants.END_ELEMENT) {
                    break;
                } else if (eventType == XMLStreamConstants.CHARACTERS) {
                    if (parser.getText().trim().length() > 0) {
                        textNodeCount++;
                    }
                } else if (eventType == XMLStreamConstants.START_ELEMENT) {
                    childElementNodeCount++;

                    String tagName = parser.getLocalName();

                    immediateChildCandidateMap.put(
                        tagName,
                        immediateChildCandidateMap.containsKey(tagName) ?
                                immediateChildCandidateMap.get(tagName) + 1 : 1);

                    String[] path2 = new String[path.length + 1];
                    System.arraycopy(path, 0, path2, 0, path.length);
                    path2[path.length] = tagName;

                    RecordElementCandidate c = detectRecordElement(parser, path2);
                    if (c != null) {
                        descendantCandidates.add(c);
                    }
                }
            }
        } catch (Exception e) {
            // silent
            // e.printStackTrace();
        }

        if (textNodeCount > 0 && childElementNodeCount > 0) {
            // This is a mixed element
            return null;
        }

        if (immediateChildCandidateMap.size() > 0) {
            List<RecordElementCandidate> immediateChildCandidates = new ArrayList<RecordElementCandidate>(immediateChildCandidateMap.size());
            for (Entry<String, Integer> entry : immediateChildCandidateMap.entrySet()) {
                int count = entry.getValue();
                if (count > 1) {
                    String[] path2 = new String[path.length + 1];
                    System.arraycopy(path, 0, path2, 0, path.length);
                    path2[path.length] = entry.getKey();

                    RecordElementCandidate candidate = new RecordElementCandidate();
                    candidate.path = path2;
                    candidate.count = count;
                    immediateChildCandidates.add(candidate);
                }
            }

            if (immediateChildCandidates.size() > 0 && immediateChildCandidates.size() < 5) {
                // There are some promising immediate child elements, but not many,
                // that can serve as record elements.

                sortRecordElementCandidates(immediateChildCandidates);

                RecordElementCandidate ourCandidate = immediateChildCandidates.get(0);
                logger.trace("ourCandidate.count : " + ourCandidate.count + "; immediateChildCandidates.size() : " + immediateChildCandidates.size());
                if (ourCandidate.count / immediateChildCandidates.size() > 5) {
                    return ourCandidate;
                }

                descendantCandidates.add(ourCandidate);
            }
        }

        if (descendantCandidates.size() > 0) {
            sortRecordElementCandidates(descendantCandidates);

            RecordElementCandidate candidate = descendantCandidates.get(0);
            if (candidate.count / descendantCandidates.size() > 5) {
                return candidate;
            }
        }

        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;sortRecordElementCandidates(List<RecordElementCandidate>);;;static public void sortRecordElementCandidates(List<RecordElementCandidate> list) {
        Collections.sort(list, new Comparator<RecordElementCandidate>() {
            public int compare(RecordElementCandidate o1, RecordElementCandidate o2) {
                return o2.count - o1.count;
            }
        });
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;importXml(InputStream,Project,String[],ImportColumnGroup);;;static public void importXml(
        InputStream inputStream,
        Project project,
        String[] recordPath,
        ImportColumnGroup rootColumnGroup
    ) {
        try {
            XMLStreamReader parser = XMLInputFactory.newInstance().createXMLStreamReader(inputStream);

            while (parser.hasNext()) {
                int eventType = parser.next();
                if (eventType == XMLStreamConstants.START_ELEMENT) {
                    findRecord(project, parser, recordPath, 0, rootColumnGroup);
                }
            }
        } catch (Exception e) {
            // silent
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;createColumnsFromImport(Project,ImportColumnGroup);;;static public void createColumnsFromImport(
        Project project,
        ImportColumnGroup columnGroup
    ) {
        int startColumnIndex = project.columnModel.columns.size();

        List<ImportColumn> columns = new ArrayList<ImportColumn>(columnGroup.columns.values());
        Collections.sort(columns, new Comparator<ImportColumn>() {
            public int compare(ImportColumn o1, ImportColumn o2) {
                if (o1.blankOnFirstRow != o2.blankOnFirstRow) {
                    return o1.blankOnFirstRow ? 1 : -1;
                }

                int c = o2.nonBlankCount - o1.nonBlankCount;
                return c != 0 ? c : (o1.name.length() - o2.name.length());
            }
        });

        for (int i = 0; i < columns.size(); i++) {
            ImportColumn c = columns.get(i);

            Column column = new com.metaweb.gridworks.model.Column(c.cellIndex, c.name);
            project.columnModel.columns.add(column);
        }

        List<ImportColumnGroup> subgroups = new ArrayList<ImportColumnGroup>(columnGroup.subgroups.values());
        Collections.sort(subgroups, new Comparator<ImportColumnGroup>() {
            public int compare(ImportColumnGroup o1, ImportColumnGroup o2) {
                int c = o2.nonBlankCount - o1.nonBlankCount;
                return c != 0 ? c : (o1.name.length() - o2.name.length());
            }
        });

        for (ImportColumnGroup g : subgroups) {
            createColumnsFromImport(project, g);
        }

        int endColumnIndex = project.columnModel.columns.size();
        int span = endColumnIndex - startColumnIndex;
        if (span > 1 && span < project.columnModel.columns.size()) {
            project.columnModel.addColumnGroup(startColumnIndex, span, startColumnIndex);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;findRecord(Project,XMLStreamReader,String[],int,ImportColumnGroup);;;static protected void findRecord(
        Project project,
        XMLStreamReader parser,
        String[] recordPath,
        int pathIndex,
        ImportColumnGroup rootColumnGroup
    ) throws XMLStreamException {
        if(parser.getEventType() == XMLStreamConstants.START_DOCUMENT){
            logger.warn("Cannot use findRecord method for START_DOCUMENT event");
            return;
        }
        String tagName = parser.getLocalName();
        if (tagName.equals(recordPath[pathIndex])) {
            if (pathIndex < recordPath.length - 1) {
                while (parser.hasNext()) {
                    int eventType = parser.next();
                    if (eventType == XMLStreamConstants.START_ELEMENT) {
                        findRecord(project, parser, recordPath, pathIndex + 1, rootColumnGroup);
                    } else if (eventType == XMLStreamConstants.END_ELEMENT) {
                        break;
                    }
                }
            } else {
                processRecord(project, parser, rootColumnGroup);
            }
        } else {
            skip(parser);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;skip(XMLStreamReader);;;static protected void skip(XMLStreamReader parser) throws XMLStreamException {
        while (parser.hasNext()) {
            int eventType = parser.next();
            if (eventType == XMLStreamConstants.START_ELEMENT) {
                skip(parser);
            } else if (eventType == XMLStreamConstants.END_ELEMENT) {
                return;
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;processRecord(Project,XMLStreamReader,ImportColumnGroup);;;static protected void processRecord(
        Project project,
        XMLStreamReader parser,
        ImportColumnGroup rootColumnGroup
    ) throws XMLStreamException {
        ImportRecord record = new ImportRecord();

        processSubRecord(project, parser, rootColumnGroup, record);

        if (record.rows.size() > 0) {
            for (List<Cell> row : record.rows) {
                Row realRow = new Row(row.size());

                for (int c = 0; c < row.size(); c++) {
                    Cell cell = row.get(c);
                    if (cell != null) {
                        realRow.setCell(c, cell);
                    }
                }

                project.rows.add(realRow);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;composeName(String,String);;;static protected String composeName(String prefix, String localName) {
        return prefix != null && prefix.length() > 0 ? (prefix + ":" + localName) : localName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;processSubRecord(Project,XMLStreamReader,ImportColumnGroup,ImportRecord);;;static protected void processSubRecord(
        Project project,
        XMLStreamReader parser,
        ImportColumnGroup columnGroup,
        ImportRecord record
    ) throws XMLStreamException {
        ImportColumnGroup thisColumnGroup = getColumnGroup(
                project,
                columnGroup,
                composeName(parser.getPrefix(), parser.getLocalName()));

        int commonStartingRowIndex = 0;
        for (ImportColumn column : thisColumnGroup.columns.values()) {
            if (column.cellIndex < record.columnEmptyRowIndices.size()) {
                commonStartingRowIndex = Math.max(
                        commonStartingRowIndex,
                        record.columnEmptyRowIndices.get(column.cellIndex));
            }
        }

        int attributeCount = parser.getAttributeCount();
        for (int i = 0; i < attributeCount; i++) {
            String text = parser.getAttributeValue(i).trim();
            if (text.length() > 0) {
                addCell(
                    project,
                    thisColumnGroup,
                    record,
                    composeName(parser.getAttributePrefix(i), parser.getAttributeLocalName(i)),
                    text,
                    commonStartingRowIndex
                );
            }
        }

        while (parser.hasNext()) {
            int eventType = parser.next();
            if (eventType == XMLStreamConstants.START_ELEMENT) {
                processSubRecord(
                    project,
                    parser,
                    thisColumnGroup,
                    record
                );
            } else if (//eventType == XMLStreamConstants.CDATA ||
                        eventType == XMLStreamConstants.CHARACTERS) {
                String text = parser.getText().trim();
                if (text.length() > 0) {
                    addCell(
                        project,
                        thisColumnGroup,
                        record,
                        null,
                        parser.getText(),
                        commonStartingRowIndex
                    );
                }
            } else if (eventType == XMLStreamConstants.END_ELEMENT) {
                break;
            }
        }

        if (commonStartingRowIndex < record.rows.size()) {
            List<Cell> startingRow = record.rows.get(commonStartingRowIndex);

            for (ImportColumn c : thisColumnGroup.columns.values()) {
                int cellIndex = c.cellIndex;
                if (cellIndex >= startingRow.size() || startingRow.get(cellIndex) == null) {
                    c.blankOnFirstRow = true;
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;addCell(Project,ImportColumnGroup,ImportRecord,String,String,int);;;static protected void addCell(
        Project project,
        ImportColumnGroup columnGroup,
        ImportRecord record,
        String columnLocalName,
        String text,
        int commonStartingRowIndex
    ) {
        if (text == null || ((String) text).isEmpty()) {
            return;
        }

        Serializable value = ImporterUtilities.parseCellValue(text);

        ImportColumn column = getColumn(project, columnGroup, columnLocalName);
        int cellIndex = column.cellIndex;

        while (cellIndex >= record.columnEmptyRowIndices.size()) {
            record.columnEmptyRowIndices.add(commonStartingRowIndex);
        }
        int rowIndex = record.columnEmptyRowIndices.get(cellIndex);

        while (rowIndex >= record.rows.size()) {
            record.rows.add(new ArrayList<Cell>());
        }
        List<Cell> row = record.rows.get(rowIndex);

        while (cellIndex >= row.size()) {
            row.add(null);
        }

        logger.trace("Adding cell with value : " + value + " to row : " + rowIndex + " at cell index : " + (cellIndex-1));

        row.set(cellIndex-1, new Cell(value, null));

        record.columnEmptyRowIndices.set(cellIndex, rowIndex + 1);

        column.nonBlankCount++;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;getColumn(Project,ImportColumnGroup,String);;;static protected ImportColumn getColumn(
        Project project,
        ImportColumnGroup columnGroup,
        String localName
    ) {
        if (columnGroup.columns.containsKey(localName)) {
            return columnGroup.columns.get(localName);
        }

        ImportColumn column = createColumn(project, columnGroup, localName);
        columnGroup.columns.put(localName, column);

        return column;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;createColumn(Project,ImportColumnGroup,String);;;static protected ImportColumn createColumn(
        Project project,
        ImportColumnGroup columnGroup,
        String localName
    ) {
        ImportColumn newColumn = new ImportColumn();

        newColumn.name =
            columnGroup.name.length() == 0 ?
            (localName == null ? "Text" : localName) :
            (localName == null ? columnGroup.name : (columnGroup.name + " - " + localName));

        newColumn.cellIndex = project.columnModel.allocateNewCellIndex();

        return newColumn;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;getColumnGroup(Project,ImportColumnGroup,String);;;static protected ImportColumnGroup getColumnGroup(
        Project project,
        ImportColumnGroup columnGroup,
        String localName
    ) {
        if (columnGroup.subgroups.containsKey(localName)) {
            return columnGroup.subgroups.get(localName);
        }

        ImportColumnGroup subgroup = createColumnGroup(project, columnGroup, localName);
        columnGroup.subgroups.put(localName, subgroup);

        return subgroup;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\XmlImportUtilities;createColumnGroup(Project,ImportColumnGroup,String);;;static protected ImportColumnGroup createColumnGroup(
        Project project,
        ImportColumnGroup columnGroup,
        String localName
    ) {
        ImportColumnGroup newGroup = new ImportColumnGroup();

        newGroup.name =
            columnGroup.name.length() == 0 ?
            (localName == null ? "Text" : localName) :
            (localName == null ? columnGroup.name : (columnGroup.name + " - " + localName));

        return newGroup;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\parsers\NonSplitRowParser;split(String,LineNumberReader);;;public List<String> split(String line, LineNumberReader lineReader) {
        List<String> results = new ArrayList<String>(1);
        
        results.add(line.trim());
        
        return results;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\parsers\NonSplitRowParser;parseRow(Row,String,boolean,LineNumberReader);;;public boolean parseRow(Row row, String line, boolean guessValueType, LineNumberReader lineReader) {
        line = line.trim();
        if (line.isEmpty()) {
            return false;
        } else {
            Serializable value = guessValueType ? ImporterUtilities.parseCellValue(line) : line;
            if (ExpressionUtils.isNonBlankData(value)) {
                row.cells.add(new Cell(value, null));
                return true;
            } else {
                row.cells.add(null);
                return false;
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\parsers\RowParser;split(String,LineNumberReader);;;public abstract List<String> split(String line, LineNumberReader lineReader);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\parsers\RowParser;parseRow(Row,String,boolean,LineNumberReader);;;public abstract boolean parseRow(Row row, String line, boolean guessValueType, LineNumberReader lineReader);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\parsers\SeparatorRowParser;SeparatorRowParser(String);;;public SeparatorRowParser(String sep) {
        this.sep = sep;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\parsers\SeparatorRowParser;split(String,LineNumberReader);;;public List<String> split(String line, LineNumberReader lineReader) {
        String[] cells = StringUtils.splitPreserveAllTokens(line, sep);
        
        List<String> results = new ArrayList<String>();
        for (int c = 0; c < cells.length; c++) {
            results.add(cells[c]);
        }
        
        return results;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\importers\parsers\SeparatorRowParser;parseRow(Row,String,boolean,LineNumberReader);;;public boolean parseRow(Row row, String line, boolean guessValueType, LineNumberReader lineReader) {
        boolean hasData = false;
        
        String[] cells = StringUtils.splitPreserveAllTokens(line, sep);
        for (int c = 0; c < cells.length; c++) {
            String text = cells[c];
            
            Serializable value = guessValueType ? ImporterUtilities.parseCellValue(text) : text;
            if (ExpressionUtils.isNonBlankData(value)) {
                row.cells.add(new Cell(value, null));
                hasData = true;
            } else {
                row.cells.add(null);
            }
        }
        return hasData;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\logging\IndentingLayout;activateOptions();;;public void activateOptions() {
        // no options at this time
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\logging\IndentingLayout;format(LoggingEvent);;;public String format(LoggingEvent event) {
        String message = event.getRenderedMessage();
        if (message == null) return "";
        if (message.length() < 2) return message;
        
        char leader = message.charAt(0);
        char secondLeader = message.charAt(1);
        if ((leader == '<') && (secondLeader == ' ') && (this.indentation > 0)) this.indentation--;

        // Reset buf
        StringBuffer buf = new StringBuffer(256);

        Date date = new Date();
        long now = date.getTime();
        calendar.setTime(date);

        long delta = 0;
        if (previousTime > 0) {
            delta = now - previousTime;
        }
        previousTime = now;

//        if ((previousTime == 0) || (delta > MAX_DELTA)) {
//            buf.append('\n');
//            indentation = 0; // reset indentation after a while, as we might
//            // have runaway/unmatched log entries
//        }

        int hour = calendar.get(Calendar.HOUR_OF_DAY);
        if (hour < 10) buf.append('0');
        buf.append(hour);
        buf.append(':');

        int mins = calendar.get(Calendar.MINUTE);
        if (mins < 10) buf.append('0');
        buf.append(mins);
        buf.append(':');

        int secs = calendar.get(Calendar.SECOND);
        if (secs < 10) buf.append('0');
        buf.append(secs);
        buf.append('.');

        int millis = (int) (now % 1000);
        if (millis < 100) buf.append('0');
        if (millis < 10) buf.append('0');
        buf.append(millis);

        buf.append(" [");
        String context = ((String) event.getMDC("LogEvent"));
        if (context == null) {
            context = event.getLoggerName();
        }
        if (context.length() < CONTEXT_SIZE) {
            pad(buf, CONTEXT_SIZE - context.length(), ' ');
            buf.append(context);
        } else {
            buf.append("..");
            buf.append(context.substring(context.length() - CONTEXT_SIZE + 2));
        }
        buf.append("] ");

        pad(buf, indentation, ' ');

        buf.append(message);

        buf.append(" (");
        buf.append(delta);
        buf.append("ms)\n");

        if ((leader == '>') && (secondLeader == ' ')) indentation++;

        return buf.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\logging\IndentingLayout;pad(StringBuffer,int,char);;;private void pad(StringBuffer buffer, int pads, char padchar) {
        for (int i = 0; i < pads; i++) {
            buffer.append(padchar);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\logging\IndentingLayout;ignoresThrowable();;;public boolean ignoresThrowable() {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\AbstractOperation;createProcess(Project,Properties);;;public Process createProcess(Project project, Properties options) throws Exception {
        return new QuickHistoryEntryProcess(project, getBriefDescription(null)) {
            @Override
            protected HistoryEntry createHistoryEntry(long historyEntryID) throws Exception {
                return AbstractOperation.this.createHistoryEntry(_project, historyEntryID);
            }
        };
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\AbstractOperation;createHistoryEntry(Project,long);;;protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {
        throw new UnsupportedOperationException();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\AbstractOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        throw new UnsupportedOperationException();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Cell;Cell(Serializable,Recon);;;public Cell(Serializable value, Recon recon) {
        this.value = value;
        this.recon = recon;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Cell;getField(String,Properties);;;public Object getField(String name, Properties bindings) {
        if ("value".equals(name)) {
            return value;
        } else if ("recon".equals(name)) {
            return recon;
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Cell;fieldAlsoHasFields(String);;;public boolean fieldAlsoHasFields(String name) {
        return "recon".equals(name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Cell;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options) throws JSONException {
        writer.object();
        if (ExpressionUtils.isError(value)) {
            writer.key("e");
            writer.value(((EvalError) value).message);
        } else {
            writer.key("v");
            if (value != null) {
                if (value instanceof Calendar) {
                    writer.value(ParsingUtilities.dateToString(((Calendar) value).getTime()));
                    writer.key("t"); writer.value("date");
                } else if (value instanceof Date) {
                    writer.value(ParsingUtilities.dateToString((Date) value));
                    writer.key("t"); writer.value("date");
                } else {
                    writer.value(value);
                }
            } else {
                writer.value(null);
            }
        }
        
        if (recon != null) {
            writer.key("r");
            writer.value(Long.toString(recon.id));
            
            Pool pool = (Pool) options.get("pool");
            pool.pool(recon);
        }
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Cell;save(Writer,Properties);;;public void save(Writer writer, Properties options) {
        JSONWriter jsonWriter = new JSONWriter(writer);
        try {
            write(jsonWriter, options);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Cell;loadStreaming(String,Pool);;;static public Cell loadStreaming(String s, Pool pool) throws Exception {
        JsonFactory jsonFactory = new JsonFactory(); 
        JsonParser jp = jsonFactory.createJsonParser(s);
        
        if (jp.nextToken() != JsonToken.START_OBJECT) {
            return null;
        }
        
        return loadStreaming(jp, pool);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Cell;loadStreaming(JsonParser,Pool);;;static public Cell loadStreaming(JsonParser jp, Pool pool) throws Exception {
        JsonToken t = jp.getCurrentToken();
        if (t == JsonToken.VALUE_NULL || t != JsonToken.START_OBJECT) {
            return null;
        }
        
        Serializable value = null;
        String type = null;
        Recon recon = null;
        
        while (jp.nextToken() != JsonToken.END_OBJECT) {
            String fieldName = jp.getCurrentName();
            jp.nextToken();
            
            if ("r".equals(fieldName)) {
                if (jp.getCurrentToken() == JsonToken.VALUE_STRING) {
                    String reconID = jp.getText();
                    
                    recon = pool.getRecon(reconID);
                } else {
                    // legacy
                    recon = Recon.loadStreaming(jp, pool);
                }
            } else if ("e".equals(fieldName)) {
                value = new EvalError(jp.getText());
            } else if ("v".equals(fieldName)) {
                JsonToken token = jp.getCurrentToken();
            
                if (token == JsonToken.VALUE_STRING) {
                    value = jp.getText();
                } else if (token == JsonToken.VALUE_NUMBER_INT) {
                    value = jp.getLongValue();
                } else if (token == JsonToken.VALUE_NUMBER_FLOAT) {
                    value = jp.getDoubleValue();
                } else if (token == JsonToken.VALUE_TRUE) {
                    value = true;
                } else if (token == JsonToken.VALUE_FALSE) {
                    value = false;
                }
            } else if ("t".equals(fieldName)) {
                type = jp.getText();
            }
        }
        
        if (value != null) {
            if (type != null && "date".equals(type)) {
                value = ParsingUtilities.stringToDate((String) value); 
            }
            return new Cell(value, recon);
        } else {
            return null;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Column;Column(int,String);;;public Column(int cellIndex, String originalName) {
        _cellIndex = cellIndex;
        _originalName = _name = originalName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Column;getCellIndex();;;public int getCellIndex() {
        return _cellIndex;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Column;getOriginalHeaderLabel();;;public String getOriginalHeaderLabel() {
        return _originalName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Column;setName(String);;;public void setName(String name) {
        this._name = name;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Column;getName();;;public String getName() {
        return _name;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Column;setReconConfig(ReconConfig);;;public void setReconConfig(ReconConfig config) {
        this._reconConfig = config;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Column;getReconConfig();;;public ReconConfig getReconConfig() {
        return _reconConfig;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Column;setReconStats(ReconStats);;;public void setReconStats(ReconStats stats) {
        this._reconStats = stats;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Column;getReconStats();;;public ReconStats getReconStats() {
        return _reconStats;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Column;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("cellIndex"); writer.value(_cellIndex);
        writer.key("originalName"); writer.value(_originalName);
        writer.key("name"); writer.value(_name);
        if (_reconConfig != null) {
            writer.key("reconConfig");
            _reconConfig.write(writer, options);
        }
        if (_reconStats != null) {
            writer.key("reconStats");
            _reconStats.write(writer, options);
        }
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Column;clearPrecomputes();;;public void clearPrecomputes() {
        if (_precomputes != null) {
            _precomputes.clear();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Column;getPrecompute(String);;;public Object getPrecompute(String key) {
        if (_precomputes != null) {
            return _precomputes.get(key);
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Column;setPrecompute(String,Object);;;public void setPrecompute(String key, Object value) {
        if (_precomputes == null) {
            _precomputes = new HashMap<String, Object>();
        }
        _precomputes.put(key, value);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Column;save(Writer);;;public void save(Writer writer) {
        JSONWriter jsonWriter = new JSONWriter(writer);
        try {
            write(jsonWriter, new Properties());
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Column;load(String);;;static public Column load(String s) throws Exception {
        JSONObject obj = ParsingUtilities.evaluateJsonStringToObject(s);
        Column column = new Column(obj.getInt("cellIndex"), obj.getString("originalName"));
        
        column._name = obj.getString("name");
        if (obj.has("reconConfig")) {
            column._reconConfig = ReconConfig.reconstruct(obj.getJSONObject("reconConfig"));
        }
        if (obj.has("reconStats")) {
            column._reconStats = ReconStats.load(obj.getJSONObject("reconStats"));
        }
        
        return column;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnGroup;ColumnGroup(int,int,int);;;public ColumnGroup(int startColumnIndex, int columnSpan, int keyColumnIndex) {
        this.startColumnIndex = startColumnIndex;
        this.columnSpan = columnSpan;
        this.keyColumnIndex = keyColumnIndex;
        internalInitialize();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnGroup;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        
        writer.key("startColumnIndex"); writer.value(startColumnIndex);
        writer.key("columnSpan"); writer.value(columnSpan);
        writer.key("keyColumnIndex"); writer.value(keyColumnIndex);
        
        if (!"save".equals(options.get("mode")) && (subgroups != null) && (subgroups.size() > 0)) {
            writer.key("subgroups"); writer.array();
            for (ColumnGroup g : subgroups) {
                g.write(writer, options);
            }
            writer.endArray();
        }
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnGroup;contains(ColumnGroup);;;public boolean contains(ColumnGroup g) {
        return (g.startColumnIndex >= startColumnIndex &&
            g.startColumnIndex < startColumnIndex + columnSpan);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnGroup;save(Writer);;;public void save(Writer writer) {
        JSONWriter jsonWriter = new JSONWriter(writer);
        try {
            write(jsonWriter, new Properties());
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnGroup;load(String);;;static public ColumnGroup load(String s) throws Exception {
        JSONObject obj = ParsingUtilities.evaluateJsonStringToObject(s);
        
        return new ColumnGroup(
            obj.getInt("startColumnIndex"),
            obj.getInt("columnSpan"),
            obj.getInt("keyColumnIndex")
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnGroup;internalInitialize();;;protected void internalInitialize() {
        subgroups = new LinkedList<ColumnGroup>();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;ColumnModel();;;public ColumnModel() {
        internalInitialize();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;setMaxCellIndex(int);;;synchronized public void setMaxCellIndex(int maxCellIndex) {
        this._maxCellIndex = Math.max(this._maxCellIndex, maxCellIndex);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;getMaxCellIndex();;;public int getMaxCellIndex() {
        return _maxCellIndex;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;allocateNewCellIndex();;;synchronized public int allocateNewCellIndex() {
        return ++_maxCellIndex;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;setKeyColumnIndex(int);;;public void setKeyColumnIndex(int keyColumnIndex) {
        // TODO: check validity of new cell index, e.g., it's not in any group
        this._keyColumnIndex = keyColumnIndex;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;getKeyColumnIndex();;;public int getKeyColumnIndex() {
        return _keyColumnIndex;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;addColumnGroup(int,int,int);;;synchronized public void addColumnGroup(int startColumnIndex, int span, int keyColumnIndex) {
        for (ColumnGroup g : columnGroups) {
            if (g.startColumnIndex == startColumnIndex && g.columnSpan == span) {
                if (g.keyColumnIndex == keyColumnIndex) {
                    return;
                } else {
                    columnGroups.remove(g);
                    break;
                }
            }
        }
        
        ColumnGroup cg = new ColumnGroup(startColumnIndex, span, keyColumnIndex);
        
        columnGroups.add(cg);
        
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;update();;;public void update() {
        internalInitialize();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;addColumn(int,Column,boolean);;;synchronized public void addColumn(int index, Column column, boolean avoidNameCollision) throws ModelException {
    	String baseName = column.getName();
    	
    	if (_nameToColumn.containsKey(baseName)) {
    		if (!avoidNameCollision) {
    			throw new ModelException("Duplicated column name");
    		}
    	}
    	
    	String name = baseName;
    	int i = 1;
    	while (true) {
    		if (_nameToColumn.containsKey(name)) {
    			i++;
    			name = baseName + i;
    		} else {
    			break;
    		}
    	}
    	
    	column.setName(name);
		columns.add(index < 0 ? columns.size() : index, column);
		_nameToColumn.put(name, column); // so the next call can check
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;getColumnByName(String);;;synchronized public Column getColumnByName(String name) {
        return _nameToColumn.get(name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;getColumnIndexByName(String);;;synchronized public int getColumnIndexByName(String name) {
        for (int i = 0; i < _columnNames.size(); i++) {
            String s = _columnNames.get(i);
            if (name.equals(s)) {
                return i;
            }
        }
        return -1;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;getColumnByCellIndex(int);;;synchronized public Column getColumnByCellIndex(int cellIndex) {
        return _cellIndexToColumn.get(cellIndex);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;getColumnNames();;;synchronized public List<String> getColumnNames() {
        return _columnNames;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;write(JSONWriter,Properties);;;synchronized public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        
        writer.key("columns");
        writer.array();
        for (Column column : columns) {
            column.write(writer, options);
        }
        writer.endArray();
        
        if (columns.size() > 0) {
            writer.key("keyCellIndex"); writer.value(getKeyColumnIndex());
            writer.key("keyColumnName"); writer.value(columns.get(_keyColumnIndex).getName());
        }
        
        writer.key("columnGroups");
        writer.array();
        for (ColumnGroup g : _rootColumnGroups) {
            g.write(writer, options);
        }
        writer.endArray();
        
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;save(Writer,Properties);;;synchronized public void save(Writer writer, Properties options) throws IOException {
        writer.write("maxCellIndex="); writer.write(Integer.toString(_maxCellIndex)); writer.write('\n');
        writer.write("keyColumnIndex="); writer.write(Integer.toString(_keyColumnIndex)); writer.write('\n');

        writer.write("columnCount="); writer.write(Integer.toString(columns.size())); writer.write('\n');
        for (Column column : columns) {
            column.save(writer); writer.write('\n');
        }
        
        writer.write("columnGroupCount="); writer.write(Integer.toString(columnGroups.size())); writer.write('\n');
        for (ColumnGroup group : columnGroups) {
            group.save(writer); writer.write('\n');
        }
        
        writer.write("/e/\n");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;load(LineNumberReader);;;synchronized public void load(LineNumberReader reader) throws Exception {
        String line;
        while ((line = reader.readLine()) != null && !"/e/".equals(line)) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            String value = line.substring(equal + 1);
            
            if ("maxCellIndex".equals(field)) {
                _maxCellIndex = Integer.parseInt(value);
            } else if ("keyColumnIndex".equals(field)) {
                _keyColumnIndex = Integer.parseInt(value);
            } else if ("columnCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                for (int i = 0; i < count; i++) {
                    columns.add(Column.load(reader.readLine()));
                }
            } else if ("columnGroupCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                for (int i = 0; i < count; i++) {
                    columnGroups.add(ColumnGroup.load(reader.readLine()));
                }
            }
        }
        
        internalInitialize();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;internalInitialize();;;synchronized protected void internalInitialize() {
        generateMaps();
        
        // Turn the flat list of column groups into a tree
        
        _rootColumnGroups = new LinkedList<ColumnGroup>(columnGroups);
        Collections.sort(_rootColumnGroups, new Comparator<ColumnGroup>() {
            public int compare(ColumnGroup o1, ColumnGroup o2) {
                int firstDiff = o1.startColumnIndex - o2.startColumnIndex;
                return firstDiff != 0 ?
                    firstDiff : // whichever group that starts first goes first 
                    (o2.columnSpan - o1.columnSpan); // otherwise, the larger group goes first
            }
        });
        
        for (int i = _rootColumnGroups.size() - 1; i >= 0; i--) {
            ColumnGroup g = _rootColumnGroups.get(i);
            
            for (int j = i + 1; j < _rootColumnGroups.size(); j++) {
                ColumnGroup g2 = _rootColumnGroups.get(j);
                if (g2.parentGroup == null && g.contains(g2)) {
                    g2.parentGroup = g;
                    g.subgroups.add(g2);
                }
            }
        }
        
        for (int i = _rootColumnGroups.size() - 1; i >= 0; i--) {
            if (_rootColumnGroups.get(i).parentGroup != null) {
                _rootColumnGroups.remove(i);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ColumnModel;generateMaps();;;protected void generateMaps() {
        _nameToColumn = new HashMap<String, Column>();
        _cellIndexToColumn = new HashMap<Integer, Column>();
        _columnNames = new ArrayList<String>();
        
        for (Column column : columns) {
            _nameToColumn.put(column.getName(), column);
            _cellIndexToColumn.put(column.getCellIndex(), column);
            _columnNames.add(column.getName());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ModelException;ModelException();;;public ModelException() {
		// TODO Auto-generated constructor stub
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ModelException;ModelException(String);;;public ModelException(String message) {
		super(message);
		// TODO Auto-generated constructor stub
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ModelException;ModelException(Throwable);;;public ModelException(Throwable cause) {
		super(cause);
		// TODO Auto-generated constructor stub
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ModelException;ModelException(String,Throwable);;;public ModelException(String message, Throwable cause) {
		super(message, cause);
		// TODO Auto-generated constructor stub
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Project;generateID();;;static public long generateID() {
        return System.currentTimeMillis() + Math.round(Math.random() * 1000000000000L);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Project;Project();;;public Project() {
        id = generateID();
        history = new History(this);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Project;Project(long);;;protected Project(long id) {
        this.id = id;
        this.history = new History(this);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Project;getMetadata();;;public ProjectMetadata getMetadata() {
        return ProjectManager.singleton.getProjectMetadata(id);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Project;save();;;synchronized public void save() {
        synchronized (this) {
            File dir = ProjectManager.singleton.getProjectDir(id);

            File tempFile = new File(dir, "data.temp.zip");
            try {
                saveToFile(tempFile);
            } catch (Exception e) {
                e.printStackTrace();

                logger.warn("Failed to save project {}", id);
                return;
            }

            File file = new File(dir, "data.zip");
            File oldFile = new File(dir, "data.old.zip");

            if (file.exists()) {
                file.renameTo(oldFile);
            }

            tempFile.renameTo(file);
            if (oldFile.exists()) {
                oldFile.delete();
            }

            lastSave = new Date();

            logger.info("Saved project '{}'",id);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Project;saveToFile(File);;;protected void saveToFile(File file) throws Exception {
        ZipOutputStream out = new ZipOutputStream(new FileOutputStream(file));
        try {
            Pool pool = new Pool();

            out.putNextEntry(new ZipEntry("data.txt"));
            try {
                saveToOutputStream(out, pool);
            } finally {
                out.closeEntry();
            }

            out.putNextEntry(new ZipEntry("pool.txt"));
            try {
                pool.save(out);
            } finally {
                out.closeEntry();
            }
        } finally {
            out.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Project;saveToOutputStream(OutputStream,Pool);;;protected void saveToOutputStream(OutputStream out, Pool pool) throws IOException {
        Writer writer = new OutputStreamWriter(out);
        try {
            Properties options = new Properties();
            options.setProperty("mode", "save");
            options.put("pool", pool);

            saveToWriter(writer, options);
        } finally {
            writer.flush();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Project;saveToWriter(Writer,Properties);;;protected void saveToWriter(Writer writer, Properties options) throws IOException {
        writer.write(GridworksServlet.getVersion()); writer.write('\n');

        writer.write("columnModel=\n"); columnModel.save(writer, options);
        writer.write("history=\n"); history.save(writer, options);
        if (protograph != null) {
            writer.write("protograph="); protograph.save(writer, options); writer.write('\n');
        }

        writer.write("rowCount="); writer.write(Integer.toString(rows.size())); writer.write('\n');
        for (Row row : rows) {
            row.save(writer, options); writer.write('\n');
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Project;load(File,long);;;static public Project load(File dir, long id) {
        try {
            File file = new File(dir, "data.zip");
            if (file.exists()) {
                return loadFromFile(file, id);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            File file = new File(dir, "data.temp.zip");
            if (file.exists()) {
                return loadFromFile(file, id);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            File file = new File(dir, "data.old.zip");
            if (file.exists()) {
                return loadFromFile(file, id);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Project;loadFromFile(File,long);;;static protected Project loadFromFile(
        File file,
        long id
    ) throws Exception {
        ZipFile zipFile = new ZipFile(file);
        try {
            Pool pool = new Pool();
            ZipEntry poolEntry = zipFile.getEntry("pool.txt");
            if (poolEntry != null) {
                pool.load(new InputStreamReader(
                    zipFile.getInputStream(poolEntry)));
            } // else, it's a legacy project file

            return loadFromReader(
                new LineNumberReader(
                    new InputStreamReader(
                        zipFile.getInputStream(
                            zipFile.getEntry("data.txt")))),
                id,
                pool
            );
        } finally {
            zipFile.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Project;loadFromReader(LineNumberReader,long,Pool);;;static protected Project loadFromReader(
        LineNumberReader reader,
        long id,
        Pool pool
    ) throws Exception {
        long start = System.currentTimeMillis();

        /* String version = */ reader.readLine();

        Project project = new Project(id);
        int maxCellCount = 0;

        String line;
        while ((line = reader.readLine()) != null) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            String value = line.substring(equal + 1);

            if ("columnModel".equals(field)) {
                project.columnModel.load(reader);
            } else if ("history".equals(field)) {
                project.history.load(project, reader);
            } else if ("protograph".equals(field)) {
                project.protograph = Protograph.load(project, value);
            } else if ("rowCount".equals(field)) {
                int count = Integer.parseInt(value);

                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    if (line != null) {
                        Row row = Row.load(line, pool);
                        project.rows.add(row);
                        maxCellCount = Math.max(maxCellCount, row.cells.size());
                    }
                }
            }
        }

        project.columnModel.setMaxCellIndex(maxCellCount - 1);

        logger.info(
            "Loaded project {} from disk in {} sec(s)",id,Long.toString((System.currentTimeMillis() - start) / 1000)
        );

        project.update();

        return project;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Project;update();;;public void update() {
        columnModel.update();
    	recordModel.update(this);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Project;getProcessManager();;;public ProcessManager getProcessManager() {
        return this.processManager;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;judgmentToString(Judgment);;;static public String judgmentToString(Judgment judgment) {
        if (judgment == Judgment.Matched) {
            return "matched";
        } else if (judgment == Judgment.New) {
            return "new";
        } else {
            return "none";
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;stringToJudgment(String);;;static public Judgment stringToJudgment(String s) {
        if ("matched".equals(s)) {
            return Judgment.Matched;
        } else if ("new".equals(s)) {
            return Judgment.New;
        } else {
            return Judgment.None;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;Recon(long);;;public Recon(long judgmentHistoryEntry) {
        id = System.currentTimeMillis() * 1000000 + Math.round(Math.random() * 1000000);
        this.judgmentHistoryEntry = judgmentHistoryEntry;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;Recon(long,long);;;protected Recon(long id, long judgmentHistoryEntry) {
        this.id = id;
        this.judgmentHistoryEntry = judgmentHistoryEntry;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;dup(long);;;public Recon dup(long judgmentHistoryEntry) {
        Recon r = new Recon(judgmentHistoryEntry);
        
        System.arraycopy(features, 0, r.features, 0, features.length);
        
        if (candidates != null) {
            r.candidates = new ArrayList<ReconCandidate>(candidates);
        }
        
        r.service = service;
        
        r.judgment = judgment;
        
        r.judgmentAction = judgmentAction;
        r.judgmentBatchSize = judgmentBatchSize;
        
        r.match = match;
        r.matchRank = matchRank;
        
        return r;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;addCandidate(ReconCandidate);;;public void addCandidate(ReconCandidate candidate) {
        if (candidates == null) {
            candidates = new ArrayList<ReconCandidate>(3);
        }
        candidates.add(candidate);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;getBestCandidate();;;public ReconCandidate getBestCandidate() {
        if (candidates != null && candidates.size() > 0) {
            return candidates.get(0);
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;getFeature(int);;;public Object getFeature(int feature) {
        return feature < features.length ? features[feature] : null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;setFeature(int,Object);;;public void setFeature(int feature, Object v) {
        if (feature >= features.length) {
            if (feature >= Feature_max) {
                return;
            }
            
            // We deserialized this object from an older version of the class
            // that had fewer features, so we can just try to extend it
            
            Object[] newFeatures = new Object[Feature_max];
            
            System.arraycopy(features, 0, newFeatures, 0, features.length);
            
            features = newFeatures;
        }
        
        features[feature] = v;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;getField(String,Properties);;;public Object getField(String name, Properties bindings) {
        if ("id".equals(name)) {
            return id;
        } else if ("best".equals(name)) {
            return candidates != null && candidates.size() > 0 ? candidates.get(0) : null;
        } else if ("candidates".equals(name)) {
            return candidates;
        } else if ("judgment".equals(name) || "judgement".equals(name)) {
            return judgmentToString();
        } else if ("judgmentAction".equals(name) || "judgementAction".equals(name)) {
            return judgmentAction;
        } else if ("judgmentHistoryEntry".equals(name) || "judgementHistoryEntry".equals(name)) {
            return judgmentHistoryEntry;
        } else if ("judgmentBatchSize".equals(name) || "judgementBatchSize".equals(name)) {
            return judgmentBatchSize;
        } else if ("matched".equals(name)) {
            return judgment == Judgment.Matched;
        } else if ("new".equals(name)) {
            return judgment == Judgment.New;
        } else if ("match".equals(name)) {
            return match;
        } else if ("matchRank".equals(name)) {
            return matchRank;
        } else if ("features".equals(name)) {
            return new Features();
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;fieldAlsoHasFields(String);;;public boolean fieldAlsoHasFields(String name) {
        return "match".equals(name) || "best".equals(name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;judgmentToString();;;protected String judgmentToString() {
        return judgmentToString(judgment);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;getField(String,Properties);;;public Object getField(String name, Properties bindings) {
            int index = s_featureMap.get(name);
            return index < features.length ? features[index] : null;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;fieldAlsoHasFields(String);;;public boolean fieldAlsoHasFields(String name) {
            return false;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        boolean saveMode = "save".equals(options.getProperty("mode"));
        
        writer.object();
        writer.key("id"); writer.value(id);
        if (saveMode) {
            writer.key("judgmentHistoryEntry"); writer.value(judgmentHistoryEntry);
        }
        
        writer.key("j"); writer.value(judgmentToString());
        if (match != null) {
            writer.key("m");
            writer.value(match.topicID);
        }
        if (match == null || saveMode) {
            writer.key("c"); writer.array();
            if (candidates != null) {
                for (ReconCandidate c : candidates) {
                    writer.value(c.topicID);
                }
            }
            writer.endArray();
        }
        
        if (saveMode) {
            writer.key("f");
                writer.array();
                for (Object o : features) {
                    writer.value(o);
                }
                writer.endArray();
                
            writer.key("service"); writer.value(service);
            writer.key("judgmentAction"); writer.value(judgmentAction);
            writer.key("judgmentBatchSize"); writer.value(judgmentBatchSize);
            
            if (match != null) {
                writer.key("matchRank"); writer.value(matchRank);
            }
        }
        
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;loadStreaming(String,Pool);;;static public Recon loadStreaming(String s, Pool pool) throws Exception {
        JsonFactory jsonFactory = new JsonFactory(); 
        JsonParser jp = jsonFactory.createJsonParser(s);
        
        if (jp.nextToken() != JsonToken.START_OBJECT) {
            return null;
        }
        return loadStreaming(jp, pool);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Recon;loadStreaming(JsonParser,Pool);;;static public Recon loadStreaming(JsonParser jp, Pool pool) throws Exception {
        JsonToken t = jp.getCurrentToken();
        if (t == JsonToken.VALUE_NULL || t != JsonToken.START_OBJECT) {
            return null;
        }
        
        Recon recon = null;
        long id = -1;
        long judgmentHistoryEntry = -1;
        
        while (jp.nextToken() != JsonToken.END_OBJECT) {
            String fieldName = jp.getCurrentName();
            jp.nextToken();
            
            if ("id".equals(fieldName)) {
                id = jp.getLongValue();
            } else if ("judgmentHistoryEntry".equals(fieldName)) {
                judgmentHistoryEntry = jp.getLongValue();
            } else {
                if (recon == null) {
                    recon = new Recon(id, judgmentHistoryEntry);
                }
                
                if ("j".equals(fieldName)) {
                    recon.judgment = stringToJudgment(jp.getText());
                } else if ("m".equals(fieldName)) {
                    if (jp.getCurrentToken() == JsonToken.VALUE_STRING) {
                        String candidateID = jp.getText();
                        
                        recon.match = pool.getReconCandidate(candidateID);
                    } else {
                        // legacy
                        recon.match = ReconCandidate.loadStreaming(jp);
                    }
                } else if ("f".equals(fieldName)) {
                    if (jp.getCurrentToken() != JsonToken.START_ARRAY) {
                        return null;
                    }
                    
                    int feature = 0;
                    while (jp.nextToken() != JsonToken.END_ARRAY) {
                        if (feature < recon.features.length) {
                            JsonToken token = jp.getCurrentToken();
                            if (token == JsonToken.VALUE_STRING) {
                                recon.features[feature++] = jp.getText();
                            } else if (token == JsonToken.VALUE_NUMBER_INT) {
                                recon.features[feature++] = jp.getLongValue();
                            } else if (token == JsonToken.VALUE_NUMBER_FLOAT) {
                                recon.features[feature++] = jp.getDoubleValue();
                            } else if (token == JsonToken.VALUE_FALSE) {
                                recon.features[feature++] = false;
                            } else if (token == JsonToken.VALUE_TRUE) {
                                recon.features[feature++] = true;
                            }
                        }
                    }
                } else if ("c".equals(fieldName)) {
                    if (jp.getCurrentToken() != JsonToken.START_ARRAY) {
                        return null;
                    }
                    
                    while (jp.nextToken() != JsonToken.END_ARRAY) {
                        if (jp.getCurrentToken() == JsonToken.VALUE_STRING) {
                            String candidateID = jp.getText();
                        
                            recon.addCandidate(pool.getReconCandidate(candidateID));
                        } else {
                            // legacy
                            recon.addCandidate(ReconCandidate.loadStreaming(jp));
                        }
                    }
                } else if ("service".equals(fieldName)) {
                    recon.service = jp.getText();
                } else if ("judgmentAction".equals(fieldName)) {
                    recon.judgmentAction = jp.getText();
                } else if ("judgmentBatchSize".equals(fieldName)) {
                    recon.judgmentBatchSize = jp.getIntValue();
                } else if ("matchRank".equals(fieldName)) {
                    recon.matchRank = jp.getIntValue();
                }
            }
        }
        
        return recon;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ReconCandidate;ReconCandidate(String,String,String,String[],double);;;public ReconCandidate(String topicID, String topicGUID, String topicName, String[] typeIDs, double score) {
        this.topicID = topicID;
        this.topicGUID = topicGUID;
        this.topicName = topicName;
        this.typeIDs = typeIDs;
        this.score = score;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ReconCandidate;getField(String,Properties);;;public Object getField(String name, Properties bindings) {
        if ("id".equals(name)) {
            return topicID;
        } else if ("guid".equals(name)) {
            return topicGUID;
        } else if ("name".equals(name)) {
            return topicName;
        } else if ("type".equals(name)) {
            return typeIDs;
        } else if ("score".equals(name)) {
            return score;
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ReconCandidate;fieldAlsoHasFields(String);;;public boolean fieldAlsoHasFields(String name) {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ReconCandidate;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("id"); writer.value(topicID);
        writer.key("guid"); writer.value(topicGUID);
        writer.key("name"); writer.value(topicName);
        writer.key("score"); writer.value(score);
        
        /* if (!options.containsKey("reconCandidateOmitTypes")) */ {
            writer.key("types"); writer.array();
            for (String typeID : typeIDs) {
                writer.value(typeID);
            }
            writer.endArray();
        }
        
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ReconCandidate;loadStreaming(String);;;static public ReconCandidate loadStreaming(String s) throws Exception {
        JsonFactory jsonFactory = new JsonFactory(); 
        JsonParser jp = jsonFactory.createJsonParser(s);
        
        if (jp.nextToken() != JsonToken.START_OBJECT) {
            return null;
        }
        return loadStreaming(jp);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ReconCandidate;loadStreaming(JsonParser);;;static public ReconCandidate loadStreaming(JsonParser jp) throws Exception {
        JsonToken t = jp.getCurrentToken();
        if (t == JsonToken.VALUE_NULL || t != JsonToken.START_OBJECT) {
            return null;
        }
        
        String id = null;
        String guid = null;
        String name = null;
        List<String> types = null;
        double score = 0;
        
        while (jp.nextToken() != JsonToken.END_OBJECT) {
            String fieldName = jp.getCurrentName();
            jp.nextToken();
            
            if ("id".equals(fieldName)) {
                id = jp.getText();
            } else if ("guid".equals(fieldName)) {
                guid = jp.getText();
            } else if ("name".equals(fieldName)) {
                name = jp.getText();
            } else if ("score".equals(fieldName)) {
                score = jp.getDoubleValue();
            } else if ("types".equals(fieldName)) {
                if (jp.getCurrentToken() != JsonToken.START_ARRAY) {
                    return null;
                }
                
                types = new ArrayList<String>();
                
                while (jp.nextToken() != JsonToken.END_ARRAY) {
                    types.add(jp.getText());
                }
            }
        }
        
        String[] typesA;
        if (types != null) {
            typesA = new String[types.size()];
            types.toArray(typesA);
        } else {
            typesA = new String[0];
        }
        
        return new ReconCandidate(
            id,
            guid,
            name,
            typesA, 
            score
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ReconStats;load(JSONObject);;;static public ReconStats load(JSONObject obj) throws Exception {
        return new ReconStats(
                obj.getInt("nonBlanks"),
                obj.getInt("newTopics"),
                obj.getInt("matchedTopics")
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ReconStats;ReconStats(int,int,int);;;public ReconStats(int nonBlanks, int newTopics, int matchedTopics) {
        this.nonBlanks = nonBlanks;
        this.newTopics = newTopics;
        this.matchedTopics = matchedTopics;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ReconStats;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("nonBlanks"); writer.value(nonBlanks);
        writer.key("newTopics"); writer.value(newTopics);
        writer.key("matchedTopics"); writer.value(matchedTopics);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ReconStats;create(Project,int);;;static public ReconStats create(Project project, int cellIndex) {
        int nonBlanks = 0;
        int newTopics = 0;
        int matchedTopics = 0;
        
        for (Row row : project.rows) {
            Cell cell = row.getCell(cellIndex);
            if (cell != null && ExpressionUtils.isNonBlankData(cell.value)) {
                nonBlanks++;
                
                if (cell.recon != null) {
                    if (cell.recon.judgment == Judgment.New) {
                        newTopics++;
                    } else if (cell.recon.judgment == Judgment.Matched) {
                        matchedTopics++;
                    }
                }
            }
        }
        
        return new ReconStats(nonBlanks, newTopics, matchedTopics);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\ReconStats;save(Writer);;;public void save(Writer writer) {
        JSONWriter jsonWriter = new JSONWriter(writer);
        try {
            write(jsonWriter, new Properties());
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Record;Record(int,int,int);;;public Record(
		int fromRowIndex,
		int toRowIndex,
		int recordIndex
	) {
		this.fromRowIndex = fromRowIndex;
		this.toRowIndex = toRowIndex;
		this.recordIndex = recordIndex;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\RecordModel;CellDependency(int,int);;;public CellDependency(int rowIndex, int cellIndex) {
			this.rowIndex = rowIndex;
			this.cellIndex = cellIndex;
		}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\RecordModel;getRowDependency(int);;;public RowDependency getRowDependency(int rowIndex) {
		return _rowDependencies != null && rowIndex >= 0 && rowIndex < _rowDependencies.size() ?
				_rowDependencies.get(rowIndex) : null;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\RecordModel;getRecordCount();;;public int getRecordCount() {
		return _records.size();
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\RecordModel;getRecord(int);;;public Record getRecord(int recordIndex) {
		return _records != null && recordIndex >= 0 && recordIndex < _records.size() ?
				_records.get(recordIndex) : null;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\RecordModel;getRecordOfRow(int);;;public Record getRecordOfRow(int rowIndex) {
		RowDependency rd = getRowDependency(rowIndex);
		if (rd != null) {
			if (rd.recordIndex < 0) {
				rd = getRowDependency(rd.contextRows.get(0));
			}
			return getRecord(rd.recordIndex);
		}
		return null;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\RecordModel;write(JSONWriter,Properties);;;synchronized public void write(JSONWriter writer, Properties options)
    	throws JSONException {

    	writer.object();
    	writer.key("hasRecords"); writer.value(_records.size() < _rowDependencies.size());
    	writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\RecordModel;update(Project);;;synchronized public void update(Project project) {
    	synchronized (project) {
	    	List<Row> rows = project.rows;
	        int rowCount = rows.size();
	    	
	    	ColumnModel columnModel = project.columnModel;
	    	List<KeyedGroup> keyedGroups = computeKeyedGroups(columnModel);
	        int groupCount = keyedGroups.size();
	    	
	        int[] lastNonBlankRowsByGroup = new int[keyedGroups.size()];
	        for (int i = 0; i < lastNonBlankRowsByGroup.length; i++) {
	            lastNonBlankRowsByGroup[i] = -1;
	        }
	
	    	_rowDependencies = new ArrayList<RowDependency>(rowCount);
	    	
	        int recordIndex = 0;
	        for (int r = 0; r < rowCount; r++) {
	            Row row = rows.get(r);
	            RowDependency rowDependency = new RowDependency();
	
	            for (int g = 0; g < groupCount; g++) {
	                KeyedGroup group = keyedGroups.get(g);
	
	                if (!ExpressionUtils.isNonBlankData(row.getCellValue(group.keyCellIndex))) {
	                    int contextRowIndex = lastNonBlankRowsByGroup[g];
	                    if (contextRowIndex >= 0) {
	                        for (int dependentCellIndex : group.cellIndices) {
	                            if (ExpressionUtils.isNonBlankData(row.getCellValue(dependentCellIndex))) {
	                                setRowDependency(
	                                    project,
	                                    rowDependency,
	                                    dependentCellIndex,
	                                    contextRowIndex,
	                                    group.keyCellIndex
	                                );
	                            }
	                        }
	                    }
	                } else {
	                    lastNonBlankRowsByGroup[g] = r;
	                }
	            }
	
	            if (rowDependency.cellDependencies != null && rowDependency.cellDependencies.length > 0) {
	            	rowDependency.recordIndex = -1;
	            	rowDependency.contextRows = new ArrayList<Integer>();
	                for (CellDependency cd : rowDependency.cellDependencies) {
	                    if (cd != null) {
	                    	rowDependency.contextRows.add(cd.rowIndex);
	                    }
	                }
	                Collections.sort(rowDependency.contextRows);
	            } else {
	            	rowDependency.recordIndex = recordIndex++;
	            }
	            
	            _rowDependencies.add(rowDependency);
	        }
	        
	    	_records = new ArrayList<Record>(recordIndex);
	    	if (recordIndex > 0) {
		    	recordIndex = 0;
		    	
		    	int recordRowIndex = 0;
		        for (int r = 1; r < rowCount; r++) {
		            RowDependency rd = _rowDependencies.get(r);
		            if (rd.recordIndex >= 0) {
		            	_records.add(new Record(recordRowIndex, r, recordIndex++));
		            	
		            	recordIndex = rd.recordIndex;
		            	recordRowIndex = r;
		            }
		        }
		        
            	_records.add(new Record(recordRowIndex, rowCount, recordIndex++));
	    	}
    	}
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\RecordModel;computeKeyedGroups(ColumnModel);;;protected List<KeyedGroup> computeKeyedGroups(ColumnModel columnModel) {
        List<KeyedGroup> keyedGroups = new ArrayList<KeyedGroup>();
    	
        addRootKeyedGroup(columnModel, keyedGroups);

        for (ColumnGroup group : columnModel.columnGroups) {
            if (group.keyColumnIndex >= 0) {
                KeyedGroup keyedGroup = new KeyedGroup();
                keyedGroup.keyCellIndex = columnModel.columns.get(group.keyColumnIndex).getCellIndex();
                keyedGroup.cellIndices = new int[group.columnSpan - 1];

                int c = 0;
                for (int i = 0; i < group.columnSpan; i++) {
                    int columnIndex = group.startColumnIndex + i;
                    if (columnIndex != group.keyColumnIndex) {
                        int cellIndex = columnModel.columns.get(columnIndex).getCellIndex();
                        keyedGroup.cellIndices[c++] = cellIndex;
                    }
                }

                keyedGroups.add(keyedGroup);
            }
        }

        Collections.sort(keyedGroups, new Comparator<KeyedGroup>() {
            public int compare(KeyedGroup o1, KeyedGroup o2) {
                return o2.cellIndices.length - o1.cellIndices.length; // larger groups first
            }
        });
        
        return keyedGroups;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\RecordModel;addRootKeyedGroup(ColumnModel,List<KeyedGroup>);;;protected void addRootKeyedGroup(ColumnModel columnModel, List<KeyedGroup> keyedGroups) {
        int count = columnModel.getMaxCellIndex() + 1;
        if (count > 0 && columnModel.getKeyColumnIndex() < columnModel.columns.size()) {
            KeyedGroup rootKeyedGroup = new KeyedGroup();

            rootKeyedGroup.cellIndices = new int[count - 1];
            rootKeyedGroup.keyCellIndex = columnModel.columns.get(columnModel.getKeyColumnIndex()).getCellIndex();

            for (int i = 0; i < count; i++) {
                if (i < rootKeyedGroup.keyCellIndex) {
                    rootKeyedGroup.cellIndices[i] = i;
                } else if (i > rootKeyedGroup.keyCellIndex) {
                    rootKeyedGroup.cellIndices[i - 1] = i;
                }
            }
            keyedGroups.add(rootKeyedGroup);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\RecordModel;setRowDependency(Project,RowDependency,int,int,int);;;protected void setRowDependency(
		Project project, 
		RowDependency rowDependency, 
		int cellIndex, 
		int contextRowIndex, 
		int contextCellIndex
	) {
        if (rowDependency.cellDependencies == null) {
            int count = project.columnModel.getMaxCellIndex() + 1;
            
        	rowDependency.cellDependencies = new CellDependency[count];
        }

        rowDependency.cellDependencies[cellIndex] = 
        	new CellDependency(contextRowIndex, contextCellIndex);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Row;Row(int);;;public Row(int cellCount) {
        cells = new ArrayList<Cell>(cellCount);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Row;Row(List<Cell>,boolean,boolean);;;protected Row(List<Cell> cells, boolean flagged, boolean starred) {
        this.cells = cells;
        this.flagged = flagged;
        this.starred = starred;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Row;dup();;;public Row dup() {
        Row row = new Row(cells.size());
        row.flagged = flagged;
        row.starred = starred;
        row.cells.addAll(cells);
        return row;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Row;getField(String,Properties);;;public Object getField(String name, Properties bindings) {
        if (FLAGGED.equals(name)) {
            return flagged;
        } else if (STARRED.equals(name)) {
            return starred;
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Row;fieldAlsoHasFields(String);;;public boolean fieldAlsoHasFields(String name) {
        return "cells".equals(name) || "record".equals(name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Row;isEmpty();;;public boolean isEmpty() {
        for (Cell cell : cells) {
            if (cell != null && cell.value != null && !isValueBlank(cell.value)) {
                return false;
            }
        }
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Row;getCell(int);;;public Cell getCell(int cellIndex) {
        if (cellIndex >= 0 && cellIndex < cells.size()) {
            return cells.get(cellIndex);
        } else {
            return null;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Row;getCellValue(int);;;public Object getCellValue(int cellIndex) {
        if (cellIndex >= 0 && cellIndex < cells.size()) {
            Cell cell = cells.get(cellIndex);
            if (cell != null) {
                return cell.value;
            }
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Row;isCellBlank(int);;;public boolean isCellBlank(int cellIndex) {
        return isValueBlank(getCellValue(cellIndex));
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Row;isValueBlank(Object);;;protected boolean isValueBlank(Object value) {
        return value == null || !(value instanceof String) || ((String) value).trim().length() == 0;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Row;setCell(int,Cell);;;public void setCell(int cellIndex, Cell cell) {
        if (cellIndex < cells.size()) {
            cells.set(cellIndex, cell);
        } else {
            while (cellIndex > cells.size()) {
                cells.add(null);
            }
            cells.add(cell);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Row;getCellTuple(Project);;;public CellTuple getCellTuple(Project project) {
        return new CellTuple(project, this);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Row;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key(FLAGGED); writer.value(flagged);
        writer.key(STARRED); writer.value(starred);
        
        writer.key("cells"); writer.array();
        for (Cell cell : cells) {
            if (cell != null) {
                cell.write(writer, options);
            } else {
                writer.value(null);
            }
        }
        writer.endArray();
        
        if (!"save".equals(options.getProperty("mode"))) {
            if (options.containsKey("rowIndex")) {
            	int rowIndex = (Integer) options.get("rowIndex");
                writer.key("i"); writer.value(rowIndex);
                
                if (options.containsKey("recordIndex")) {
                	int recordIndex = (Integer) options.get("recordIndex");
                	
                    writer.key("j"); writer.value(recordIndex);
                }
            }
            
            if (options.containsKey("extra")) {
                Properties extra = (Properties) options.get("extra");
                if (extra != null) {
                    for (Entry<Object,Object> e : extra.entrySet()) {
                        writer.key((String) e.getKey());
                        writer.value(e.getValue());
                    }
                }
            }
        }
        
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Row;save(Writer,Properties);;;public void save(Writer writer, Properties options) {
        JSONWriter jsonWriter = new JSONWriter(writer);
        try {
            write(jsonWriter, options);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Row;load(String,Pool);;;static public Row load(String s, Pool pool) throws Exception {
        return s.length() == 0 ? null : 
            loadStreaming(s, pool);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\Row;loadStreaming(String,Pool);;;static public Row loadStreaming(String s, Pool pool) throws Exception {
        JsonFactory jsonFactory = new JsonFactory(); 
        JsonParser jp = jsonFactory.createJsonParser(s);
        
        if (jp.nextToken() != JsonToken.START_OBJECT) {
            return null;
        }
        
        List<Cell>  cells = new ArrayList<Cell>();
        boolean     starred = false;
        boolean     flagged = false;
        
        while (jp.nextToken() != JsonToken.END_OBJECT) {
            String fieldName = jp.getCurrentName();
            jp.nextToken();
            
            if (STARRED.equals(fieldName)) {
                starred = jp.getBooleanValue();
            } else if (FLAGGED.equals(fieldName)) {
                flagged = jp.getBooleanValue();
            } else if ("cells".equals(fieldName)) {
                if (jp.getCurrentToken() != JsonToken.START_ARRAY) {
                    return null;
                }
                
                while (jp.nextToken() != JsonToken.END_ARRAY) {
                    Cell cell = Cell.loadStreaming(jp, pool);
                    
                    cells.add(cell);
                }
            }
        }
        
        return (cells.size() > 0) ? new Row(cells, flagged, starred) : null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\CellAtRow;CellAtRow(int,Cell);;;public CellAtRow(int row, Cell cell) {
        this.row = row;
        this.cell = cell;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\CellAtRow;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
        writer.write(Integer.toString(row));
        writer.write(';');
        if (cell != null) {
            cell.save(writer, options);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\CellAtRow;load(String,Pool);;;static public CellAtRow load(String s, Pool pool) throws Exception {
        int semicolon = s.indexOf(';');
        int row = Integer.parseInt(s.substring(0, semicolon));
        Cell cell = semicolon < s.length() - 1 ? Cell.loadStreaming(s.substring(semicolon + 1), pool) : null;
        
        return new CellAtRow(row, cell);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\CellChange;CellChange(int,int,Cell,Cell);;;public CellChange(int row, int cellIndex, Cell oldCell, Cell newCell) {
        this.row = row;
        this.cellIndex = cellIndex;
        this.oldCell = oldCell;
        this.newCell = newCell;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\CellChange;apply(Project);;;public void apply(Project project) {
        project.rows.get(row).setCell(cellIndex, newCell);
        
        project.columnModel.getColumnByCellIndex(cellIndex).clearPrecomputes();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\CellChange;revert(Project);;;public void revert(Project project) {
        project.rows.get(row).setCell(cellIndex, oldCell);
        
        project.columnModel.getColumnByCellIndex(cellIndex).clearPrecomputes();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\CellChange;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
        writer.write("row="); writer.write(Integer.toString(row)); writer.write('\n');
        writer.write("cell="); writer.write(Integer.toString(cellIndex)); writer.write('\n');
        
        writer.write("old=");
        if (oldCell != null) {
            oldCell.save(writer, options); // one liner
        }
        writer.write('\n');
        
        writer.write("new=");
        if (newCell != null) {
            newCell.save(writer, options); // one liner
        }
        writer.write('\n');
        
        writer.write("/ec/\n"); // end of change marker
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\CellChange;load(LineNumberReader,Pool);;;static public CellChange load(LineNumberReader reader, Pool pool) throws Exception {
        int row = -1;
        int cellIndex = -1;
        Cell oldCell = null;
        Cell newCell = null;
        
        String line;
        while ((line = reader.readLine()) != null && !"/ec/".equals(line)) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            String value = line.substring(equal + 1);
            
            if ("row".equals(field)) {
                row = Integer.parseInt(value);
            } else if ("cell".equals(field)) {
                cellIndex = Integer.parseInt(value);
            } else if ("new".equals(field) && value.length() > 0) {
                newCell = Cell.loadStreaming(value, pool);
            } else if ("old".equals(field) && value.length() > 0) {
                oldCell = Cell.loadStreaming(value, pool);
            }
        }
        
        return new CellChange(row, cellIndex, oldCell, newCell);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnAdditionChange;ColumnAdditionChange(String,int,List<CellAtRow>);;;public ColumnAdditionChange(String columnName, int columnIndex, List<CellAtRow> newCells) {
        _columnName = columnName;
        _columnIndex = columnIndex;
        _newCells = new CellAtRow[newCells.size()];
        newCells.toArray(_newCells);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnAdditionChange;apply(Project);;;public void apply(Project project) {
        synchronized (project) {
            if (_newCellIndex < 0) {
                _newCellIndex = project.columnModel.allocateNewCellIndex();
            }
            
            Column column = new Column(_newCellIndex, _columnName);
            
            project.columnModel.columns.add(_columnIndex, column);
            try {
                for (CellAtRow cell : _newCells) {
                    project.rows.get(cell.row).setCell(_newCellIndex, cell.cell);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            project.update();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnAdditionChange;revert(Project);;;public void revert(Project project) {
        synchronized (project) {
            for (CellAtRow cell : _newCells) {
                Row row = project.rows.get(cell.row);
                row.setCell(_newCellIndex, null);
            }
            
            project.columnModel.columns.remove(_columnIndex);
            
            project.update();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnAdditionChange;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
        writer.write("columnName="); writer.write(_columnName); writer.write('\n');
        writer.write("columnIndex="); writer.write(Integer.toString(_columnIndex)); writer.write('\n');
        writer.write("newCellIndex="); writer.write(Integer.toString(_newCellIndex)); writer.write('\n');
        writer.write("newCellCount="); writer.write(Integer.toString(_newCells.length)); writer.write('\n');
        for (CellAtRow c : _newCells) {
            c.save(writer, options);
            writer.write('\n');
        }
        writer.write("/ec/\n"); // end of change marker
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnAdditionChange;load(LineNumberReader,Pool);;;static public Change load(LineNumberReader reader, Pool pool) throws Exception {
        String columnName = null;
        int columnIndex = -1;
        int newCellIndex = -1;
        List<CellAtRow> newCells = null;
        
        String line;
        while ((line = reader.readLine()) != null && !"/ec/".equals(line)) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            
            if ("columnName".equals(field)) {
                columnName = line.substring(equal + 1);
            } else if ("columnIndex".equals(field)) {
                columnIndex = Integer.parseInt(line.substring(equal + 1));
            } else if ("newCellIndex".equals(field)) {
                newCellIndex = Integer.parseInt(line.substring(equal + 1));
            } else if ("newCellCount".equals(field)) {
                int newCellCount = Integer.parseInt(line.substring(equal + 1));
                
                newCells = new ArrayList<CellAtRow>(newCellCount);
                for (int i = 0; i < newCellCount; i++) {
                    line = reader.readLine();
                    if (line != null) {
                        newCells.add(CellAtRow.load(line, pool));
                    }
                }
            }
        }
        
        ColumnAdditionChange change = new ColumnAdditionChange(columnName, columnIndex, newCells);
        change._newCellIndex = newCellIndex;
        
        return change;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnRemovalChange;ColumnRemovalChange(int);;;public ColumnRemovalChange(int index) {
        _oldColumnIndex = index;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnRemovalChange;apply(Project);;;public void apply(Project project) {
        synchronized (project) {
            _oldColumn = project.columnModel.columns.remove(_oldColumnIndex);
            _oldCells = new CellAtRow[project.rows.size()];
            
            int cellIndex = _oldColumn.getCellIndex();
            for (int i = 0; i < _oldCells.length; i++) {
                Row row = project.rows.get(i);
                
                Cell oldCell = null;
                if (cellIndex < row.cells.size()) {
                    oldCell = row.cells.get(cellIndex);
                }
                _oldCells[i] = new CellAtRow(i, oldCell);
                
                row.setCell(cellIndex, null);
            }
            
            project.update();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnRemovalChange;revert(Project);;;public void revert(Project project) {
        synchronized (project) {
            project.columnModel.columns.add(_oldColumnIndex, _oldColumn);
            
            int cellIndex = _oldColumn.getCellIndex();
            for (CellAtRow cell : _oldCells) {
                project.rows.get(cell.row).cells.set(cellIndex, cell.cell);
            }
            
            project.update();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnRemovalChange;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
        writer.write("oldColumnIndex="); writer.write(Integer.toString(_oldColumnIndex)); writer.write('\n');
        writer.write("oldColumn="); _oldColumn.save(writer); writer.write('\n');
        writer.write("oldCellCount="); writer.write(Integer.toString(_oldCells.length)); writer.write('\n');
        for (CellAtRow c : _oldCells) {
            c.save(writer, options);
            writer.write('\n');
        }
        writer.write("/ec/\n"); // end of change marker
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnRemovalChange;load(LineNumberReader,Pool);;;static public Change load(LineNumberReader reader, Pool pool) throws Exception {
        int oldColumnIndex = -1;
        Column oldColumn = null;
        CellAtRow[] oldCells = null;
        
        String line;
        while ((line = reader.readLine()) != null && !"/ec/".equals(line)) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            
            if ("oldColumnIndex".equals(field)) {
                oldColumnIndex = Integer.parseInt(line.substring(equal + 1));
            } else if ("oldColumn".equals(field)) {
                oldColumn = Column.load(line.substring(equal + 1));
            } else if ("oldCellCount".equals(field)) {
                int oldCellCount = Integer.parseInt(line.substring(equal + 1));
                
                oldCells = new CellAtRow[oldCellCount];
                for (int i = 0; i < oldCellCount; i++) {
                    line = reader.readLine();
                    if (line != null) {
                        oldCells[i] = CellAtRow.load(line, pool);
                    }
                }
            }
        }
        
        ColumnRemovalChange change = new ColumnRemovalChange(oldColumnIndex);
        change._oldColumn = oldColumn;
        change._oldCells = oldCells;
        
        return change;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnRenameChange;ColumnRenameChange(String,String);;;public ColumnRenameChange(String oldColumnName, String newColumnName) {
        _oldColumnName = oldColumnName;
        _newColumnName = newColumnName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnRenameChange;apply(Project);;;public void apply(Project project) {
        synchronized (project) {
            project.columnModel.getColumnByName(_oldColumnName).setName(_newColumnName);
            project.columnModel.update();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnRenameChange;revert(Project);;;public void revert(Project project) {
        synchronized (project) {
            project.columnModel.getColumnByName(_newColumnName).setName(_oldColumnName);
            project.columnModel.update();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnRenameChange;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
        writer.write("oldColumnName="); writer.write(_oldColumnName); writer.write('\n');
        writer.write("newColumnName="); writer.write(_newColumnName); writer.write('\n');
        writer.write("/ec/\n"); // end of change marker
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnRenameChange;load(LineNumberReader,Pool);;;static public Change load(LineNumberReader reader, Pool pool) throws Exception {
        String oldColumnName = null;
        String newColumnName = null;
        
        String line;
        while ((line = reader.readLine()) != null && !"/ec/".equals(line)) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            String value = line.substring(equal + 1);
            
            if ("oldColumnName".equals(field)) {
                oldColumnName = value;
            } else if ("newColumnName".equals(field)) {
                newColumnName = value;
            }
        }
        
        ColumnRenameChange change = new ColumnRenameChange(oldColumnName, newColumnName);
        
        return change;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnSplitChange;ColumnSplitChange(String,List<String>,List<Integer>,List<List<Serializable>>,boolean);;;public ColumnSplitChange(
        String                columnName, 
        List<String>          columnNames,
        List<Integer>         rowIndices,
        List<List<Serializable>> tuples,
        boolean               removeOriginalColumn
    ) {
        _columnName = columnName;
        
        _columnNames = columnNames;
        _rowIndices = rowIndices;
        _tuples = tuples;
        
        _removeOriginalColumn = removeOriginalColumn;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnSplitChange;ColumnSplitChange(String,List<String>,List<Integer>,List<List<Serializable>>,boolean,Column,int,int,List<Row>,List<Row>);;;protected ColumnSplitChange(
        String                      columnName, 
        List<String>                columnNames,
        List<Integer>               rowIndices,
        List<List<Serializable>>    tuples,
        boolean                     removeOriginalColumn,

        Column                      column,
        int                         columnIndex,
        
        int                         firstNewCellIndex,
        List<Row>                   oldRows,
        List<Row>                   newRows
    ) {
        _columnName = columnName;
        
        _columnNames = columnNames;
        _rowIndices = rowIndices;
        _tuples = tuples;
        
        _removeOriginalColumn = removeOriginalColumn;
        
        _column = column;
        _columnIndex = columnIndex;
        
        _firstNewCellIndex = firstNewCellIndex;
        _oldRows = oldRows;
        _newRows = newRows;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnSplitChange;apply(Project);;;public void apply(Project project) {
        synchronized (project) {
            if (_firstNewCellIndex < 0) {
                _firstNewCellIndex = project.columnModel.allocateNewCellIndex();
                for (int i = 1; i < _columnNames.size(); i++) {
                    project.columnModel.allocateNewCellIndex();
                }
                
                _column = project.columnModel.getColumnByName(_columnName);
                _columnIndex = project.columnModel.getColumnIndexByName(_columnName);
                
                _oldRows = new ArrayList<Row>(_rowIndices.size());
                _newRows = new ArrayList<Row>(_rowIndices.size());
                
                int cellIndex = _column.getCellIndex();
                
                for (int i = 0; i < _rowIndices.size(); i++) {
                    int r = _rowIndices.get(i);
                    List<Serializable> tuple = _tuples.get(i);
                
                    Row oldRow = project.rows.get(r);
                    Row newRow = oldRow.dup();
                    
                    _oldRows.add(oldRow);
                    _newRows.add(newRow);
                    
                    for (int c = 0; c < tuple.size(); c++) {
                        Serializable value = tuple.get(c);
                        if (value != null) {
                            newRow.setCell(_firstNewCellIndex + c, new Cell(value, null));
                        }
                    }
                    
                    if (_removeOriginalColumn) {
                        newRow.setCell(cellIndex, null);
                    }
                }
            }
            
            for (int i = 0; i < _rowIndices.size(); i++) {
                int r = _rowIndices.get(i);
                Row newRow = _newRows.get(i);
                
                project.rows.set(r, newRow);
            }
            
            for (int i = 0; i < _columnNames.size(); i++) {
                String name = _columnNames.get(i);
                int cellIndex = _firstNewCellIndex + i;
                
                Column column = new Column(cellIndex, name);
                
                project.columnModel.columns.add(_columnIndex + 1 + i, column);
            }
            
            if (_removeOriginalColumn) {
                project.columnModel.columns.remove(_columnIndex);
            }
            
            project.update();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnSplitChange;revert(Project);;;public void revert(Project project) {
        synchronized (project) {
            for (int i = 0; i < _rowIndices.size(); i++) {
                int r = _rowIndices.get(i);
                Row oldRow = _oldRows.get(i);
                
                project.rows.set(r, oldRow);
            }
            
            if (_removeOriginalColumn) {
                project.columnModel.columns.add(_columnIndex, _column);
            }
            
            for (int i = 0; i < _columnNames.size(); i++) {
                project.columnModel.columns.remove(_columnIndex + 1);
            }
            
            project.update();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnSplitChange;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
        writer.write("columnName="); writer.write(_columnName); writer.write('\n');
        
        writer.write("columnNameCount="); writer.write(Integer.toString(_columnNames.size())); writer.write('\n');
        for (String name : _columnNames) {
            writer.write(name); writer.write('\n');
        }
        writer.write("rowIndexCount="); writer.write(Integer.toString(_rowIndices.size())); writer.write('\n');
        for (Integer rowIndex : _rowIndices) {
            writer.write(rowIndex.toString()); writer.write('\n');
        }
        writer.write("tupleCount="); writer.write(Integer.toString(_tuples.size())); writer.write('\n');
        for (List<Serializable> tuple : _tuples) {
            writer.write(Integer.toString(tuple.size())); writer.write('\n');
            
            for (Serializable value : tuple) {
                if (value == null) {
                    writer.write("null");
                } else if (value instanceof String) {
                    writer.write(JSONObject.quote((String) value));
                } else {
                    writer.write(value.toString());
                }
                writer.write('\n');
            }
        }
        writer.write("removeOriginalColumn="); writer.write(Boolean.toString(_removeOriginalColumn)); writer.write('\n');
        
        writer.write("column="); _column.save(writer); writer.write('\n');
        writer.write("columnIndex="); writer.write(Integer.toString(_columnIndex)); writer.write('\n');
        
        writer.write("firstNewCellIndex="); writer.write(Integer.toString(_firstNewCellIndex)); writer.write('\n');
        
        writer.write("newRowCount="); writer.write(Integer.toString(_newRows.size())); writer.write('\n');
        for (Row row : _newRows) {
            row.save(writer, options);
            writer.write('\n');
        }
        writer.write("oldRowCount="); writer.write(Integer.toString(_oldRows.size())); writer.write('\n');
        for (Row row : _oldRows) {
            row.save(writer, options);
            writer.write('\n');
        }
        writer.write("/ec/\n"); // end of change marker
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ColumnSplitChange;load(LineNumberReader,Pool);;;static public Change load(LineNumberReader reader, Pool pool) throws Exception {
        String                      columnName = null;
        List<String>                columnNames = null;
        List<Integer>               rowIndices = null;
        List<List<Serializable>>    tuples = null;
        boolean                     removeOriginalColumn = false;

        Column                      column = null;
        int                         columnIndex = -1;
        
        int                         firstNewCellIndex = -1;
        List<Row>                   oldRows = null;
        List<Row>                   newRows = null;
        
        String line;
        while ((line = reader.readLine()) != null && !"/ec/".equals(line)) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            String value = line.substring(equal + 1);
            
            if ("columnName".equals(field)) {
                columnName = value;
            } else if ("columnNameCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                columnNames = new ArrayList<String>(count);
                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    if (line != null) {
                        columnNames.add(line);
                    }
                }
            } else if ("rowIndexCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                rowIndices = new ArrayList<Integer>(count);
                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    if (line != null) {
                        rowIndices.add(Integer.parseInt(line));
                    }
                }
            } else if ("tupleCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                tuples = new ArrayList<List<Serializable>>(count);
                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    
                    if (line == null) continue;
                    
                    int valueCount = Integer.parseInt(line);
                    
                    List<Serializable> tuple = new ArrayList<Serializable>(valueCount);
                    for (int r = 0; r < valueCount; r++) {
                        line = reader.readLine();
                        
                        JSONTokener t = new JSONTokener(line);
                        Object o = t.nextValue();
                        
                        tuple.add((o != JSONObject.NULL) ? (Serializable) o : null);
                    }
                    
                    tuples.add(tuple);
                }
            } else if ("removeOriginalColumn".equals(field)) {
                removeOriginalColumn = Boolean.parseBoolean(value);
                
            } else if ("column".equals(field)) {
                column = Column.load(value);
            } else if ("columnIndex".equals(field)) {
                columnIndex = Integer.parseInt(value);
            } else if ("firstNewCellIndex".equals(field)) {
                firstNewCellIndex = Integer.parseInt(value);
            } else if ("oldRowCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                oldRows = new ArrayList<Row>(count);
                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    if (line != null) {
                        oldRows.add(Row.load(line, pool));
                    }
                }
            } else if ("newRowCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                newRows = new ArrayList<Row>(count);
                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    if (line != null) {
                        newRows.add(Row.load(line, pool));
                    }
                }
            }

        }
        
        ColumnSplitChange change = new ColumnSplitChange(
            columnName, 
            columnNames,
            rowIndices,
            tuples,
            removeOriginalColumn,

            column,
            columnIndex,
            
            firstNewCellIndex,
            oldRows,
            newRows
        );
        
        
        return change;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\DataExtensionChange;DataExtensionChange(String,int,List<String>,List<FreebaseType>,List<Integer>,List<DataExtension>,long);;;public DataExtensionChange(
        String baseColumnName, 
        int columnInsertIndex, 
        List<String> columnNames,
        List<FreebaseType> columnTypes,
        List<Integer> rowIndices,
        List<DataExtension> dataExtensions,
        long historyEntryID
    ) {
        _baseColumnName = baseColumnName;
        _columnInsertIndex = columnInsertIndex;
        
        _columnNames = columnNames;
        _columnTypes = columnTypes;
        
        _rowIndices = rowIndices;
        _dataExtensions = dataExtensions;
        
        _historyEntryID = historyEntryID;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\DataExtensionChange;DataExtensionChange(String,int,List<String>,List<FreebaseType>,List<Integer>,List<DataExtension>,int,List<Row>,List<Row>);;;protected DataExtensionChange(
        String              baseColumnName, 
        int                 columnInsertIndex,
        
        List<String>        columnNames,
        List<FreebaseType> columnTypes,
        
        List<Integer>       rowIndices,
        List<DataExtension> dataExtensions,
        int                 firstNewCellIndex,
        List<Row>           oldRows,
        List<Row>           newRows
    ) {
        _baseColumnName = baseColumnName;
        _columnInsertIndex = columnInsertIndex;
        
        _columnNames = columnNames;
        _columnTypes = columnTypes;
        
        _rowIndices = rowIndices;
        _dataExtensions = dataExtensions;
        
        _firstNewCellIndex = firstNewCellIndex;
        _oldRows = oldRows;
        _newRows = newRows;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\DataExtensionChange;apply(Project);;;public void apply(Project project) {
        synchronized (project) {
            if (_firstNewCellIndex < 0) {
                _firstNewCellIndex = project.columnModel.allocateNewCellIndex();
                for (int i = 1; i < _columnNames.size(); i++) {
                    project.columnModel.allocateNewCellIndex();
                }
                
                _oldRows = new ArrayList<Row>(project.rows);
                
                _newRows = new ArrayList<Row>(project.rows.size());
                
                int cellIndex = project.columnModel.getColumnByName(_baseColumnName).getCellIndex();
                int keyCellIndex = project.columnModel.columns.get(project.columnModel.getKeyColumnIndex()).getCellIndex();
                int index = 0;
                
                int rowIndex = index < _rowIndices.size() ? _rowIndices.get(index) : _oldRows.size();
                DataExtension dataExtension = index < _rowIndices.size() ? _dataExtensions.get(index) : null;
                
                index++;
                
                Map<String, Recon> reconMap = new HashMap<String, Recon>();
                
                for (int r = 0; r < _oldRows.size(); r++) {
                    Row oldRow = _oldRows.get(r);
                    if (r < rowIndex) {
                        _newRows.add(oldRow.dup());
                        continue;
                    }
                    
                    if (dataExtension == null || dataExtension.data.length == 0) {
                        _newRows.add(oldRow);
                    } else {
                        Row firstNewRow = oldRow.dup();
                        extendRow(firstNewRow, dataExtension, 0, reconMap);
                        _newRows.add(firstNewRow);
                        
                        int r2 = r + 1;
                        for (int subR = 1; subR < dataExtension.data.length; subR++) {
                            if (r2 < project.rows.size()) {
                                Row oldRow2 = project.rows.get(r2);
                                if (oldRow2.isCellBlank(cellIndex) && 
                                    oldRow2.isCellBlank(keyCellIndex)) {
                                    
                                    Row newRow = oldRow2.dup();
                                    extendRow(newRow, dataExtension, subR, reconMap);
                                    
                                    _newRows.add(newRow);
                                    r2++;
                                    
                                    continue;
                                }
                            }
                            
                            Row newRow = new Row(cellIndex + _columnNames.size());
                            extendRow(newRow, dataExtension, subR, reconMap);
                            
                            _newRows.add(newRow);
                        }
                        
                        r = r2 - 1; // r will be incremented by the for loop anyway
                    }
                    
                    rowIndex = index < _rowIndices.size() ? _rowIndices.get(index) : _oldRows.size();
                    dataExtension = index < _rowIndices.size() ? _dataExtensions.get(index) : null;
                    index++;
                }
            }
            
            project.rows.clear();
            project.rows.addAll(_newRows);
            
            for (int i = 0; i < _columnNames.size(); i++) {
                String name = _columnNames.get(i);
                int cellIndex = _firstNewCellIndex + i;
                
                Column column = new Column(cellIndex, name);
                column.setReconConfig(new DataExtensionReconConfig(_columnTypes.get(i)));
                column.setReconStats(ReconStats.create(project, cellIndex));
                
                try {
					project.columnModel.addColumn(_columnInsertIndex + i, column, true);
					
					// the column might have been renamed to avoid collision
					_columnNames.set(i, column.getName());
				} catch (ModelException e) {
					// won't get here since we set the avoid collision flag
				}
            }
            
            project.update();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\DataExtensionChange;extendRow(Row,DataExtension,int,Map<String,Recon>);;;protected void extendRow(
        Row row, 
        DataExtension dataExtension, 
        int extensionRowIndex,
        Map<String, Recon> reconMap
    ) {
        Object[] values = dataExtension.data[extensionRowIndex];
        for (int c = 0; c < values.length; c++) {
            Object value = values[c];
            Cell cell = null;
            
            if (value instanceof ReconCandidate) {
                ReconCandidate rc = (ReconCandidate) value;
                Recon recon;
                if (reconMap.containsKey(rc.topicGUID)) {
                    recon = reconMap.get(rc.topicGUID);
                } else {
                    recon = new Recon(_historyEntryID);
                    recon.addCandidate(rc);
                    recon.service = "mql";
                    recon.match = rc;
                    recon.matchRank = 0;
                    recon.judgment = Judgment.Matched;
                    recon.judgmentAction = "auto";
                    recon.judgmentBatchSize = 1;
                    
                    reconMap.put(rc.topicGUID, recon);
                }
                cell = new Cell(rc.topicName, recon);
            } else {
                cell = new Cell((Serializable) value, null);
            }
            
            row.setCell(_firstNewCellIndex + c, cell);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\DataExtensionChange;revert(Project);;;public void revert(Project project) {
        synchronized (project) {
            project.rows.clear();
            project.rows.addAll(_oldRows);
            
            for (int i = 0; i < _columnNames.size(); i++) {
                project.columnModel.columns.remove(_columnInsertIndex);
            }
            
            project.update();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\DataExtensionChange;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
        writer.write("baseColumnName="); writer.write(_baseColumnName); writer.write('\n');
        writer.write("columnInsertIndex="); writer.write(Integer.toString(_columnInsertIndex)); writer.write('\n');
        writer.write("columnNameCount="); writer.write(Integer.toString(_columnNames.size())); writer.write('\n');
        for (String name : _columnNames) {
            writer.write(name); writer.write('\n');
        }
        writer.write("columnTypeCount="); writer.write(Integer.toString(_columnTypes.size())); writer.write('\n');
        for (FreebaseType type : _columnTypes) {
            try {
                JSONWriter jsonWriter = new JSONWriter(writer);
                
                type.write(jsonWriter, options);
            } catch (JSONException e) {
                // ???
            }
            writer.write('\n');
        }
        writer.write("rowIndexCount="); writer.write(Integer.toString(_rowIndices.size())); writer.write('\n');
        for (Integer rowIndex : _rowIndices) {
            writer.write(rowIndex.toString()); writer.write('\n');
        }
        writer.write("dataExtensionCount="); writer.write(Integer.toString(_dataExtensions.size())); writer.write('\n');
        for (DataExtension dataExtension : _dataExtensions) {
            writer.write(Integer.toString(dataExtension.data.length)); writer.write('\n');
            
            for (Object[] values : dataExtension.data) {
                for (Object value : values) {
                    if (value == null) {
                        writer.write("null");
                    } else if (value instanceof ReconCandidate) {
                        try {
                            JSONWriter jsonWriter = new JSONWriter(writer);
                            ((ReconCandidate) value).write(jsonWriter, options);
                        } catch (JSONException e) {
                            // ???
                        }
                    } else if (value instanceof String) {
                        writer.write(JSONObject.quote((String) value));
                    } else {
                        writer.write(value.toString());
                    }
                    writer.write('\n');
                }
            }
        }
        
        writer.write("firstNewCellIndex="); writer.write(Integer.toString(_firstNewCellIndex)); writer.write('\n');
        
        writer.write("newRowCount="); writer.write(Integer.toString(_newRows.size())); writer.write('\n');
        for (Row row : _newRows) {
            row.save(writer, options);
            writer.write('\n');
        }
        writer.write("oldRowCount="); writer.write(Integer.toString(_oldRows.size())); writer.write('\n');
        for (Row row : _oldRows) {
            row.save(writer, options);
            writer.write('\n');
        }
        writer.write("/ec/\n"); // end of change marker
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\DataExtensionChange;load(LineNumberReader,Pool);;;static public Change load(LineNumberReader reader, Pool pool) throws Exception {
        String baseColumnName = null;
        int columnInsertIndex = -1;
        
        List<String> columnNames = null;
        List<FreebaseType> columnTypes = null;
        
        List<Integer> rowIndices = null;
        List<DataExtension> dataExtensions = null;
        
        List<Row> oldRows = null;
        List<Row> newRows = null;
        
        int firstNewCellIndex = -1;
        
        String line;
        while ((line = reader.readLine()) != null && !"/ec/".equals(line)) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            String value = line.substring(equal + 1);
            
            if ("baseColumnName".equals(field)) {
                baseColumnName = value;
            } else if ("columnInsertIndex".equals(field)) {
                columnInsertIndex = Integer.parseInt(value);
            } else if ("firstNewCellIndex".equals(field)) {
                firstNewCellIndex = Integer.parseInt(value);
            } else if ("rowIndexCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                rowIndices = new ArrayList<Integer>(count);
                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    if (line != null) {
                        rowIndices.add(Integer.parseInt(line));
                    }
                }
            } else if ("columnNameCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                columnNames = new ArrayList<String>(count);
                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    if (line != null) {
                        columnNames.add(line);
                    }
                }
            } else if ("columnTypeCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                columnTypes = new ArrayList<FreebaseType>(count);
                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    columnTypes.add(FreebaseType.load(ParsingUtilities.evaluateJsonStringToObject(line)));
                }
            } else if ("dataExtensionCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                dataExtensions = new ArrayList<DataExtension>(count);
                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    
                    if (line == null) continue;
                    
                    int rowCount = Integer.parseInt(line);
                    Object[][] data = new Object[rowCount][];
                    
                    for (int r = 0; r < rowCount; r++) {
                        Object[] row = new Object[columnNames.size()];
                        for (int c = 0; c < columnNames.size(); c++) {
                            line = reader.readLine();
                            
                            row[c] = ReconCandidate.loadStreaming(line);
                        }
                        
                        data[r] = row;
                    }
                    
                    dataExtensions.add(new DataExtension(data));
                }
            } else if ("oldRowCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                oldRows = new ArrayList<Row>(count);
                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    if (line != null) {
                        oldRows.add(Row.load(line, pool));
                    }
                }
            } else if ("newRowCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                newRows = new ArrayList<Row>(count);
                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    if (line != null) {
                        newRows.add(Row.load(line, pool));
                    }
                }
            }

        }
        
        DataExtensionChange change = new DataExtensionChange(
            baseColumnName, 
            columnInsertIndex, 
            columnNames,
            columnTypes,
            rowIndices,
            dataExtensions,
            firstNewCellIndex,
            oldRows,
            newRows
        );
        
        
        return change;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassCellChange;MassCellChange(CellChange[],String,boolean);;;public MassCellChange(
            CellChange[] cellChanges, 
            String commonColumnName, 
            boolean updateRowContextDependencies) {
        
        _cellChanges = cellChanges;
        _commonColumnName = commonColumnName;
        _updateRowContextDependencies = updateRowContextDependencies;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassCellChange;MassCellChange(List<CellChange>,String,boolean);;;public MassCellChange(
            List<CellChange> cellChanges, 
            String commonColumnName, 
            boolean updateRowContextDependencies) {
        
        _cellChanges = new CellChange[cellChanges.size()];
        _commonColumnName = commonColumnName;
        cellChanges.toArray(_cellChanges);
        
        _updateRowContextDependencies = updateRowContextDependencies;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassCellChange;MassCellChange(CellChange,String,boolean);;;public MassCellChange(CellChange cellChange, String commonColumnName, boolean updateRowContextDependencies) {
        _cellChanges = new CellChange[1];
        _cellChanges[0] = cellChange;
        
        _commonColumnName = commonColumnName;
        
        _updateRowContextDependencies = updateRowContextDependencies;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassCellChange;apply(Project);;;public void apply(Project project) {
        synchronized (project) {
            List<Row> rows = project.rows;
            
            for (CellChange cellChange : _cellChanges) {
                rows.get(cellChange.row).setCell(cellChange.cellIndex, cellChange.newCell);
            }
            
            if (_commonColumnName != null) {
                Column column = project.columnModel.getColumnByName(_commonColumnName);
                column.clearPrecomputes();
            }
            
            if (_updateRowContextDependencies) {
                project.update();
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassCellChange;revert(Project);;;public void revert(Project project) {
        synchronized (project) {
            List<Row> rows = project.rows;
            
            for (CellChange cellChange : _cellChanges) {
                rows.get(cellChange.row).setCell(cellChange.cellIndex, cellChange.oldCell);
            }
            
            if (_commonColumnName != null) {
                Column column = project.columnModel.getColumnByName(_commonColumnName);
                column.clearPrecomputes();
            }
            
            if (_updateRowContextDependencies) {
                project.update();
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassCellChange;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
        writer.write("commonColumnName="); writer.write(_commonColumnName); writer.write('\n');
        writer.write("updateRowContextDependencies="); writer.write(Boolean.toString(_updateRowContextDependencies)); writer.write('\n');
        writer.write("cellChangeCount="); writer.write(Integer.toString(_cellChanges.length)); writer.write('\n');
        for (CellChange c : _cellChanges) {
            c.save(writer, options);
        }
        writer.write("/ec/\n"); // end of change marker
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassCellChange;load(LineNumberReader,Pool);;;static public Change load(LineNumberReader reader, Pool pool) throws Exception {
        String commonColumnName = null;
        boolean updateRowContextDependencies = false;
        CellChange[] cellChanges = null;
        
        String line;
        while ((line = reader.readLine()) != null && !"/ec/".equals(line)) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            
            if ("commonColumnName".equals(field)) {
                commonColumnName = line.substring(equal + 1);
            } else if ("updateRowContextDependencies".equals(field)) {
                updateRowContextDependencies = Boolean.parseBoolean(line.substring(equal + 1));
            } else if ("cellChangeCount".equals(field)) {
                int cellChangeCount = Integer.parseInt(line.substring(equal + 1));
                
                cellChanges = new CellChange[cellChangeCount];
                for (int i = 0; i < cellChangeCount; i++) {
                    cellChanges[i] = CellChange.load(reader, pool);
                }
            }
        }
        
        MassCellChange change = new MassCellChange(cellChanges, commonColumnName, updateRowContextDependencies);
        
        return change;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassChange;MassChange(List<?extendsChange>,boolean);;;public MassChange(List<? extends Change> changes, boolean updateRowContextDependencies) {
        _changes = changes;
        _updateRowContextDependencies = updateRowContextDependencies;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassChange;apply(Project);;;public void apply(Project project) {
        synchronized (project) {
            for (Change change : _changes) {
                change.apply(project);
            }
            
            if (_updateRowContextDependencies) {
                project.update();
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassChange;revert(Project);;;public void revert(Project project) {
        synchronized (project) {
            for (Change change : _changes) {
                change.revert(project);
            }
            
            if (_updateRowContextDependencies) {
                project.update();
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassChange;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
        writer.write("updateRowContextDependencies="); writer.write(Boolean.toString(_updateRowContextDependencies)); writer.write('\n');
        writer.write("changeCount="); writer.write(Integer.toString(_changes.size())); writer.write('\n');
        for (Change c : _changes) {
            History.writeOneChange(writer, c, options);
        }
        writer.write("/ec/\n"); // end of change marker
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassChange;load(LineNumberReader,Pool);;;static public Change load(LineNumberReader reader, Pool pool) throws Exception {
        boolean updateRowContextDependencies = false;
        List<Change> changes = null;
        
        String line;
        while ((line = reader.readLine()) != null && !"/ec/".equals(line)) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            
            if ("updateRowContextDependencies".equals(field)) {
                updateRowContextDependencies = Boolean.parseBoolean(line.substring(equal + 1));
            } else if ("changeCount".equals(field)) {
                int changeCount = Integer.parseInt(line.substring(equal + 1));
                
                changes = new ArrayList<Change>(changeCount);
                for (int i = 0; i < changeCount; i++) {
                    changes.add(History.readOneChange(reader, pool));
                }
            }
        }
        
        MassChange change = new MassChange(changes, updateRowContextDependencies);
        
        return change;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassRowChange;MassRowChange(List<Row>);;;public MassRowChange(List<Row> newRows) {
        _newRows = newRows;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassRowChange;apply(Project);;;public void apply(Project project) {
        synchronized (project) {
            _oldRows = new ArrayList<Row>(project.rows);
            project.rows.clear();
            project.rows.addAll(_newRows);
            
            project.update();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassRowChange;revert(Project);;;public void revert(Project project) {
        synchronized (project) {
            project.rows.clear();
            project.rows.addAll(_oldRows);
            
            project.update();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassRowChange;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
        writer.write("newRowCount="); writer.write(Integer.toString(_newRows.size())); writer.write('\n');
        for (Row row : _newRows) {
            row.save(writer, options);
            writer.write('\n');
        }
        writer.write("oldRowCount="); writer.write(Integer.toString(_oldRows.size())); writer.write('\n');
        for (Row row : _oldRows) {
            row.save(writer, options);
            writer.write('\n');
        }
        writer.write("/ec/\n"); // end of change marker
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\MassRowChange;load(LineNumberReader,Pool);;;static public Change load(LineNumberReader reader, Pool pool) throws Exception {
        List<Row> oldRows = null;
        List<Row> newRows = null;
        
        String line;
        while ((line = reader.readLine()) != null && !"/ec/".equals(line)) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            
            if ("oldRowCount".equals(field)) {
                int count = Integer.parseInt(line.substring(equal + 1));
                
                oldRows = new ArrayList<Row>(count);
                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    if (line != null) {
                        oldRows.add(Row.load(line, pool));
                    }
                }
            } else if ("newRowCount".equals(field)) {
                int count = Integer.parseInt(line.substring(equal + 1));
                
                newRows = new ArrayList<Row>(count);
                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    if (line != null) {
                        newRows.add(Row.load(line, pool));
                    }
                }
            }
        }
        
        MassRowChange change = new MassRowChange(newRows);
        change._oldRows = oldRows;
        
        return change;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ReconChange;ReconChange(List<CellChange>,String,ReconConfig,ReconStats);;;public ReconChange(
        List<CellChange>    cellChanges,
        String              commonColumnName,
        ReconConfig         newReconConfig,
        ReconStats          newReconStats // can be null
    ) {
        super(cellChanges, commonColumnName, false);
        _newReconConfig = newReconConfig;
        _newReconStats = newReconStats;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ReconChange;ReconChange(CellChange[],String,ReconConfig,ReconStats);;;public ReconChange(
        CellChange[]    cellChanges,
        String          commonColumnName,
        ReconConfig     newReconConfig,
        ReconStats      newReconStats // can be null
    ) {
        super(cellChanges, commonColumnName, false);
        _newReconConfig = newReconConfig;
        _newReconStats = newReconStats;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ReconChange;ReconChange(CellChange,String,ReconConfig,ReconStats);;;public ReconChange(
        CellChange         cellChange,
        String             commonColumnName,
        ReconConfig     newReconConfig,
        ReconStats        newReconStats // can be null
    ) {
        super(cellChange, commonColumnName, false);
        _newReconConfig = newReconConfig;
        _newReconStats = newReconStats;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ReconChange;apply(Project);;;@Override
    public void apply(Project project) {
        synchronized (project) {
            super.apply(project);
            
            Column column = project.columnModel.getColumnByName(_commonColumnName);
            
            if (_newReconStats == null) {
                _newReconStats = ReconStats.create(project, column.getCellIndex());
            }
            
            _oldReconConfig = column.getReconConfig();
            _oldReconStats = column.getReconStats();
            
            column.setReconConfig(_newReconConfig);
            column.setReconStats(_newReconStats);
            
            column.clearPrecomputes();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ReconChange;revert(Project);;;@Override
    public void revert(Project project) {
        synchronized (project) {
            super.revert(project);
            
            Column column = project.columnModel.getColumnByName(_commonColumnName);
            column.setReconConfig(_oldReconConfig);
            column.setReconStats(_oldReconStats);
            
            column.clearPrecomputes();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ReconChange;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
        writer.write("newReconConfig="); 
        if (_newReconConfig != null) {
            _newReconConfig.save(writer); 
        }
        writer.write('\n');
        
        writer.write("newReconStats=");
        if (_newReconStats != null) {
            _newReconStats.save(writer);
        }
        writer.write('\n');
        
        writer.write("oldReconConfig=");
        if (_oldReconConfig != null) {
            _oldReconConfig.save(writer); 
        }
        writer.write('\n');
        
        writer.write("oldReconStats=");
        if (_oldReconStats != null) {
            _oldReconStats.save(writer); 
        }
        writer.write('\n');
        
        super.save(writer, options);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\ReconChange;load(LineNumberReader,Pool);;;static public Change load(LineNumberReader reader, Pool pool) throws Exception {
        ReconConfig newReconConfig = null;
        ReconStats newReconStats = null;
        ReconConfig oldReconConfig = null;
        ReconStats oldReconStats = null;
        
        String commonColumnName = null;
        CellChange[] cellChanges = null;
        
        String line;
        while ((line = reader.readLine()) != null && !"/ec/".equals(line)) {
            int equal = line.indexOf('=');
            
            CharSequence field = line.subSequence(0, equal);
            String value = line.substring(equal + 1);
            
            if ("newReconConfig".equals(field)) {
                if (value.length() > 0) {
                    newReconConfig = ReconConfig.reconstruct(ParsingUtilities.evaluateJsonStringToObject(value));
                }
            } else if ("newReconStats".equals(field)) {
                if (value.length() > 0) {
                    newReconStats = ReconStats.load(ParsingUtilities.evaluateJsonStringToObject(value));
                }
            } else if ("oldReconConfig".equals(field)) {
                if (value.length() > 0) {
                    oldReconConfig = ReconConfig.reconstruct(ParsingUtilities.evaluateJsonStringToObject(value));
                }
            } else if ("oldReconStats".equals(field)) {
                if (value.length() > 0) {
                    oldReconStats = ReconStats.load(ParsingUtilities.evaluateJsonStringToObject(value));
                }
            } else if ("commonColumnName".equals(field)) {
                commonColumnName = value;
            } else if ("cellChangeCount".equals(field)) {
                int cellChangeCount = Integer.parseInt(value);
                
                cellChanges = new CellChange[cellChangeCount];
                for (int i = 0; i < cellChangeCount; i++) {
                    cellChanges[i] = CellChange.load(reader, pool);
                }
            }
        }
        
        ReconChange change = new ReconChange(
                cellChanges, commonColumnName, newReconConfig, newReconStats);
        
        change._oldReconConfig = oldReconConfig;
        change._oldReconStats = oldReconStats;
        
        return change;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowFlagChange;RowFlagChange(int,boolean);;;public RowFlagChange(int rowIndex, boolean newFlagged) {
        this.rowIndex = rowIndex;
        this.newFlagged = newFlagged;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowFlagChange;apply(Project);;;public void apply(Project project) {
        Row row = project.rows.get(rowIndex);
        if (oldFlagged == null) {
            oldFlagged = row.flagged;
        }
        row.flagged = newFlagged;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowFlagChange;revert(Project);;;public void revert(Project project) {
        Row row = project.rows.get(rowIndex);
        
        row.flagged = oldFlagged;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowFlagChange;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
        writer.write("row="); writer.write(Integer.toString(rowIndex)); writer.write('\n');
        writer.write("newFlagged="); writer.write(Boolean.toString(newFlagged)); writer.write('\n');
        writer.write("oldFlagged="); writer.write(Boolean.toString(oldFlagged)); writer.write('\n');
        writer.write("/ec/\n"); // end of change marker
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowFlagChange;load(LineNumberReader,Pool);;;static public RowFlagChange load(LineNumberReader reader, Pool pool) throws Exception {
        int row = -1;
        boolean oldFlagged = false;
        boolean newFlagged = false;
        
        String line;
        while ((line = reader.readLine()) != null && !"/ec/".equals(line)) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            String value = line.substring(equal + 1);
            
            if ("row".equals(field)) {
                row = Integer.parseInt(value);
            } else if ("oldFlagged".equals(field)) {
                oldFlagged = Boolean.parseBoolean(value);
            } else if ("newFlagged".equals(field)) {
                oldFlagged = Boolean.parseBoolean(value);
            }
        }
        
        RowFlagChange change = new RowFlagChange(row, newFlagged);
        change.oldFlagged = oldFlagged;
        
        return change;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowRemovalChange;RowRemovalChange(List<Integer>);;;public RowRemovalChange(List<Integer> rowIndices) {
        _rowIndices = rowIndices;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowRemovalChange;apply(Project);;;public void apply(Project project) {
        synchronized (project) {
            int count = _rowIndices.size();
            
            _rows = new ArrayList<Row>(count);
            
            int offset = 0;
            for (int i = 0; i < count; i++) {
                int index = _rowIndices.get(i);
                
                Row row = project.rows.remove(index + offset);
                _rows.add(row);
                
                offset--;
            }
            
            project.update();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowRemovalChange;revert(Project);;;public void revert(Project project) {
        synchronized (project) {
            int count = _rowIndices.size();
            
            for (int i = 0; i < count; i++) {
                int index = _rowIndices.get(i);
                Row row = _rows.get(i);
                
                project.rows.add(index, row);
            }
            
            project.update();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowRemovalChange;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
        writer.write("rowIndexCount="); writer.write(Integer.toString(_rowIndices.size())); writer.write('\n');
        for (Integer index : _rowIndices) {
            writer.write(index.toString());
            writer.write('\n');
        }
        writer.write("rowCount="); writer.write(Integer.toString(_rows.size())); writer.write('\n');
        for (Row row : _rows) {
            row.save(writer, options);
            writer.write('\n');
        }
        writer.write("/ec/\n"); // end of change marker
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowRemovalChange;load(LineNumberReader,Pool);;;static public Change load(LineNumberReader reader, Pool pool) throws Exception {
        List<Integer> rowIndices = null;
        List<Row> rows = null;
        
        String line;
        while ((line = reader.readLine()) != null && !"/ec/".equals(line)) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            
            if ("rowIndexCount".equals(field)) {
                int count = Integer.parseInt(line.substring(equal + 1));
                
                rowIndices = new ArrayList<Integer>(count);
                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    if (line != null) {
                        rowIndices.add(Integer.parseInt(line));
                    }
                }
            } else if ("rowCount".equals(field)) {
                int count = Integer.parseInt(line.substring(equal + 1));
                
                rows = new ArrayList<Row>(count);
                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    if (line != null) {
                        rows.add(Row.load(line, pool));
                    }
                }
            }
        }
        
        RowRemovalChange change = new RowRemovalChange(rowIndices);
        change._rows = rows;
        
        return change;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowReorderChange;RowReorderChange(List<Integer>);;;public RowReorderChange(List<Integer> rowIndices) {
        _rowIndices = rowIndices;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowReorderChange;apply(Project);;;public void apply(Project project) {
        synchronized (project) {
        	List<Row> oldRows = project.rows;
        	List<Row> newRows = new ArrayList<Row>(oldRows.size());
        	
        	for (Integer oldIndex : _rowIndices) {
        		newRows.add(oldRows.get(oldIndex));
        	}
            
        	project.rows.clear();
        	project.rows.addAll(newRows);
            project.update();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowReorderChange;revert(Project);;;public void revert(Project project) {
        synchronized (project) {
        	int count = project.rows.size();
        	
        	List<Row> newRows = project.rows;
        	List<Row> oldRows = new ArrayList<Row>(count);
        	
        	for (int r = 0; r < count; r++) {
        		oldRows.add(null);
        	}
        	
        	for (int newIndex = 0; newIndex < count; newIndex++) {
        		int oldIndex = _rowIndices.get(newIndex);
        		Row row = newRows.get(newIndex);
        		oldRows.set(oldIndex, row);
        	}
            
        	project.rows.clear();
        	project.rows.addAll(oldRows);
            project.update();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowReorderChange;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
        writer.write("rowIndexCount="); writer.write(Integer.toString(_rowIndices.size())); writer.write('\n');
        for (Integer index : _rowIndices) {
            writer.write(index.toString());
            writer.write('\n');
        }
        writer.write("/ec/\n"); // end of change marker
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowReorderChange;load(LineNumberReader,Pool);;;static public Change load(LineNumberReader reader, Pool pool) throws Exception {
        List<Integer> rowIndices = null;
        
        String line;
        while ((line = reader.readLine()) != null && !"/ec/".equals(line)) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            
            if ("rowIndexCount".equals(field)) {
                int count = Integer.parseInt(line.substring(equal + 1));
                
                rowIndices = new ArrayList<Integer>(count);
                for (int i = 0; i < count; i++) {
                    line = reader.readLine();
                    if (line != null) {
                        rowIndices.add(Integer.parseInt(line));
                    }
                }
            }
        }
        
        RowReorderChange change = new RowReorderChange(rowIndices);
        
        return change;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowStarChange;RowStarChange(int,boolean);;;public RowStarChange(int rowIndex, boolean newStarred) {
        this.rowIndex = rowIndex;
        this.newStarred = newStarred;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowStarChange;apply(Project);;;public void apply(Project project) {
        Row row = project.rows.get(rowIndex);
        if (oldStarred == null) {
            oldStarred = row.starred;
        }
        row.starred = newStarred;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowStarChange;revert(Project);;;public void revert(Project project) {
        Row row = project.rows.get(rowIndex);
        
        row.starred = oldStarred;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowStarChange;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
        writer.write("row="); writer.write(Integer.toString(rowIndex)); writer.write('\n');
        writer.write("newStarred="); writer.write(Boolean.toString(newStarred)); writer.write('\n');
        writer.write("oldStarred="); writer.write(Boolean.toString(oldStarred)); writer.write('\n');
        writer.write("/ec/\n"); // end of change marker
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\changes\RowStarChange;load(LineNumberReader,Pool);;;static public RowStarChange load(LineNumberReader reader, Pool pool) throws Exception {
        int row = -1;
        boolean oldStarred = false;
        boolean newStarred = false;
        
        String line;
        while ((line = reader.readLine()) != null && !"/ec/".equals(line)) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            String value = line.substring(equal + 1);
            
            if ("row".equals(field)) {
                row = Integer.parseInt(value);
            } else if ("oldStarred".equals(field)) {
                oldStarred = Boolean.parseBoolean(value);
            } else if ("newStarred".equals(field)) {
                oldStarred = Boolean.parseBoolean(value);
            }
        }
        
        RowStarChange change = new RowStarChange(row, newStarred);
        change.oldStarred = oldStarred;
        
        return change;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\DataExtensionReconConfig;reconstruct(JSONObject);;;static public ReconConfig reconstruct(JSONObject obj) throws Exception {
        JSONObject type = obj.getJSONObject("type");
        
        return new DataExtensionReconConfig(
            new FreebaseType(
                type.getString("id"),
                type.getString("name")
            )
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\DataExtensionReconConfig;DataExtensionReconConfig(FreebaseType);;;public DataExtensionReconConfig(FreebaseType type) {
        this.type = type;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\DataExtensionReconConfig;createJob(Project,int,Row,String,Cell);;;@Override
    public ReconJob createJob(Project project, int rowIndex, Row row,
            String columnName, Cell cell) {
        throw new RuntimeException(WARN);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\DataExtensionReconConfig;getBatchSize();;;@Override
    public int getBatchSize() {
        throw new RuntimeException(WARN);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\DataExtensionReconConfig;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options) throws JSONException {
        writer.object();
        writer.key("mode"); writer.value("extend");
        writer.key("type"); type.write(writer, options); 
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\DataExtensionReconConfig;batchRecon(List<ReconJob>,long);;;@Override
    public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID) {
        throw new RuntimeException(WARN);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\DataExtensionReconConfig;getBriefDescription(Project,String);;;@Override
    public String getBriefDescription(Project project, String columnName) {
        throw new RuntimeException(WARN);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\GuidBasedReconConfig;reconstruct(JSONObject);;;static public ReconConfig reconstruct(JSONObject obj) throws Exception {
        return new GuidBasedReconConfig();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\GuidBasedReconConfig;GuidBasedReconConfig();;;public GuidBasedReconConfig() {
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\GuidBasedReconConfig;getKey();;;public int getKey() {
            return guid.hashCode();
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\GuidBasedReconConfig;createJob(Project,int,Row,String,Cell);;;@Override
    public ReconJob createJob(Project project, int rowIndex, Row row,
            String columnName, Cell cell) {
        
        GuidBasedReconJob job = new GuidBasedReconJob();
        String s = cell.value.toString();
        
        if (s.startsWith("/guid/")) {
            s = "#" + s.substring(6);
        } else if (!s.startsWith("#")) {
            s = "#" + s;
        }
        
        job.guid = s;
        
        return job;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\GuidBasedReconConfig;getBatchSize();;;@Override
    public int getBatchSize() {
        return 10;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\GuidBasedReconConfig;getBriefDescription(Project,String);;;@Override
    public String getBriefDescription(Project project, String columnName) {
        return "Reconcile cells in column " + columnName + " as Freebase IDs";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\GuidBasedReconConfig;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("mode"); writer.value("strict");
        writer.key("match"); writer.value("id"); 
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\GuidBasedReconConfig;batchRecon(List<ReconJob>,long);;;@Override
    public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID) {
        List<Recon> recons = new ArrayList<Recon>(jobs.size());
        Map<String, Recon> guidToRecon = new HashMap<String, Recon>();
        
        try {
            String query = null;
            {
                StringWriter stringWriter = new StringWriter();
                JSONWriter jsonWriter = new JSONWriter(stringWriter);
                
                jsonWriter.object();
                jsonWriter.key("query");
                    jsonWriter.array();
                    jsonWriter.object();
                    
                        jsonWriter.key("id"); jsonWriter.value(null);
                        jsonWriter.key("name"); jsonWriter.value(null);
                        jsonWriter.key("guid"); jsonWriter.value(null);
                        jsonWriter.key("type"); jsonWriter.array(); jsonWriter.endArray();
                        
                        jsonWriter.key("guid|=");
                            jsonWriter.array();
                            for (ReconJob job : jobs) {
                                jsonWriter.value(((GuidBasedReconJob) job).guid);
                            }
                            jsonWriter.endArray();
                        
                    jsonWriter.endObject();
                    jsonWriter.endArray();
                jsonWriter.endObject();
                
                query = stringWriter.toString();
            }
            
            StringBuffer sb = new StringBuffer(1024);
            sb.append(s_mqlreadService);
            sb.append("?query=");
            sb.append(ParsingUtilities.encode(query));
            
            URL url = new URL(sb.toString());
            URLConnection connection = url.openConnection();
            connection.setConnectTimeout(5000);
            connection.connect();
            
            InputStream is = connection.getInputStream();
            try {
                String s = ParsingUtilities.inputStreamToString(is);
                JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
                JSONArray results = o.getJSONArray("result");
                int count = results.length();
                
                for (int i = 0; i < count; i++) {
                    JSONObject result = results.getJSONObject(i);
                    
                    String guid = result.getString("guid");
                    
                    JSONArray types = result.getJSONArray("type");
                    String[] typeIDs = new String[types.length()];
                    for (int j = 0; j < typeIDs.length; j++) {
                        typeIDs[j] = types.getString(j);
                    }
                    
                    ReconCandidate candidate = new ReconCandidate(
                        result.getString("id"),
                        guid,
                        result.getString("name"),
                        typeIDs,
                        100
                    );
                    
                    Recon recon = new Recon(historyEntryID);
                    recon.addCandidate(candidate);
                    recon.service = "mql";
                    recon.judgment = Judgment.Matched;
                    recon.judgmentAction = "auto";
                    recon.match = candidate;
                    recon.matchRank = 0;
                    
                    guidToRecon.put(guid, recon);
                }
            } finally {
                is.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        for (int i = 0; i < jobs.size(); i++) {
            String guid = ((GuidBasedReconJob) jobs.get(i)).guid;
            Recon recon = guidToRecon.get(guid);
            recons.add(recon);
        }
        
        return recons;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\HeuristicReconConfig;ColumnDetail(String,FreebaseProperty);;;public ColumnDetail(String columnName, FreebaseProperty property) {
            this.columnName = columnName;
            this.property = property;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\HeuristicReconConfig;reconstruct(JSONObject);;;static public ReconConfig reconstruct(JSONObject obj) throws Exception {
        List<ColumnDetail> columnDetails = null;
        if (obj.has("columnDetails")) {
            JSONArray columnDetailsA = obj.getJSONArray("columnDetails");
            int l = columnDetailsA.length();
            
            columnDetails = new ArrayList<ColumnDetail>(l);
            for (int i = 0; i < l; i++) {
                JSONObject o = columnDetailsA.getJSONObject(i);
                JSONObject p = o.getJSONObject("property");
                
                columnDetails.add(new ColumnDetail(
                    o.getString("column"),
                    new FreebaseProperty(
                        p.getString("id"),
                        p.getString("name")
                    )
                ));
            }
        } else {
            columnDetails = new ArrayList<ColumnDetail>();
        }
        
        JSONObject t = obj.getJSONObject("type");
        
        return new HeuristicReconConfig(
            obj.getString("service"),
            t.getString("id"),
            t.getString("name"),
            obj.getBoolean("autoMatch"),
            columnDetails
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\HeuristicReconConfig;getKey();;;public int getKey() {
            return code.hashCode();
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\HeuristicReconConfig;HeuristicReconConfig(String,String,String,boolean,List<ColumnDetail>);;;public HeuristicReconConfig(
        String service,
        String typeID, 
        String typeName,
        boolean autoMatch,
        List<ColumnDetail> columnDetails
    ) {
        this.service = service;
        this.typeID = typeID;
        this.typeName = typeName;
        this.autoMatch = autoMatch;
        this.columnDetails = columnDetails;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\HeuristicReconConfig;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("mode"); writer.value("heuristic"); 
        writer.key("service"); writer.value(service); 
        writer.key("type"); 
            writer.object();
            writer.key("id"); writer.value(typeID);
            writer.key("name"); writer.value(typeName);
            writer.endObject();
        writer.key("autoMatch"); writer.value(autoMatch);
        writer.key("columnDetails");
            writer.array();
            for (ColumnDetail c : columnDetails) {
                writer.object();
                writer.key("column"); writer.value(c.columnName);
                writer.key("property"); c.property.write(writer, options);
                writer.endObject();
            }
            writer.endArray();
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\HeuristicReconConfig;getBatchSize();;;@Override
    public int getBatchSize() {
        return 10;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\HeuristicReconConfig;getBriefDescription(Project,String);;;@Override
    public String getBriefDescription(Project project, String columnName) {
        return "Reconcile cells in column " + columnName + " to type " + typeID;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\HeuristicReconConfig;createJob(Project,int,Row,String,Cell);;;@Override
    public ReconJob createJob(Project project, int rowIndex, Row row,
            String columnName, Cell cell) {
        
        HeuristicReconJob job = new HeuristicReconJob();
        if ("relevance".equals(service)) {
            job.code = job.text = cell.value.toString();
        } else {
            try {
                StringWriter stringWriter = new StringWriter();
                JSONWriter jsonWriter = new JSONWriter(stringWriter);
                
                jsonWriter.object();
                    jsonWriter.key("/type/object/name"); jsonWriter.value(cell.value.toString());
                    jsonWriter.key("/type/object/type"); jsonWriter.value(typeID);
                    
                    for (ColumnDetail c : columnDetails) {
                        int detailCellIndex = project.columnModel.getColumnByName(c.columnName).getCellIndex();
                        
                        Cell cell2 = row.getCell(detailCellIndex);
                        if (cell2 == null || !ExpressionUtils.isNonBlankData(cell2.value)) {
                            int cellIndex = project.columnModel.getColumnByName(columnName).getCellIndex();
                            
                            RowDependency rd = project.recordModel.getRowDependency(rowIndex);
                            if (rd != null && rd.cellDependencies != null) {
                                int contextRowIndex = rd.cellDependencies[cellIndex].rowIndex;
                                if (contextRowIndex >= 0 && contextRowIndex < project.rows.size()) {
                                    Row row2 = project.rows.get(contextRowIndex);
                                    
                                    cell2 = row2.getCell(detailCellIndex);
                                }
                            }
                        }
                        if (cell2 != null && ExpressionUtils.isNonBlankData(cell2.value)) {
                            jsonWriter.key(c.property.id);
                            
                            if (cell2.recon != null && cell2.recon.match != null) {
                                jsonWriter.object();
                                jsonWriter.key("id"); jsonWriter.value(cell2.recon.match.topicID);
                                jsonWriter.key("name"); jsonWriter.value(cell2.recon.match.topicName);
                                jsonWriter.endObject();
                            } else {
                                jsonWriter.value(cell2.value.toString());
                            }
                        }
                    }
                jsonWriter.endObject();
                
                job.text = cell.value.toString();
                job.code = stringWriter.toString();
            } catch (JSONException e) {
                //
            }
        }
        return job;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\HeuristicReconConfig;batchRecon(List<ReconJob>,long);;;@Override
    public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID) {
        if ("relevance".equals(service)) {
            return batchReconUsingRelevance(jobs, historyEntryID);
        } else {
            return batchReconUsingReconService(jobs, historyEntryID);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\HeuristicReconConfig;batchReconUsingRelevance(List<ReconJob>,long);;;protected List<Recon> batchReconUsingRelevance(List<ReconJob> jobs, long historyEntryID) {
        List<Recon> recons = new ArrayList<Recon>(jobs.size());
        
        try {
            StringWriter stringWriter = new StringWriter();
            JSONWriter jsonWriter = new JSONWriter(stringWriter);
            
            jsonWriter.object();
            for (int i = 0; i < jobs.size(); i++) {
                HeuristicReconJob job = (HeuristicReconJob) jobs.get(i);
                
                jsonWriter.key("q" + i + ":search");
                
                jsonWriter.object();
                    jsonWriter.key("query"); jsonWriter.value(job.text);
                    jsonWriter.key("limit"); jsonWriter.value(3);
                    jsonWriter.key("type"); jsonWriter.value(typeID);
                    jsonWriter.key("type_strict"); jsonWriter.value("should");
                    jsonWriter.key("type_exclude"); jsonWriter.value("/common/image");
                    jsonWriter.key("domain_exclude"); jsonWriter.value("/freebase");
                    jsonWriter.key("stemmed"); jsonWriter.value(1);
                jsonWriter.endObject();
            }
            jsonWriter.endObject();
            
            StringBuffer sb = new StringBuffer(1024);
            sb.append("http://api.freebase.com/api/service/search?indent=1&queries=");
            sb.append(ParsingUtilities.encode(stringWriter.toString()));
            
            URL url = new URL(sb.toString());
            URLConnection connection = url.openConnection();
            connection.setConnectTimeout(5000);
            connection.connect();
            
            InputStream is = connection.getInputStream();
            try {
                String s = ParsingUtilities.inputStreamToString(is);
                JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
                
                for (int i = 0; i < jobs.size(); i++) {
                    HeuristicReconJob job = (HeuristicReconJob) jobs.get(i);
                    
                    String text = job.text;
                    String key = "q" + i + ":search";
                    if (!o.has(key)) {
                        continue;
                    }
                    
                    Recon recon = null;
                    
                    JSONObject o2 = o.getJSONObject(key);
                    if (o2.has("result")) {
                        JSONArray results = o2.getJSONArray("result");
                        
                        recon = createReconFromRelevanceResults(text, results, historyEntryID);
                    } else {
                        recon = new Recon(historyEntryID);
                    }
                    
                    recon.service = "recon";
                    recons.add(recon);
                }
            } finally {
                is.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return recons;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\HeuristicReconConfig;createReconFromRelevanceResults(String,JSONArray,long);;;protected Recon createReconFromRelevanceResults(String text, JSONArray results, long historyEntryID) {
        Recon recon = new Recon(historyEntryID);
        try {
            int length = results.length();
            int count = 0;
            for (int i = 0; i < length && count < 3; i++) {
                JSONObject result = results.getJSONObject(i);
                if (!result.has("name")) {
                    continue;
                }
                
                JSONArray types = result.getJSONArray("type");
                String[] typeIDs = new String[types.length()];
                for (int j = 0; j < typeIDs.length; j++) {
                    typeIDs[j] = types.getJSONObject(j).getString("id");
                }
                
                double score = result.getDouble("relevance:score");
                ReconCandidate candidate = new ReconCandidate(
                    result.getString("id"),
                    result.getString("guid"),
                    result.getString("name"),
                    typeIDs,
                    score
                );
                
                recon.addCandidate(candidate);
                count++;
            }
            
            if (count > 0) {
                ReconCandidate candidate = recon.candidates.get(0);
                
                recon.setFeature(Recon.Feature_nameMatch, text.equalsIgnoreCase(candidate.topicName));
                recon.setFeature(Recon.Feature_nameLevenshtein, StringUtils.getLevenshteinDistance(text, candidate.topicName));
                recon.setFeature(Recon.Feature_nameWordDistance, wordDistance(text, candidate.topicName));
                
                recon.setFeature(Recon.Feature_typeMatch, false);
                for (String typeID : candidate.typeIDs) {
                    if (this.typeID.equals(typeID)) {
                        recon.setFeature(Recon.Feature_typeMatch, true);
                        if (autoMatch && candidate.score >= 100 && (count == 1 || candidate.score / recon.candidates.get(1).score >= 1.5)) {
                            recon.match = candidate;
                            recon.matchRank = 0;
                            recon.judgment = Judgment.Matched;
                            recon.judgmentAction = "auto";
                        }
                        break;
                    }
                }
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return recon;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\HeuristicReconConfig;batchReconUsingReconService(List<ReconJob>,long);;;protected List<Recon> batchReconUsingReconService(List<ReconJob> jobs, long historyEntryID) {
        List<Recon> recons = new ArrayList<Recon>(jobs.size());
        
        for (int i = 0; i < jobs.size(); i++) {
            HeuristicReconJob job = (HeuristicReconJob) jobs.get(i);
            Recon recon = null;
            try {
                StringBuffer sb = new StringBuffer();
                sb.append(s_reconService + "?limit=5&q=");
                sb.append(ParsingUtilities.encode(job.code));
                
                URL url = new URL(sb.toString());
                URLConnection connection = url.openConnection();
                connection.setConnectTimeout(5000);
                connection.connect();
                
                InputStream is = connection.getInputStream();
                try {
                    String s = ParsingUtilities.inputStreamToString(is);
                    JSONArray a = ParsingUtilities.evaluateJsonStringToArray(s);
                
                    recon = createReconFromReconResults(job.text, a, historyEntryID);
                } finally {
                    is.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            
            if (recon == null) {
                recon = new Recon(historyEntryID);
            }
            recon.service = "recon";
            recons.add(recon);
        }
        
        return recons;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\HeuristicReconConfig;createReconFromReconResults(String,JSONArray,long);;;protected Recon createReconFromReconResults(String text, JSONArray results, long historyEntryID) {
        Recon recon = new Recon(historyEntryID);
        try {
            int length = results.length();
            int count = 0;
            for (int i = 0; i < length && count < 3; i++) {
                JSONObject result = results.getJSONObject(i);
                if (!result.has("name")) {
                    continue;
                }
                
                String id = result.getString("id");
                JSONArray names = result.getJSONArray("name");
                double score = result.getDouble("score");
                
                JSONArray types = result.getJSONArray("type");
                String[] typeIDs = new String[types.length()];
                for (int j = 0; j < typeIDs.length; j++) {
                    typeIDs[j] = types.getString(j);
                }
                
                ReconCandidate candidate = new ReconCandidate(
                    id,
                    "#" + id.substring(6),
                    names.getString(0),
                    typeIDs,
                    score
                );
                
                // best match
                if (i == 0) {
                    recon.setFeature(Recon.Feature_nameMatch, text.equalsIgnoreCase(candidate.topicName));
                    recon.setFeature(Recon.Feature_nameLevenshtein, StringUtils.getLevenshteinDistance(text, candidate.topicName));
                    recon.setFeature(Recon.Feature_nameWordDistance, wordDistance(text, candidate.topicName));
                    
                    recon.setFeature(Recon.Feature_typeMatch, false);
                    for (String typeID : candidate.typeIDs) {
                        if (this.typeID.equals(typeID)) {
                            recon.setFeature(Recon.Feature_typeMatch, true);
                            if (autoMatch && result.has("match") && result.getBoolean("match")) {
                                recon.match = candidate;
                                recon.matchRank = 0;
                                recon.judgment = Judgment.Matched;
                                recon.judgmentAction = "auto";
                            }
                            break;
                        }
                    }
                }
                
                recon.addCandidate(candidate);
                count++;
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return recon;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\HeuristicReconConfig;wordDistance(String,String);;;static protected double wordDistance(String s1, String s2) {
        Set<String> words1 = breakWords(s1);
        Set<String> words2 = breakWords(s2);
        return words1.size() >= words2.size() ? wordDistance(words1, words2) : wordDistance(words2, words1);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\HeuristicReconConfig;wordDistance(Set<String>,Set<String>);;;static protected double wordDistance(Set<String> longWords, Set<String> shortWords) {
        double common = 0;
        for (String word : shortWords) {
            if (longWords.contains(word)) {
                common++;
            }
        }
        return common / longWords.size();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\HeuristicReconConfig;breakWords(String);;;static protected Set<String> breakWords(String s) {
        String[] words = s.toLowerCase().split("\\s+");
        
        Set<String> set = new HashSet<String>(words.length);
        for (String word : words) {
            if (!s_stopWords.contains(word)) {
                set.add(word);
            }
        }
        return set;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\IdBasedReconConfig;reconstruct(JSONObject);;;static public ReconConfig reconstruct(JSONObject obj) throws Exception {
        return new IdBasedReconConfig();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\IdBasedReconConfig;IdBasedReconConfig();;;public IdBasedReconConfig() {
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\IdBasedReconConfig;getKey();;;public int getKey() {
            return id.hashCode();
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\IdBasedReconConfig;createJob(Project,int,Row,String,Cell);;;@Override
    public ReconJob createJob(Project project, int rowIndex, Row row,
            String columnName, Cell cell) {
        
        IdBasedReconJob job = new IdBasedReconJob();
        String s = cell.value.toString();
        
        if (!s.startsWith("/")) {
            if (s.startsWith("92")) {
                s = "/guid/" + s;
            } else if (!s.contains("/")){
                s = "/en/" + s;
            } else {
                s = "/" + s;
            }
        }
        
        job.id = s;
        
        return job;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\IdBasedReconConfig;getBatchSize();;;@Override
    public int getBatchSize() {
        return 10;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\IdBasedReconConfig;getBriefDescription(Project,String);;;@Override
    public String getBriefDescription(Project project, String columnName) {
        return "Reconcile cells in column " + columnName + " as Freebase IDs";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\IdBasedReconConfig;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("mode"); writer.value("strict");
        writer.key("match"); writer.value("id"); 
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\IdBasedReconConfig;batchRecon(List<ReconJob>,long);;;@Override
    public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID) {
        List<Recon> recons = new ArrayList<Recon>(jobs.size());
        Map<String, Recon> idToRecon = new HashMap<String, Recon>();
        
        try {
            String query = null;
            {
                StringWriter stringWriter = new StringWriter();
                JSONWriter jsonWriter = new JSONWriter(stringWriter);
                
                jsonWriter.object();
                jsonWriter.key("query");
                    jsonWriter.array();
                    jsonWriter.object();
                    
                        jsonWriter.key("id"); jsonWriter.value(null);
                        jsonWriter.key("name"); jsonWriter.value(null);
                        jsonWriter.key("guid"); jsonWriter.value(null);
                        jsonWriter.key("type"); jsonWriter.array(); jsonWriter.endArray();
                        
                        jsonWriter.key("id|=");
                            jsonWriter.array();
                            for (ReconJob job : jobs) {
                                jsonWriter.value(((IdBasedReconJob) job).id);
                            }
                            jsonWriter.endArray();
                        
                    jsonWriter.endObject();
                    jsonWriter.endArray();
                jsonWriter.endObject();
                
                query = stringWriter.toString();
            }
            
            StringBuffer sb = new StringBuffer(1024);
            sb.append(s_mqlreadService);
            sb.append("?query=");
            sb.append(ParsingUtilities.encode(query));
            
            URL url = new URL(sb.toString());
            URLConnection connection = url.openConnection();
            connection.setConnectTimeout(5000);
            connection.connect();
            
            InputStream is = connection.getInputStream();
            try {
                String s = ParsingUtilities.inputStreamToString(is);
                JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
                JSONArray results = o.getJSONArray("result");
                int count = results.length();
                
                for (int i = 0; i < count; i++) {
                    JSONObject result = results.getJSONObject(i);
                    
                    String id = result.getString("id");
                    
                    JSONArray types = result.getJSONArray("type");
                    String[] typeIDs = new String[types.length()];
                    for (int j = 0; j < typeIDs.length; j++) {
                        typeIDs[j] = types.getString(j);
                    }
                    
                    ReconCandidate candidate = new ReconCandidate(
                        id,
                        result.getString("guid"),
                        result.getString("name"),
                        typeIDs,
                        100
                    );
                    
                    Recon recon = new Recon(historyEntryID);
                    recon.addCandidate(candidate);
                    recon.service = "mql";
                    recon.judgment = Judgment.Matched;
                    recon.judgmentAction = "auto";
                    recon.match = candidate;
                    recon.matchRank = 0;
                    
                    idToRecon.put(id, recon);
                }
            } finally {
                is.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        for (int i = 0; i < jobs.size(); i++) {
            String id = ((IdBasedReconJob) jobs.get(i)).id;
            Recon recon = idToRecon.get(id);
            recons.add(recon);
        }
        
        return recons;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\KeyBasedReconConfig;reconstruct(JSONObject);;;static public ReconConfig reconstruct(JSONObject obj) throws Exception {
        JSONObject ns = obj.getJSONObject("namespace");
        
        return new KeyBasedReconConfig(
            new FreebaseTopic(
                ns.getString("id"),
                ns.getString("name")
            )
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\KeyBasedReconConfig;KeyBasedReconConfig(FreebaseTopic);;;public KeyBasedReconConfig(FreebaseTopic namespace) {
        this.namespace = namespace;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\KeyBasedReconConfig;getKey();;;public int getKey() {
            return key.hashCode();
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\KeyBasedReconConfig;createJob(Project,int,Row,String,Cell);;;@Override
    public ReconJob createJob(Project project, int rowIndex, Row row,
            String columnName, Cell cell) {
        
        KeyBasedReconJob job = new KeyBasedReconJob();
        
        job.key = cell.value.toString().replace(' ', '_');
        
        return job;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\KeyBasedReconConfig;getBatchSize();;;@Override
    public int getBatchSize() {
        return 10;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\KeyBasedReconConfig;getBriefDescription(Project,String);;;@Override
    public String getBriefDescription(Project project, String columnName) {
        return "Reconcile cells in column " + columnName + " to topics with keys in namespace " + namespace.id;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\KeyBasedReconConfig;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("mode"); writer.value("strict");
        writer.key("match"); writer.value("key"); 
        writer.key("namespace"); namespace.write(writer, options); 
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\KeyBasedReconConfig;batchRecon(List<ReconJob>,long);;;@Override
    public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID) {
        List<Recon> recons = new ArrayList<Recon>(jobs.size());
        Map<String, Recon> keyToRecon = new HashMap<String, Recon>();
        
        try {
            String query = null;
            {
                StringWriter stringWriter = new StringWriter();
                JSONWriter jsonWriter = new JSONWriter(stringWriter);
                
                jsonWriter.object();
                jsonWriter.key("query");
                    jsonWriter.array();
                    jsonWriter.object();
                    
                        jsonWriter.key("id"); jsonWriter.value(null);
                        jsonWriter.key("name"); jsonWriter.value(null);
                        jsonWriter.key("guid"); jsonWriter.value(null);
                        jsonWriter.key("type"); jsonWriter.array(); jsonWriter.endArray();
                        
                        jsonWriter.key("key");
                            jsonWriter.array();
                            jsonWriter.object();
                            
                            jsonWriter.key("namespace");
                                jsonWriter.object();
                                jsonWriter.key("id"); jsonWriter.value(namespace.id);
                                jsonWriter.endObject();
                                
                            jsonWriter.key("value"); jsonWriter.value(null);
                            jsonWriter.key("value|=");
                                jsonWriter.array();
                                for (ReconJob job : jobs) {
                                    jsonWriter.value(((KeyBasedReconJob) job).key);
                                }
                                jsonWriter.endArray();
                                
                            jsonWriter.endObject();
                            jsonWriter.endArray();
                        
                    jsonWriter.endObject();
                    jsonWriter.endArray();
                jsonWriter.endObject();
                
                query = stringWriter.toString();
            }
            
            StringBuffer sb = new StringBuffer(1024);
            sb.append(s_mqlreadService);
            sb.append("?query=");
            sb.append(ParsingUtilities.encode(query));
            
            URL url = new URL(sb.toString());
            URLConnection connection = url.openConnection();
            connection.setConnectTimeout(5000);
            connection.connect();
            
            InputStream is = connection.getInputStream();
            try {
                String s = ParsingUtilities.inputStreamToString(is);
                JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
                JSONArray results = o.getJSONArray("result");
                int count = results.length();
                
                for (int i = 0; i < count; i++) {
                    JSONObject result = results.getJSONObject(i);
                    
                    String key = result.getJSONArray("key").getJSONObject(0).getString("value");
                    
                    JSONArray types = result.getJSONArray("type");
                    String[] typeIDs = new String[types.length()];
                    for (int j = 0; j < typeIDs.length; j++) {
                        typeIDs[j] = types.getString(j);
                    }
                    
                    ReconCandidate candidate = new ReconCandidate(
                        result.getString("id"),
                        result.getString("guid"),
                        result.getString("name"),
                        typeIDs,
                        100
                    );
                    
                    Recon recon = new Recon(historyEntryID);
                    recon.addCandidate(candidate);
                    recon.service = "mql";
                    recon.judgment = Judgment.Matched;
                    recon.judgmentAction = "auto";
                    recon.match = candidate;
                    recon.matchRank = 0;
                    
                    keyToRecon.put(key, recon);
                }
            } finally {
                is.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        for (int i = 0; i < jobs.size(); i++) {
            String key = ((KeyBasedReconJob) jobs.get(i)).key;
            Recon recon = keyToRecon.get(key);
            recons.add(recon);
        }
        
        return recons;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\ReconConfig;reconstruct(JSONObject);;;static public ReconConfig reconstruct(JSONObject obj) throws Exception {
        String mode = obj.getString("mode");
        if ("heuristic".equals(mode)) {
            return HeuristicReconConfig.reconstruct(obj);
        } else if ("strict".equals(mode)) {
            return StrictReconConfig.reconstruct(obj);
        } else if ("extend".equals(mode)) {
            return DataExtensionReconConfig.reconstruct(obj);
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\ReconConfig;getBatchSize();;;abstract public int getBatchSize();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\ReconConfig;getBriefDescription(Project,String);;;abstract public String getBriefDescription(Project project, String columnName);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\ReconConfig;createJob(Project,int,Row,String,Cell);;;abstract public ReconJob createJob(
        Project     project, 
        int         rowIndex, 
        Row         row,
        String      columnName,
        Cell        cell
    );
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\ReconConfig;batchRecon(List<ReconJob>,long);;;abstract public List<Recon> batchRecon(List<ReconJob> jobs, long historyEntryID);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\ReconConfig;save(Writer);;;public void save(Writer writer) {
        JSONWriter jsonWriter = new JSONWriter(writer);
        try {
            write(jsonWriter, new Properties());
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\ReconJob;getKey();;;abstract public int getKey();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\model\recon\StrictReconConfig;reconstruct(JSONObject);;;static public ReconConfig reconstruct(JSONObject obj) throws Exception {
        String match = obj.getString("match");
        if ("key".equals(match)) {
            return KeyBasedReconConfig.reconstruct(obj);
        } else if ("id".equals(match)) {
            return IdBasedReconConfig.reconstruct(obj);
        } else if ("guid".equals(match)) {
            return GuidBasedReconConfig.reconstruct(obj);
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\Credentials;Type(String);;;Type(String postfix) {
            this.postfix = postfix;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\Credentials;getCookieName(Provider);;;public String getCookieName(Provider provider) {
            if (provider == null) throw new RuntimeException("Provider can't be null");
            return provider.getHost() + "_" + postfix;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\Credentials;getCredentials(HttpServletRequest,Provider,Type);;;public static Credentials getCredentials(HttpServletRequest request, Provider provider, Type type) {
        Cookie cookie = CookiesUtilities.getCookie(request, type.getCookieName(provider));
        return (cookie == null) ? null : makeCredentials(cookie.getValue(), provider);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\Credentials;setCredentials(HttpServletRequest,HttpServletResponse,Credentials,Type,int);;;public static void setCredentials(HttpServletRequest request, HttpServletResponse response, Credentials credentials, Type type, int max_age) {
        String name = type.getCookieName(credentials.getProvider());
        String value = credentials.toString();
        CookiesUtilities.setCookie(request, response, name, value, max_age);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\Credentials;deleteCredentials(HttpServletRequest,HttpServletResponse,Provider,Type);;;public static void deleteCredentials(HttpServletRequest request, HttpServletResponse response, Provider provider, Type type) {
        CookiesUtilities.deleteCookie(request, response, type.getCookieName(provider));
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\Credentials;makeCredentials(String,Provider);;;public static Credentials makeCredentials(String str, Provider provider) {
        HttpParameters p = OAuth.decodeForm(str);
        return new Credentials(p.getFirst(TOKEN), p.getFirst(SECRET), provider);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\Credentials;Credentials(String,String,Provider);;;public Credentials(String token, String secret, Provider provider) {
        this.token = token;
        if (token == null) throw new RuntimeException("Could not find " + TOKEN + " in auth credentials");
        this.secret = secret;
        if (secret == null) throw new RuntimeException("Could not find " + SECRET + " in auth credentials");
        this.provider = provider;
        if (provider == null) throw new RuntimeException("Provider can't be null");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\Credentials;getToken();;;public String getToken() {
        return token;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\Credentials;getSecret();;;public String getSecret() {
        return secret;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\Credentials;getProvider();;;public Provider getProvider() {
        return provider;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\Credentials;toString();;;public String toString() {
        return TOKEN + "=" + OAuth.percentEncode(token) + "&" + SECRET + "=" + OAuth.percentEncode(secret);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\FreebaseProvider;FreebaseProvider(String);;;public FreebaseProvider(String host) {
        super(host);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\FreebaseProvider;getRequestTokenServiceURL();;;public String getRequestTokenServiceURL() {
        return "https://" + host + "/api/oauth/request_token";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\FreebaseProvider;getAccessTokenServiceURL();;;public String getAccessTokenServiceURL() {
        return "https://" + host + "/api/oauth/access_token";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\FreebaseProvider;getUserAuthorizationURL();;;public String getUserAuthorizationURL() {
        return "https://" + host + "/signin/app";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\FreebaseTimeCommonsHttpOAuthConsumer;FreebaseTimeCommonsHttpOAuthConsumer(String,String);;;public FreebaseTimeCommonsHttpOAuthConsumer(String consumerKey, String consumerSecret) {
        super(consumerKey, consumerSecret);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\FreebaseTimeCommonsHttpOAuthConsumer;generateTimestamp();;;protected String generateTimestamp() {
        
        long time = -1;
                
        try {
            HttpParams httpParams = new BasicHttpParams();
            HttpConnectionParams.setSoTimeout(httpParams, SOCKET_TIMEOUT);
            HttpConnectionParams.setConnectionTimeout(httpParams, CONNECTION_TIMEOUT);
            HttpClient httpClient = new DefaultHttpClient(httpParams);
            HttpGet httpget = new HttpGet(TIMER_URL);
            HttpResponse response = httpClient.execute(httpget);
            HttpEntity entity = response.getEntity();
            if (entity != null) {
                time = Long.parseLong(EntityUtils.toString(entity),10);
                logger.info("Got remote timestamp {}", time);
            }
        } catch (IOException e) {
            logger.warn("Error obtaining the synchronized remote timestamp, defaulting to the local one",e);
        }
        
        if (time == -1) {
            time = System.currentTimeMillis();
        }
        
        return Long.toString(time / 1000L);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\OAuthUtilities;getProvider(String);;;public static Provider getProvider(String name) {
        return (name == null) ? null : providers.get(name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\OAuthUtilities;getProvider(HttpServletRequest);;;public static Provider getProvider(HttpServletRequest request) {
        String path = request.getPathInfo().substring(1);
        int slash = path.lastIndexOf('/');
        String provider_str = path.substring(slash + 1);
        Provider provider = getProvider(provider_str);
        if (provider == null) throw new RuntimeException("Can't find OAuth provider '" + provider_str + "'");
        return provider;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\OAuthUtilities;getConsumer(Provider);;;public static OAuthConsumer getConsumer(Provider provider) {
        if (provider == null) throw new RuntimeException("Provider can't be null");
        String[] consumer_info = infos.get(provider.getHost());
        if (consumer_info == null) throw new RuntimeException("Can't find secrets for provider '" + provider.getHost() + "'");
        OAuthConsumer oauthConsumer = new FreebaseTimeCommonsHttpOAuthConsumer(consumer_info[0],consumer_info[1]);
        HttpParameters params = new HttpParameters();
        params.put("realm", provider.getHost());
        oauthConsumer.setAdditionalParameters(params);
        return oauthConsumer;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\OAuthUtilities;getConsumer(Credentials,Provider);;;public static OAuthConsumer getConsumer(Credentials credentials, Provider provider) {
        OAuthConsumer consumer = getConsumer(provider);
        if (credentials != null) {
            consumer.setTokenWithSecret(credentials.getToken(), credentials.getSecret());
        }
        return consumer;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\OAuthUtilities;getOAuthProvider(Provider);;;public static OAuthProvider getOAuthProvider(Provider p) {
        return new CommonsHttpOAuthProvider(p.getRequestTokenServiceURL(), p.getAccessTokenServiceURL(), p.getUserAuthorizationURL());        
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\Provider;Provider(String);;;public Provider(String host) {
        this.host = host;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\Provider;getHost();;;public String getHost() {
        return host;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\Provider;getRequestTokenServiceURL();;;abstract public String getRequestTokenServiceURL();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\Provider;getAccessTokenServiceURL();;;abstract public String getAccessTokenServiceURL();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\oauth\Provider;getUserAuthorizationURL();;;abstract public String getUserAuthorizationURL();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\EngineDependentMassCellOperation;EngineDependentMassCellOperation(JSONObject,String,boolean);;;protected EngineDependentMassCellOperation(
            JSONObject engineConfig, String columnName, boolean updateRowContextDependencies) {
        super(engineConfig);
        _columnName = columnName;
        _updateRowContextDependencies = updateRowContextDependencies;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\EngineDependentMassCellOperation;createHistoryEntry(Project,long);;;protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {
        Engine engine = createEngine(project);
        
        Column column = project.columnModel.getColumnByName(_columnName);
        if (column == null) {
            throw new Exception("No column named " + _columnName);
        }
        
        List<CellChange> cellChanges = new ArrayList<CellChange>(project.rows.size());
        
        FilteredRows filteredRows = engine.getAllFilteredRows();
        try {
            filteredRows.accept(project, createRowVisitor(project, cellChanges, historyEntryID));
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        String description = createDescription(column, cellChanges);
        
        return new HistoryEntry(
            historyEntryID, project, description, this, createChange(project, column, cellChanges));
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\EngineDependentMassCellOperation;createChange(Project,Column,List<CellChange>);;;protected Change createChange(Project project, Column column, List<CellChange> cellChanges) {
        return new MassCellChange(
            cellChanges, column.getName(), _updateRowContextDependencies);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\EngineDependentMassCellOperation;createRowVisitor(Project,List<CellChange>,long);;;abstract protected RowVisitor createRowVisitor(Project project, List<CellChange> cellChanges, long historyEntryID) throws Exception;
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\EngineDependentMassCellOperation;createDescription(Column,List<CellChange>);;;abstract protected String createDescription(Column column, List<CellChange> cellChanges);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\EngineDependentOperation;EngineDependentOperation(JSONObject);;;protected EngineDependentOperation(JSONObject engineConfig) {
        _engineConfig = engineConfig;
        _engineConfigString = engineConfig == null || engineConfig.length() == 0
            ? null : engineConfig.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\EngineDependentOperation;createEngine(Project);;;protected Engine createEngine(Project project) throws Exception {
        Engine engine = new Engine(project);
        engine.initializeFromJSON(getEngineConfig());
        return engine;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\EngineDependentOperation;getEngineConfig();;;protected JSONObject getEngineConfig() {
        if (_engineConfig == null && _engineConfigString != null) {
            try {
                _engineConfig = ParsingUtilities.evaluateJsonStringToObject(_engineConfigString);
            } catch (JSONException e) {
                // ignore
            }
        }
        return _engineConfig;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\OperationRegistry;register(String,Class<?extendsAbstractOperation>);;;static protected void register(String name, Class<? extends AbstractOperation> klass) {
        s_opNameToClass.put(name, klass);
        s_opClassToName.put(klass, name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\OperationRegistry;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) {
        try {
            String op = obj.getString("op");
            
            Class<? extends AbstractOperation> klass = OperationRegistry.s_opNameToClass.get(op);
            if (klass != null) {
                Method reconstruct = klass.getMethod("reconstruct", Project.class, JSONObject.class);
                if (reconstruct != null) {
                    return (AbstractOperation) reconstruct.invoke(null, project, obj);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\SaveProtographOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        return new SaveProtographOperation(
            Protograph.reconstruct(obj.getJSONObject("protograph"))
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\SaveProtographOperation;SaveProtographOperation(Protograph);;;public SaveProtographOperation(Protograph protograph) {
        _protograph = protograph;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\SaveProtographOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value("Save protograph");
        writer.key("protograph"); _protograph.write(writer, options);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\SaveProtographOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Save schema skeleton";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\SaveProtographOperation;createHistoryEntry(Project,long);;;@Override
    protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {
        String description = "Save schema-alignment protograph";
        
        Change change = new ProtographChange(_protograph);
        
        return new HistoryEntry(historyEntryID, project, description, SaveProtographOperation.this, change);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\SaveProtographOperation;ProtographChange(Protograph);;;public ProtographChange(Protograph protograph) {
            _newProtograph = protograph;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\SaveProtographOperation;apply(Project);;;public void apply(Project project) {
            synchronized (project) {
                _oldProtograph = project.protograph;
                project.protograph = _newProtograph;
            }
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\SaveProtographOperation;revert(Project);;;public void revert(Project project) {
            synchronized (project) {
                project.protograph = _oldProtograph;
            }
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\SaveProtographOperation;save(Writer,Properties);;;public void save(Writer writer, Properties options) throws IOException {
            writer.write("newProtograph="); writeProtograph(_newProtograph, writer); writer.write('\n');
            writer.write("oldProtograph="); writeProtograph(_oldProtograph, writer); writer.write('\n');
            writer.write("/ec/\n"); // end of change marker
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\SaveProtographOperation;load(LineNumberReader,Pool);;;static public Change load(LineNumberReader reader, Pool pool) throws Exception {
            Protograph oldProtograph = null;
            Protograph newProtograph = null;
            
            String line;
            while ((line = reader.readLine()) != null && !"/ec/".equals(line)) {
                int equal = line.indexOf('=');
                CharSequence field = line.subSequence(0, equal);
                String value = line.substring(equal + 1);
                
                if ("oldProtograph".equals(field) && value.length() > 0) {
                    oldProtograph = Protograph.reconstruct(ParsingUtilities.evaluateJsonStringToObject(value));
                } else if ("newProtograph".equals(field) && value.length() > 0) {
                    newProtograph = Protograph.reconstruct(ParsingUtilities.evaluateJsonStringToObject(value));
                }
            }
            
            ProtographChange change = new ProtographChange(newProtograph);
            change._oldProtograph = oldProtograph;
            
            return change;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\SaveProtographOperation;writeProtograph(Protograph,Writer);;;static protected void writeProtograph(Protograph p, Writer writer) throws IOException {
            if (p != null) {
                JSONWriter jsonWriter = new JSONWriter(writer);
                try {
                    p.write(jsonWriter, new Properties());
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MassEditOperation;Edit(List<String>,boolean,boolean,Serializable);;;public Edit(List<String> from, boolean fromBlank, boolean fromError, Serializable to) {
            this.from = from;
            this.fromBlank = fromBlank;
            this.fromError = fromError;
            this.to = to;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MassEditOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
            
            writer.object();
            writer.key("fromBlank"); writer.value(fromBlank);
            writer.key("fromError"); writer.value(fromError);
            writer.key("from");
                writer.array();
                for (String s : from) {
                    writer.value(s);
                }
                writer.endArray();
            writer.key("to"); writer.value(to);
            writer.endObject();
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MassEditOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        JSONObject engineConfig = obj.has("engineConfig") && !obj.isNull("engineConfig") ?
                obj.getJSONObject("engineConfig") : null;
        
        return new MassEditOperation(
            engineConfig,
            obj.getString("columnName"),
            obj.getString("expression"),
            reconstructEdits(obj.getJSONArray("edits"))
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MassEditOperation;reconstructEdits(JSONArray);;;static public List<Edit> reconstructEdits(JSONArray editsA) throws Exception {
        int editCount = editsA.length();
        
        List<Edit> edits = new ArrayList<Edit>(editCount);
        for (int i = 0; i < editCount; i++) {
            JSONObject editO = editsA.getJSONObject(i);
            
            List<String> from = null;
            if (editO.has("from") && !editO.isNull("from")) {
                JSONArray fromA = editO.getJSONArray("from");
                int fromCount = fromA.length();
                
                from = new ArrayList<String>(fromCount);
                for (int j = 0; j < fromCount; j++) {
                    from.add(fromA.getString(j));
                }
            } else {
                from = new ArrayList<String>();
            }
            
            boolean fromBlank = editO.has("fromBlank") && editO.getBoolean("fromBlank");
            boolean fromError = editO.has("fromError") && editO.getBoolean("fromError");
            
            Serializable to = (Serializable) editO.get("to");
            if (editO.has("type")) {
                String type = editO.getString("type");
                if ("date".equals(type)) {
                    to = ParsingUtilities.stringToDate((String) to);
                }
            }

            edits.add(new Edit(from, fromBlank, fromError, to));
        }
        
        return edits;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MassEditOperation;MassEditOperation(JSONObject,String,String,List<Edit>);;;public MassEditOperation(JSONObject engineConfig, String columnName, String expression, List<Edit> edits) {
        super(engineConfig, columnName, true);
        _expression = expression;
        _edits = edits;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MassEditOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value(getBriefDescription(null));
        writer.key("engineConfig"); writer.value(getEngineConfig());
        writer.key("columnName"); writer.value(_columnName);
        writer.key("expression"); writer.value(_expression);
        writer.key("edits");
            writer.array();
            for (Edit edit : _edits) {
                edit.write(writer, options);
            }
            writer.endArray();
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MassEditOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Mass edit cells in column " + _columnName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MassEditOperation;createDescription(Column,List<CellChange>);;;protected String createDescription(Column column,
            List<CellChange> cellChanges) {
        
        return "Mass edit " + cellChanges.size() + 
            " cells in column " + column.getName();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MultiValuedCellJoinOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        return new MultiValuedCellJoinOperation(
            obj.getString("columnName"),
            obj.getString("keyColumnName"),
            obj.getString("separator")
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MultiValuedCellJoinOperation;MultiValuedCellJoinOperation(String,String,String);;;public MultiValuedCellJoinOperation(
        String      columnName,
        String      keyColumnName,
        String    separator
    ) {
        _columnName = columnName;
        _keyColumnName = keyColumnName;
        _separator = separator;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MultiValuedCellJoinOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value(getBriefDescription(null));
        writer.key("columnName"); writer.value(_columnName);
        writer.key("keyColumnName"); writer.value(_keyColumnName);
        writer.key("separator"); writer.value(_separator);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MultiValuedCellJoinOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Join multi-valued cells in column " + _columnName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MultiValuedCellJoinOperation;createHistoryEntry(Project,long);;;protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        if (column == null) {
            throw new Exception("No column named " + _columnName);
        }
        int cellIndex = column.getCellIndex();
        
        Column keyColumn = project.columnModel.getColumnByName(_keyColumnName);
        if (keyColumn == null) {
            throw new Exception("No key column named " + _keyColumnName);
        }
        int keyCellIndex = keyColumn.getCellIndex();
        
        List<Row> newRows = new ArrayList<Row>();
        
        int oldRowCount = project.rows.size();
        for (int r = 0; r < oldRowCount; r++) {
            Row oldRow = project.rows.get(r);
            
            if (oldRow.isCellBlank(keyCellIndex)) {
                newRows.add(oldRow.dup());
                continue;
            }
            
            int r2 = r + 1;
            while (r2 < oldRowCount && project.rows.get(r2).isCellBlank(keyCellIndex)) {
                r2++;
            }
            
            if (r2 == r + 1) {
                newRows.add(oldRow.dup());
                continue;
            }
            
            StringBuffer sb = new StringBuffer();
            for (int r3 = r; r3 < r2; r3++) {
                Object value = project.rows.get(r3).getCellValue(cellIndex);
                if (ExpressionUtils.isNonBlankData(value)) {
                    if (sb.length() > 0) {
                        sb.append(_separator);
                    }
                    sb.append(value.toString());
                }
            }
            
            for (int r3 = r; r3 < r2; r3++) {
                Row newRow = project.rows.get(r3).dup();
                if (r3 == r) {
                    newRow.setCell(cellIndex, new Cell(sb.toString(), null));
                } else {
                    newRow.setCell(cellIndex, null);
                }
                
                if (!newRow.isEmpty()) {
                    newRows.add(newRow);
                }
            }
            
            r = r2 - 1; // r will be incremented by the for loop anyway
        }
        
        return new HistoryEntry(
            historyEntryID,
            project, 
            getBriefDescription(null), 
            this, 
            new MassRowChange(newRows)
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MultiValuedCellSplitOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        return new MultiValuedCellSplitOperation(
            obj.getString("columnName"),
            obj.getString("keyColumnName"),
            obj.getString("separator"),
            obj.getString("mode")
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MultiValuedCellSplitOperation;MultiValuedCellSplitOperation(String,String,String,String);;;public MultiValuedCellSplitOperation(
        String      columnName,
        String      keyColumnName,
        String    separator,
        String    mode
    ) {
        _columnName = columnName;
        _keyColumnName = keyColumnName;
        _separator = separator;
        _mode = mode;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MultiValuedCellSplitOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
           throws JSONException {
       
       writer.object();
       writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
       writer.key("description"); writer.value("Split multi-valued cells in column " + _columnName);
       writer.key("columnName"); writer.value(_columnName);
       writer.key("keyColumnName"); writer.value(_keyColumnName);
       writer.key("separator"); writer.value(_separator);
       writer.key("mode"); writer.value(_mode);
       writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MultiValuedCellSplitOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Split multi-valued cells in column " + _columnName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\MultiValuedCellSplitOperation;createHistoryEntry(Project,long);;;@Override
    protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        if (column == null) {
            throw new Exception("No column named " + _columnName);
        }
        int cellIndex = column.getCellIndex();
        
        Column keyColumn = project.columnModel.getColumnByName(_keyColumnName);
        if (keyColumn == null) {
            throw new Exception("No key column named " + _keyColumnName);
        }
        int keyCellIndex = keyColumn.getCellIndex();
        
        List<Row> newRows = new ArrayList<Row>();
        
        int oldRowCount = project.rows.size();
        for (int r = 0; r < oldRowCount; r++) {
            Row oldRow = project.rows.get(r);
            if (oldRow.isCellBlank(cellIndex)) {
                newRows.add(oldRow.dup());
                continue;
            }
            
            Object value = oldRow.getCellValue(cellIndex);
            String s = value instanceof String ? ((String) value) : value.toString();
            String[] values = null;
            if (_mode.equals("regex")) {
                values = s.split(_separator);
            } else {
                values = StringUtils.splitByWholeSeparator(s, _separator);
            }
            
            if (values.length < 2) {
                newRows.add(oldRow.dup());
                continue;
            }
            
            // First value goes into the same row
            {
                Row firstNewRow = oldRow.dup();
                firstNewRow.setCell(cellIndex, new Cell(values[0].trim(), null));
                
                newRows.add(firstNewRow);
            }
            
            int r2 = r + 1;
            for (int v = 1; v < values.length; v++) {
                Cell newCell = new Cell(values[v].trim(), null);
                
                if (r2 < project.rows.size()) {
                    Row oldRow2 = project.rows.get(r2);
                    if (oldRow2.isCellBlank(cellIndex) && 
                        oldRow2.isCellBlank(keyCellIndex)) {
                        
                        Row newRow = oldRow2.dup();
                        newRow.setCell(cellIndex, newCell);
                        
                        newRows.add(newRow);
                        r2++;
                        
                        continue;
                    }
                }
                
                Row newRow = new Row(cellIndex + 1);
                newRow.setCell(cellIndex, newCell);
                
                newRows.add(newRow);
            }
            
            r = r2 - 1; // r will be incremented by the for loop anyway
        }
        
        return new HistoryEntry(
            historyEntryID,
            project, 
            getBriefDescription(null), 
            this, 
            new MassRowChange(newRows)
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\TextTransformOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        JSONObject engineConfig = obj.getJSONObject("engineConfig");
        
        return new TextTransformOperation(
            engineConfig,
            obj.getString("columnName"),
            obj.getString("expression"),
            stringToOnError(obj.getString("onError")),
            obj.getBoolean("repeat"),
            obj.getInt("repeatCount")
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\TextTransformOperation;stringToOnError(String);;;static public OnError stringToOnError(String s) {
        if ("set-to-blank".equalsIgnoreCase(s)) {
            return OnError.SetToBlank;
        } else if ("store-error".equalsIgnoreCase(s)) {
            return OnError.StoreError;
        } else {
            return OnError.KeepOriginal;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\TextTransformOperation;onErrorToString(OnError);;;static public String onErrorToString(OnError onError) {
        if (onError == OnError.SetToBlank) {
            return "set-to-blank";
        } else if (onError == OnError.StoreError) {
            return "store-error";
        } else {
            return "keep-original";
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\TextTransformOperation;TextTransformOperation(JSONObject,String,String,OnError,boolean,int);;;public TextTransformOperation(
            JSONObject engineConfig, 
            String columnName, 
            String expression, 
            OnError onError,
            boolean repeat,
            int repeatCount
        ) {
        super(engineConfig, columnName, true);
        _expression = expression;
        _onError = onError;
        _repeat = repeat;
        _repeatCount = repeatCount;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\TextTransformOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value(getBriefDescription(null));
        writer.key("engineConfig"); writer.value(getEngineConfig());
        writer.key("columnName"); writer.value(_columnName);
        writer.key("expression"); writer.value(_expression);
        writer.key("onError"); writer.value(onErrorToString(_onError));
        writer.key("repeat"); writer.value(_repeat);
        writer.key("repeatCount"); writer.value(_repeatCount);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\TextTransformOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Text transform on cells in column " + _columnName + " using expression " + _expression;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\cell\TextTransformOperation;createDescription(Column,List<CellChange>);;;protected String createDescription(Column column,
            List<CellChange> cellChanges) {
        
        return "Text transform on " + cellChanges.size() + 
            " cells in column " + column.getName() + ": " + _expression;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnAdditionOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        JSONObject engineConfig = obj.getJSONObject("engineConfig");
        
        return new ColumnAdditionOperation(
            engineConfig,
            obj.getString("baseColumnName"),
            obj.getString("expression"),
            TextTransformOperation.stringToOnError(obj.getString("onError")),
            obj.getString("newColumnName"),
            obj.getInt("columnInsertIndex")
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnAdditionOperation;ColumnAdditionOperation(JSONObject,String,String,OnError,String,int);;;public ColumnAdditionOperation(
        JSONObject     engineConfig,
        String         baseColumnName,
        String         expression,
        OnError        onError,
        String         newColumnName, 
        int            columnInsertIndex 
    ) {
        super(engineConfig);
        
        _baseColumnName = baseColumnName;
        _expression = expression;
        _onError = onError;
        
        _newColumnName = newColumnName;
        _columnInsertIndex = columnInsertIndex;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnAdditionOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value(getBriefDescription(null));
        writer.key("engineConfig"); writer.value(getEngineConfig());
        writer.key("newColumnName"); writer.value(_newColumnName);
        writer.key("columnInsertIndex"); writer.value(_columnInsertIndex);
        writer.key("baseColumnName"); writer.value(_baseColumnName);
        writer.key("expression"); writer.value(_expression);
        writer.key("onError"); writer.value(TextTransformOperation.onErrorToString(_onError));
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnAdditionOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Create column " + _newColumnName + 
            " at index " + _columnInsertIndex + 
            " based on column " + _baseColumnName + 
            " using expression " + _expression;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnAdditionOperation;createDescription(Column,List<CellAtRow>);;;protected String createDescription(Column column, List<CellAtRow> cellsAtRows) {
        return "Create new column " + _newColumnName + 
            " based on column " + column.getName() + 
            " by filling " + cellsAtRows.size() +
            " rows with " + _expression;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnAdditionOperation;createHistoryEntry(Project,long);;;protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {
        Engine engine = createEngine(project);
        
        Column column = project.columnModel.getColumnByName(_baseColumnName);
        if (column == null) {
            throw new Exception("No column named " + _baseColumnName);
        }
        
        List<CellAtRow> cellsAtRows = new ArrayList<CellAtRow>(project.rows.size());
        
        FilteredRows filteredRows = engine.getAllFilteredRows();
        filteredRows.accept(project, createRowVisitor(project, cellsAtRows));
        
        String description = createDescription(column, cellsAtRows);
        
        Change change = new ColumnAdditionChange(_newColumnName, _columnInsertIndex, cellsAtRows);
        
        return new HistoryEntry(
            historyEntryID, project, description, this, change);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnRemovalOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        return new ColumnRemovalOperation(
            obj.getString("columnName")
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnRemovalOperation;ColumnRemovalOperation(String);;;public ColumnRemovalOperation(
        String columnName
    ) {
        _columnName = columnName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnRemovalOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
           throws JSONException {
       
       writer.object();
       writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
       writer.key("description"); writer.value("Remove column " + _columnName);
       writer.key("columnName"); writer.value(_columnName);
       writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnRemovalOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Remove column " + _columnName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnRemovalOperation;createHistoryEntry(Project,long);;;protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {
        Column column = project.columnModel.getColumnByName(_columnName);
        if (column == null) {
            throw new Exception("No column named " + _columnName);
        }
        
        String description = "Remove column " + column.getName();
        
        Change change = new ColumnRemovalChange(project.columnModel.columns.indexOf(column));
        
        return new HistoryEntry(historyEntryID, project, description, ColumnRemovalOperation.this, change);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnRenameOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        return new ColumnRenameOperation(
            obj.getString("oldColumnName"),
            obj.getString("newColumnName")
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnRenameOperation;ColumnRenameOperation(String,String);;;public ColumnRenameOperation(
        String oldColumnName,
        String newColumnName
    ) {
        _oldColumnName = oldColumnName;
        _newColumnName = newColumnName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnRenameOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
           throws JSONException {
       
       writer.object();
       writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
       writer.key("description"); writer.value("Rename column " + _oldColumnName + " to " + _newColumnName);
       writer.key("oldColumnName"); writer.value(_oldColumnName);
       writer.key("newColumnName"); writer.value(_newColumnName);
       writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnRenameOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Rename column " + _oldColumnName + " to " + _newColumnName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnRenameOperation;createHistoryEntry(Project,long);;;protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {
        if (project.columnModel.getColumnByName(_oldColumnName) == null) {
            throw new Exception("No column named " + _oldColumnName);
        }
        if (project.columnModel.getColumnByName(_newColumnName) != null) {
            throw new Exception("Another column already named " + _newColumnName);
        }
        
        Change change = new ColumnRenameChange(_oldColumnName, _newColumnName);
        
        return new HistoryEntry(historyEntryID, project, getBriefDescription(null), ColumnRenameOperation.this, change);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnSplitOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        JSONObject engineConfig = obj.getJSONObject("engineConfig");
        String mode = obj.getString("mode");
        
        if ("separator".equals(mode)) {
            return new ColumnSplitOperation(
                engineConfig,
                obj.getString("columnName"),
                obj.getBoolean("guessCellType"),
                obj.getBoolean("removeOriginalColumn"),
                obj.getString("separator"),
                obj.getBoolean("regex"),
                obj.getInt("maxColumns")
            );
        } else {
            return new ColumnSplitOperation(
                engineConfig,
                obj.getString("columnName"),
                obj.getBoolean("guessCellType"),
                obj.getBoolean("removeOriginalColumn"),
                JSONUtilities.getIntArray(obj, "fieldLengths")
            );
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnSplitOperation;ColumnSplitOperation(JSONObject,String,boolean,boolean,String,boolean,int);;;public ColumnSplitOperation(
        JSONObject     engineConfig,
        String         columnName,
        boolean        guessCellType,
        boolean        removeOriginalColumn,
        String         separator,
        boolean        regex,
        int            maxColumns
    ) {
        super(engineConfig);
        
        _columnName = columnName;
        _guessCellType = guessCellType;
        _removeOriginalColumn = removeOriginalColumn;
        
        _mode = "separator";
        _separator = separator;
        _regex = regex;
        _maxColumns = maxColumns;
        
        _fieldLengths = null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnSplitOperation;ColumnSplitOperation(JSONObject,String,boolean,boolean,int[]);;;public ColumnSplitOperation(
        JSONObject     engineConfig,
        String         columnName,
        boolean        guessCellType,
        boolean        removeOriginalColumn,
        int[]          fieldLengths
    ) {
        super(engineConfig);
        
        _columnName = columnName;
        _guessCellType = guessCellType;
        _removeOriginalColumn = removeOriginalColumn;
        
        _mode = "lengths";
        _separator = null;
        _regex = false;
        _maxColumns = -1;
        
        _fieldLengths = fieldLengths;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnSplitOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value(getBriefDescription(null));
        writer.key("engineConfig"); writer.value(getEngineConfig());
        writer.key("columnName"); writer.value(_columnName);
        writer.key("guessCellType"); writer.value(_guessCellType);
        writer.key("removeOriginalColumn"); writer.value(_removeOriginalColumn);
        writer.key("mode"); writer.value(_mode);
        if ("separator".equals(_mode)) {
            writer.key("separator"); writer.value(_separator);
            writer.key("regex"); writer.value(_regex);
            writer.key("maxColumns"); writer.value(_maxColumns);
        } else {
            writer.key("fieldLengths"); writer.array();
            for (int l : _fieldLengths) {
                writer.value(l);
            }
            writer.endArray();
        }
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnSplitOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Split column " + _columnName + 
            ("separator".equals(_mode) ? " by separator" : " by field lengths");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnSplitOperation;createHistoryEntry(Project,long);;;protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {
        Engine engine = createEngine(project);
        
        Column column = project.columnModel.getColumnByName(_columnName);
        if (column == null) {
            throw new Exception("No column named " + _columnName);
        }
        
        List<String> columnNames = new ArrayList<String>();
        List<Integer> rowIndices = new ArrayList<Integer>(project.rows.size());
        List<List<Serializable>> tuples = new ArrayList<List<Serializable>>(project.rows.size());
        
        FilteredRows filteredRows = engine.getAllFilteredRows();
        RowVisitor rowVisitor;
        if ("lengths".equals(_mode)) {
            rowVisitor = new ColumnSplitRowVisitor(column.getCellIndex(), columnNames, rowIndices, tuples) {
                protected java.util.List<Serializable> split(String s) {
                    List<Serializable> results = new ArrayList<Serializable>(_fieldLengths.length + 1);
                    
                    int lastIndex = 0;
                    for (int i = 0; i < _fieldLengths.length; i++) {
                        int from = lastIndex;
                        int length = _fieldLengths[i];
                        int to = Math.min(from + length, s.length());
                        
                        results.add(stringToValue(s.substring(from, to)));
                        
                        lastIndex = to;
                    }
                    
                    return results;
                };
            };
        } else if (_regex) {
            Pattern pattern = Pattern.compile(_separator);
            
            rowVisitor = new ColumnSplitRowVisitor(column.getCellIndex(), columnNames, rowIndices, tuples) {
                Pattern _pattern;
                
                protected java.util.List<Serializable> split(String s) {
                    return stringArrayToValueList(_pattern.split(s, _maxColumns));
                };
                
                public RowVisitor init(Pattern pattern) {
                    _pattern = pattern;
                    return this;
                }
            }.init(pattern);
        } else {
            rowVisitor = new ColumnSplitRowVisitor(column.getCellIndex(), columnNames, rowIndices, tuples) {
                protected java.util.List<Serializable> split(String s) {
                    return stringArrayToValueList(
                            StringUtils.splitByWholeSeparatorPreserveAllTokens(s, _separator, _maxColumns));
                };
            };
        }
        
        filteredRows.accept(project, rowVisitor);
        
        String description = 
            "Split " + rowIndices.size() + 
            " cell(s) in column " + _columnName + 
            " into several columns" + 
                ("separator".equals(_mode) ? " by separator" : " by field lengths");

        Change change = new ColumnSplitChange(
            _columnName,
            columnNames,
            rowIndices,
            tuples,
            _removeOriginalColumn
        );
        
        return new HistoryEntry(
            historyEntryID, project, description, this, change);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnSplitOperation;ColumnSplitRowVisitor(int,List<String>,List<Integer>,List<List<Serializable>>);;;ColumnSplitRowVisitor(
            int cellIndex,
            List<String> columnNames,
            List<Integer> rowIndices,
            List<List<Serializable>> tuples
        ) {
            this.cellIndex = cellIndex;
            this.columnNames = columnNames;
            this.rowIndices = rowIndices;
            this.tuples = tuples;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnSplitOperation;visit(Project,int,Row);;;public boolean visit(Project project, int rowIndex, Row row) {
            Object value = row.getCellValue(cellIndex);
            if (ExpressionUtils.isNonBlankData(value)) {
                String s = value instanceof String ? ((String) value) : value.toString();
                
                List<Serializable> tuple = split(s);
                
                rowIndices.add(rowIndex);
                tuples.add(tuple);
                
                for (int i = columnNames.size(); i < tuple.size(); i++) {
                    while (true) {
                        String newColumnName = _columnName + " " + columnNameIndex++;
                        if (project.columnModel.getColumnByName(newColumnName) == null) {
                            columnNames.add(newColumnName);
                            break;
                        }
                    }
                }
            }
            return false;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnSplitOperation;split(String);;;protected List<Serializable> split(String s) {
            throw new UnsupportedOperationException();
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnSplitOperation;stringToValue(String);;;protected Serializable stringToValue(String s) {
            return _guessCellType ? ImporterUtilities.parseCellValue(s) : s;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ColumnSplitOperation;stringArrayToValueList(String[]);;;protected List<Serializable> stringArrayToValueList(String[] cells) {
            List<Serializable> results = new ArrayList<Serializable>(cells.length);
            for (String cell : cells) {
                results.add(stringToValue(cell));
            }
            
            return results;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ExtendDataOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        JSONObject engineConfig = obj.getJSONObject("engineConfig");
        
        return new ExtendDataOperation(
            engineConfig,
            obj.getString("baseColumnName"),
            obj.getJSONObject("extension"),
            obj.getInt("columnInsertIndex")
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ExtendDataOperation;ExtendDataOperation(JSONObject,String,JSONObject,int);;;public ExtendDataOperation(
        JSONObject     engineConfig,
        String         baseColumnName,
        JSONObject     extension,
        int            columnInsertIndex 
    ) {
        super(engineConfig);
        
        _baseColumnName = baseColumnName;
        _extension = extension;
        _columnInsertIndex = columnInsertIndex;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ExtendDataOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value(getBriefDescription(null));
        writer.key("engineConfig"); writer.value(getEngineConfig());
        writer.key("columnInsertIndex"); writer.value(_columnInsertIndex);
        writer.key("baseColumnName"); writer.value(_baseColumnName);
        writer.key("extension"); writer.value(_extension);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ExtendDataOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Extend data at index " + _columnInsertIndex + 
            " based on column " + _baseColumnName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ExtendDataOperation;createDescription(Column,List<CellAtRow>);;;protected String createDescription(Column column, List<CellAtRow> cellsAtRows) {
        return "Extend data at index " + _columnInsertIndex + 
            " based on column " + column.getName() + 
            " by filling " + cellsAtRows.size();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ExtendDataOperation;createProcess(Project,Properties);;;public Process createProcess(Project project, Properties options) throws Exception {
        return new ExtendDataProcess(
            project, 
            getEngineConfig(),
            getBriefDescription(null)
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ExtendDataOperation;ExtendDataProcess(Project,JSONObject,String);;;public ExtendDataProcess(
            Project project, 
            JSONObject engineConfig, 
            String description
        ) throws JSONException {
            super(description);
            _project = project;
            _engineConfig = engineConfig;
            _historyEntryID = HistoryEntry.allocateID();
            
            _job = new FreebaseDataExtensionJob(_extension);
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ExtendDataOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
                throws JSONException {
            
            writer.object();
            writer.key("id"); writer.value(hashCode());
            writer.key("description"); writer.value(_description);
            writer.key("immediate"); writer.value(false);
            writer.key("status"); writer.value(_thread == null ? "pending" : (_thread.isAlive() ? "running" : "done"));
            writer.key("progress"); writer.value(_progress);
            writer.endObject();
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ExtendDataOperation;getRunnable();;;protected Runnable getRunnable() {
            return this;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ExtendDataOperation;extendRows(List<Integer>,List<DataExtension>,int,int,Map<String,ReconCandidate>);;;protected int extendRows(
            List<Integer> rowIndices, 
            List<DataExtension> dataExtensions, 
            int from, 
            int limit,
            Map<String, ReconCandidate> reconCandidateMap
        ) {
            Set<String> guids = new HashSet<String>();
            
            int end;
            for (end = from; end < limit && guids.size() < 10; end++) {
                int index = rowIndices.get(end);
                Row row = _project.rows.get(index);
                Cell cell = row.getCell(_cellIndex);
                
                guids.add(cell.recon.match.topicGUID);
            }
            
            Map<String, DataExtension> map = null;
            try {
                map = _job.extend(guids, reconCandidateMap);
            } catch (Exception e) {
                map = new HashMap<String, DataExtension>();
            }
            
            for (int i = from; i < end; i++) {
                int index = rowIndices.get(i);
                Row row = _project.rows.get(index);
                Cell cell = row.getCell(_cellIndex);
                String guid = cell.recon.match.topicGUID;
                
                if (map.containsKey(guid)) {
                    dataExtensions.add(map.get(guid));
                } else {
                    dataExtensions.add(null);
                }
            }
            
            return end;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\column\ExtendDataOperation;run();;;public void run() {
            List<Integer> rowIndices = new ArrayList<Integer>();
            List<DataExtension> dataExtensions = new ArrayList<DataExtension>();
            
            try {
                populateRowsWithMatches(rowIndices);
            } catch (Exception e2) {
                // TODO : Not sure what to do here?
                e2.printStackTrace();
            }
            
            int start = 0;
            Map<String, ReconCandidate> reconCandidateMap = new HashMap<String, ReconCandidate>();
            
            while (start < rowIndices.size()) {
                int end = extendRows(rowIndices, dataExtensions, start, rowIndices.size(), reconCandidateMap);
                start = end;
                
                _progress = end * 100 / rowIndices.size();
                try {
                    Thread.sleep(200);
                } catch (InterruptedException e) {
                    if (_canceled) {
                        break;
                    }
                }
            }
            
            if (!_canceled) {
                List<String> columnNames = new ArrayList<String>();
                for (ColumnInfo info : _job.columns) {
                    columnNames.add(StringUtils.join(info.names, " - "));
                }
                
                List<FreebaseType> columnTypes = new ArrayList<FreebaseType>();
                for (ColumnInfo info : _job.columns) {
                    columnTypes.add(info.expectedType);
                }
                
                HistoryEntry historyEntry = new HistoryEntry(
                    _historyEntryID,
                    _project, 
                    _description, 
                    ExtendDataOperation.this, 
                    new DataExtensionChange(
                        _baseColumnName,
                        _columnInsertIndex,
                        columnNames,
                        columnTypes,
                        rowIndices,
                        dataExtensions,
                        _historyEntryID)
                );
                
                _project.history.addEntry(historyEntry);
                _project.processManager.onDoneProcess(this);
            }
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconDiscardJudgmentsOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        JSONObject engineConfig = obj.getJSONObject("engineConfig");
        String columnName = obj.getString("columnName");
        
        return new ReconDiscardJudgmentsOperation(
            engineConfig, 
            columnName
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconDiscardJudgmentsOperation;ReconDiscardJudgmentsOperation(JSONObject,String);;;public ReconDiscardJudgmentsOperation(JSONObject engineConfig, String columnName) {
        super(engineConfig, columnName, false);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconDiscardJudgmentsOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value(getBriefDescription(null));
        writer.key("engineConfig"); writer.value(getEngineConfig());
        writer.key("columnName"); writer.value(_columnName);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconDiscardJudgmentsOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Discard recon judgments for cells in column " + _columnName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconDiscardJudgmentsOperation;createDescription(Column,List<CellChange>);;;protected String createDescription(Column column,
            List<CellChange> cellChanges) {
        
        return "Discard recon judgments for " + cellChanges.size() + 
            " cells in column " + column.getName();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconDiscardJudgmentsOperation;createChange(Project,Column,List<CellChange>);;;protected Change createChange(Project project, Column column, List<CellChange> cellChanges) {
        return new ReconChange(
            cellChanges, 
            _columnName, 
            column.getReconConfig(),
            null
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconJudgeSimilarCellsOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        JSONObject engineConfig = obj.getJSONObject("engineConfig");
        
        ReconCandidate match = null;
        if (obj.has("match")) {
            JSONObject matchObj = obj.getJSONObject("match");
            
            JSONArray types = matchObj.getJSONArray("types");
            String[] typeIDs = new String[types.length()];
            for (int i = 0; i < typeIDs.length; i++) {
                typeIDs[i] = types.getString(i);
            }
            
            match = new ReconCandidate(
                matchObj.getString("id"),
                matchObj.getString("guid"),
                matchObj.getString("name"),
                typeIDs,
                matchObj.getDouble("score")
            );
        }
        
        Judgment judgment = Judgment.None;
        if (obj.has("judgment")) {
            judgment = Recon.stringToJudgment(obj.getString("judgment"));
        }
        
        return new ReconJudgeSimilarCellsOperation(
            engineConfig,
            obj.getString("columnName"),
            obj.getString("similarValue"),
            judgment,
            match,
            obj.has("shareNewTopics") ? obj.getBoolean("shareNewTopics") : false
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconJudgeSimilarCellsOperation;ReconJudgeSimilarCellsOperation(JSONObject,String,String,Judgment,ReconCandidate,boolean);;;public ReconJudgeSimilarCellsOperation(
        JSONObject         engineConfig, 
        String             columnName, 
        String             similarValue,
        Judgment        judgment,
        ReconCandidate     match,
        boolean            shareNewTopics
    ) {
        super(engineConfig, columnName, false);
        this._similarValue = similarValue;
        this._judgment = judgment;
        this._match = match;
        this._shareNewTopics = shareNewTopics;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconJudgeSimilarCellsOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value(getBriefDescription(null));
        writer.key("engineConfig"); writer.value(getEngineConfig());
        writer.key("columnName"); writer.value(_columnName);
        writer.key("similarValue"); writer.value(_similarValue);
        writer.key("judgment"); writer.value(Recon.judgmentToString(_judgment));
        if (_match != null) {
            writer.key("match"); _match.write(writer, options);
        }
        writer.key("shareNewTopics"); writer.value(_shareNewTopics);
        
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconJudgeSimilarCellsOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        if (_judgment == Judgment.None) {
            return "Discard recon judgments for cells containing \"" +
                _similarValue + "\" in column " + _columnName;
        } else if (_judgment == Judgment.New) {
            if (_shareNewTopics) {
                return "Mark to create one single new topic for all cells containing \"" +
                    _similarValue + "\" in column " + _columnName;
            } else {
                return "Mark to create one new topic for each cell containing \"" +
                    _similarValue + "\" in column " + _columnName;
            }
        } else if (_judgment == Judgment.Matched) {
            return "Match topic " + 
                _match.topicName +  " (" +
                _match.topicID + ") for cells containing \"" +
                _similarValue + "\" in column " + _columnName;
        }
        throw new InternalError("Can't get here");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconJudgeSimilarCellsOperation;createDescription(Column,List<CellChange>);;;protected String createDescription(Column column,
            List<CellChange> cellChanges) {
        
        if (_judgment == Judgment.None) {
            return "Discard recon judgments for " + cellChanges.size() + " cells containing \"" +
                _similarValue + "\" in column " + _columnName;
        } else if (_judgment == Judgment.New) {
            if (_shareNewTopics) {
                return "Mark to create one single new topic for " + cellChanges.size() + " cells containing \"" +
                    _similarValue + "\" in column " + _columnName;
            } else {
                return "Mark to create one new topic for each of " + cellChanges.size() + " cells containing \"" +
                    _similarValue + "\" in column " + _columnName;
            }
        } else if (_judgment == Judgment.Matched) {
            return "Match topic " + 
                _match.topicName + " (" +
                _match.topicID + ") for " +
                cellChanges.size() + " cells containing \"" +
                _similarValue + "\" in column " + _columnName;
        }
        throw new InternalError("Can't get here");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconJudgeSimilarCellsOperation;createChange(Project,Column,List<CellChange>);;;protected Change createChange(Project project, Column column, List<CellChange> cellChanges) {
        return new ReconChange(
            cellChanges, 
            _columnName, 
            column.getReconConfig(),
            null
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMarkNewTopicsOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        JSONObject engineConfig = obj.getJSONObject("engineConfig");
        
        return new ReconMarkNewTopicsOperation(
            engineConfig, 
            obj.getString("columnName"),
            obj.has("shareNewTopics") ? obj.getBoolean("shareNewTopics") : false
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMarkNewTopicsOperation;ReconMarkNewTopicsOperation(JSONObject,String,boolean);;;public ReconMarkNewTopicsOperation(JSONObject engineConfig, String columnName, boolean shareNewTopics) {
        super(engineConfig, columnName, false);
        _shareNewTopics = shareNewTopics;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMarkNewTopicsOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value(getBriefDescription(null));
        writer.key("engineConfig"); writer.value(getEngineConfig());
        writer.key("columnName"); writer.value(_columnName);
        writer.key("shareNewTopics"); writer.value(_shareNewTopics);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMarkNewTopicsOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Mark to create new topics for cells in column " + _columnName +
            (_shareNewTopics ? 
                ", one topic for each group of similar cells" : 
                ", one topic for each cell");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMarkNewTopicsOperation;createDescription(Column,List<CellChange>);;;protected String createDescription(Column column,
            List<CellChange> cellChanges) {
        
        return "Mark to create new topics for " + cellChanges.size() + 
            " cells in column " + column.getName() +
            (_shareNewTopics ? 
                ", one topic for each group of similar cells" : 
                ", one topic for each cell");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMarkNewTopicsOperation;createChange(Project,Column,List<CellChange>);;;protected Change createChange(Project project, Column column, List<CellChange> cellChanges) {
        return new ReconChange(
            cellChanges, 
            _columnName, 
            column.getReconConfig(),
            null
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMatchBestCandidatesOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        JSONObject engineConfig = obj.getJSONObject("engineConfig");
        String columnName = obj.getString("columnName");
        
        return new ReconMatchBestCandidatesOperation(
            engineConfig, 
            columnName
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMatchBestCandidatesOperation;ReconMatchBestCandidatesOperation(JSONObject,String);;;public ReconMatchBestCandidatesOperation(JSONObject engineConfig, String columnName) {
        super(engineConfig, columnName, false);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMatchBestCandidatesOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value(getBriefDescription(null));
        writer.key("engineConfig"); writer.value(getEngineConfig());
        writer.key("columnName"); writer.value(_columnName);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMatchBestCandidatesOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Match each cell to its best recon candidate in column " + _columnName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMatchBestCandidatesOperation;createDescription(Column,List<CellChange>);;;protected String createDescription(Column column,
            List<CellChange> cellChanges) {
        
        return "Match each of " + cellChanges.size() + 
            " cells to its best candidate in column " + column.getName();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMatchBestCandidatesOperation;createChange(Project,Column,List<CellChange>);;;protected Change createChange(Project project, Column column, List<CellChange> cellChanges) {
        return new ReconChange(
            cellChanges, 
            _columnName, 
            column.getReconConfig(),
            null
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMatchSpecificTopicOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        JSONObject engineConfig = obj.getJSONObject("engineConfig");
        
        JSONObject match = obj.getJSONObject("match");
        
        JSONArray types = obj.getJSONArray("types");
        String[] typeIDs = new String[types.length()];
        for (int i = 0; i < typeIDs.length; i++) {
            typeIDs[i] = types.getString(i);
        }
        
        return new ReconMatchSpecificTopicOperation(
            engineConfig,
            obj.getString("columnName"),
            new ReconCandidate(
                match.getString("id"),
                match.getString("guid"),
                match.getString("name"),
                typeIDs,
                100
            )
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMatchSpecificTopicOperation;ReconMatchSpecificTopicOperation(JSONObject,String,ReconCandidate);;;public ReconMatchSpecificTopicOperation(JSONObject engineConfig, String columnName, ReconCandidate match) {
        super(engineConfig, columnName, false);
        this.match = match;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMatchSpecificTopicOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value(getBriefDescription(null));
        writer.key("engineConfig"); writer.value(getEngineConfig());
        writer.key("columnName"); writer.value(_columnName);
        writer.key("match");
            writer.object();
            writer.key("id"); writer.value(match.topicID);
            writer.key("guid"); writer.value(match.topicGUID);
            writer.key("name"); writer.value(match.topicName);
            writer.key("types");
                writer.array();
                for (String typeID : match.typeIDs) {
                    writer.value(typeID);
                }
                writer.endArray();
            writer.endObject();
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMatchSpecificTopicOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Match specific topic " +
            match.topicName + " (" + 
            match.topicID + ") to cells in column " + _columnName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMatchSpecificTopicOperation;createDescription(Column,List<CellChange>);;;protected String createDescription(Column column,
            List<CellChange> cellChanges) {
        return "Match specific topic " + 
            match.topicName + " (" + 
            match.topicID + ") to " + cellChanges.size() + 
            " cells in column " + column.getName();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconMatchSpecificTopicOperation;createChange(Project,Column,List<CellChange>);;;protected Change createChange(Project project, Column column, List<CellChange> cellChanges) {
        return new ReconChange(
            cellChanges, 
            _columnName, 
            column.getReconConfig(),
            null
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        JSONObject engineConfig = obj.getJSONObject("engineConfig");
        
        return new ReconOperation(
            engineConfig, 
            obj.getString("columnName"),
            ReconConfig.reconstruct(obj.getJSONObject("config"))
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconOperation;ReconOperation(JSONObject,String,ReconConfig);;;public ReconOperation(
        JSONObject engineConfig, 
        String columnName, 
        ReconConfig reconConfig
    ) {
        super(engineConfig);
        _columnName = columnName;
        _reconConfig = reconConfig;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconOperation;createProcess(Project,Properties);;;public Process createProcess(Project project, Properties options) throws Exception {
        return new ReconProcess(
            project, 
            getEngineConfig(),
            getBriefDescription(null)
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return _reconConfig.getBriefDescription(project, _columnName);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value(getBriefDescription(null));
        writer.key("columnName"); writer.value(_columnName);
        writer.key("config"); _reconConfig.write(writer, options);
        writer.key("engineConfig"); writer.value(getEngineConfig());
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconOperation;ReconEntry(int,Cell);;;public ReconEntry(int rowIndex, Cell cell) {
            this.rowIndex = rowIndex;
            this.cell = cell;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconOperation;JobGroup(ReconJob);;;public JobGroup(ReconJob job) {
            this.job = job;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconOperation;ReconProcess(Project,JSONObject,String);;;public ReconProcess(
            Project project, 
            JSONObject engineConfig, 
            String description
        ) {
            super(description);
            _project = project;
            _engineConfig = engineConfig;
            _historyEntryID = HistoryEntry.allocateID();
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
                throws JSONException {
            
            writer.object();
            writer.key("id"); writer.value(hashCode());
            writer.key("description"); writer.value(_description);
            writer.key("immediate"); writer.value(false);
            writer.key("status"); writer.value(_thread == null ? "pending" : (_thread.isAlive() ? "running" : "done"));
            writer.key("progress"); writer.value(_progress);
            writer.key("onDone");
                writer.array();
                    writer.object();
                        writer.key("action"); writer.value("createFacet");
                        writer.key("facetType"); writer.value("list");
                        writer.key("facetConfig");
                            writer.object();
                                writer.key("name"); writer.value(_columnName + ": judgment");
                                writer.key("columnName"); writer.value(_columnName);
                                writer.key("expression"); writer.value("cell.recon.judgment");
                                writer.key("omitError"); writer.value(true);
                            writer.endObject();
                        writer.key("facetOptions");
                            writer.object();
                                writer.key("scroll"); writer.value(false);
                            writer.endObject();
                    writer.endObject();

                    if (_reconConfig instanceof HeuristicReconConfig) {
                        writer.object();
                            writer.key("action"); writer.value("createFacet");
                            writer.key("facetType"); writer.value("range");
                            writer.key("facetConfig");
                                writer.object();
                                    writer.key("name"); writer.value(_columnName + ": best candidate's score");
                                    writer.key("columnName"); writer.value(_columnName);
                                    writer.key("expression"); writer.value("cell.recon.best.score");
                                    writer.key("mode"); writer.value("range");
                                writer.endObject();
                        writer.endObject();
                    }
                writer.endArray();
            writer.endObject();
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconOperation;getRunnable();;;protected Runnable getRunnable() {
            return this;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\recon\ReconOperation;run();;;public void run() {
            try {
                populateEntries();
            } catch (Exception e2) {
                // TODO : Not sure what to do here?
                e2.printStackTrace();
            }
            
            Map<Integer, JobGroup> jobKeyToGroup = new HashMap<Integer, JobGroup>();
            
            for (ReconEntry entry : _entries) {
                ReconJob job = _reconConfig.createJob(
                    _project, 
                    entry.rowIndex, 
                    _project.rows.get(entry.rowIndex), 
                    _columnName, 
                    entry.cell
                );
                
                int key = job.getKey();
                JobGroup group = jobKeyToGroup.get(key);
                if (group == null) {
                    group = new JobGroup(job);
                    jobKeyToGroup.put(key, group);
                }
                group.entries.add(entry);
            }
            
            List<CellChange> cellChanges = new ArrayList<CellChange>(_entries.size());
            List<JobGroup> groups = new ArrayList<JobGroup>(jobKeyToGroup.values());
            
            int batchSize = _reconConfig.getBatchSize();
            for (int i = 0; i < groups.size(); i += batchSize) {
                int to = Math.min(i + batchSize, groups.size());
                
                List<ReconJob> jobs = new ArrayList<ReconJob>(to - i);
                for (int j = i; j < to; j++) {
                    jobs.add(groups.get(j).job);
                }
                
                List<Recon> recons = _reconConfig.batchRecon(jobs, _historyEntryID);
                for (int j = i; j < to; j++) {
                    Recon recon = recons.get(j - i);
                    List<ReconEntry> entries = groups.get(j).entries;
                    
                    if (recon != null) {
                        recon.judgmentBatchSize = entries.size();
                    }
                    
                    for (ReconEntry entry : entries) {
                        Cell oldCell = entry.cell;
                        Cell newCell = new Cell(oldCell.value, recon);
                        
                        CellChange cellChange = new CellChange(
                            entry.rowIndex, 
                            _cellIndex, 
                            oldCell, 
                            newCell
                        );
                        cellChanges.add(cellChange);
                    }
                }
                
                _progress = i * 100 / groups.size();
                try {
                    Thread.sleep(50);
                } catch (InterruptedException e) {
                    if (_canceled) {
                        break;
                    }
                }
            }
            
            if (!_canceled) {
                Change reconChange = new ReconChange(
                    cellChanges, 
                    _columnName, 
                    _reconConfig,
                    null
                );
                
                HistoryEntry historyEntry = new HistoryEntry(
                    _historyEntryID,
                    _project, 
                    _description, 
                    ReconOperation.this, 
                    reconChange
                );
                
                _project.history.addEntry(historyEntry);
                _project.processManager.onDoneProcess(this);
            }
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\DenormalizeOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        return new DenormalizeOperation();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\DenormalizeOperation;DenormalizeOperation();;;public DenormalizeOperation() {
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\DenormalizeOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
           throws JSONException {
       
       writer.object();
       writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
       writer.key("description"); writer.value("Denormalize");
       writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\DenormalizeOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Denormalize";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\DenormalizeOperation;createHistoryEntry(Project,long);;;protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {
        List<Row> newRows = new ArrayList<Row>();
        
        List<Row> oldRows = project.rows;
        for (int r = 0; r < oldRows.size(); r++) {
            Row oldRow = oldRows.get(r);
            Row newRow = null;
            
            RowDependency rd = project.recordModel.getRowDependency(r);
            if (rd.cellDependencies != null) {
                newRow = oldRow.dup();
                
                for (int c = 0; c < rd.cellDependencies.length; c++) {
                	CellDependency cd = rd.cellDependencies[c];
                	if (cd != null) {
	                    int contextRowIndex = cd.rowIndex;
	                    int contextCellIndex = cd.cellIndex;
	                    
	                    if (contextRowIndex >= 0 && contextRowIndex < oldRows.size()) {
	                        Row contextRow = oldRows.get(contextRowIndex);
	                        Cell contextCell = contextRow.getCell(contextCellIndex);
	                        
	                        newRow.setCell(contextCellIndex, contextCell);
	                    }
                	}
                }
            }
            
            newRows.add(newRow != null ? newRow : oldRow);
        }
        
        return new HistoryEntry(
            historyEntryID, 
            project,
            getBriefDescription(project),
            DenormalizeOperation.this,
            new MassRowChange(newRows)
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowFlagOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        JSONObject engineConfig = obj.getJSONObject("engineConfig");
        boolean flagged = obj.getBoolean("flagged");
        
        return new RowFlagOperation(
            engineConfig, 
            flagged
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowFlagOperation;RowFlagOperation(JSONObject,boolean);;;public RowFlagOperation(JSONObject engineConfig, boolean flagged) {
        super(engineConfig);
        _flagged = flagged;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowFlagOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value(getBriefDescription(null));
        writer.key("engineConfig"); writer.value(getEngineConfig());
        writer.key("flagged"); writer.value(_flagged);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowFlagOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return (_flagged ? "Flag rows" : "Unflag rows");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowFlagOperation;createHistoryEntry(Project,long);;;protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {
        Engine engine = createEngine(project);
        
        List<Change> changes = new ArrayList<Change>(project.rows.size());
        
        FilteredRows filteredRows = engine.getAllFilteredRows();
        filteredRows.accept(project, createRowVisitor(project, changes));
        
        return new HistoryEntry(
            historyEntryID,
            project, 
            (_flagged ? "Flag" : "Unflag") + " " + changes.size() + " rows", 
            this, 
            new MassChange(changes, false)
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowRemovalOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        JSONObject engineConfig = obj.getJSONObject("engineConfig");
        
        return new RowRemovalOperation(
            engineConfig
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowRemovalOperation;RowRemovalOperation(JSONObject);;;public RowRemovalOperation(JSONObject engineConfig) {
        super(engineConfig);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowRemovalOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value(getBriefDescription(null));
        writer.key("engineConfig"); writer.value(getEngineConfig());
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowRemovalOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Remove rows";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowRemovalOperation;createHistoryEntry(Project,long);;;protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {
        Engine engine = createEngine(project);
        
        List<Integer> rowIndices = new ArrayList<Integer>();
        
        FilteredRows filteredRows = engine.getAllFilteredRows();
        filteredRows.accept(project, createRowVisitor(project, rowIndices));
        
        return new HistoryEntry(
            historyEntryID,
            project, 
            "Remove " + rowIndices.size() + " rows", 
            this, 
            new RowRemovalChange(rowIndices)
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowReorderOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
    	String mode = obj.getString("mode");
        JSONObject sorting = obj.has("sorting") && !obj.isNull("sorting") ?
        		obj.getJSONObject("sorting") : null;
        
        return new RowReorderOperation(Engine.stringToMode(mode), sorting);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowReorderOperation;RowReorderOperation(Mode,JSONObject);;;public RowReorderOperation(Mode mode, JSONObject sorting) {
    	_mode = mode;
        _sorting = sorting;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowReorderOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value(getBriefDescription(null));
        writer.key("mode"); writer.value(Engine.modeToString(_mode));
        writer.key("sorting"); writer.value(_sorting);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowReorderOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return "Reorder rows";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowReorderOperation;createHistoryEntry(Project,long);;;protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {
        Engine engine = new Engine(project);
        engine.setMode(_mode);
        
        List<Integer> rowIndices = new ArrayList<Integer>();
        if (_mode == Mode.RowBased) {
            RowVisitor visitor = new IndexingVisitor(rowIndices);
            if (_sorting != null) {
            	SortingRowVisitor srv = new SortingRowVisitor(visitor);
            	
            	srv.initializeFromJSON(project, _sorting);
        		if (srv.hasCriteria()) {
        			visitor = srv;
        		}
            }
            
        	engine.getAllRows().accept(project, visitor);
        } else {
            RecordVisitor visitor = new IndexingVisitor(rowIndices);
            if (_sorting != null) {
            	SortingRecordVisitor srv = new SortingRecordVisitor(visitor);
            	
            	srv.initializeFromJSON(project, _sorting);
        		if (srv.hasCriteria()) {
        			visitor = srv;
        		}
            }
            
        	engine.getAllRecords().accept(project, visitor);
        }
        
        return new HistoryEntry(
            historyEntryID,
            project, 
            "Reorder rows", 
            this, 
            new RowReorderChange(rowIndices)
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowReorderOperation;IndexingVisitor(List<Integer>);;;IndexingVisitor(List<Integer> indices) {
    		_indices = indices;
    	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowStarOperation;reconstruct(Project,JSONObject);;;static public AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {
        JSONObject engineConfig = obj.getJSONObject("engineConfig");
        boolean starred = obj.getBoolean("starred");
        
        return new RowStarOperation(
            engineConfig, 
            starred
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowStarOperation;RowStarOperation(JSONObject,boolean);;;public RowStarOperation(JSONObject engineConfig, boolean starred) {
        super(engineConfig);
        _starred = starred;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowStarOperation;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("op"); writer.value(OperationRegistry.s_opClassToName.get(this.getClass()));
        writer.key("description"); writer.value(getBriefDescription(null));
        writer.key("engineConfig"); writer.value(getEngineConfig());
        writer.key("starred"); writer.value(_starred);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowStarOperation;getBriefDescription(Project);;;protected String getBriefDescription(Project project) {
        return (_starred ? "Star rows" : "Unstar rows");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\operations\row\RowStarOperation;createHistoryEntry(Project,long);;;protected HistoryEntry createHistoryEntry(Project project, long historyEntryID) throws Exception {
        Engine engine = createEngine(project);
        
        List<Change> changes = new ArrayList<Change>(project.rows.size());
        
        FilteredRows filteredRows = engine.getAllFilteredRows();
        filteredRows.accept(project, createRowVisitor(project, changes));
        
        return new HistoryEntry(
            historyEntryID,
            project, 
            (_starred ? "Star" : "Unstar") + " " + changes.size() + " rows", 
            this, 
            new MassChange(changes, false)
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\LongRunningProcess;LongRunningProcess(String);;;protected LongRunningProcess(String description) {
        _description = description;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\LongRunningProcess;cancel();;;public void cancel() {
        _canceled = true;
        if (_thread != null && _thread.isAlive()) {
            _thread.interrupt();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\LongRunningProcess;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("id"); writer.value(hashCode());
        writer.key("description"); writer.value(_description);
        writer.key("immediate"); writer.value(false);
        writer.key("status"); writer.value(_thread == null ? "pending" : (_thread.isAlive() ? "running" : "done"));
        writer.key("progress"); writer.value(_progress);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\LongRunningProcess;isImmediate();;;@Override
    public boolean isImmediate() {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\LongRunningProcess;isRunning();;;@Override
    public boolean isRunning() {
        return _thread != null && _thread.isAlive();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\LongRunningProcess;isDone();;;@Override
    public boolean isDone() {
        return _thread != null && !_thread.isAlive();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\LongRunningProcess;performImmediate();;;@Override
    public HistoryEntry performImmediate() {
        throw new RuntimeException("Not an immediate process");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\LongRunningProcess;startPerforming(ProcessManager);;;@Override
    public void startPerforming(ProcessManager manager) {
        if (_thread == null) {
            _manager = manager;
            
            _thread = new Thread(getRunnable());
            _thread.start();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\LongRunningProcess;getRunnable();;;abstract protected Runnable getRunnable();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\Process;isImmediate();;;abstract public boolean isImmediate();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\Process;isRunning();;;abstract public boolean isRunning();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\Process;isDone();;;abstract public boolean isDone();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\Process;performImmediate();;;abstract public HistoryEntry performImmediate() throws Exception;
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\Process;startPerforming(ProcessManager);;;abstract public void startPerforming(ProcessManager manager);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\Process;cancel();;;abstract public void cancel();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\ProcessManager;ProcessManager();;;public ProcessManager() {
        
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\ProcessManager;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("processes"); writer.array();
        for (Process p : _processes) {
            p.write(writer, options);
        }
        writer.endArray();
        
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\ProcessManager;queueProcess(Process);;;public HistoryEntry queueProcess(Process process) {
        if (process.isImmediate() && _processes.size() == 0) {
            try {
                return process.performImmediate();
            } catch (Exception e) {
                // TODO: Not sure what to do yet
                e.printStackTrace();
            }
        } else {
            _processes.add(process);
            
            update();
        }
        return null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\ProcessManager;queueProcess(HistoryProcess);;;public boolean queueProcess(HistoryProcess process) {
        if (process.isImmediate() && _processes.size() == 0) {
            try {
                return process.performImmediate() != null;
            } catch (Exception e) {
                // TODO: Not sure what to do yet
                e.printStackTrace();
            }
        } else {
            _processes.add(process);
            
            update();
        }
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\ProcessManager;hasPending();;;public boolean hasPending() {
        return _processes.size() > 0;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\ProcessManager;onDoneProcess(Process);;;public void onDoneProcess(Process p) {
        _processes.remove(p);
        update();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\ProcessManager;cancelAll();;;public void cancelAll() {
        for (Process p : _processes) {
            if (!p.isImmediate() && p.isRunning()) {
                p.cancel();
            }
        }
        _processes.clear();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\ProcessManager;update();;;protected void update() {
        while (_processes.size() > 0) {
            Process p = _processes.get(0);
            if (p.isImmediate()) {
                try {
                    p.performImmediate();
                } catch (Exception e) {
                    // TODO: Not sure what to do yet
                    e.printStackTrace();
                }
                _processes.remove(0);
            } else if (p.isDone()) {
                _processes.remove(0);
            } else {
                if (!p.isRunning()) {
                    p.startPerforming(this);
                }
                break;
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\QuickHistoryEntryProcess;QuickHistoryEntryProcess(Project,String);;;public QuickHistoryEntryProcess(Project project, String briefDescription) {
        _project = project;
        _briefDescription = briefDescription;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\QuickHistoryEntryProcess;cancel();;;public void cancel() {
        throw new RuntimeException("Not a long-running process");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\QuickHistoryEntryProcess;isImmediate();;;public boolean isImmediate() {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\QuickHistoryEntryProcess;isRunning();;;public boolean isRunning() {
        throw new RuntimeException("Not a long-running process");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\QuickHistoryEntryProcess;performImmediate();;;public HistoryEntry performImmediate() throws Exception {
        if (_historyEntry == null) {
            _historyEntry = createHistoryEntry(HistoryEntry.allocateID());
        }
        _project.history.addEntry(_historyEntry);
        _done = true;
        
        return _historyEntry;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\QuickHistoryEntryProcess;startPerforming(ProcessManager);;;public void startPerforming(ProcessManager manager) {
        throw new RuntimeException("Not a long-running process");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\QuickHistoryEntryProcess;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("id"); writer.value(hashCode());
        writer.key("description"); writer.value(_historyEntry != null ? _historyEntry.description : _briefDescription);
        writer.key("immediate"); writer.value(true);
        writer.key("status"); writer.value(_done ? "done" : "pending");
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\QuickHistoryEntryProcess;isDone();;;@Override
    public boolean isDone() {
        return _done;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\process\QuickHistoryEntryProcess;createHistoryEntry(long);;;abstract protected HistoryEntry createHistoryEntry(long historyEntryID) throws Exception;
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\AnonymousNode;AnonymousNode(FreebaseType);;;public AnonymousNode(FreebaseType type) {
        this.type = type;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\AnonymousNode;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("nodeType"); writer.value("anonymous");
        writer.key("type"); type.write(writer, options);
        if (links != null) {
            writer.key("links"); writer.array();
            for (Link link : links) {
                link.write(writer, options);
            }
            writer.endArray();
        }
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\AnonymousNode;addLink(Link);;;public void addLink(Link link) {
        links.add(link);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\AnonymousNode;getLink(int);;;public Link getLink(int index) {
        return links.get(index);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\AnonymousNode;getLinkCount();;;public int getLinkCount() {
        return links.size();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\CellKeyNode;CellKeyNode(String,FreebaseTopic);;;public CellKeyNode(
        String             columnName,
        FreebaseTopic    namespace
    ) {
        super(columnName);
        
        this.namespace = namespace;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\CellKeyNode;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {

        writer.object();
        writer.key("nodeType"); writer.value("cell-as-key");
        writer.key("columnName"); writer.value(columnName);
        writer.key("namespace"); namespace.write(writer, options);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\CellNode;CellNode(String);;;public CellNode(
        String columnName
    ) {
        this.columnName = columnName;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\CellTopicNode;CellTopicNode(String,boolean,FreebaseType);;;public CellTopicNode(
        String            columnName,
        boolean         createForNoReconMatch, 
        FreebaseType     type
    ) {
        super(columnName);
        
        this.createForNoReconMatch = createForNoReconMatch;
        this.type = type;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\CellTopicNode;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {

        writer.object();
        writer.key("nodeType"); writer.value("cell-as-topic");
        writer.key("columnName"); writer.value(columnName);
        writer.key("createForNoReconMatch"); writer.value(createForNoReconMatch);
        if (createForNoReconMatch && type != null) {
            writer.key("type"); type.write(writer, options);
        }
        if (links != null) {
            writer.key("links"); writer.array();
            for (Link link : links) {
                link.write(writer, options);
            }
            writer.endArray();
        }
        
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\CellTopicNode;addLink(Link);;;public void addLink(Link link) {
        links.add(link);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\CellTopicNode;getLink(int);;;public Link getLink(int index) {
        return links.get(index);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\CellTopicNode;getLinkCount();;;public int getLinkCount() {
        return links.size();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\CellValueNode;CellValueNode(String,String,String);;;public CellValueNode(
        String    columnName,
        String     valueType, 
        String  lang
    ) {
        super(columnName);
        
        this.valueType = valueType;
        this.lang = lang;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\CellValueNode;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {

        writer.object();
        writer.key("nodeType"); writer.value("cell-as-value");
        writer.key("columnName"); writer.value(columnName);
        writer.key("valueType"); writer.value(valueType);
        writer.key("lang"); writer.value(lang);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\FreebaseProperty;FreebaseProperty(String,String);;;public FreebaseProperty(String id, String name) {
        super(id, name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\FreebaseTopic;FreebaseTopic(String,String);;;public FreebaseTopic(String id, String name) {
        this.id = id;
        this.name = name;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\FreebaseTopic;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("id"); writer.value(id);
        writer.key("name"); writer.value(name);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\FreebaseTopicNode;FreebaseTopicNode(FreebaseTopic);;;public FreebaseTopicNode(FreebaseTopic topic) {
        this.topic = topic;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\FreebaseTopicNode;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("nodeType"); writer.value("topic");
        writer.key("topic"); topic.write(writer, options);
        if (links != null) {
            writer.key("links"); writer.array();
            for (Link link : links) {
                link.write(writer, options);
            }
            writer.endArray();
        }
        
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\FreebaseTopicNode;addLink(Link);;;public void addLink(Link link) {
        links.add(link);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\FreebaseTopicNode;getLink(int);;;public Link getLink(int index) {
        return links.get(index);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\FreebaseTopicNode;getLinkCount();;;public int getLinkCount() {
        return links.size();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\FreebaseType;FreebaseType(String,String);;;public FreebaseType(String id, String name) {
        super(id, name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\FreebaseType;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
        throws JSONException {
    
        writer.object();
        writer.key("id"); writer.value(id);
        writer.key("name"); writer.value(name);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\FreebaseType;load(JSONObject);;;static public FreebaseType load(JSONObject obj) throws Exception {
        if (obj == null) {
            return null;
        }
        
        FreebaseType type = new FreebaseType(
            obj.getString("id"),
            obj.getString("name")
        );
        return type;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\Link;Link(FreebaseProperty,Node);;;public Link(FreebaseProperty property, Node target) {
        this.property = property;
        this.target = target;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\Link;getProperty();;;public FreebaseProperty getProperty() {
        return property;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\Link;getTarget();;;public Node getTarget() {
        return target;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\Link;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {

        writer.object();
        writer.key("property"); property.write(writer, options);
        if (target != null) {
            writer.key("target");
            target.write(writer, options);
        }
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\NodeWithLinks;addLink(Link);;;public void addLink(Link link);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\NodeWithLinks;getLinkCount();;;public int getLinkCount();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\NodeWithLinks;getLink(int);;;public Link getLink(int index);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\Protograph;getRootNodeCount();;;public int getRootNodeCount() {
        return _rootNodes.size();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\Protograph;getRootNode(int);;;public Node getRootNode(int index) {
        return _rootNodes.get(index);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\Protograph;reconstruct(JSONObject);;;static public Protograph reconstruct(JSONObject o) throws JSONException {
        Protograph g = new Protograph();
        
        JSONArray rootNodes = o.getJSONArray("rootNodes");
        int count = rootNodes.length();
        
        for (int i = 0; i < count; i++) {
            JSONObject o2 = rootNodes.getJSONObject(i);
            Node node = reconstructNode(o2);
            if (node != null) {
                g._rootNodes.add(node);
            }
        }
        
        return g;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\Protograph;reconstructNode(JSONObject);;;static protected Node reconstructNode(JSONObject o) throws JSONException {
        Node node = null;
        
        String nodeType = o.getString("nodeType");
        if (nodeType.startsWith("cell-as-")) {
            String columnName = o.getString("columnName");
            
            if ("cell-as-topic".equals(nodeType)) {
                if (o.has("type")) {
                    node = new CellTopicNode(
                        columnName,
                        o.getBoolean("createForNoReconMatch"),
                        reconstructType(o.getJSONObject("type"))
                    );
                }
            } else if ("cell-as-value".equals(nodeType)) {
                node = new CellValueNode(
                    columnName,
                    o.getString("valueType"),
                    o.getString("lang")
                );
            } else if ("cell-as-key".equals(nodeType)) {
                node = new CellKeyNode(
                    columnName,
                    reconstructTopic(o.getJSONObject("namespace"))
                );
            }
        } else if ("topic".equals(nodeType)) {
            node = new FreebaseTopicNode(reconstructTopic(o.getJSONObject("topic")));
        } else if ("value".equals(nodeType)) {
            node = new ValueNode(
                o.get("value"),
                o.getString("valueType"),
                o.getString("lang")
            );
        } else if ("anonymous".equals(nodeType)) {
            node = new AnonymousNode(reconstructType(o.getJSONObject("type")));
        }
        
        if (node != null && node instanceof NodeWithLinks && o.has("links")) {
            NodeWithLinks node2 = (NodeWithLinks) node;
            
            JSONArray links = o.getJSONArray("links");
            int linkCount = links.length();
            
            for (int j = 0; j < linkCount; j++) {
                JSONObject oLink = links.getJSONObject(j);
                
                node2.addLink(new Link(
                    reconstructProperty(oLink.getJSONObject("property")),
                    oLink.has("target") && !oLink.isNull("target") ? 
                        reconstructNode(oLink.getJSONObject("target")) : null
                ));
            }
        }
        
        return node;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\Protograph;reconstructProperty(JSONObject);;;static protected FreebaseProperty reconstructProperty(JSONObject o) throws JSONException {
        return new FreebaseProperty(
            o.getString("id"),
            o.getString("name")
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\Protograph;reconstructType(JSONObject);;;static protected FreebaseType reconstructType(JSONObject o) throws JSONException {
        return new FreebaseType(
            o.getString("id"),
            o.getString("name")
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\Protograph;reconstructTopic(JSONObject);;;static protected FreebaseTopic reconstructTopic(JSONObject o) throws JSONException {
        return new FreebaseTopic(
            o.getString("id"),
            o.getString("name")
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\Protograph;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options) throws JSONException {
        writer.object();
        writer.key("rootNodes"); writer.array();
        
        for (Node node : _rootNodes) {
            node.write(writer, options);
        }
        
        writer.endArray();
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\Protograph;save(Writer,Properties);;;public void save(Writer writer, Properties options) {
        JSONWriter jsonWriter = new JSONWriter(writer);
        try {
            write(jsonWriter, options);
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\Protograph;load(Project,String);;;static public Protograph load(Project project, String s) throws Exception {
        JSONObject obj = ParsingUtilities.evaluateJsonStringToObject(s);
        
        return reconstruct(obj);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\ValueNode;ValueNode(Object,String,String);;;public ValueNode(Object value, String valueType, String lang) {
        this.value = value;
        this.valueType = valueType;
        this.lang = lang;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\ValueNode;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        writer.key("nodeType"); writer.value("value");
        writer.key("value"); writer.value(value);
        writer.key("valueType"); writer.value(valueType);
        writer.key("lang"); writer.value(lang);
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;MqlwriteLikeTransposedNodeFactory(Writer);;;public MqlwriteLikeTransposedNodeFactory(Writer writer) {
    	this.writer = writer;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;getJSON();;;protected JSONArray getJSON() {
        return new JSONArray(rootObjects);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;getJSON();;;abstract public Object getJSON();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;getJSONObject();;;abstract public JSONObject getJSONObject();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;getJSON();;;public Object getJSON() {
            return getJSONObject();
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;AnonymousTransposedNode(JsonObjectTransposedNode,FreebaseProperty,AnonymousNode);;;protected AnonymousTransposedNode(
            JsonObjectTransposedNode parent,
            FreebaseProperty property,
            AnonymousNode node
        ) {
            this.parent = parent;
            this.property = property;
            this.node = node;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;getJSONObject();;;public JSONObject getJSONObject() {
            if (obj == null) {
                obj = new JSONObject();
                try {
                    obj.put(TYPE, this.node.type.id);
                    obj.put(ID, (String) null);
                    obj.put(CREATE, "unconditional");
                } catch (JSONException e) {
                    e.printStackTrace();
                }
                
                linkTransposedNodeJSON(obj, parent, property);
            }
            
            return obj;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;CellTopicTransposedNode(CellTopicNode,Cell);;;public CellTopicTransposedNode(CellTopicNode node, Cell cell) {
            this.node = node;
            this.cell = cell;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;getJSONObject();;;@Override
        public JSONObject getJSONObject() {
            if (obj == null) {
                obj = new JSONObject();
                try {
                    if (cell.recon != null && 
                        cell.recon.judgment == Recon.Judgment.Matched &&
                        cell.recon.match != null) {
                        obj.put(ID, cell.recon.match.topicID);
                    } else {
                        obj.put(ID, (String) null);
                        obj.put(NAME, cell.value.toString());
                        obj.put(TYPE, node.type.id);
                        obj.put(CREATE, "unless_exists");
                    }
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
            return obj;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;CellValueTransposedNode(CellValueNode,Cell);;;public CellValueTransposedNode(CellValueNode node, Cell cell) {
            this.node = node;
            this.cell = cell;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;getJSON();;;public Object getJSON() {
            if (obj == null) {
                obj = new JSONObject();
                try {
                	JSONUtilities.putField(obj, VALUE, cell.value);
                	
                    obj.put(TYPE, node.valueType);
                    if ("/type/text".equals(node.valueType)) {
                        obj.put(LANG, node.lang);
                    }
                    
                    obj.put(CONNECT, "insert");
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
            return obj;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;CellKeyTransposedNode(CellKeyNode,Cell);;;public CellKeyTransposedNode(CellKeyNode node, Cell cell) {
            this.node = node;
            this.cell = cell;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;getJSON();;;public Object getJSON() {
            if (obj == null) {
                obj = new JSONObject();
                try {
                    obj.put(VALUE, cell.value.toString());
                    
                    JSONObject nsObj = new JSONObject();
                    nsObj.put(ID, node.namespace.id);
                    
                    obj.put("namespace", nsObj);
                    obj.put(CONNECT, "insert");
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
            return obj;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;TopicTransposedNode(FreebaseTopicNode);;;public TopicTransposedNode(FreebaseTopicNode node) {
            this.node = node;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;getJSONObject();;;@Override
        public JSONObject getJSONObject() {
            if (obj == null) {
                obj = new JSONObject();
                try {
                    obj.put(ID, node.topic.id);
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
            return obj;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;ValueTransposedNode(ValueNode);;;public ValueTransposedNode(ValueNode node) {
            this.node = node;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;getJSON();;;public Object getJSON() {
            if (obj == null) {
                obj = new JSONObject();
                try {
                    obj.put(VALUE, node.value);
                    obj.put(TYPE, node.valueType);
                    if ("/type/text".equals(node.valueType)) {
                        obj.put(LANG, node.lang);
                    }
                    
                    obj.put(CONNECT, "insert");
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
            return obj;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;transposeAnonymousNode(TransposedNode,FreebaseProperty,AnonymousNode);;;public TransposedNode transposeAnonymousNode(
            TransposedNode parentNode,
            FreebaseProperty property, 
            AnonymousNode node) {
        
        return new AnonymousTransposedNode(
            parentNode instanceof JsonObjectTransposedNode ? (JsonObjectTransposedNode) parentNode : null, 
            property, 
            node
        );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;transposeCellNode(TransposedNode,FreebaseProperty,CellNode,Cell);;;public TransposedNode transposeCellNode(
            TransposedNode parentNode,
            FreebaseProperty property, 
            CellNode node, 
            Cell cell) {
        
        JsonTransposedNode tnode = null;
        if (node instanceof CellTopicNode) {
            tnode = new CellTopicTransposedNode((CellTopicNode) node, cell);
        } else if (node instanceof CellValueNode) {
            tnode = new CellValueTransposedNode((CellValueNode) node, cell);
        } else if (node instanceof CellKeyNode) {
            tnode = new CellKeyTransposedNode((CellKeyNode) node, cell);
        }
        
        if (tnode != null) {
            processTransposedNode(tnode, parentNode, property);
        }
        return tnode;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;transposeTopicNode(TransposedNode,FreebaseProperty,FreebaseTopicNode);;;public TransposedNode transposeTopicNode(
            TransposedNode parentNode,
            FreebaseProperty property, 
            FreebaseTopicNode node) {
        
        JsonTransposedNode tnode = new TopicTransposedNode(node);
        
        processTransposedNode(tnode, parentNode, property);
        
        return tnode;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;transposeValueNode(TransposedNode,FreebaseProperty,ValueNode);;;public TransposedNode transposeValueNode(
            TransposedNode parentNode,
            FreebaseProperty property, 
            ValueNode node) {
        
        JsonTransposedNode tnode = new ValueTransposedNode(node);
        
        processTransposedNode(tnode, parentNode, property);
        
        return tnode;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;processTransposedNode(JsonTransposedNode,TransposedNode,FreebaseProperty);;;protected void processTransposedNode(
        JsonTransposedNode         tnode, 
        TransposedNode             parentNode,
        FreebaseProperty         property 
        ) {
        
        if (!(tnode instanceof AnonymousTransposedNode)) {
            linkTransposedNodeJSON(tnode.getJSON(), parentNode, property);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\MqlwriteLikeTransposedNodeFactory;linkTransposedNodeJSON(Object,TransposedNode,FreebaseProperty);;;protected void linkTransposedNodeJSON(
        Object                obj,
        TransposedNode         parentNode,
        FreebaseProperty     property 
        ) {
        
        if (parentNode == null) {
            if (obj instanceof JSONObject) {
                rootObjects.add((JSONObject) obj);
            }
        } else if (parentNode instanceof JsonTransposedNode) {
            JSONObject parentObj = ((JsonObjectTransposedNode) parentNode).getJSONObject();
            
            try {
                JSONArray a = null;
                if (parentObj.has(property.id)) {
                    a = parentObj.getJSONArray(property.id);
                } else {
                    a = new JSONArray();
                    parentObj.put(property.id, a);
                }
                
                a.put(a.length(), obj);
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TransposedNodeFactory;transposeAnonymousNode(TransposedNode,FreebaseProperty,AnonymousNode);;;public TransposedNode transposeAnonymousNode(
        TransposedNode parentNode, 
        FreebaseProperty property, 
        AnonymousNode node
    );
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TransposedNodeFactory;transposeCellNode(TransposedNode,FreebaseProperty,CellNode,Cell);;;public TransposedNode transposeCellNode(
        TransposedNode parentNode, 
        FreebaseProperty property, 
        CellNode node, 
        Cell cell
    );
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TransposedNodeFactory;transposeValueNode(TransposedNode,FreebaseProperty,ValueNode);;;public TransposedNode transposeValueNode(
        TransposedNode parentNode, 
        FreebaseProperty property, 
        ValueNode node
    );
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TransposedNodeFactory;transposeTopicNode(TransposedNode,FreebaseProperty,FreebaseTopicNode);;;public TransposedNode transposeTopicNode(
        TransposedNode parentNode, 
        FreebaseProperty property, 
        FreebaseTopicNode node
    );
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TransposedNodeFactory;flush();;;public void flush() throws IOException;
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\Transposer;transpose(Project,FilteredRows,Protograph,Node,TransposedNodeFactory);;;static public void transpose(
        Project                 project,
        FilteredRows			filteredRows,
        Protograph              protograph,
        Node                    rootNode,
        TransposedNodeFactory   nodeFactory
    ) {
        transpose(project, filteredRows, protograph, rootNode, nodeFactory, 20);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\Transposer;descend(Project,Protograph,TransposedNodeFactory,Row,Node,Context);;;static protected void descend(
        Project project,
        Protograph protograph, 
        TransposedNodeFactory nodeFactory,
        Row row,
        Node node,
        Context context
    ) {
        TransposedNode tnode = null;
        
        TransposedNode parentNode = context.parent == null ? null : context.parent.transposedNode;
        FreebaseProperty property = context.parent == null ? null : context.link.property;
        
        if (node instanceof CellNode) {
            CellNode node2 = (CellNode) node;
            Column column = project.columnModel.getColumnByName(node2.columnName);
            Cell cell = row.getCell(column.getCellIndex());
            if (cell != null && ExpressionUtils.isNonBlankData(cell.value)) {
                if (node2 instanceof CellTopicNode && 
                    !((CellTopicNode) node2).createForNoReconMatch && 
                    (cell.recon == null || cell.recon.judgment == Judgment.None)) {
                        return;
                }
                
                context.count++;
                if (context.limit > 0 && context.count > context.limit) {
                    return;
                }
                
                tnode = nodeFactory.transposeCellNode(
                    parentNode,
                    property,
                    node2, 
                    cell
                );
            }
        } else {
            if (node instanceof AnonymousNode) {
                tnode = nodeFactory.transposeAnonymousNode(
                    parentNode,
                    property,
                    (AnonymousNode) node
                );
            } else if (node instanceof FreebaseTopicNode) {
                tnode = nodeFactory.transposeTopicNode(
                    parentNode,
                    property,
                    (FreebaseTopicNode) node
                );
            } else if (node instanceof ValueNode) {
                tnode = nodeFactory.transposeValueNode(
                    parentNode,
                    property,
                    (ValueNode) node
                );
            }
        }
        
        if (tnode != null) {
            context.transposedNode = tnode;
            context.nullifySubContextNodes();
        } /*
             else, previous rows might have set the context transposed node already,
             and we simply inherit that transposed node.
        */
        
        if (node instanceof NodeWithLinks && context.transposedNode != null) {
            NodeWithLinks node2 = (NodeWithLinks) node;
            
            int linkCount = node2.getLinkCount();
            
            for (int i = 0; i < linkCount; i++) {
                descend(
                    project, 
                    protograph, 
                    nodeFactory, 
                    row, 
                    node2.getLink(i).getTarget(), 
                    context.subContexts.get(i)
                );
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\Transposer;Context(Node,Context,Link,int);;;Context(Node node, Context parent, Link link, int limit) {
            this.parent = parent;
            this.link = link;
            this.limit = limit;
            
            if (node instanceof NodeWithLinks) {
                NodeWithLinks node2 = (NodeWithLinks) node;
                
                int subContextCount = node2.getLinkCount();
                
                subContexts = new LinkedList<Context>();
                for (int i = 0; i < subContextCount; i++) {
                    Link link2 = node2.getLink(i);
                    subContexts.add(
                        new Context(link2.getTarget(), this, link2, -1));
                }
            }
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\Transposer;nullifySubContextNodes();;;public void nullifySubContextNodes() {
            if (subContexts != null) {
                for (Context context : subContexts) {
                    context.transposedNode = null;
                    context.nullifySubContextNodes();
                }
            }
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;TripleLoaderTransposedNodeFactory(Writer);;;public TripleLoaderTransposedNodeFactory(Writer writer) {
        this.writer = writer;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;writeLine(String);;;protected void writeLine(String line) {
        try {
            if (start) {
                start = false;
            } else {
                writer.write('\n');
            }
            writer.write(line);
        } catch (IOException e) {
            // ignore
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;writeRecon(StringBuffer,Cell);;;protected void writeRecon(StringBuffer sb, Cell cell) {
        Recon recon = cell.recon;
        if (serializedRecons.contains(recon.id)) {
            sb.append(Long.toString(recon.id));
        } else {
            serializedRecons.add(recon.id);
            
            String s = cell.value instanceof String ? (String) cell.value : cell.value.toString();
                    
            sb.append("{ ");
            sb.append("\"id\" : "); sb.append(Long.toString(recon.id));
            sb.append(", \"history_entry\" : "); sb.append(Long.toString(recon.judgmentHistoryEntry));
            sb.append(", \"text\" : "); sb.append(JSONObject.quote(s));
            sb.append(", \"service\" : "); sb.append(JSONObject.quote(recon.service));
            sb.append(", \"action\" : "); sb.append(JSONObject.quote(recon.judgmentAction));
            sb.append(", \"batch\" : "); sb.append(Integer.toString(recon.judgmentBatchSize));
            sb.append(", \"matchRank\" : "); sb.append(Integer.toString(recon.matchRank));
            sb.append(" }");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;writeLine(String,String,Object,Cell,Cell);;;protected void writeLine(String subject, String predicate, Object object, Cell subjectCell, Cell objectCell) {
        if (subject != null && object != null) {
            String s = object instanceof String ? 
                    JSONObject.quote((String) object) : object.toString();
                    
            StringBuffer sb = new StringBuffer();
            sb.append("{ \"s\" : \""); sb.append(subject); sb.append('"');
            sb.append(", \"p\" : \""); sb.append(predicate); sb.append('"');
            sb.append(", \"o\" : "); sb.append(s);
            if (subjectCell != null || objectCell != null) {
                sb.append(", \"meta\" : { ");
                
                if (subjectCell != null) {
                    sb.append("\"srecon\" : ");
                    writeRecon(sb, subjectCell);
                }
                if (objectCell != null) {
                    if (subjectCell != null) {
                        sb.append(", ");
                    }
                    sb.append("\"orecon\" : ");
                    writeRecon(sb, objectCell);
                }
                
                sb.append(" }");
            }
            sb.append(" }");
                    
            writeLine(sb.toString());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;writeLine(String,String,Object,String,Cell);;;protected void writeLine(String subject, String predicate, Object object, String lang, Cell subjectCell) {
        if (subject != null && object != null) {
            String s = object instanceof String ? 
                    JSONObject.quote((String) object) : object.toString();
                    
            StringBuffer sb = new StringBuffer();
            sb.append("{ \"s\" : \""); sb.append(subject); sb.append('"');
            sb.append(", \"p\" : \""); sb.append(predicate); sb.append('"');
            sb.append(", \"o\" : "); sb.append(s);
            sb.append(", \"lang\" : "); sb.append(lang);
                    
            if (subjectCell != null) {
                sb.append(", \"meta\" : { ");
                sb.append("\"srecon\" : ");
                writeRecon(sb, subjectCell);
                sb.append(" }");
            }
            sb.append(" }");
                    
            writeLine(sb.toString());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;write(String,String,Cell);;;public Object write(String subject, String predicate, Cell subjectCell);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;writeChildren(String,Cell);;;protected void writeChildren(String subject, Cell subjectCell) {
            for (int i = 0; i < children.size(); i++) {
                WritingTransposedNode child = children.get(i);
                String predicate = properties.get(i).id;
                
                child.write(subject, predicate, subjectCell);
            }
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;write(String,String,Cell);;;public Object write(String subject, String predicate, Cell subjectCell) {
            if (children.size() == 0 || subject == null) {
                return null;
            }
            
            StringBuffer sb = new StringBuffer();
            sb.append("{ ");
            
            boolean first = true;
            for (int i = 0; i < children.size(); i++) {
                Object c = children.get(i).write(null, null, null);
                if (c != null) {
                    if (first) {
                        first = false;
                    } else {
                        sb.append(", ");
                    }
                    sb.append("\"" + properties.get(i).id + "\": ");
                    sb.append(c instanceof String ? JSONObject.quote((String) c) : c.toString());
                }
            }
            sb.append(" }");
            
            writeLine(subject, predicate, sb, subjectCell, null);
            
            return null;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;CellTopicTransposedNode(CellTopicNode,Cell);;;public CellTopicTransposedNode(CellTopicNode node, Cell cell) {
            this.node = node;
            this.cell = cell;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;write(String,String,Cell);;;public Object write(String subject, String predicate, Cell subjectCell) {
            String id = null;
            Cell objectCell = null;
            
            if (cell.recon != null &&
                cell.recon.judgment == Recon.Judgment.Matched &&
                cell.recon.match != null) {
                
                objectCell = cell;
                id = cell.recon.match.topicID;
            } else if (node.createForNoReconMatch || 
                    (cell.recon != null && cell.recon.judgment == Judgment.New)) {
                if (cell.recon != null && newTopicVars.containsKey(cell.recon.id)) {
                    id = newTopicVars.get(cell.recon.id);
                } else {
                    long var = 0;
                    if (varPool.containsKey(node.columnName)) {
                        var = varPool.get(node.columnName);
                    }
                    varPool.put(node.columnName, var + 1);
                    
                    id = "$" + node.columnName.replaceAll("\\W+", "_") + "_" + var;
                    
                    writeLine(id, "type", node.type.id, (Cell) null, (Cell) null);
                    writeLine(id, "name", cell.value, (Cell) null, (Cell) null);
                    
                    if (cell.recon != null) {
                        newTopicVars.put(cell.recon.id, id);
                    }
                }
            } else {
                return null;
            }
            
            if (subject != null) {
                writeLine(subject, predicate, id, subjectCell, objectCell);
            }
            
            writeChildren(id, objectCell);
            
            return id;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;CellValueTransposedNode(CellValueNode,Cell);;;public CellValueTransposedNode(CellValueNode node, Cell cell) {
            this.node = node;
            this.cell = cell;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;write(String,String,Cell);;;public Object write(String subject, String predicate, Cell subjectCell) {
            if (subject != null) {
                if ("/type/text".equals(node.lang)) {
                    writeLine(subject, predicate, cell.value, node.lang, subjectCell);
                } else {
                    writeLine(subject, predicate, cell.value, subjectCell, null);
                }
            }
            
            return cell.value;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;CellKeyTransposedNode(CellKeyNode,Cell);;;public CellKeyTransposedNode(CellKeyNode node, Cell cell) {
            this.node = node;
            this.cell = cell;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;write(String,String,Cell);;;public Object write(String subject, String predicate, Cell subjectCell) {
            writeLine(subject, "key", node.namespace.id + "/" + cell.value, subjectCell, null);
            
            return null;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;TopicTransposedNode(FreebaseTopicNode);;;public TopicTransposedNode(FreebaseTopicNode node) {
            this.node = node;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;write(String,String,Cell);;;public Object write(String subject, String predicate, Cell subjectCell) {
            writeLine(subject, predicate, node.topic.id, subjectCell, null);
            writeChildren(node.topic.id, null);
            
            return node.topic.id;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;ValueTransposedNode(ValueNode);;;public ValueTransposedNode(ValueNode node) {
            this.node = node;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;write(String,String,Cell);;;public Object write(String subject, String predicate, Cell subjectCell) {
            if ("/type/text".equals(node.lang)) {
                writeLine(subject, predicate, node.value, node.lang, subjectCell);
            } else {
                writeLine(subject, predicate, node.value, subjectCell, null);
            }
            
            return node.value;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;transposeAnonymousNode(TransposedNode,FreebaseProperty,AnonymousNode);;;public TransposedNode transposeAnonymousNode(
            TransposedNode parentNode,
            FreebaseProperty property, 
            AnonymousNode node) {
        
        WritingTransposedNode tnode = new AnonymousTransposedNode();
        
        processTransposedNode(tnode, parentNode, property);
        
        return tnode;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;transposeCellNode(TransposedNode,FreebaseProperty,CellNode,Cell);;;public TransposedNode transposeCellNode(
            TransposedNode parentNode,
            FreebaseProperty property, 
            CellNode node, 
            Cell cell) {
        
        WritingTransposedNode tnode = null;
        if (node instanceof CellTopicNode) {
            tnode = new CellTopicTransposedNode((CellTopicNode) node, cell);
        } else if (node instanceof CellValueNode) {
            tnode = new CellValueTransposedNode((CellValueNode) node, cell);
        } else if (node instanceof CellKeyNode) {
            tnode = new CellKeyTransposedNode((CellKeyNode) node, cell);
        }
        
        if (tnode != null) {
            processTransposedNode(tnode, parentNode, property);
        }
        return tnode;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;transposeTopicNode(TransposedNode,FreebaseProperty,FreebaseTopicNode);;;public TransposedNode transposeTopicNode(
            TransposedNode parentNode,
            FreebaseProperty property, 
            FreebaseTopicNode node) {
        
        WritingTransposedNode tnode = new TopicTransposedNode(node);
        
        processTransposedNode(tnode, parentNode, property);
        
        return tnode;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;transposeValueNode(TransposedNode,FreebaseProperty,ValueNode);;;public TransposedNode transposeValueNode(
            TransposedNode parentNode,
            FreebaseProperty property, 
            ValueNode node) {
        
        WritingTransposedNode tnode = new ValueTransposedNode(node);
        
        processTransposedNode(tnode, parentNode, property);
        
        return tnode;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;processTransposedNode(WritingTransposedNode,TransposedNode,FreebaseProperty);;;protected void processTransposedNode(
        WritingTransposedNode  tnode, 
        TransposedNode         parentNode,
        FreebaseProperty       property 
    ) {
        if (parentNode != null) {
            if (parentNode instanceof TransposedNodeWithChildren) {
                TransposedNodeWithChildren parentNode2 = (TransposedNodeWithChildren) parentNode;
                parentNode2.children.add(tnode);
                parentNode2.properties.add(property);
            }
        } else {
            addRootNode(tnode);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\protograph\transpose\TripleLoaderTransposedNodeFactory;addRootNode(WritingTransposedNode);;;protected void addRootNode(WritingTransposedNode tnode) {
        if (lastRootNode != null) {
            lastRootNode.write(null, null, null);
        }
        lastRootNode = tnode;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\BaseSorter;ComparatorWrapper(int);;;public ComparatorWrapper(int criterionIndex) {
			this.criterionIndex = criterionIndex;
			this.multiplier = _criteria[criterionIndex].reverse ? -1 : 1;
		}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\BaseSorter;getKey(Project,Object,int);;;public Object getKey(Project project, Object o, int index) {
			while (index >= _keys.size()) {
				_keys.add(null);
			}
			
			Object[] keys = _keys.get(index);
			if (keys == null) {
				keys = makeKeys(project, o, index);
				_keys.set(index, keys);
			}
			return keys[criterionIndex];
		}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\BaseSorter;compare(Project,Object,int,Object,int);;;public int compare(Project project, Object o1, int i1, Object o2, int i2) {
			Criterion c = _criteria[criterionIndex];
			Object key1 = getKey(project, o1, i1);
			Object key2 = getKey(project, o2, i2);
			
			if (key1 == null) {
				if (key2 == null) {
					return 0;
				} else if (key2 instanceof EvalError) {
					return c.blankPosition - c.errorPosition;
				} else {
					return c.blankPosition;
				}
			} else if (key1 instanceof EvalError) {
				if (key2 == null) {
					return c.errorPosition - c.blankPosition;
				} else if (key2 instanceof EvalError) {
					return 0;
				} else {
					return c.errorPosition;
				}
			} else {
				if (key2 == null) {
					return -c.blankPosition;
				} else if (key2 instanceof EvalError) {
					return -c.errorPosition;
				} else {
					return _keyMakers[criterionIndex].compareKeys(key1, key2) * multiplier;
				}
			}
		}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\BaseSorter;initializeFromJSON(Project,JSONObject);;;public void initializeFromJSON(Project project, JSONObject obj) throws JSONException {
		if (obj.has("criteria") && !obj.isNull("criteria")) {
			JSONArray a = obj.getJSONArray("criteria");
			int count = a.length();
			
			_criteria = new Criterion[count];
			_keyMakers = new KeyMaker[count];
			_comparatorWrappers = new ComparatorWrapper[count];
			
			for (int i = 0; i < count; i++) {
				JSONObject obj2 = a.getJSONObject(i);
				
				_criteria[i] = createCriterionFromJSON(project, obj2);
				_keyMakers[i] = _criteria[i].createKeyMaker();
				_comparatorWrappers[i] = new ComparatorWrapper(i);
			}
		} else {
			_criteria = new Criterion[0];
			_keyMakers = new KeyMaker[0];
			_comparatorWrappers = new ComparatorWrapper[0];
		}
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\BaseSorter;hasCriteria();;;public boolean hasCriteria() {
		return _criteria != null && _criteria.length > 0;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\BaseSorter;createCriterionFromJSON(Project,JSONObject);;;protected Criterion createCriterionFromJSON(Project project, JSONObject obj) throws JSONException {
		String valueType = "string";
		if (obj.has("valueType") && !obj.isNull("valueType")) {
			valueType = obj.getString("valueType");
		}
		
		Criterion c = null;
		if ("boolean".equals(valueType)) {
			c = new BooleanCriterion();
		} else if ("date".equals(valueType)) {
			c = new DateCriterion();
		} else if ("number".equals(valueType)) {
			c = new NumberCriterion();
		} else {
			c = new StringCriterion();
		}
		
		c.initializeFromJSON(project, obj);
		return c;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\BaseSorter;makeKey(Project,KeyMaker,Criterion,Object,int);;;abstract protected Object makeKey(
			Project project, KeyMaker keyMaker, Criterion c, Object o, int index);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\BaseSorter;makeKeys(Project,Object,int);;;protected Object[] makeKeys(Project project, Object o, int index) {
		Object[] keys = new Object[_keyMakers.length];
		for (int i = 0; i < keys.length; i++) {
			keys[i] = makeKey(project, _keyMakers[i], _criteria[i], o, index);
		}
		return keys;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\BaseSorter;compare(Project,Object,int,Object,int);;;protected int compare(Project project, Object o1, int i1, Object o2, int i2) {
		int c = 0;
		for (int i = 0; c == 0 && i < _comparatorWrappers.length; i++) {
			c = _comparatorWrappers[i].compare(project, o1, i1, o2, i2);
		}
		return c;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\BooleanCriterion;createKeyMaker();;;@Override
	public KeyMaker createKeyMaker() {
		return new KeyMaker() {
			@Override
			protected Object makeKey(Object value) {
				if (ExpressionUtils.isNonBlankData(value)) {
					if (value instanceof Boolean) {
						return value;
					} else if (value instanceof String) {
						return Boolean.parseBoolean((String) value);
					} else {
						return s_error;
					}
				}
				return value;
			}
			
			@Override
			public int compareKeys(Object key1, Object key2) {
				return ((Boolean) key1).compareTo((Boolean) key2);
			}
		};
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\Criterion;initializeFromJSON(Project,JSONObject);;;public void initializeFromJSON(Project project, JSONObject obj) throws JSONException {
		if (obj.has("column") && !obj.isNull("column")) {
			columnName = obj.getString("column");
			
			Column column = project.columnModel.getColumnByName(columnName);
			cellIndex = column != null ? column.getCellIndex() : -1;
		}
		
		if (obj.has("blankPosition") && !obj.isNull("blankPosition")) {
			blankPosition = obj.getInt("blankPosition");
		}
		if (obj.has("errorPosition") && !obj.isNull("errorPosition")) {
			errorPosition = obj.getInt("errorPosition");
		}
		
		if (obj.has("reverse") && !obj.isNull("reverse")) {
			reverse = obj.getBoolean("reverse");
		}
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\Criterion;makeKey(Project,Record);;;public Object makeKey(Project project, Record record) {
			Object error = null;
			Object finalKey = null;
			
			for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {
				Object key = makeKey(project, project.rows.get(r), r);
				if (ExpressionUtils.isError(key)) {
					error = key;
				} else if (ExpressionUtils.isNonBlankData(key)) {
					if (finalKey == null) {
						finalKey = key;
					} else {
						int c = compareKeys(finalKey, key);
						if (reverse) {
							if (c < 0) { // key > finalKey
								finalKey = key;
							}
						} else {
							if (c > 0) { // key < finalKey
								finalKey = key;
							}
						}
					}
				}
			}
			
			if (finalKey != null) {
				return finalKey;
			} else if (error != null) {
				return error;
			} else {
				return null;
			}
		}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\Criterion;makeKey(Project,Row,int);;;public Object makeKey(Project project, Row row, int rowIndex) {
			if (cellIndex < 0) {
				return null;
			} else {
				Object value = row.getCellValue(cellIndex);
				return makeKey(value);
			}
		}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\Criterion;compareKeys(Object,Object);;;abstract public int compareKeys(Object key1, Object key2);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\Criterion;makeKey(Object);;;abstract protected Object makeKey(Object value);
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\Criterion;createKeyMaker();;;abstract public KeyMaker createKeyMaker();
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\DateCriterion;createKeyMaker();;;@Override
	public KeyMaker createKeyMaker() {
		return new KeyMaker() {
			@Override
			protected Object makeKey(Object value) {
				if (ExpressionUtils.isNonBlankData(value)) {
					if (value instanceof Date) {
						return value;
					} else if (value instanceof Calendar) {
						return ((Calendar) value).getTime();
					} else {
						return s_error;
					}
				}
				return value;
			}
			
			@Override
			public int compareKeys(Object key1, Object key2) {
				return ((Date) key1).compareTo((Date) key2);
			}
		};
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\NumberCriterion;createKeyMaker();;;@Override
	public KeyMaker createKeyMaker() {
		return new KeyMaker() {
			@Override
			protected Object makeKey(Object value) {
				if (ExpressionUtils.isNonBlankData(value)) {
					if (value instanceof Number) {
						return value;
					} else if (value instanceof Boolean) {
						return ((Boolean) value).booleanValue() ? 1 : 0;
					} else if (value instanceof Date) {
						return ((Date) value).getTime();
					} else if (value instanceof Calendar) {
						return ((Calendar) value).getTime().getTime();
					} else if (value instanceof String) {
						try {
							double d = Double.parseDouble((String) value);
							if (!Double.isNaN(d)) {
								return d;
							}
						} catch (NumberFormatException e) {
							// fall through
						}
					}
					return s_error;
				}
				return value;
			}
			
			@Override
			public int compareKeys(Object key1, Object key2) {
				double d1 = ((Number) key1).doubleValue();
				double d2 = ((Number) key2).doubleValue();
				return d1 < d2 ? -1 : (d1 > d2 ? 1 : 0);
			}
		};
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\SortingRecordVisitor;SortingRecordVisitor(RecordVisitor);;;public SortingRecordVisitor(RecordVisitor visitor) {
		_visitor = visitor;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\SortingRowVisitor;IndexedRow(int,Row);;;IndexedRow(int index, Row row) {
			this.index = index;
			this.row = row;
		}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\SortingRowVisitor;SortingRowVisitor(RowVisitor);;;public SortingRowVisitor(RowVisitor visitor) {
		_visitor = visitor;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\StringCriterion;initializeFromJSON(Project,JSONObject);;;@Override
	public void initializeFromJSON(Project project, JSONObject obj) throws JSONException {
		super.initializeFromJSON(project, obj);
		
		if (obj.has("caseSensitive") && !obj.isNull("caseSensitive")) {
			caseSensitive = obj.getBoolean("caseSensitive");
		}
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\sorting\StringCriterion;createKeyMaker();;;@Override
	public KeyMaker createKeyMaker() {
		return new KeyMaker() {
			@Override
			protected Object makeKey(Object value) {
				return (ExpressionUtils.isNonBlankData(value) && !(value instanceof String)) ?
						value.toString() : value;
			}
			
			@Override
			public int compareKeys(Object key1, Object key2) {
				if (StringCriterion.this.caseSensitive) {
					return ((String) key1).compareTo((String) key2);
				} else {
					return ((String) key1).compareToIgnoreCase((String) key2);
				}
			}
		};
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\templating\DynamicFragment;DynamicFragment(Evaluable);;;public DynamicFragment(Evaluable eval) {
		this.eval = eval;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\templating\Parser;parse(String);;;static public Template parse(String s) throws ParsingException {
		List<Fragment> fragments = new ArrayList<Fragment>();
		
		int start = 0, current = 0;
		while (current < s.length() - 1) {
			char c = s.charAt(current);
			if (c == '\\') {
				current += 2;
				continue;
			}
			
			char c2 = s.charAt(current + 1);
			if (c == '$' && c2 == '{') {
				int closeBrace = s.indexOf('}', current + 2);
				if (closeBrace > current + 1) {
					String columnName = s.substring(current + 2, closeBrace);
					
					if (current > start) {
						fragments.add(new StaticFragment(s.substring(start, current)));
					}
					start = current = closeBrace + 1;
					
					fragments.add(
						new DynamicFragment(
							new FieldAccessorExpr(
								new FieldAccessorExpr(
									new VariableExpr("cells"), 
									columnName), 
								"value")));
					
					continue;
				}
			} else if (c == '{' && c2 == '{') {
				int closeBrace = s.indexOf('}', current + 2);
				if (closeBrace > current + 1 && closeBrace < s.length() - 1 && s.charAt(closeBrace + 1) == '}') {
					String expression = s.substring(current + 2, closeBrace);
					
					if (current > start) {
						fragments.add(new StaticFragment(s.substring(start, current)));
					}
					start = current = closeBrace + 2;
					
					fragments.add(
						new DynamicFragment(
							MetaParser.parse(expression)));

					continue;
				}
			}
			
			current++;
		}
		
		if (start < s.length()) {
			fragments.add(new StaticFragment(s.substring(start)));
		}
		
		return new Template(fragments);
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\templating\StaticFragment;StaticFragment(String);;;public StaticFragment(String text) {
		this.text = text;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\templating\Template;Template(List<Fragment>);;;public Template(List<Fragment> fragments) {
		_fragments = fragments;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\templating\Template;setPrefix(String);;;public void setPrefix(String prefix) {
		_prefix = prefix;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\templating\Template;setSuffix(String);;;public void setSuffix(String suffix) {
		_suffix = suffix;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\templating\Template;setSeparator(String);;;public void setSeparator(String separator) {
		_separator = separator;
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\templating\Template;getRowVisitor(Writer,int);;;public RowVisitor getRowVisitor(Writer writer, int limit) {
		return get(writer, limit);
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\templating\Template;getRecordVisitor(Writer,int);;;public RecordVisitor getRecordVisitor(Writer writer, int limit) {
		return get(writer, limit);
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\templating\Template;get(Writer,int);;;protected RowWritingVisitor get(Writer writer, int limit) {
		return new RowWritingVisitor(writer, limit);
	}
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\templating\Template;RowWritingVisitor(Writer,int);;;public RowWritingVisitor(Writer writer, int limit) {
            this.limit = limit;
            this.writer = writer;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\templating\Template;visit(Project,int,Row);;;public boolean visit(Project project, int rowIndex, Row row) {
            if (limit <= 0 || total < limit) {
                internalVisit(project, rowIndex, row);
            }
        	total++;
        	
            return limit > 0 && total >= limit;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\templating\Template;writeValue(Object);;;protected void writeValue(Object v) throws IOException {
        	if (v == null) {
        		writer.write("null");
        	} else if (ExpressionUtils.isError(v)) {
        		writer.write("null");
    			//writer.write("[Error: " + ((EvalError) v).message);
        	} else if (v instanceof String) {
        		writer.write((String) v);
        	} else {
        		writer.write(v.toString());
        	}
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\templating\Template;internalVisit(Project,int,Row);;;public boolean internalVisit(Project project, int rowIndex, Row row) {
        	try {
	            if (total > 0 && _separator != null) {
	            	writer.write(_separator);
	            }
	            
        		ExpressionUtils.bind(bindings, row, rowIndex, null, null);
	            for (Fragment f : _fragments) {
	            	if (f instanceof StaticFragment) {
	            		writer.write(((StaticFragment) f).text);
	            	} else {
	            		DynamicFragment df = (DynamicFragment) f;
	            		Object value = df.eval.evaluate(bindings);
	            		
	            		if (value != null && ExpressionUtils.isArrayOrCollection(value)) {
		            		if (ExpressionUtils.isArray(value)) {
		            			Object[] a = (Object[]) value;
		            			for (Object v : a) {
		            				writeValue(v);
		            			}
		            		} else {
		            			Collection<Object> a = ExpressionUtils.toObjectCollection(value);
		            			for (Object v : a) {
		            				writeValue(v);
		            			}
		            		}
	            			continue;
	            		}
	            		
	            		writeValue(value);
	            	}
	            }
        	} catch (IOException e) {
        		// ignore
        	}
            return false;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\templating\Template;internalVisit(Project,Record);;;protected boolean internalVisit(Project project, Record record) {
            bindings.put("recordIndex", record.recordIndex);
            
        	for (int r = record.fromRowIndex; r < record.toRowIndex; r++) {
            	Row row = project.rows.get(r);
            	
                bindings.put("rowIndex", r);
                
                internalVisit(project, r, row);
                
                bindings.remove("recordIndex");
        	}
        	return false;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\CookiesUtilities;getCookie(HttpServletRequest,String);;;public static Cookie getCookie(HttpServletRequest request, String name) {
        if (name == null) throw new RuntimeException("cookie name cannot be null");
        Cookie cookie = null;
        Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            for (Cookie c : cookies) {
                if (name.equals(c.getName())) {
                    cookie = c;
                }
            }
        }
        return cookie;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\CookiesUtilities;setCookie(HttpServletRequest,HttpServletResponse,String,String,int);;;public static void setCookie(HttpServletRequest request, HttpServletResponse response, String name, String value, int max_age) {
        Cookie c = new Cookie(name, value);
        c.setDomain(getDomain(request));
        c.setPath(PATH);
        c.setMaxAge(max_age);
        response.addCookie(c);            
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\CookiesUtilities;deleteCookie(HttpServletRequest,HttpServletResponse,String);;;public static void deleteCookie(HttpServletRequest request, HttpServletResponse response, String name) {
        Cookie c = new Cookie(name, "");
        c.setDomain(getDomain(request));
        c.setPath(PATH);
        c.setMaxAge(0);
        response.addCookie(c);            
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\CookiesUtilities;getDomain(HttpServletRequest);;;public static String getDomain(HttpServletRequest request) {
        String host = request.getHeader("Host");
        if (host == null) return DOMAIN;
        int index = host.indexOf(':');
        return (index > -1) ? host.substring(0,index) : host ;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseDataExtensionJob;DataExtension(Object[][]);;;public DataExtension(Object[][] data) {
            this.data = data;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseDataExtensionJob;ColumnInfo(List<String>,List<String>,FreebaseType);;;protected ColumnInfo(List<String> names, List<String> path, FreebaseType expectedType) {
            this.names = names;
            this.path = path;
            this.expectedType = expectedType;
        }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseDataExtensionJob;FreebaseDataExtensionJob(JSONObject);;;public FreebaseDataExtensionJob(JSONObject obj) throws JSONException {
        this.extension = obj;
        this.columnCount = (obj.has("properties") && !obj.isNull("properties")) ?
                countColumns(obj.getJSONArray("properties"), columns, new ArrayList<String>(), new ArrayList<String>()) : 0;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseDataExtensionJob;extend(Set<String>,Map<String,ReconCandidate>);;;public Map<String, FreebaseDataExtensionJob.DataExtension> extend(
        Set<String> guids,
        Map<String, ReconCandidate> reconCandidateMap
    ) throws Exception {
        StringWriter writer = new StringWriter();
        formulateQuery(guids, extension, writer);
        
        String query = writer.toString();
        InputStream is = doMqlRead(query);
        try {
            String s = ParsingUtilities.inputStreamToString(is);
            JSONObject o = ParsingUtilities.evaluateJsonStringToObject(s);
            
            Map<String, FreebaseDataExtensionJob.DataExtension> map = new HashMap<String, FreebaseDataExtensionJob.DataExtension>();
            if (o.has("result")) {
                JSONArray a = o.getJSONArray("result");
                int l = a.length();
                
                for (int i = 0; i < l; i++) {
                    JSONObject o2 = a.getJSONObject(i);
                    String guid = o2.getString("guid");
                    FreebaseDataExtensionJob.DataExtension ext = collectResult(o2, reconCandidateMap);
                    
                    if (ext != null) {
                        map.put(guid, ext);
                    }
                }
            }
            
            return map;
        } finally {
            is.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseDataExtensionJob;collectResult(JSONObject,Map<String,ReconCandidate>);;;protected FreebaseDataExtensionJob.DataExtension collectResult(
        JSONObject obj,
        Map<String, ReconCandidate> reconCandidateMap
    ) throws JSONException {
        List<Object[]> rows = new ArrayList<Object[]>();
        
        collectResult(rows, extension.getJSONArray("properties"), obj, 0, 0, reconCandidateMap);
        
        Object[][] data = new Object[rows.size()][columnCount];
        rows.toArray(data);
        
        return new DataExtension(data);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseDataExtensionJob;storeCell(List<Object[]>,int,int,Object,Map<String,ReconCandidate>);;;protected void storeCell(
        List<Object[]>  rows, 
        int row,
        int col,
        Object value,
        Map<String, ReconCandidate> reconCandidateMap
    ) {
        while (row >= rows.size()) {
            rows.add(new Object[columnCount]);
        }
        rows.get(row)[col] = value;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseDataExtensionJob;storeCell(List<Object[]>,int,int,JSONObject,Map<String,ReconCandidate>);;;protected void storeCell(
        List<Object[]>  rows, 
        int row,
        int col,
        JSONObject obj,
        Map<String, ReconCandidate> reconCandidateMap
    ) throws JSONException {
        String guid = obj.getString("guid");
        ReconCandidate rc;
        if (reconCandidateMap.containsKey(guid)) {
            rc = reconCandidateMap.get(guid);
        } else {
            rc = new ReconCandidate(
                    obj.getString("id"),
                    obj.getString("guid"),
                    obj.getString("name"),
                    JSONUtilities.getStringArray(obj, "type"),
                    100
                );
            
            reconCandidateMap.put(guid, rc);
        }
        
        storeCell(rows, row, col, rc, reconCandidateMap);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseDataExtensionJob;collectResult(List<Object[]>,JSONObject,JSONObject,int,int,Map<String,ReconCandidate>);;;protected int[] collectResult(
        List<Object[]>  rows, 
        JSONObject      extNode, 
        JSONObject      resultNode, 
        int             startRowIndex,
        int             startColumnIndex,
        Map<String, ReconCandidate> reconCandidateMap
    ) throws JSONException {
        String propertyID = extNode.getString("id");
        String expectedTypeID = extNode.getJSONObject("expected").getString("id");
        
        JSONArray a = resultNode != null && resultNode.has(propertyID) && !resultNode.isNull(propertyID) ?
            resultNode.getJSONArray(propertyID) : null;
            
        if (expectedTypeID.startsWith("/type/")) {
            if (a != null) {
                int l = a.length();
                for (int r = 0; r < l; r++) {
                    Object o = a.isNull(r) ? null : a.get(r);
                    if (o instanceof Serializable) {
                        storeCell(rows, startRowIndex++, startColumnIndex, o, reconCandidateMap);
                    }
                }
            }
            
            // note that we still take up a column even if we don't have any data
            return new int[] { startRowIndex, startColumnIndex + 1 };
        } else {
            boolean hasSubProperties = (extNode.has("properties") && !extNode.isNull("properties")); 
            boolean isOwnColumn = !hasSubProperties || (extNode.has("included") && extNode.getBoolean("included"));
            
            if (a != null && a.length() > 0) {
                int maxColIndex = startColumnIndex;
                
                int l = a.length();
                for (int r = 0; r < l; r++) {
                    Object v = a.isNull(r) ? null : a.get(r);
                    JSONObject o = v != null && v instanceof JSONObject ? (JSONObject) v : null;
                    
                    int startColumnIndex2 = startColumnIndex;
                    int startRowIndex2 = startRowIndex;
                    
                    if (isOwnColumn) {
                        if (o != null) {
                            storeCell(rows, startRowIndex2++, startColumnIndex2++, o, reconCandidateMap);
                        } else {
                            storeCell(rows, startRowIndex2++, startColumnIndex2++, v, reconCandidateMap);
                        }
                    }
                    
                    if (hasSubProperties && o != null) {
                        int[] rowcol = collectResult(
                            rows,
                            extNode.getJSONArray("properties"),
                            o,
                            startRowIndex,
                            startColumnIndex2,
                            reconCandidateMap
                        );
                        
                        startRowIndex2 = rowcol[0];
                        startColumnIndex2 = rowcol[1];
                    }
                    
                    startRowIndex = startRowIndex2;
                    maxColIndex = Math.max(maxColIndex, startColumnIndex2);
                }
                
                return new int[] { startRowIndex, maxColIndex };
            } else {
                return new int[] {
                    startRowIndex,
                    startColumnIndex + countColumns(extNode, null, new ArrayList<String>(), new ArrayList<String>())
                };
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseDataExtensionJob;collectResult(List<Object[]>,JSONArray,JSONObject,int,int,Map<String,ReconCandidate>);;;protected int[] collectResult(
        List<Object[]>  rows, 
        JSONArray       subProperties, 
        JSONObject      resultNode, 
        int             startRowIndex,
        int             startColumnIndex,
        Map<String, ReconCandidate> reconCandidateMap
    ) throws JSONException {
        int maxStartRowIndex = startRowIndex;
        
        int k = subProperties.length();
        for (int c = 0; c < k; c++) {
            int[] rowcol = collectResult(
                rows, 
                subProperties.getJSONObject(c),
                resultNode,
                startRowIndex,
                startColumnIndex,
                reconCandidateMap
            );
            
            maxStartRowIndex = Math.max(maxStartRowIndex, rowcol[0]);
            startColumnIndex = rowcol[1];
        }
        
        return new int[] { maxStartRowIndex, startColumnIndex };
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseDataExtensionJob;doMqlRead(String);;;static protected InputStream doMqlRead(String query) throws IOException {
        URL url = new URL("http://api.freebase.com/api/service/mqlread");

        URLConnection connection = url.openConnection();
        connection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        connection.setConnectTimeout(5000);
        connection.setDoOutput(true);
        
        DataOutputStream dos = new DataOutputStream(connection.getOutputStream());
        try {
            String body = "extended=1&query=" + ParsingUtilities.encode(query);
            
            dos.writeBytes(body);
        } finally {
            dos.flush();
            dos.close();
        }
        
        connection.connect();
        
        return connection.getInputStream();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseDataExtensionJob;formulateQuery(Set<String>,JSONObject,Writer);;;static protected void formulateQuery(Set<String> guids, JSONObject node, Writer writer) throws JSONException {
        JSONWriter jsonWriter = new JSONWriter(writer);
        
        jsonWriter.object();
        jsonWriter.key("query");
            jsonWriter.array();
            jsonWriter.object();
            
                jsonWriter.key("guid"); jsonWriter.value(null);
                jsonWriter.key("guid|=");
                    jsonWriter.array();
                    for (String guid : guids) {
                        if (guid != null) {
                            jsonWriter.value(guid);
                        }
                    }
                    jsonWriter.endArray();
                    
                formulateQueryNode(node.getJSONArray("properties"), jsonWriter);
            
            jsonWriter.endObject();
            jsonWriter.endArray();
        jsonWriter.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseDataExtensionJob;formulateQueryNode(JSONObject,JSONWriter);;;static protected void formulateQueryNode(JSONObject node, JSONWriter writer) throws JSONException {
        String propertyID = node.getString("id");
        String expectedTypeID = node.getJSONObject("expected").getString("id");
        
        writer.key(propertyID);
        writer.array();
        {
            if (!expectedTypeID.startsWith("/type/")) { // not literal
                writer.object();
                writer.key("optional"); writer.value(true);
                
                boolean hasLimit = false;
                if (node.has("constraints") && !node.isNull("constraints")) {
                    JSONObject constraints = node.getJSONObject("constraints");
                    
                    String[] names = JSONObject.getNames(constraints);
                    for (String name : names) {
                        Object value = constraints.get(name);
                        if (name.equals("limit")) {
                            hasLimit = true;
                        }
                        
                        if (!name.contains(":") &&
                            !name.equals("limit") &&
                            !name.equals("optional") &&
                            !name.equals("count") &&
                            !name.equals("estimate-count") &&
                            !name.equals("sort") &&
                            !name.equals("return")) {
                            
                            if (name.startsWith("!")) {
                                name = "!c:" + name.substring(1);
                            } else {
                                name = "c:" + name;
                            }
                        }
                        writer.key(name);
                        writer.value(value);
                    }
                }
                if (!hasLimit) {
                    writer.key("limit"); writer.value(10);
                }
                
                {
                    boolean hasSubProperties = (node.has("properties") && !node.isNull("properties")); 
                        
                    if (!hasSubProperties || (node.has("included") && node.getBoolean("included"))) {
                        writer.key("name"); writer.value(null);
                        writer.key("id"); writer.value(null);
                        writer.key("guid"); writer.value(null);
                        writer.key("type"); writer.array(); writer.endArray();
                    }
                    
                    if (hasSubProperties) {
                        formulateQueryNode(node.getJSONArray("properties"), writer);
                    }
                }
                writer.endObject();
            }
        }
        writer.endArray();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseDataExtensionJob;formulateQueryNode(JSONArray,JSONWriter);;;static protected void formulateQueryNode(JSONArray propertiesA, JSONWriter writer) throws JSONException {
        int l = propertiesA.length();
        
        for (int i = 0; i < l; i++) {
            formulateQueryNode(propertiesA.getJSONObject(i), writer);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseDataExtensionJob;countColumns(JSONObject,List<ColumnInfo>,List<String>,List<String>);;;static protected int countColumns(JSONObject obj, List<ColumnInfo> columns, List<String> names, List<String> path) throws JSONException {
        String name = obj.getString("name");
        
        List<String> names2 = null;
        List<String> path2 = null;
        if (columns != null) {
            names2 = new ArrayList<String>(names);
            names2.add(name);
            
            path2 = new ArrayList<String>(path);
            path2.add(obj.getString("id"));
        }
        
        if (obj.has("properties") && !obj.isNull("properties")) {
            boolean included = (obj.has("included") && obj.getBoolean("included"));
            if (included && columns != null) {
                JSONObject expected = obj.getJSONObject("expected");
                
                columns.add(new ColumnInfo(names2, path2, 
                    new FreebaseType(expected.getString("id"), expected.getString("name"))));
            }
            
            return (included ? 1 : 0) + 
                countColumns(obj.getJSONArray("properties"), columns, names2, path2);
        } else {
            if (columns != null) {
                JSONObject expected = obj.getJSONObject("expected");
                
                columns.add(new ColumnInfo(names2, path2,
                    new FreebaseType(expected.getString("id"), expected.getString("name"))));
            }
            return 1;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseDataExtensionJob;countColumns(JSONArray,List<ColumnInfo>,List<String>,List<String>);;;static protected int countColumns(JSONArray a, List<ColumnInfo> columns, List<String> names, List<String> path) throws JSONException {
        int c = 0;
        int l = a.length();
        for (int i = 0; i < l; i++) {
            c += countColumns(a.getJSONObject(i), columns, names, path);
        }
        return c;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseUtils;getUserInfoURL(String);;;private static String getUserInfoURL(String host) {
        return "http://" + host + "/api/service/user_info";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseUtils;getMQLWriteURL(String);;;private static String getMQLWriteURL(String host) {
        return "http://" + host + "/api/service/mqlwrite";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseUtils;getMQLReadURL(String);;;private static String getMQLReadURL(String host) {
        return "http://" + host + "/api/service/mqlread";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseUtils;getUserInfo(Credentials,Provider);;;public static String getUserInfo(Credentials credentials, Provider provider) 
        throws OAuthMessageSignerException, OAuthExpectationFailedException, OAuthCommunicationException, ClientProtocolException, IOException {
        
        OAuthConsumer consumer = OAuthUtilities.getConsumer(credentials, provider);
        
        HttpGet httpRequest = new HttpGet(getUserInfoURL(provider.getHost()));
        httpRequest.getParams().setParameter(CoreProtocolPNames.USER_AGENT, "Gridworks " + GridworksServlet.getVersion());
        
        // this is required by the Metaweb API to avoid XSS
        httpRequest.setHeader("X-Requested-With", "1");
        
        // sign the request with the oauth library
        consumer.sign(httpRequest);

        // execute the request
        HttpClient httpClient = new DefaultHttpClient();
        HttpResponse httpResponse = httpClient.execute(httpRequest);
        
        // return the results
        return EntityUtils.toString(httpResponse.getEntity());
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseUtils;getUserBadges(Provider,String);;;public static String getUserBadges(Provider provider, String user_id)
    throws ClientProtocolException, IOException, JSONException {

        String query = "{" +
          "'id' : '" + user_id + "'," +
          "'!/type/usergroup/member' : [{" +
            "'id' : null," +
            "'key' : [{" +
              "'namespace' : null" +
            "}]" +
          "}]" +
        "}".replace("'", "\"");

        return mqlread(provider, query);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseUtils;mqlread(Provider,String);;;public static String mqlread(Provider provider, String query) 
    throws ClientProtocolException, IOException, JSONException {
        
        JSONObject envelope = new JSONObject();
        envelope.put("query", new JSONObject(query));
        
        List<NameValuePair> formparams = new ArrayList<NameValuePair>();
        formparams.add(new BasicNameValuePair("query", envelope.toString()));
        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, "UTF-8");

        HttpPost httpRequest = new HttpPost(getMQLReadURL(provider.getHost()));
        httpRequest.getParams().setParameter(CoreProtocolPNames.USER_AGENT, "Gridworks " + GridworksServlet.getVersion());
        httpRequest.setEntity(entity);

        // this is required by the Metaweb API to avoid XSS
        httpRequest.setHeader("X-Requested-With", "1");

        // execute the request
        HttpClient httpClient = new DefaultHttpClient();
        HttpResponse httpResponse = httpClient.execute(httpRequest);
    
        // return the results
        return EntityUtils.toString(httpResponse.getEntity());
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseUtils;mqlwrite(Credentials,Provider,String);;;public static String mqlwrite(Credentials credentials, Provider provider, String query) 
    throws OAuthMessageSignerException, OAuthExpectationFailedException, OAuthCommunicationException, ClientProtocolException, IOException, JSONException {
        OAuthConsumer consumer = OAuthUtilities.getConsumer(credentials, provider);

        JSONObject envelope = new JSONObject();
        envelope.put("query", new JSONObject(query));
        
        List<NameValuePair> formparams = new ArrayList<NameValuePair>();
        formparams.add(new BasicNameValuePair("query", envelope.toString()));
        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, "UTF-8");

        HttpPost httpRequest = new HttpPost(getMQLWriteURL(provider.getHost()));
        httpRequest.getParams().setParameter(CoreProtocolPNames.USER_AGENT, "Gridworks " + GridworksServlet.getVersion());
        httpRequest.setEntity(entity);

        // this is required by the Metaweb API to avoid XSS
        httpRequest.setHeader("X-Requested-With", "1");

        // sign the request with the oauth library
        consumer.sign(httpRequest);

        // execute the request
        HttpClient httpClient = new DefaultHttpClient();
        HttpResponse httpResponse = httpClient.execute(httpRequest);
    
        // return the results
        return EntityUtils.toString(httpResponse.getEntity());
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseUtils;uploadTriples(HttpServletRequest,String,String,String,String);;;public static String uploadTriples(HttpServletRequest request, String graph, String source_name, String source_id, String triples) 
        throws OAuthMessageSignerException, OAuthExpectationFailedException, OAuthCommunicationException, ClientProtocolException, JSONException, IOException {
        
        Provider provider = OAuthUtilities.getProvider(FREEBASE_HOST);
        
        Credentials credentials = Credentials.getCredentials(request, provider, Credentials.Type.ACCESS);
        
        JSONObject mdo_info = new JSONObject();
        mdo_info.put("name", source_name);
        if (source_id != null) {
            mdo_info.put("info_source",source_id);
        }
        
        JSONObject user_info = new JSONObject(getUserInfo(credentials, provider));
        if (user_info.has("username")) {

            String user_id = user_info.getString("id");
            boolean allowed = isAllowedToWrite(provider, graph, user_id);
            
            if (allowed) {
                List<NameValuePair> formparams = new ArrayList<NameValuePair>();
                formparams.add(new BasicNameValuePair("user", user_info.getString("id")));
                formparams.add(new BasicNameValuePair("action_type", "LOAD_TRIPLE"));
                formparams.add(new BasicNameValuePair("operator", GRIDWORKS_ID));
                formparams.add(new BasicNameValuePair("mdo_info", mdo_info.toString()));
                formparams.add(new BasicNameValuePair("graphport", graph));
                formparams.add(new BasicNameValuePair("payload", triples));
                formparams.add(new BasicNameValuePair("check_params", "false"));
                UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, "UTF-8");
    
                HttpPost httpRequest = new HttpPost(FREEQ_URL);
                httpRequest.getParams().setParameter(CoreProtocolPNames.USER_AGENT, "Gridworks " + GridworksServlet.getVersion());
                httpRequest.setEntity(entity);
                
                HttpPost surrogateRequest = new HttpPost(getUserInfoURL(FREEBASE_HOST));
                surrogateRequest.setEntity(entity);
                
                OAuthConsumer consumer = OAuthUtilities.getConsumer(credentials, provider);
    
                consumer.sign(surrogateRequest);
    
                Header[] h = surrogateRequest.getHeaders("Authorization");
                if (h.length > 0) {
                    httpRequest.setHeader("X-Freebase-Credentials", h[0].getValue());
                } else {
                    throw new RuntimeException("Couldn't find the oauth signature header in the surrogate request");
                }
                
                // execute the request
                HttpClient httpClient = new DefaultHttpClient();
                HttpResponse httpResponse = httpClient.execute(httpRequest);
                
                // return the results
                return EntityUtils.toString(httpResponse.getEntity());
            } else {
                throw new RuntimeException("User '" + user_id + "' is not allowed to write to '" + graph + "' with Gridworks");
            }
        } else {
            throw new RuntimeException("Invalid credentials");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\FreebaseUtils;isAllowedToWrite(Provider,String,String);;;private static boolean isAllowedToWrite(Provider provider, String graph, String user_id) throws JSONException, ClientProtocolException, IOException {
        if ("sandbox".equals(graph)) return true;
        
        JSONObject user_badges = new JSONObject(getUserBadges(provider, user_id));
        JSONObject result = user_badges.getJSONObject("result");
        
        if (result == null) {
            throw new RuntimeException("Error evaluating badges for user '" + user_id + "'");
        }

        boolean allowed = false;
        
        JSONArray badges = result.getJSONArray("!/type/usergroup/member");
        for (int i = 0; i < badges.length(); i++) {
            JSONObject o = badges.getJSONObject(i);
            String id = o.getString("id");
            if ("/en/metaweb_staff".equals(id)) {
                allowed = true;
                break;
            }
        }
        
        return allowed;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\IndentWriter;IndentWriter(Writer);;;public IndentWriter(Writer writer) {
        m_writer = writer;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\IndentWriter;close();;;public void close() throws IOException {
        m_writer.close();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\IndentWriter;flush();;;public void flush() throws IOException {
        m_writer.flush();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\IndentWriter;print(Object);;;public void print(Object o) throws IOException {
        printIndent();
        m_writer.write(o.toString());
        m_indent = false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\IndentWriter;println();;;public void println() throws IOException {
        printIndent();
        m_writer.write("\n");
        m_indent = true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\IndentWriter;println(Object);;;public void println(Object o) throws IOException  {
        printIndent();
        m_writer.write(o.toString());
        m_writer.write("\n");
        m_indent = true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\IndentWriter;indent();;;public void indent() {
        m_count++;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\IndentWriter;unindent();;;public void unindent() {
        m_count--;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\IndentWriter;printIndent();;;private void printIndent() throws IOException {
        if (m_indent) {
            m_writer.write(s_indents[m_count]);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\IOUtils;copy(InputStream,OutputStream);;;public static long copy(InputStream input, OutputStream output) throws IOException {
        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
        long count = 0;
        int n = 0;
        while (-1 != (n = input.read(buffer))) {
            output.write(buffer, 0, n);
            count += n;
        }
        return count;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\IOUtils;copy(InputStream,File);;;public static long copy(InputStream input, File file) throws IOException {
        FileOutputStream output = new FileOutputStream(file);
        byte[] buffer = new byte[DEFAULT_BUFFER_SIZE];
        long count = 0;
        int n = 0;
        try {
            while (-1 != (n = input.read(buffer))) {
                output.write(buffer, 0, n);
                count += n;
            }
        } finally {
            try {
                output.close();
            } catch (IOException e) {}
            try {
                input.close();
            } catch (IOException e) {}
        }
        return count;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\JSObject;writeJSObject(IndentWriter,JSObject);;;@SuppressWarnings("unchecked")
    static public void writeJSObject(IndentWriter writer, JSObject jso) throws IOException, JSONException {
        writer.println("{");
        writer.indent();
        {
            Enumeration e = jso.propertyNames();
            while (e.hasMoreElements()) {
                String name = (String) e.nextElement();
                Object value = jso.get(name);
                
                writer.print("'");
                writer.print(name + "' : ");
                writeObject(writer, value);
                
                if (e.hasMoreElements()) {
                    writer.println(",");
                } else {
                    writer.println();
                }
            }
        }
        writer.unindent();
        writer.print("}");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\JSObject;writeCollection(IndentWriter,Collection);;;@SuppressWarnings("unchecked")
    static public void writeCollection(IndentWriter writer, Collection c) throws IOException, JSONException {
        writer.println("[");
        writer.indent();
        {
            Iterator i = c.iterator();
            while (i.hasNext()) {
                writeObject(writer, i.next());
                if (i.hasNext()) {
                    writer.println(",");
                } else {
                    writer.println();
                }
            }
        }
        writer.unindent();
        writer.print("]");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\JSObject;writeJSONObject(IndentWriter,JSONObject);;;static public void writeJSONObject(IndentWriter writer, JSONObject no) throws IOException, JSONException {
        writer.println("{");
        writer.indent();
        {
            String[] names = JSONObject.getNames(no);
            for (int i = 0; i < names.length; i++) {
                String name = names[i];
                Object value = no.get(name);
                
                writer.print("'");
                writer.print(name + "' : ");
                writeObject(writer, value);
                
                if (i < names.length - 1) {
                    writer.println(",");
                } else {
                    writer.println();
                }
            }
        }
        writer.unindent();
        writer.print("}");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\JSObject;writeJSONArray(IndentWriter,JSONArray);;;static public void writeJSONArray(IndentWriter writer, JSONArray na) throws IOException, JSONException {
        writer.println("[");
        writer.indent();
        {
            int count = na.length();
            for (int i = 0; i < count; i++) {
                Object element = na.get(i);
                
                writeObject(writer, element);
                if (i < count - 1) {
                    writer.println(",");
                } else {
                    writer.println();
                }
            }
        }
        writer.unindent();
        writer.print("]");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\JSObject;writeObject(IndentWriter,Object);;;@SuppressWarnings("unchecked")
    static public void writeObject(IndentWriter writer, Object o) throws IOException, JSONException {
        if (o == null) {
            writer.print("null");
        } else if (o instanceof Boolean) {
            writer.print(((Boolean) o).booleanValue() ? "true" : "false");
        } else if (o instanceof Number) {
            writer.print(((Number) o).toString());
            
        } else if (o instanceof Collection) {
            writeCollection(writer, (Collection) o);
        } else if (o instanceof JSONArray) {
            writeJSONArray(writer, (JSONArray) o);
        } else if (o instanceof JSObject) {
            writeJSObject(writer, (JSObject) o);
        } else if (o instanceof JSONObject) {
            writeJSONObject(writer, (JSONObject) o);
            
        } else {
            writer.print("\"" + StringEscapeUtils.escapeJavaScript(o.toString()) + "\"");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\JSONUtilities;getString(JSONObject,String,String);;;static public String getString(JSONObject obj, String key, String def) {
        try {
            return obj.getString(key);
        } catch (JSONException e) {
            return def;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\JSONUtilities;getInt(JSONObject,String,int);;;static public int getInt(JSONObject obj, String key, int def) {
        try {
            return obj.getInt(key);
        } catch (JSONException e) {
            return def;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\JSONUtilities;getBoolean(JSONObject,String,boolean);;;static public boolean getBoolean(JSONObject obj, String key, boolean def) {
        try {
            return obj.getBoolean(key);
        } catch (JSONException e) {
            return def;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\JSONUtilities;getDouble(JSONObject,String,double);;;static public double getDouble(JSONObject obj, String key, double def) {
        try {
            return obj.getDouble(key);
        } catch (JSONException e) {
            return def;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\JSONUtilities;getLong(JSONObject,String,long);;;static public long getLong(JSONObject obj, String key, long def) {
        try {
            return obj.getLong(key);
        } catch (JSONException e) {
            return def;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\JSONUtilities;getDate(JSONObject,String,Date);;;static public Date getDate(JSONObject obj, String key, Date def) {
        try {
            Date d = ParsingUtilities.stringToDate(obj.getString(key));
            
            return d != null ? d : def;
        } catch (JSONException e) {
            return def;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\JSONUtilities;getIntArray(JSONObject,String);;;static public int[] getIntArray(JSONObject obj, String key) {
        try {
            JSONArray a = obj.getJSONArray(key);
            int[] r = new int[a.length()];
            
            for (int i = 0; i < r.length; i++) {
                r[i] = a.getInt(i);
            }
            
            return r;
        } catch (JSONException e) {
            return new int[0];
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\JSONUtilities;getStringArray(JSONObject,String);;;static public String[] getStringArray(JSONObject obj, String key) {
        try {
            JSONArray a = obj.getJSONArray(key);
            String[] r = new String[a.length()];
            
            for (int i = 0; i < r.length; i++) {
                r[i] = a.getString(i);
            }
            
            return r;
        } catch (JSONException e) {
            return new String[0];
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\JSONUtilities;getStringList(JSONObject,String,List<String>);;;static public void getStringList(JSONObject obj, String key, List<String> list) {
        try {
            JSONArray a = obj.getJSONArray(key);
            int count = a.length();
            
            for (int i = 0; i < count; i++) {
                list.add(a.getString(i));
            }
        } catch (JSONException e) {
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\JSONUtilities;writeStringList(JSONWriter,List<String>);;;static public void writeStringList(JSONWriter writer, List<String> list) throws JSONException {
        writer.array();
        for (String s : list) {
            writer.value(s);
        }
        writer.endArray();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\JSONUtilities;putField(JSONObject,String,Object);;;static public void putField(JSONObject obj, String key, Object value) throws JSONException {
    	if (value instanceof Integer) {
    		obj.put(key, ((Integer) value).intValue());
    	} else if (value instanceof Long) {
    		obj.put(key, ((Long) value).intValue());
    	} else if (value instanceof Number) {
    		obj.put(key, ((Double) value).doubleValue());
    	} else if (value instanceof Boolean) {
    		obj.put(key, (Boolean) value);
    	} else if (value instanceof Date) {
    		obj.put(key, ParsingUtilities.dateToString((Date) value));
    	} else if (value instanceof Calendar) {
    		obj.put(key, ParsingUtilities.dateToString(((Calendar) value).getTime()));
    	} else if (value instanceof String) {
    		obj.put(key, (String) value);
    	} else {
    		obj.put(key, value.toString());
    	}
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\ParsingUtilities;parseUrlParameters(HttpServletRequest);;;static public Properties parseUrlParameters(HttpServletRequest request) {
        Properties options = new Properties();

        String query = request.getQueryString();
        if (query != null) {
            if (query.startsWith("?")) {
                query = query.substring(1);
            }

            parseParameters(options,query);
        }
        return options;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\ParsingUtilities;parseParameters(Properties,String);;;static public Properties parseParameters(Properties p, String str) {
        if (str != null) {
            String[] pairs = str.split("&");
            for (String pairString : pairs) {
                int equal = pairString.indexOf('=');
                String name = (equal >= 0) ? pairString.substring(0, equal) : "";
                String value = (equal >= 0) ? ParsingUtilities.decode(pairString.substring(equal + 1)) : "";
                p.put(name, value);
            }
        }
        return p;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\ParsingUtilities;parseParameters(String);;;static public Properties parseParameters(String str) {
        return (str == null) ? null : parseParameters(new Properties(),str);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\ParsingUtilities;inputStreamToString(InputStream);;;static public String inputStreamToString(InputStream is) throws IOException {
        Reader reader = new InputStreamReader(is, "UTF-8");
        try {
            return readerToString(reader);
        } finally {
            reader.close();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\ParsingUtilities;readerToString(Reader);;;static public String readerToString(Reader reader) throws IOException {
        StringBuffer sb = new StringBuffer();

        char[] chars = new char[8192];
        int c;

        while ((c = reader.read(chars)) > 0) {
            sb.insert(sb.length(), chars, 0, c);
        }

        return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\ParsingUtilities;evaluateJsonStringToObject(String);;;static public JSONObject evaluateJsonStringToObject(String s) throws JSONException {
        if( s == null ) throw new IllegalArgumentException("parameter 's' should not be null");
        JSONTokener t = new JSONTokener(s);
        Object o = t.nextValue();
        if (o instanceof JSONObject) {
            return (JSONObject) o;
        } else {
            throw new JSONException(s + " couldn't be parsed as JSON object");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\ParsingUtilities;evaluateJsonStringToArray(String);;;static public JSONArray evaluateJsonStringToArray(String s) throws JSONException {
        JSONTokener t = new JSONTokener(s);
        Object o = t.nextValue();
        if (o instanceof JSONArray) {
            return (JSONArray) o;
        } else {
            throw new JSONException(s + " couldn't be parsed as JSON array");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\ParsingUtilities;encode(String);;;static public String encode(String s) {
        try {
            return codec.encode(s, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            return s; // should not happen
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\ParsingUtilities;decode(String);;;static public String decode(String s) {
        try {
            return codec.decode(s, "UTF-8");
        } catch (UnsupportedEncodingException e) {
            return s; // should not happen
        } catch (DecoderException e) {
            return s; // should not happen
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\ParsingUtilities;dateToString(Date);;;static public String dateToString(Date d) {
        return s_sdf.format(d);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\ParsingUtilities;stringToDate(String);;;static public Date stringToDate(String s) {
        try {
            return s_sdf.parse(s);
        } catch (ParseException e) {
            return null;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\Pool;pool(ReconCandidate);;;public void pool(ReconCandidate candidate) {
        candidates.put(candidate.topicID, candidate);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\Pool;pool(Recon);;;public void pool(Recon recon) {
        recons.put(Long.toString(recon.id), recon);
        
        if (recon.match != null) {
            pool(recon.match);
        }
        if (recon.candidates != null) {
            for (ReconCandidate candidate : recon.candidates) {
                pool(candidate);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\Pool;getRecon(String);;;public Recon getRecon(String id) {
        return recons.get(id);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\Pool;getReconCandidate(String);;;public ReconCandidate getReconCandidate(String topicID) {
        return candidates.get(topicID);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\Pool;save(OutputStream);;;public void save(OutputStream out) throws IOException {
        Writer writer = new OutputStreamWriter(out);
        try {
            save(writer);
        } finally {
            writer.flush();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\Pool;save(Writer);;;public void save(Writer writer) throws IOException {
        writer.write(GridworksServlet.getVersion()); writer.write('\n');

        Properties options = new Properties();
        options.setProperty("mode", "save");
        options.put("pool", this);
        
        Collection<ReconCandidate> candidates2 = candidates.values();
        writer.write("reconCandidateCount=" + candidates2.size()); writer.write('\n');
        
        for (ReconCandidate c : candidates2) {
            JSONWriter jsonWriter = new JSONWriter(writer);
            try {
                c.write(jsonWriter, options);
                
                writer.write('\n');
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
        
        Collection<Recon> recons2 = recons.values();
        writer.write("reconCount=" + recons2.size()); writer.write('\n');
        
        for (Recon recon : recons2) {
            JSONWriter jsonWriter = new JSONWriter(writer);
            try {
                recon.write(jsonWriter, options);
                
                writer.write('\n');
            } catch (JSONException e) {
                e.printStackTrace();
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\Pool;load(Reader);;;public void load(Reader reader) throws Exception {
        LineNumberReader reader2 = new LineNumberReader(reader);

        /* String version = */ reader2.readLine();
        
        String line;
        while ((line = reader2.readLine()) != null) {
            int equal = line.indexOf('=');
            CharSequence field = line.subSequence(0, equal);
            String value = line.substring(equal + 1);
            
            if ("reconCandidateCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                for (int i = 0; i < count; i++) {
                    line = reader2.readLine();
                    if (line != null) {
                        ReconCandidate candidate = ReconCandidate.loadStreaming(line);
                        if (candidate != null) {
                            pool(candidate);
                        }
                    }
                }
            } else if ("reconCount".equals(field)) {
                int count = Integer.parseInt(value);
                
                for (int i = 0; i < count; i++) {
                    line = reader2.readLine();
                    if (line != null) {
                        Recon recon = Recon.loadStreaming(line, this);
                        if (recon != null) {
                            pool(recon);
                        }
                    }
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\src\com\metaweb\gridworks\util\Pool;write(JSONWriter,Properties);;;public void write(JSONWriter writer, Properties options)
            throws JSONException {
        
        writer.object();
        
        writer.key("reconCandidates");
            writer.object();
            for (Entry<String, ReconCandidate> entry : candidates.entrySet()) {
                writer.key(entry.getKey());
                entry.getValue().write(writer, options);
            }
            writer.endObject();
        
        writer.key("recons");
            writer.object();
            for (Entry<String, Recon> entry : recons.entrySet()) {
                writer.key(entry.getKey().toString());
                entry.getValue().write(writer, options);
            }
            writer.endObject();
            
        writer.endObject();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\GridworksServletStub;wrapDoGet(HttpServletRequest,HttpServletResponse);;;public void wrapDoGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
        super.doGet(request, response);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\GridworksServletStub;wrapDoPost(HttpServletRequest,HttpServletResponse);;;public void wrapDoPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException{
        super.doPost(request, response);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\GridworksServletStub;wrapGetCommandName(HttpServletRequest);;;public String wrapGetCommandName(HttpServletRequest request){
        return super.getCommandName(request);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\GridworksServletStub;insertCommand(String,Command);;;public void insertCommand( String commandName, Command command ){
        registerCommand(commandName, command);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\GridworksServletStub;removeCommand(String);;;public void removeCommand( String commandName ){
        unregisterCommand(commandName);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\GridworksServletTests;SetUp();;;@BeforeMethod
    public void SetUp() {
        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        command = mock(Command.class);

        SUT = new GridworksServletStub();
        SUT.insertCommand(TEST_COMMAND_NAME,command); //inject mock into command container
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\GridworksServletTests;TearDown();;;@AfterMethod
    public void TearDown() {
        SUT.removeCommand(TEST_COMMAND_NAME); //remove mock to clean command container
        SUT = null;
        
        request = null;
        response = null;
        command = null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\GridworksServletTests;doGetRegressionTest();;;@Test
    public void doGetRegressionTest(){
        whenGetCommandNameThenReturn(TEST_COMMAND_PATH);

        try {
            SUT.wrapDoGet(request, response);
        } catch (ServletException e) {
            Assert.fail();
        } catch (IOException e) {
            Assert.fail();
        }

        verifyGetCommandNameCalled();
        try {
            verify(command,times(1)).doGet(request, response);
        } catch (ServletException e) {
            Assert.fail();
        } catch (IOException e) {
            Assert.fail();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\GridworksServletTests;doGetReturnsError404WhenCommandNotFound();;;@Test
    public void doGetReturnsError404WhenCommandNotFound(){
        whenGetCommandNameThenReturn(BAD_COMMAND_PATH);

        try {
            SUT.wrapDoGet(request, response);
        } catch (ServletException e) {
            Assert.fail();
        } catch (IOException e) {
            Assert.fail();
        }

        verifyGetCommandNameCalled();
        verifyError404Called();

    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\GridworksServletTests;doPostRegressionTest();;;@Test
    public void doPostRegressionTest(){
        whenGetCommandNameThenReturn(TEST_COMMAND_PATH);

        try {
            SUT.wrapDoPost(request, response);
        } catch (ServletException e) {
            Assert.fail();
        } catch (IOException e) {
            Assert.fail();
        }

        verifyGetCommandNameCalled();
        try {
            verify(command,times(1)).doPost(request, response);
        } catch (ServletException e) {
            Assert.fail();
        } catch (IOException e) {
            Assert.fail();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\GridworksServletTests;doPostReturns404WhenCommandNotFound();;;@Test
    public void doPostReturns404WhenCommandNotFound(){
        whenGetCommandNameThenReturn(BAD_COMMAND_PATH);

        try {
            SUT.wrapDoPost(request, response);
        } catch (ServletException e) {
            Assert.fail();
        } catch (IOException e) {
            Assert.fail();
        }

        verifyGetCommandNameCalled();
        verifyError404Called();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\GridworksServletTests;getCommandNameHandlesBadCommandName();;;@Test
    public void getCommandNameHandlesBadCommandName(){

        when(request.getPathInfo()).thenReturn("/this-command-has-no-trailing-slash");

        Assert.assertEquals("this-command-has-no-trailing-slash", SUT.wrapGetCommandName(request));

        verify(request, times(1)).getPathInfo();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\GridworksServletTests;whenGetCommandNameThenReturn(String);;;protected void whenGetCommandNameThenReturn(String commandName){
        when(request.getPathInfo()).thenReturn(commandName);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\GridworksServletTests;verifyGetCommandNameCalled();;;protected void verifyGetCommandNameCalled(){
        verify(request,times(1)).getPathInfo();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\GridworksServletTests;verifyError404Called();;;protected void verifyError404Called(){
        try {
            verify(response,times(1)).sendError(404);
        } catch (IOException e) {
            Assert.fail();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandStub;wrapGetProject(HttpServletRequest);;;public Project wrapGetProject(HttpServletRequest request)
    throws ServletException {
        return getProject(request);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandStub;wrapGetEngineConfig(HttpServletRequest);;;public JSONObject wrapGetEngineConfig(HttpServletRequest request)
    throws JSONException {
        return getEngineConfig(request);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandStub;wrapGetEngine(HttpServletRequest,Project);;;public Engine wrapGetEngine(HttpServletRequest request, Project project)
    throws Exception {
        return getEngine(request, project);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandStub;wrapGetIntegerParameter(HttpServletRequest,String,int);;;public int wrapGetIntegerParameter(HttpServletRequest request, String name,int def) {
        return getIntegerParameter(request, name, def);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandStub;wrapGetJsonParameter(HttpServletRequest,String);;;public JSONObject wrapGetJsonParameter(HttpServletRequest request,String name) {
        return getJsonParameter(request, name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandTests;SetUp();;;@BeforeMethod
    public void SetUp() {
        SUT = new CommandStub();
        request = mock(HttpServletRequest.class);
        projectManager = mock(ProjectManager.class);
        project = mock(Project.class);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandTests;TearDown();;;@AfterMethod
    public void TearDown() {
        SUT = null;
        request = null;
        projectManager = null;
        project = null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandTests;getProjectThrowsWithNullParameter();;;@Test
    public void getProjectThrowsWithNullParameter() {
        try {
            SUT.wrapGetProject(null);
            Assert.fail(); // should throw exception before this
        } catch (IllegalArgumentException e) {
            // expected
        } catch (Exception e) {
            Assert.fail();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandTests;getProjectThrowsIfResponseHasNoOrBrokenProjectParameter();;;@Test
    public void getProjectThrowsIfResponseHasNoOrBrokenProjectParameter() {
        when(request.getParameter("project")).thenReturn(""); // null
        try {
            SUT.wrapGetProject(request);
        } catch (ServletException e) {
            // expected
        } catch (Exception e) {
            Assert.fail();
        }
        verify(request, times(1)).getParameter("project");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandTests;getEngineConfigThrowsWithNullParameter();;;@Test
    public void getEngineConfigThrowsWithNullParameter() {
        try {
            SUT.wrapGetEngineConfig(null);
            Assert.fail();
        } catch (IllegalArgumentException e) {
            // expected
        } catch (Exception e) {
            Assert.fail();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandTests;getEngineConfigReturnsNullWithNullEngineParameter();;;@Test
    public void getEngineConfigReturnsNullWithNullEngineParameter() {
        when(request.getParameter("engine")).thenReturn(null);
        try {
            Assert.assertNull(SUT.wrapGetEngineConfig(request));
        } catch (JSONException e) {
            Assert.fail();
        } catch (Exception e) {
            Assert.fail();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandTests;getEngineConfigReturnsNullWithEmptyOrBadParameterValue();;;@Test
    public void getEngineConfigReturnsNullWithEmptyOrBadParameterValue() {
        when(request.getParameter("engine")).thenReturn("sdfasdfas");

        try {
            Assert.assertNull( SUT.wrapGetEngineConfig(request) );
        } catch (JSONException e) {
            Assert.fail();
        }

        verify(request, times(1)).getParameter("engine");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandTests;getEngineConfigRegressionTest();;;@Test
    public void getEngineConfigRegressionTest() {
        when(request.getParameter("engine")).thenReturn("{\"hello\":\"world\"}");
        JSONObject o = null;
        try {
            o = SUT.wrapGetEngineConfig(request);
            Assert.assertEquals("world", o.getString("hello"));
        } catch (JSONException e) {
            Assert.fail();
        } catch (Exception e) {
            Assert.fail();
        }
        verify(request, times(1)).getParameter("engine");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandTests;getEngineThrowsOnNullParameter();;;@Test
    public void getEngineThrowsOnNullParameter() {
        try {
            SUT.wrapGetEngine(null, null);
        } catch (IllegalArgumentException e) {
            // expected
        } catch (Exception e) {
            Assert.fail();
        }

        try {
            SUT.wrapGetEngine(null, project);
        } catch (IllegalArgumentException e) {
            // expected
        } catch (Exception e) {
            Assert.fail();
        }

        try {
            SUT.wrapGetEngine(request, null);
        } catch (IllegalArgumentException e) {
            // expected
        } catch (Exception e) {
            Assert.fail();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandTests;getEngineRegressionTest();;;@Test
    public void getEngineRegressionTest() {
        // TODO refactor getEngine to use dependency injection, so a mock Engine
        // object can be used.

        Engine engine = null;
        when(request.getParameter("engine")).thenReturn("{\"hello\":\"world\"}");

        try {
            engine = SUT.wrapGetEngine(request, project);
            Assert.assertNotNull(engine);
        } catch (Exception e) {
            Assert.fail();
        }

        verify(request, times(1)).getParameter("engine");
        // JSON configuration doesn't have 'facets' key or 'INCLUDE_DEPENDENT'
        // key, so there should be no further action
        // Engine._facets is protected so can't test that it is of zero length.
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandTests;getIntegerParameterWithNullParameters();;;@Test
    public void getIntegerParameterWithNullParameters() {
        // all null
        try {
            SUT.wrapGetIntegerParameter(null, null, 0);
            Assert.fail();
        } catch (IllegalArgumentException e) {
            // expected
        }

        // request null
        try {
            SUT.wrapGetIntegerParameter(null, "name", 0);
            Assert.fail();
        } catch (IllegalArgumentException e) {
            // expected
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandTests;getIntegerParametersWithIncorrectParameterName();;;@Test
    public void getIntegerParametersWithIncorrectParameterName() {

        when(request.getParameter(null)).thenReturn(null);
        when(request.getParameter("incorrect")).thenReturn(null);

        // name null
        try {
            int returned = SUT.wrapGetIntegerParameter(request, null, 5);
            Assert.assertEquals(5, returned);
        } catch (IllegalArgumentException e) {
            Assert.fail();
        }

        // name incorrect
        try {
            int returned = SUT.wrapGetIntegerParameter(request, "incorrect", 5);
            Assert.assertEquals(5, returned);
        } catch (IllegalArgumentException e) {
            Assert.fail();
        }

        verify(request, times(1)).getParameter(null);
        verify(request, times(1)).getParameter("incorrect");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandTests;getIntegerParametersRegressionTest();;;@Test
    public void getIntegerParametersRegressionTest() {
        when(request.getParameter("positivenumber")).thenReturn("22");
        when(request.getParameter("zeronumber")).thenReturn("0");
        when(request.getParameter("negativenumber")).thenReturn("-40");

        // positive
        try {
            int returned = SUT.wrapGetIntegerParameter(request,"positivenumber", 5);
            Assert.assertEquals(22, returned);
        } catch (IllegalArgumentException e) {
            Assert.fail();
        }

        // zero
        try {
            int returned = SUT.wrapGetIntegerParameter(request, "zeronumber", 5);
            Assert.assertEquals(0, returned);
        } catch (IllegalArgumentException e) {
            Assert.fail();
        }

        // negative
        try {
            int returned = SUT.wrapGetIntegerParameter(request,
                    "negativenumber", 5);
            Assert.assertEquals(-40, returned);
        } catch (IllegalArgumentException e) {
            Assert.fail();
        }

        verify(request, times(1)).getParameter("positivenumber");
        verify(request, times(1)).getParameter("zeronumber");
        verify(request, times(1)).getParameter("negativenumber");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandTests;getJsonParameterWithNullParameters();;;@Test
    public void getJsonParameterWithNullParameters() {
        when(request.getParameter(null)).thenReturn(null);
        when(request.getParameter("")).thenReturn(null);

        try {
            SUT.wrapGetJsonParameter(null, null);
            Assert.fail();
        } catch (IllegalArgumentException e) {
            // expected
        }

        Assert.assertNull(SUT.wrapGetJsonParameter(request, null));

        try {
            SUT.wrapGetJsonParameter(null, "test");
        } catch (IllegalArgumentException e) {
            // expected
        }

        Assert.assertNull(SUT.wrapGetJsonParameter(request, ""));

        verify(request, times(1)).getParameter(null);
        verify(request, times(1)).getParameter("");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandTests;getJsonParameterRegressionTest();;;@Test
    public void getJsonParameterRegressionTest() {
        when(request.getParameter("test")).thenReturn("{\"foo\":\"bar\"}");

        JSONObject o = SUT.wrapGetJsonParameter(request, "test");
        Assert.assertNotNull(o);
        try {
            Assert.assertEquals("bar", o.getString("foo"));
        } catch (JSONException e) {
            Assert.fail();
        }

        verify(request, times(1)).getParameter("test");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\CommandTests;getJsonParameterWithMalformedJson();;;@Test
    public void getJsonParameterWithMalformedJson() {
        when(request.getParameter("test")).thenReturn("brokenJSON");

        try {
            Assert.assertNull(SUT.wrapGetJsonParameter(request, "test"));
        } catch (Exception e) {
            Assert.fail();
        }

        verify(request, times(1)).getParameter("test");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\util\CancelProcessesCommandTests;SetUp();;;@BeforeMethod
    public void SetUp() {
        projMan = mock(ProjectManager.class);
        ProjectManager.singleton = projMan;
        proj = mock(Project.class);
        processMan = mock(ProcessManager.class);
        pw = mock(PrintWriter.class);

        request = mock(HttpServletRequest.class);
        response = mock(HttpServletResponse.class);
        SUT = new CancelProcessesCommand();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\util\CancelProcessesCommandTests;TearDown();;;@AfterMethod
    public void TearDown() {
        SUT = null;

        projMan = null;
        ProjectManager.singleton = null;
        proj = null;
        pw = null;
        request = null;
        response = null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\util\CancelProcessesCommandTests;doPostFailsThrowsWithNullParameters();;;@Test
    public void doPostFailsThrowsWithNullParameters() {

        // both parameters null
        try {
            SUT.doPost(null, null);
            Assert.fail(); // should have thrown exception by this point
        } catch (IllegalArgumentException e){
            //expected
        } catch (ServletException e) {
            Assert.fail();
        } catch (Exception e) {
            Assert.fail();
        }

        // request is null
        try {
            SUT.doPost(null, response);
            Assert.fail(); // should have thrown exception by this point
        } catch (IllegalArgumentException e){
            //expected
        } catch (ServletException e) {
            Assert.fail();
        } catch (Exception e) {
            Assert.fail();
        }

        // response parameter null
        try {
            SUT.doPost(request, null);
            Assert.fail(); // should have thrown exception by this point
        } catch (IllegalArgumentException e){
            // expected
        } catch (ServletException e) {
            Assert.fail();
        } catch (Exception e) {
            Assert.fail();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\util\CancelProcessesCommandTests;doPostRegressionTest();;;@Test
    public void doPostRegressionTest() {

        // mock dependencies
        when(request.getParameter("project")).thenReturn(PROJECT_ID);
        when(projMan.getProject(anyLong())).thenReturn(proj);
        when(proj.getProcessManager()).thenReturn(processMan);
        try {
            when(response.getWriter()).thenReturn(pw);
        } catch (IOException e1) {
            Assert.fail();
        }

        // run
        try {
            SUT.doPost(request, response);
        } catch (ServletException e) {
            Assert.fail();
        } catch (IOException e) {
            Assert.fail();
        }

        // verify
        verify(request, times(1)).getParameter("project");
        verify(projMan, times(1)).getProject(PROJECT_ID_LONG);

        verify(processMan, times(1)).cancelAll();
        verify(response, times(1)).setCharacterEncoding("UTF-8");
        verify(response, times(1))
                .setHeader("Content-Type", "application/json");
        verify(proj, times(1)).getProcessManager();
        try {
            verify(response, times(1)).getWriter();
        } catch (IOException e) {
            Assert.fail();
        }
        verify(pw, times(1)).write("{ \"code\" : \"ok\" }");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\util\CancelProcessesCommandTests;doPostThrowsIfCommand_getProjectReturnsNull();;;@Test
     public void doPostThrowsIfCommand_getProjectReturnsNull(){
        // mock dependencies
        when(request.getParameter("project")).thenReturn(PROJECT_ID);
        when(projMan.getProject(anyLong()))
            .thenReturn(null);

        // run
        try {
            SUT.doPost(request, response);
        } catch (ServletException e) {
            //expected
        } catch (IOException e) {
            Assert.fail();
        }

        // verify
        verify(request, times(1)).getParameter("project");
        verify(projMan, times(1)).getProject(PROJECT_ID_LONG);
     }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\commands\util\CancelProcessesCommandTests;doPostCatchesExceptionFromWriter();;;@Test
     public void doPostCatchesExceptionFromWriter(){
         String ERROR_MESSAGE = "hello world";

        // mock dependencies
            when(request.getParameter("project")).thenReturn(PROJECT_ID);
            when(projMan.getProject(anyLong())).thenReturn(proj);
            when(proj.getProcessManager()).thenReturn(processMan);
            try {
                when(response.getWriter()).thenThrow(new IllegalStateException(ERROR_MESSAGE))
                .thenReturn(pw);
            } catch (IOException e) {
                Assert.fail();
            }

            // run
            try {
                SUT.doPost(request, response);
            } catch (ServletException e) {
                Assert.fail();
            } catch (IOException e) {
                Assert.fail();
            }

            verify(request, times(1)).getParameter("project");
            verify(projMan, times(1)).getProject(PROJECT_ID_LONG);

            verify(processMan, times(1)).cancelAll();
            verify(response, times(3)).setCharacterEncoding("UTF-8");
            //omitted other verifications for brevity.
            //assumption is that expecting response.setCharacterEncoding times(3)
            //implies it has Command.respondException has been called as expected
     }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\CsvExporterTests;SetUp();;;@BeforeMethod
    public void SetUp(){
        SUT = new CsvExporter();
        writer = new StringWriter();
        project = new Project();
        engine = new Engine(project);
        options = mock(Properties.class);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\CsvExporterTests;TearDown();;;@AfterMethod
    public void TearDown(){
        SUT = null;
        writer = null;
        project = null;
        engine = null;
        options = null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\CsvExporterTests;exportSimpleCsv();;;@Test
    public void exportSimpleCsv(){
        CreateGrid(2, 2);

        try {
            SUT.export(project, options, engine, writer);
        } catch (IOException e) {
            Assert.fail();
        }

        Assert.assertEquals(writer.toString(), "column0,column1\n" +
                                               "row0cell0,row0cell1\n" +
                                               "row1cell0,row1cell1\n");

    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\CsvExporterTests;exportSimpleCsvNoHeader();;;@Test
    public void exportSimpleCsvNoHeader(){
        CreateGrid(2, 2);
        when(options.getProperty("printColumnHeader")).thenReturn("false");
        try {
            SUT.export(project, options, engine, writer);
        } catch (IOException e) {
            Assert.fail();
        }

        Assert.assertEquals(writer.toString(), "row0cell0,row0cell1\n" +
                                               "row1cell0,row1cell1\n");

        verify(options,times(1)).getProperty("printColumnHeader");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\CsvExporterTests;exportCsvWithLineBreaks();;;@Test
    public void exportCsvWithLineBreaks(){
        CreateGrid(3,3);

        project.rows.get(1).cells.set(1, new Cell("line\n\n\nbreak", null));
        try {
            SUT.export(project, options, engine, writer);
        } catch (IOException e) {
            Assert.fail();
        }

        Assert.assertEquals(writer.toString(), "column0,column1,column2\n" +
                                               "row0cell0,row0cell1,row0cell2\n" +
                                               "row1cell0,\"line\n\n\nbreak\",row1cell2\n" +
                                               "row2cell0,row2cell1,row2cell2\n");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\CsvExporterTests;exportCsvWithComma();;;@Test
    public void exportCsvWithComma(){
        CreateGrid(3,3);

        project.rows.get(1).cells.set(1, new Cell("with, comma", null));
        try {
            SUT.export(project, options, engine, writer);
        } catch (IOException e) {
            Assert.fail();
        }

        Assert.assertEquals(writer.toString(), "column0,column1,column2\n" +
                                               "row0cell0,row0cell1,row0cell2\n" +
                                               "row1cell0,\"with, comma\",row1cell2\n" +
                                               "row2cell0,row2cell1,row2cell2\n");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\CsvExporterTests;exportCsvWithQuote();;;@Test
    public void exportCsvWithQuote(){
        CreateGrid(3,3);

        project.rows.get(1).cells.set(1, new Cell("line has \"quote\"", null));
        try {
            SUT.export(project, options, engine, writer);
        } catch (IOException e) {
            Assert.fail();
        }

        Assert.assertEquals(writer.toString(), "column0,column1,column2\n" +
                                               "row0cell0,row0cell1,row0cell2\n" +
                                               "row1cell0,\"line has \"\"quote\"\"\",row1cell2\n" +
                                               "row2cell0,row2cell1,row2cell2\n");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\CsvExporterTests;exportCsvWithEmptyCells();;;@Test
    public void exportCsvWithEmptyCells(){
        CreateGrid(3,3);

        project.rows.get(1).cells.set(1, null);
        project.rows.get(2).cells.set(0, null);
        try {
            SUT.export(project, options, engine, writer);
        } catch (IOException e) {
            Assert.fail();
        }

        Assert.assertEquals(writer.toString(), "column0,column1,column2\n" +
                                               "row0cell0,row0cell1,row0cell2\n" +
                                               "row1cell0,,row1cell2\n" +
                                               ",row2cell1,row2cell2\n");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\CsvExporterTests;CreateColumns(int);;;protected void CreateColumns(int noOfColumns){
        for(int i = 0; i < noOfColumns; i++){
            try {
                project.columnModel.addColumn(i, new Column(i, "column" + i), true);
            } catch (ModelException e1) {
                Assert.fail("Could not create column");
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\CsvExporterTests;CreateGrid(int,int);;;protected void CreateGrid(int noOfRows, int noOfColumns){
        CreateColumns(noOfColumns);

        for(int i = 0; i < noOfRows; i++){
            Row row = new Row(noOfColumns);
            for(int j = 0; j < noOfColumns; j++){
                row.cells.add(new Cell("row" + i + "cell" + j, null));
            }
            project.rows.add(row);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\TsvExporterTests;SetUp();;;@BeforeMethod
    public void SetUp(){
        SUT = new CsvExporter('\t');//new TsvExporter();
        writer = new StringWriter();
        project = new Project();
        engine = new Engine(project);
        options = mock(Properties.class);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\TsvExporterTests;TearDown();;;@AfterMethod
    public void TearDown(){
        SUT = null;
        writer = null;
        project = null;
        engine = null;
        options = null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\TsvExporterTests;exportSimpleTsv();;;@Test
    public void exportSimpleTsv(){
        CreateGrid(2, 2);

        try {
            SUT.export(project, options, engine, writer);
        } catch (IOException e) {
            Assert.fail();
        }

        Assert.assertEquals(writer.toString(), "column0\tcolumn1\n" +
                                               "row0cell0\trow0cell1\n" +
                                               "row1cell0\trow1cell1\n");

    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\TsvExporterTests;exportSimpleTsvNoHeader();;;@Test
    public void exportSimpleTsvNoHeader(){
        CreateGrid(2, 2);
        when(options.getProperty("printColumnHeader")).thenReturn("false");
        try {
            SUT.export(project, options, engine, writer);
        } catch (IOException e) {
            Assert.fail();
        }

        Assert.assertEquals(writer.toString(), "row0cell0\trow0cell1\n" +
                                               "row1cell0\trow1cell1\n");

        verify(options,times(1)).getProperty("printColumnHeader");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\TsvExporterTests;exportTsvWithLineBreaks();;;@Test
    public void exportTsvWithLineBreaks(){
        CreateGrid(3,3);

        project.rows.get(1).cells.set(1, new Cell("line\n\n\nbreak", null));
        try {
            SUT.export(project, options, engine, writer);
        } catch (IOException e) {
            Assert.fail();
        }

        Assert.assertEquals(writer.toString(), "column0\tcolumn1\tcolumn2\n" +
                                               "row0cell0\trow0cell1\trow0cell2\n" +
                                               "row1cell0\t\"line\n\n\nbreak\"\trow1cell2\n" +
                                               "row2cell0\trow2cell1\trow2cell2\n");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\TsvExporterTests;exportTsvWithComma();;;@Test
    public void exportTsvWithComma(){
        CreateGrid(3,3);

        project.rows.get(1).cells.set(1, new Cell("with\t tab", null));
        try {
            SUT.export(project, options, engine, writer);
        } catch (IOException e) {
            Assert.fail();
        }

        Assert.assertEquals(writer.toString(), "column0\tcolumn1\tcolumn2\n" +
                                               "row0cell0\trow0cell1\trow0cell2\n" +
                                               "row1cell0\t\"with\t tab\"\trow1cell2\n" +
                                               "row2cell0\trow2cell1\trow2cell2\n");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\TsvExporterTests;exportTsvWithQuote();;;@Test
    public void exportTsvWithQuote(){
        CreateGrid(3,3);

        project.rows.get(1).cells.set(1, new Cell("line has \"quote\"", null));
        try {
            SUT.export(project, options, engine, writer);
        } catch (IOException e) {
            Assert.fail();
        }

        Assert.assertEquals(writer.toString(), "column0\tcolumn1\tcolumn2\n" +
                                               "row0cell0\trow0cell1\trow0cell2\n" +
                                               "row1cell0\t\"line has \"\"quote\"\"\"\trow1cell2\n" +
                                               "row2cell0\trow2cell1\trow2cell2\n");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\TsvExporterTests;exportTsvWithEmptyCells();;;@Test
    public void exportTsvWithEmptyCells(){
        CreateGrid(3,3);

        project.rows.get(1).cells.set(1, null);
        project.rows.get(2).cells.set(0, null);
        try {
            SUT.export(project, options, engine, writer);
        } catch (IOException e) {
            Assert.fail();
        }

        Assert.assertEquals(writer.toString(), "column0\tcolumn1\tcolumn2\n" +
                                               "row0cell0\trow0cell1\trow0cell2\n" +
                                               "row1cell0\t\trow1cell2\n" +
                                               "\trow2cell1\trow2cell2\n");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\TsvExporterTests;CreateColumns(int);;;protected void CreateColumns(int noOfColumns){
        for(int i = 0; i < noOfColumns; i++){
            try {
                project.columnModel.addColumn(i, new Column(i, "column" + i), true);
                project.columnModel.columns.get(i).getCellIndex();
            } catch (ModelException e1) {
                Assert.fail("Could not create column");
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\exporters\TsvExporterTests;CreateGrid(int,int);;;protected void CreateGrid(int noOfRows, int noOfColumns){
        CreateColumns(noOfColumns);

        for(int i = 0; i < noOfRows; i++){
            Row row = new Row(noOfColumns);
            for(int j = 0; j < noOfColumns; j++){
                row.cells.add(new Cell("row" + i + "cell" + j, null));
            }
            project.rows.add(row);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\ImporterUtilitiesTests;parseCellValueWithText();;;@Test(enabled=false)
    public void parseCellValueWithText(){
        String END_QUOTES_SHOULD_BE_RETAINED = "\"To be\" is almost always followed by \"or not to be\"";
        String response = (String) ImporterUtilities.parseCellValue(END_QUOTES_SHOULD_BE_RETAINED);
        Assert.assertEquals(response, END_QUOTES_SHOULD_BE_RETAINED);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\ImporterUtilitiesTests;getIntegerOption();;;@Test
    public void getIntegerOption(){
        Properties options = mock(Properties.class);
        when(options.containsKey("testInteger")).thenReturn(true);
        when(options.getProperty("testInteger")).thenReturn("5");
        int response = ImporterUtilities.getIntegerOption("testInteger", options, -1);
        Assert.assertEquals(5, response);
        verify(options, times(1)).containsKey("testInteger");
        verify(options, times(1)).getProperty("testInteger");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\ImporterUtilitiesTests;getIntegerOptionReturnsDefaultOnError();;;@Test
    public void getIntegerOptionReturnsDefaultOnError(){
        Properties options = mock(Properties.class);
        when(options.containsKey("testInteger")).thenReturn(true);
        when(options.getProperty("testInteger")).thenReturn("notAnInteger");
        int response = ImporterUtilities.getIntegerOption("testInteger", options, -1);
        Assert.assertEquals(-1, response);
        verify(options, times(1)).containsKey("testInteger");
        verify(options, times(1)).getProperty("testInteger");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\ImporterUtilitiesTests;appendColumnName();;;@Test
    public void appendColumnName(){
        List<String> columnNames = new ArrayList<String>();


        ImporterUtilities.appendColumnName(columnNames, 0, "foo");
        ImporterUtilities.appendColumnName(columnNames, 1, "bar");
        Assert.assertEquals(columnNames.size(), 2);
        Assert.assertEquals(columnNames.get(0), "foo");
        Assert.assertEquals(columnNames.get(1), "bar");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\ImporterUtilitiesTests;appendColumnNameFromMultipleRows();;;@Test
    public void appendColumnNameFromMultipleRows(){
        List<String> columnNames = new ArrayList<String>();

        ImporterUtilities.appendColumnName(columnNames, 0, "foo");
        ImporterUtilities.appendColumnName(columnNames, 0, "bar");
        Assert.assertEquals(columnNames.size(), 1);
        Assert.assertEquals(columnNames.get(0), "foo bar");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\ImporterUtilitiesTests;ensureColumnsInRowExist();;;@Test
    public void ensureColumnsInRowExist(){
        String VALUE_1 = "value1";
        String VALUE_2 = "value2";
        Row row = new Row(2);
        ArrayList<String> columnNames = new ArrayList<String>(2);
        columnNames.add(VALUE_1);
        columnNames.add(VALUE_2);

        ImporterUtilities.ensureColumnsInRowExist(columnNames, row);

        Assert.assertEquals(columnNames.size(), 2);
        Assert.assertEquals(columnNames.get(0), VALUE_1);
        Assert.assertEquals(columnNames.get(1), VALUE_2);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\ImporterUtilitiesTests;ensureColumnsInRowExistDoesExpand();;;@Test
    public void ensureColumnsInRowExistDoesExpand(){
        Row row = new Row(4);
        for(int i = 1; i < 5; i++)
            row.cells.add(new Cell("value" + i, null));

        ArrayList<String> columnNames = new ArrayList<String>(2);


        ImporterUtilities.ensureColumnsInRowExist(columnNames, row);

        Assert.assertEquals(row.cells.size(), 4);
        Assert.assertEquals(columnNames.size(), 4);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\ImporterUtilitiesTests;setupColumns();;;@Test
    public void setupColumns(){
        Project project = new Project();
        List<String> columnNames = new ArrayList<String>();
        columnNames.add("col1");
        columnNames.add("col2");
        columnNames.add("");
        ImporterUtilities.setupColumns(project, columnNames);
        Assert.assertEquals( project.columnModel.columns.get(0).getName(), "col1" );
        Assert.assertEquals( project.columnModel.columns.get(1).getName(), "col2" );
        Assert.assertEquals( project.columnModel.columns.get(2).getName(), "Column");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\RdfTripleImporterTests;SetUp();;;@BeforeMethod
    public void SetUp(){
        SUT = new RdfTripleImporter();
        project = new Project();
        options = new Properties();
        options.put("base-url", "http://rdf.freebase.com");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\RdfTripleImporterTests;CanParseSingleLineTriple();;;@Test(enabled=false)
    public void CanParseSingleLineTriple(){
        String sampleRdf = "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.blood_on_the_tracks>.";
        StringReader reader = new StringReader(sampleRdf);

        try {
            SUT.read(reader, project, options);
            project.update();
        } catch (Exception e) {
            Assert.fail();
        }

        Assert.assertEquals(project.columnModel.columns.size(), 2);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "subject");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "http://rdf.freebase.com/ns/music.artist.album");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 2);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "http://rdf.freebase.com/ns/en.bob_dylan");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "http://rdf.freebase.com/ns/en.blood_on_the_tracks");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\RdfTripleImporterTests;CanParseMultiLineTriple();;;@Test
    public void CanParseMultiLineTriple(){
        String sampleRdf = "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.blood_on_the_tracks>.\n" +
            "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.under_the_red_sky>.\n" +
            "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.bringing_it_all_back_home>.";
        StringReader reader = new StringReader(sampleRdf);

        try {
            SUT.read(reader, project, options);
            project.update();
        } catch (Exception e) {
            Assert.fail();
        }

        //columns
        Assert.assertEquals(project.columnModel.columns.size(), 2);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "subject");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "http://rdf.freebase.com/ns/music.artist.album");

        //rows
        Assert.assertEquals(project.rows.size(), 3);
        
        //row0
        Assert.assertEquals(project.rows.get(0).cells.size(), 2);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "http://rdf.freebase.com/ns/en.bob_dylan");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "http://rdf.freebase.com/ns/en.blood_on_the_tracks");

        //row1
        Assert.assertEquals(project.rows.get(1).cells.size(), 2);
        Assert.assertNull(project.rows.get(1).cells.get(0));
        Assert.assertEquals(project.rows.get(1).cells.get(1).value, "http://rdf.freebase.com/ns/en.bringing_it_all_back_home"); //NB triples aren't created in order they were input
        Assert.assertEquals(project.recordModel.getRowDependency(1).cellDependencies[1].rowIndex, 0);
        Assert.assertEquals(project.recordModel.getRowDependency(1).cellDependencies[1].cellIndex, 0);

        //row2
        Assert.assertEquals(project.rows.get(2).cells.size(), 2);
        Assert.assertNull(project.rows.get(2).cells.get(0));
        Assert.assertEquals(project.rows.get(2).cells.get(1).value, "http://rdf.freebase.com/ns/en.under_the_red_sky"); //NB triples aren't created in order they were input
        Assert.assertEquals(project.recordModel.getRowDependency(2).cellDependencies[1].rowIndex, 0);
        Assert.assertEquals(project.recordModel.getRowDependency(2).cellDependencies[1].cellIndex, 0);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\RdfTripleImporterTests;CanParseMultiLineMultiPredicatesTriple();;;@Test
    public void CanParseMultiLineMultiPredicatesTriple(){
        String sampleRdf = "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.blood_on_the_tracks>.\n" +
            "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.genre> <http://rdf.freebase.com/ns/en.folk_rock>.\n" +
            "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/music.artist.album> <http://rdf.freebase.com/ns/en.bringing_it_all_back_home>.";
        StringReader reader = new StringReader(sampleRdf);

        try {
            SUT.read(reader, project, options);
            project.update();
        } catch (Exception e) {
            Assert.fail();
        }

        //columns
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "subject");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "http://rdf.freebase.com/ns/music.artist.album");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "http://rdf.freebase.com/ns/music.artist.genre");
        
        //rows
        Assert.assertEquals(project.rows.size(), 2);

        //row0
        Assert.assertEquals(project.rows.get(0).cells.size(), 3);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "http://rdf.freebase.com/ns/en.bob_dylan");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "http://rdf.freebase.com/ns/en.blood_on_the_tracks");
        Assert.assertEquals(project.rows.get(0).cells.get(2).value, "http://rdf.freebase.com/ns/en.folk_rock");

        //row1
        Assert.assertEquals(project.rows.get(1).cells.size(), 2);
        Assert.assertNull(project.rows.get(1).cells.get(0));
        Assert.assertEquals(project.rows.get(1).cells.get(1).value, "http://rdf.freebase.com/ns/en.bringing_it_all_back_home");
        Assert.assertEquals(project.recordModel.getRowDependency(1).cellDependencies[1].rowIndex, 0);
        Assert.assertEquals(project.recordModel.getRowDependency(1).cellDependencies[1].cellIndex, 0);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\RdfTripleImporterTests;CanParseTripleWithValue();;;@Test
    public void CanParseTripleWithValue(){
        String sampleRdf = "<http://rdf.freebase.com/ns/en.bob_dylan> <http://rdf.freebase.com/ns/common.topic.alias> \"Robert Zimmerman\"@en.";
        StringReader reader = new StringReader(sampleRdf);

        try {
            SUT.read(reader, project, options);
            project.update();
        } catch (Exception e) {
            Assert.fail();
        }

        Assert.assertEquals(project.columnModel.columns.size(), 2);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "subject");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "http://rdf.freebase.com/ns/common.topic.alias");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 2);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "http://rdf.freebase.com/ns/en.bob_dylan");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "\"Robert Zimmerman\"@en");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TestTools;AssertGridCreated(Project,int,int);;;public static void AssertGridCreated(Project project, int numCols, int numRows){
        Assert.assertNotNull(project);
        Assert.assertNotNull(project.columnModel);
        Assert.assertNotNull(project.columnModel.columns);
        Assert.assertEquals(project.columnModel.columns.size(), numCols);
        Assert.assertNotNull(project.rows);
        Assert.assertEquals(project.rows.size(), numRows);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TestTools;PrintProject(Project);;;public static void PrintProject(Project project){
        //some quick and dirty debugging
        StringBuilder sb = new StringBuilder();
        for(Column c : project.columnModel.columns){
            sb.append(c.getName());
            sb.append("; ");
        }
        logger.info(sb.toString());
        for(Row r : project.rows){
            sb = new StringBuilder();
            for(int i = 0; i < r.cells.size(); i++){
                Cell c = r.getCell(i);
                if(c != null){
                   sb.append(c.value);
                   sb.append("; ");
                }else{
                    sb.append("null; ");
                }
            }
            logger.info(sb.toString());
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;SetUp();;;@BeforeMethod
    public void SetUp(){
        SUT = new TsvCsvImporter();
        project = new Project(); //FIXME - should we try and use mock(Project.class); - seems unnecessary complexity
        properties = mock(Properties.class);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;TearDown();;;@AfterMethod
    public void TearDown(){
        SUT = null;
        project = null;
        properties = null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readJustColumns(String);;;@Test(dataProvider = "CSV-or-null")
    public void readJustColumns(String sep){
        String input = "col1,col2,col3";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));

        try {
            SUT.read(lnReader, project, sep, -1, 0, 0, 1, false, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "col1");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "col2");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "col3");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readUnseperatedData(String);;;@Test(dataProvider = "CSV-or-null")
    public void readUnseperatedData(String sep){
        String input = "value1,value2,value3";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));

        try {
            SUT.read(lnReader, project, sep, -1, 0, 0, 0, false, false);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 1);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "Column");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, input);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readSimpleData_CSV_1Header_1Row(String);;;@Test(dataProvider = "CSV-or-null")
    public void readSimpleData_CSV_1Header_1Row(String sep){
        String input = "col1,col2,col3\n" +
                       "data1,data2,data3";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));
        try {
            SUT.read(lnReader, project, sep, -1, 0, 0, 1, false, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "col1");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "col2");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "col3");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 3);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "data1");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "data2");
        Assert.assertEquals(project.rows.get(0).cells.get(2).value, "data3");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readSimpleData_TSV_1Header_1Row();;;@Test
    public void readSimpleData_TSV_1Header_1Row(){
        String input = "col1\tcol2\tcol3\n" +
                       "data1\tdata2\tdata3";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));
        try {
            SUT.read(lnReader, project, "\t", -1, 0, 0, 1, false, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "col1");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "col2");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "col3");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 3);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "data1");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "data2");
        Assert.assertEquals(project.rows.get(0).cells.get(2).value, "data3");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readSimpleData_CSV_1Header_1Row_GuessValues(String);;;@Test(dataProvider = "CSV-or-null")
    public void readSimpleData_CSV_1Header_1Row_GuessValues(String sep){
        String input = "col1,col2,col3\n" +
                       "data1,234,data3";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));
        try {
            SUT.read(lnReader, project, sep, -1, 0, 0, 1, true, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "col1");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "col2");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "col3");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 3);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "data1");
        Assert.assertTrue(project.rows.get(0).cells.get(1).value instanceof Long);
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, Long.parseLong("234"));
        Assert.assertEquals(project.rows.get(0).cells.get(2).value, "data3");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readSimpleData_0Header_1Row(String);;;@Test(dataProvider = "CSV-or-null")
    public void readSimpleData_0Header_1Row(String sep){
        String input = "data1,data2,data3";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));
        try {
            SUT.read(lnReader, project, sep, -1, 0, 0, 0, false, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "Column");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "Column2");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "Column3");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 3);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "data1");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "data2");
        Assert.assertEquals(project.rows.get(0).cells.get(2).value, "data3");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readDoesTrimsLeadingTrailingWhitespace(String);;;@Test(groups = {  }, dataProvider = "CSV-or-null")
    public void readDoesTrimsLeadingTrailingWhitespace(String sep){
        String input = " data1 , data2 , data3 ";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));
        try {
            SUT.read(lnReader, project, sep, -1, 0, 0, 0, false, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 3);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "data1");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "data2");
        Assert.assertEquals(project.rows.get(0).cells.get(2).value, "data3");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readTrimsLeadingTrailingWhitespace(String);;;@Test(dataProvider = "CSV-or-null")
    public void readTrimsLeadingTrailingWhitespace(String sep){
        String input = " data1, data2, data3";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));
        try {
            SUT.read(lnReader, project, sep, -1, 0, 0, 0, true, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 3);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "data1");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "data2");
        Assert.assertEquals(project.rows.get(0).cells.get(2).value, "data3");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readCanAddNull(String);;;@Test(dataProvider = "CSV-or-null")
    public void readCanAddNull(String sep){
        String input = " data1, , data3";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));
        try {
            SUT.read(lnReader, project, sep, -1, 0, 0, 0, true, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 3);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "data1");
        Assert.assertNull(project.rows.get(0).cells.get(1));
        Assert.assertEquals(project.rows.get(0).cells.get(2).value, "data3");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readSimpleData_2Header_1Row(String);;;@Test(dataProvider = "CSV-or-null")
    public void readSimpleData_2Header_1Row(String sep){
        String input = "col1,col2,col3\n" +
                       "sub1,sub2,sub3\n" +
                       "data1,data2,data3";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));
        try {
            SUT.read(lnReader, project, sep, -1, 0, 0, 2, false, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "col1 sub1");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "col2 sub2");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "col3 sub3");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 3);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "data1");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "data2");
        Assert.assertEquals(project.rows.get(0).cells.get(2).value, "data3");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readSimpleData_RowLongerThanHeader(String);;;@Test(dataProvider = "CSV-or-null")
    public void readSimpleData_RowLongerThanHeader(String sep){
        String input = "col1,col2,col3\n" +
        "data1,data2,data3,data4,data5,data6";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));
        try {
            SUT.read(lnReader, project, sep, -1, 0, 0, 1, false, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 6);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "col1");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "col2");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "col3");
        Assert.assertEquals(project.columnModel.columns.get(3).getName(), "Column");
        Assert.assertEquals(project.columnModel.columns.get(3).getName(), "Column");
        Assert.assertEquals(project.columnModel.columns.get(3).getName(), "Column");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 6);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "data1");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "data2");
        Assert.assertEquals(project.rows.get(0).cells.get(2).value, "data3");
        Assert.assertEquals(project.rows.get(0).cells.get(3).value, "data4");
        Assert.assertEquals(project.rows.get(0).cells.get(4).value, "data5");
        Assert.assertEquals(project.rows.get(0).cells.get(5).value, "data6");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readQuotedData(String);;;@Test(groups = { }, dataProvider = "CSV-or-null")
    public void readQuotedData(String sep){
        String input = "col1,col2,col3\n" +
                       "\"\"\"To Be\"\" is often followed by \"\"or not To Be\"\"\",data2";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));
        try {
            SUT.read(lnReader, project, sep, -1, 0, 0, 1, false, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "col1");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "col2");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "col3");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 2);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "\"To Be\" is often followed by \"or not To Be\"");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "data2");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readIgnoreFirstLine(String);;;@Test(dataProvider = "CSV-or-null")
    public void readIgnoreFirstLine(String sep){
        String input = "ignore1\n" +
                       "col1,col2,col3\n" +
                       "data1,data2,data3";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));
        try {
            SUT.read(lnReader, project, sep, -1, 0, 1, 1, false, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "col1");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "col2");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "col3");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 3);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "data1");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "data2");
        Assert.assertEquals(project.rows.get(0).cells.get(2).value, "data3");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readSkipFirstDataLine(String);;;@Test(dataProvider = "CSV-or-null")
    public void readSkipFirstDataLine(String sep){
        String input = "col1,col2,col3\n" +
                       "skip1\n" +
                       "data1,data2,data3";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));
        try {
            SUT.read(lnReader, project, sep, -1, 1, 0, 1, false, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "col1");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "col2");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "col3");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 3);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "data1");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "data2");
        Assert.assertEquals(project.rows.get(0).cells.get(2).value, "data3");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readIgnore3_Header2_Skip1(String);;;@Test(dataProvider = "CSV-or-null")
    public void readIgnore3_Header2_Skip1(String sep){
        String input = "ignore1\n" +
                       "ignore2\n" +
                       "ignore3\n" +
                       "col1,col2,col3\n" +
                       "sub1,sub2,sub3\n" +
                       "skip1\n" +
                       "data1,data2,data3";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));
        try {
            SUT.read(lnReader, project, sep, -1, 1, 3, 2, false, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "col1 sub1");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "col2 sub2");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "col3 sub3");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 3);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "data1");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "data2");
        Assert.assertEquals(project.rows.get(0).cells.get(2).value, "data3");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readIgnore3_Header2_Skip2_limit2(String);;;@Test(groups = {  }, dataProvider = "CSV-or-null")
    public void readIgnore3_Header2_Skip2_limit2(String sep){
        String input = "ignore1\n" +
                       "ignore2\n" +
                       "ignore3\n" +
                       "col1,col2,col3\n" +
                       "sub1,sub2,sub3\n" +
                       "skip1\n" +
                       "skip2\n" +
                       "data-row1-cell1,data-row1-cell2,data-row1-cell3\n" +
                       "data-row2-cell1,data-row2-cell2,\n" + //missing last data point of this row on purpose
                       "data-row3-cell1,data-row3-cell2,data-row1-cell3";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));
        try {
            SUT.read(lnReader, project, sep, 2, 2, 3, 2, false, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "col1 sub1");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "col2 sub2");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "col3 sub3");
        Assert.assertEquals(project.rows.size(), 2);
        Assert.assertEquals(project.rows.get(0).cells.size(), 3);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "data-row1-cell1");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "data-row1-cell2");
        Assert.assertEquals(project.rows.get(0).cells.get(2).value, "data-row1-cell3");
        Assert.assertEquals(project.rows.get(1).cells.size(), 3);
        Assert.assertEquals(project.rows.get(1).cells.get(0).value, "data-row2-cell1");
        Assert.assertEquals(project.rows.get(1).cells.get(1).value, "data-row2-cell2");
        Assert.assertNull(project.rows.get(1).cells.get(2));
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readWithMultiLinedQuotedData(String);;;@Test(groups = { }, dataProvider = "CSV-or-null")
    public void readWithMultiLinedQuotedData(String sep){
        String input = "col1,col2,col3\n" +
        	"\"\"\"To\n Be\"\" is often followed by \"\"or not To\n Be\"\"\",data2";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));
        try {
            SUT.read(lnReader, project, sep, -1, 0, 0, 1, false, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "col1");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "col2");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "col3");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 2);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "\"To\n Be\" is often followed by \"or not To\n Be\"");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "data2");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readWithMultiLinedQuotedDataAndBlankLines(String);;;@Test(groups = {  }, dataProvider = "CSV-or-null")
    public void readWithMultiLinedQuotedDataAndBlankLines(String sep){
        String input = "col1,col2,col3\n" +
            "\"A line with many \n\n\n\n\n empty lines\",data2";
        LineNumberReader lnReader = new LineNumberReader(new StringReader(input));
        try {
            SUT.read(lnReader, project, sep, -1, 0, 0, 1, false, true);
        } catch (IOException e) {
            Assert.fail();
        }
        Assert.assertEquals(project.columnModel.columns.size(), 3);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "col1");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "col2");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "col3");
        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 2);
        Assert.assertEquals(project.rows.get(0).cells.get(0).value, "A line with many \n\n\n\n\n empty lines");
        Assert.assertEquals(project.rows.get(0).cells.get(1).value, "data2");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;readCsvWithProperties();;;@Test
    public void readCsvWithProperties(){
        StringReader reader = new StringReader(SAMPLE_ROW);

        when(properties.getProperty("separator")).thenReturn(",");
        whenGetIntegerOption("ignore",properties,0);
        whenGetIntegerOption("header-lines",properties,0);
        whenGetIntegerOption("limit",properties,-1);
        whenGetIntegerOption("skip",properties,0);

        try {
            SUT.read(reader, project, properties);
        } catch (Exception e) {
            Assert.fail();
        }


        Assert.assertEquals(project.rows.size(), 1);
        Assert.assertEquals(project.rows.get(0).cells.size(), 3);
        Assert.assertEquals((String)project.rows.get(0).cells.get(0).value, "NDB_No");
        Assert.assertEquals((String)project.rows.get(0).cells.get(1).value, "Shrt_Desc");
        Assert.assertEquals((String)project.rows.get(0).cells.get(2).value, "Water");

        verify(properties, times(1)).getProperty("separator");
        verifyGetIntegerOption("ignore",properties);
        verifyGetIntegerOption("header-lines",properties);
        verifyGetIntegerOption("limit",properties);
        verifyGetIntegerOption("skip",properties);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;CSV_or_null();;;@DataProvider(name = "CSV-or-null")
    public Object[][] CSV_or_null(){
        return new Object[][]{{
                ",",
                null
        }};
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;whenGetIntegerOption(String,Properties,int);;;public void whenGetIntegerOption(String name, Properties properties, int def){
        when(properties.containsKey(name)).thenReturn(true);
        when(properties.getProperty(name)).thenReturn(Integer.toString(def));
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\TsvCsvImporterTests;verifyGetIntegerOption(String,Properties);;;public void verifyGetIntegerOption(String name, Properties properties){
        verify(properties, times(1)).containsKey(name);
        verify(properties, times(1)).getProperty(name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImporterTests;SetUp();;;@BeforeMethod
    public void SetUp(){
        SUT = new XmlImporter();
        project = new Project();
        options = mock(Properties.class);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImporterTests;TearDown();;;@AfterMethod
    public void TearDown() throws IOException{
        SUT = null;
        project = null;
        options = null;
        inputStream.close();
        inputStream = null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImporterTests;canParseSample();;;@Test
    public void canParseSample(){
        RunTest(getSample());

        TestTools.AssertGridCreated(project, 4, 6);
        TestTools.PrintProject(project);

        Row row = project.rows.get(0);
        Assert.assertNotNull(row);
        Assert.assertNotNull(row.getCell(1));
        Assert.assertEquals(row.getCell(1).value, "Author 1, The");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImporterTests;canParseSampleWithDuplicateNestedElements();;;@Test
    public void canParseSampleWithDuplicateNestedElements(){
        RunTest(getSampleWithDuplicateNestedElements());

        TestTools.PrintProject(project);
        TestTools.AssertGridCreated(project, 4, 12);

        Row row = project.rows.get(0);
        Assert.assertNotNull(row);
        Assert.assertEquals(row.cells.size(), 4);
        Assert.assertNotNull(row.getCell(2));
        Assert.assertEquals(row.getCell(1).value, "Author 1, The");
        Assert.assertEquals(project.rows.get(1).getCell(1).value, "Author 1, Another");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImporterTests;testCanParseLineBreak();;;@Test
    public void testCanParseLineBreak(){

        RunTest(getSampleWithLineBreak());

        TestTools.AssertGridCreated(project, 4, 6);
        TestTools.PrintProject(project);

        Row row = project.rows.get(3);
        Assert.assertNotNull(row);
        Assert.assertEquals(row.cells.size(), 4);
        Assert.assertNotNull(row.getCell(1));
        Assert.assertEquals(row.getCell(1).value, "With line\n break");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImporterTests;testElementsWithVaryingStructure();;;@Test(groups={"broken"})
    public void testElementsWithVaryingStructure(){
        RunTest(getSampleWithVaryingStructure());

        TestTools.AssertGridCreated(project, 5, 6);
        TestTools.PrintProject(project);

        Row row0 = project.rows.get(0);
        Assert.assertNotNull(row0);
        Assert.assertEquals(row0.cells.size(),6);

        Row row5  = project.rows.get(5);
        Assert.assertNotNull(row5);
        Assert.assertEquals(row5.cells.size(),6);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImporterTests;testElementWithNestedTree();;;@Test
    public void testElementWithNestedTree(){
        RunTest(getSampleWithTreeStructure());
        TestTools.AssertGridCreated(project, 5, 6);
        TestTools.PrintProject(project);
        Assert.assertEquals(project.columnModel.columnGroups.size(),1);
        Assert.assertEquals(project.columnModel.columnGroups.get(0).keyColumnIndex, 2);
        Assert.assertEquals(project.columnModel.columnGroups.get(0).startColumnIndex, 2);
        Assert.assertNull(project.columnModel.columnGroups.get(0).parentGroup);
        Assert.assertEquals(project.columnModel.columnGroups.get(0).subgroups.size(),0);
        Assert.assertEquals(project.columnModel.columnGroups.get(0).columnSpan,2);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImporterTests;getTypicalElement(int);;;public static String getTypicalElement(int id){
        return "<book id=\"" + id + "\">" +
        "<author>Author " + id + ", The</author>" +
        "<title>Book title " + id + "</title>" +
        "<publish_date>2010-05-26</publish_date>" +
        "</book>";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImporterTests;getElementWithDuplicateSubElement(int);;;public static String getElementWithDuplicateSubElement(int id){
        return "<book id=\"" + id + "\">" +
        "<author>Author " + id + ", The</author>" +
        "<author>Author " + id + ", Another</author>" +
        "<title>Book title " + id + "</title>" +
        "<publish_date>2010-05-26</publish_date>" +
        "</book>";
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImporterTests;getSample();;;public static String getSample(){
        StringBuilder sb = new StringBuilder();
        sb.append("<?xml version=\"1.0\"?><library>");
        for(int i = 1; i < 7; i++){
            sb.append(getTypicalElement(i));
        }
        sb.append("</library>");
        return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImporterTests;getSampleWithDuplicateNestedElements();;;public static String getSampleWithDuplicateNestedElements(){
        StringBuilder sb = new StringBuilder();
        sb.append("<?xml version=\"1.0\"?><library>");
        for(int i = 1; i < 7; i++){
            sb.append(getElementWithDuplicateSubElement(i));
        }
        sb.append("</library>");
        return sb.toString();

    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImporterTests;getSampleWithLineBreak();;;public static String getSampleWithLineBreak(){
        StringBuilder sb = new StringBuilder();
        sb.append("<?xml version=\"1.0\"?><library>");
        for(int i = 1; i < 4; i++){
            sb.append(getTypicalElement(i));
        }
        sb.append("<book id=\"4\">" +
                "<author>With line\n break</author>" +
                "<title>Book title 4</title>" +
                "<publish_date>2010-05-26</publish_date>" +
                "</book>");
        sb.append(getTypicalElement(5));
        sb.append(getTypicalElement(6));
        sb.append("</library>");
        return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImporterTests;getSampleWithVaryingStructure();;;public static String getSampleWithVaryingStructure(){
        StringBuilder sb = new StringBuilder();
        sb.append("<?xml version=\"1.0\"?><library>");
        for(int i = 1; i < 6; i++){
            sb.append(getTypicalElement(i));
        }
        sb.append("<book id=\"6\">" +
                "<author>Author 6, The</author>" +
                "<title>Book title 6</title>" +
                "<genre>New element not seen in other records</genre>" +
                "<publish_date>2010-05-26</publish_date>" +
                "</book>");
        sb.append("</library>");
        return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImporterTests;getSampleWithTreeStructure();;;public static String getSampleWithTreeStructure(){
        StringBuilder sb = new StringBuilder();
        sb.append("<?xml version=\"1.0\"?><library>");
        for(int i = 1; i < 7; i++){
            sb.append("<book id=\"" + i + "\">" +
                    "<author><author-name>Author " + i + ", The</author-name>" +
                    "<author-dob>1950-0" + i + "-15</author-dob></author>" +
                    "<title>Book title " + i + "</title>" +
                    "<publish_date>2010-05-26</publish_date>" +
                    "</book>");
        }
        sb.append("</library>");
        return sb.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImporterTests;RunTest(String);;;private void RunTest(String testString){
        try {
            inputStream = new ByteArrayInputStream( testString.getBytes( "UTF-8" ) );
        } catch (UnsupportedEncodingException e1) {
            Assert.fail();
        }

        try {
            SUT.read(inputStream, project, options);
        } catch (Exception e) {
            Assert.fail();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesStub;detectRecordElementWrapper(XMLStreamReader,String);;;public List<String> detectRecordElementWrapper(XMLStreamReader parser, String tag) throws XMLStreamException{
        return super.detectRecordElement(parser, tag);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesStub;ProcessSubRecordWrapper(Project,XMLStreamReader,ImportColumnGroup,ImportRecord);;;public void ProcessSubRecordWrapper(Project project, XMLStreamReader parser, ImportColumnGroup columnGroup, ImportRecord record) throws XMLStreamException{
        super.processSubRecord(project, parser, columnGroup, record);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesStub;findRecordWrapper(Project,XMLStreamReader,String[],int,ImportColumnGroup);;;public void findRecordWrapper(Project project, XMLStreamReader parser, String[] recordPath, int pathIndex, ImportColumnGroup rootColumnGroup) throws XMLStreamException{
        super.findRecord(project, parser, recordPath, pathIndex, rootColumnGroup);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesStub;processRecordWrapper(Project,XMLStreamReader,ImportColumnGroup);;;public void processRecordWrapper(Project project, XMLStreamReader parser, ImportColumnGroup rootColumnGroup) throws XMLStreamException{
        super.processRecord(project, parser, rootColumnGroup);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesStub;addCellWrapper(Project,ImportColumnGroup,ImportRecord,String,String,int);;;public void addCellWrapper(Project project, ImportColumnGroup columnGroup, ImportRecord record, String columnLocalName, String text, int commonStartingRowIndex){
        super.addCell(project, columnGroup, record, columnLocalName, text, commonStartingRowIndex);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;SetUp();;;@BeforeMethod
    public void SetUp(){
        org.apache.log4j.Logger.getRootLogger().setLevel(Level.toLevel("trace"));
        SUT = new XmlImportUtilitiesStub();
        project = new Project();
        columnGroup = new ImportColumnGroup();
        record = new ImportRecord();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;TearDown();;;@AfterMethod
    public void TearDown() throws IOException{
        SUT = null;
        project = null;
        parser = null;
        columnGroup = null;
        record = null;
        if(inputStream != null)
           inputStream.close();
        inputStream = null;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;detectPathFromTagTest();;;@Test
    public void detectPathFromTagTest(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        String tag = "library";

        String[] response = XmlImportUtilitiesStub.detectPathFromTag(inputStream, tag);
        Assert.assertNotNull(response);
        Assert.assertEquals(response.length, 1);
        Assert.assertEquals(response[0], "library");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;detectPathFromTagWithNestedElement();;;@Test
    public void detectPathFromTagWithNestedElement(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        String tag = "book";
        String[] response = XmlImportUtilitiesStub.detectPathFromTag(inputStream, tag);
        Assert.assertNotNull(response);
        Assert.assertEquals(response.length, 2);
        Assert.assertEquals(response[0], "library");
        Assert.assertEquals(response[1], "book");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;detectRecordElementTest();;;@Test
    public void detectRecordElementTest(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        createParser();
        String tag="library";

        List<String> response = new ArrayList<String>();
        try {
            response = SUT.detectRecordElementWrapper(parser, tag);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        Assert.assertNotNull(response);
        Assert.assertEquals(response.size(), 1);
        Assert.assertEquals(response.get(0), "library");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;detectRecordElementCanHandleWithNestedElements();;;@Test
    public void detectRecordElementCanHandleWithNestedElements(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        createParser();
        String tag="book";

        List<String> response = new ArrayList<String>();
        try {
            response = SUT.detectRecordElementWrapper(parser, tag);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        Assert.assertNotNull(response);
        Assert.assertEquals(response.size(), 2);
        Assert.assertEquals(response.get(0), "library");
        Assert.assertEquals(response.get(1), "book");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;detectRecordElementIsNullForUnfoundTag();;;@Test
    public void detectRecordElementIsNullForUnfoundTag(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        createParser();
        String tag="";

        List<String> response = new ArrayList<String>();
        try {
            response = SUT.detectRecordElementWrapper(parser, tag);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        Assert.assertNull(response);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;detectRecordElementRegressionTest();;;@Test
    public void detectRecordElementRegressionTest(){
        loadSampleXml();

        String[] path = XmlImportUtilitiesStub.detectRecordElement(inputStream);
        Assert.assertNotNull(path);
        Assert.assertEquals(path.length, 2);
        Assert.assertEquals(path[0], "library");
        Assert.assertEquals(path[1], "book");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;importXmlTest();;;@Test
    public void importXmlTest(){
        loadSampleXml();

        String[] recordPath = new String[]{"library","book"};
        XmlImportUtilitiesStub.importXml(inputStream, project, recordPath, columnGroup );

        TestTools.PrintProject(project);
        TestTools.AssertGridCreated(project, 0, 6);
        Assert.assertEquals(project.rows.get(0).cells.size(), 4);
        //TODO
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;createColumnsFromImportTest();;;@Test
    public void createColumnsFromImportTest(){

        ImportColumnGroup columnGroup = new ImportColumnGroup();
        ImportColumn ic1 = new ImportColumn();
        ic1.name = "hello";
        ImportColumn ic2 = new ImportColumn();
        ic2.name = "world";
        ImportColumnGroup subGroup = new ImportColumnGroup();
        ImportColumn ic3 = new ImportColumn();
        ic3.name = "foo";
        ImportColumn ic4 = new ImportColumn();
        ic4.name = "bar";
        subGroup.columns.put("c", ic3);
        subGroup.columns.put("d", ic4);
        columnGroup.columns.put("a", ic1);
        columnGroup.columns.put("b", ic2);
        columnGroup.subgroups.put("e", subGroup);
        XmlImportUtilitiesStub.createColumnsFromImport(project, columnGroup);
        TestTools.PrintProject(project);
        TestTools.AssertGridCreated(project, 4, 0);
        Assert.assertEquals(project.columnModel.columns.get(0).getName(), "world");
        Assert.assertEquals(project.columnModel.columns.get(1).getName(), "hello");
        Assert.assertEquals(project.columnModel.columns.get(2).getName(), "bar");
        Assert.assertEquals(project.columnModel.columns.get(3).getName(), "foo");
        Assert.assertEquals(project.columnModel.columnGroups.get(0).keyColumnIndex, 2);
        Assert.assertEquals(project.columnModel.columnGroups.get(0).startColumnIndex, 2);
        Assert.assertEquals(project.columnModel.columnGroups.get(0).columnSpan, 2);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;findRecordTest();;;@Test
    public void findRecordTest(){
        loadSampleXml();
        createParser();
        ParserSkip();

        String[] recordPath = new String[]{"library","book"};
        int pathIndex = 0;

        try {
            SUT.findRecordWrapper(project, parser, recordPath, pathIndex, columnGroup);
        } catch (XMLStreamException e) {
            Assert.fail();
        }

        TestTools.PrintProject(project);
        TestTools.AssertGridCreated(project, 0, 6);
        Assert.assertEquals(project.rows.get(0).cells.size(), 4);
        //TODO
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;processRecordTest();;;@Test
    public void processRecordTest(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        createParser();
        ParserSkip();

        try {
            SUT.processRecordWrapper(project, parser, columnGroup);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        TestTools.PrintProject(project);
        Assert.assertNotNull(project.rows);
        Assert.assertEquals(project.rows.size(), 1);
        Row row = project.rows.get(0);
        Assert.assertNotNull(row);
        Assert.assertNotNull(row.getCell(1));
        Assert.assertEquals(row.getCell(1).value, "author1");

    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;processRecordTestDuplicateColumns();;;@Test
    public void processRecordTestDuplicateColumns(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><author>author2</author><genre>genre1</genre></book></library>");
        createParser();
        ParserSkip();

        try {
            SUT.processRecordWrapper(project, parser, columnGroup);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        TestTools.PrintProject(project);
        Assert.assertNotNull(project.rows);
        Assert.assertEquals(project.rows.size(), 2);
        Row row = project.rows.get(0);
        Assert.assertNotNull(row);
        Assert.assertEquals(row.cells.size(), 3);
        Assert.assertNotNull(row.getCell(1));
        Assert.assertEquals(row.getCell(1).value, "author1");
        row = project.rows.get(1);
        Assert.assertEquals(row.getCell(1).value, "author2");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;processRecordTestNestedElement();;;@Test
    public void processRecordTestNestedElement(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author><author-name>author1</author-name><author-dob>a date</author-dob></author><genre>genre1</genre></book></library>");
        createParser();
        ParserSkip();

        try {
            SUT.processRecordWrapper(project, parser, columnGroup);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        TestTools.PrintProject(project);
        Assert.assertNotNull(project.rows);
        Assert.assertEquals(project.rows.size(), 1);
        Row row = project.rows.get(0);
        Assert.assertNotNull(row);
        Assert.assertEquals(row.cells.size(), 4);
        Assert.assertNotNull(row.getCell(1));
        Assert.assertEquals(row.getCell(1).value, "author1");
        Assert.assertNotNull(row.getCell(2));
        Assert.assertEquals(row.getCell(2).value, "a date");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;processSubRecordTest();;;@Test(groups={"broken"})
    public void processSubRecordTest(){
        loadXml("<?xml version=\"1.0\"?><library><book id=\"1\"><author>author1</author><genre>genre1</genre></book></library>");
        createParser();
        ParserSkip();

        try {
            SUT.ProcessSubRecordWrapper(project, parser, columnGroup, record);
        } catch (XMLStreamException e) {
            Assert.fail();
        }
        TestTools.PrintProject(project);
        Assert.fail();
        //TODO need to verify 'record' was set correctly which we can't do as ImportRecord is an internal class
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;addCellTest();;;@Test(groups={"broken"})
    public void addCellTest(){
        String columnLocalName = "author";
        String text = "Author1, The";
        int commonStartingRowIndex = 0;
        project.rows.add(new Row(0));
        SUT.addCellWrapper(project, columnGroup, record, columnLocalName, text, commonStartingRowIndex);

        Assert.fail();
        //TODO need to verify 'record' was set correctly which we can't do as ImportRecord is an internal class
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;loadSampleXml();;;public void loadSampleXml(){
        loadXml( XmlImporterTests.getSample() );
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;loadXml(String);;;public void loadXml(String xml){
        try {
            inputStream = new ByteArrayInputStream( xml.getBytes( "UTF-8" ) );
        } catch (UnsupportedEncodingException e1) {
            Assert.fail();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;ParserSkip();;;public void ParserSkip(){
        try {
            parser.next(); //move parser forward once e.g. skip the START_DOCUMENT parser event
        } catch (XMLStreamException e1) {
            Assert.fail();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\importers\XmlImportUtilitiesTests;createParser();;;public void createParser(){
        try {
            parser = XMLInputFactory.newInstance().createXMLStreamReader(inputStream);
        } catch (XMLStreamException e1) {
            Assert.fail();
        } catch (FactoryConfigurationError e1) {
            Assert.fail();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\util\ParsingUtilitiesTests;evaluateJsonStringToObjectRegressionTest();;;@Test
    public void evaluateJsonStringToObjectRegressionTest(){
        try {
            JSONObject o = ParsingUtilities.evaluateJsonStringToObject("{\"foo\":\"bar\"}");
            Assert.assertNotNull(o);
            Assert.assertEquals("bar", o.getString("foo"));
        } catch (JSONException e) {
            Assert.fail();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\util\ParsingUtilitiesTests;evaluateJsonStringToObjectWithNullParameters();;;@Test
    public void evaluateJsonStringToObjectWithNullParameters(){
        try {
            Assert.assertNull(ParsingUtilities.evaluateJsonStringToObject(null));
            Assert.fail();
        } catch (IllegalArgumentException e){
            //expected
        } catch (JSONException e) {
            Assert.fail();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\main\tests\server\src\com\metaweb\gridworks\tests\util\ParsingUtilitiesTests;evaluateJsonStringToObjectWithMalformedParameters();;;@Test
    public void evaluateJsonStringToObjectWithMalformedParameters(){
        try {
            ParsingUtilities.evaluateJsonStringToObject("malformed");
            Assert.fail();
        } catch (JSONException e) {
            //expected
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Configurations;get(String);;;public static String get(final String name) {
        return System.getProperty(name);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Configurations;get(String,String);;;public static String get(final String name, final String def) {
        final String val = get(name);
        return (val == null) ? def : val;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Configurations;getBoolean(String,boolean);;;public static boolean getBoolean(final String name, final boolean def) {
        final String val = get(name);
        return (val == null) ? def : Boolean.parseBoolean(val);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Configurations;getInteger(String,int);;;public static int getInteger(final String name, final int def) {
        final String val = get(name);
        try {
            return (val == null) ? def : Integer.parseInt(val);
        } catch (NumberFormatException e) {
            throw new RuntimeException("Could not parse '" + val + "' as an integer number.", e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Configurations;getFloat(String,float);;;public static float getFloat(final String name, final float def) {
        final String val = get(name);
        try {
            return (val == null) ? def : Float.parseFloat(val);
        } catch (NumberFormatException e) {
            throw new RuntimeException("Could not parse '" + val + "' as a floating point number.", e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Gridworks;main(String[]);;;public static void main(String[] args) throws Exception {
        
        // tell jetty to use SLF4J for logging instead of its own stuff
        System.setProperty("VERBOSE","false");
        System.setProperty("org.mortbay.log.class","org.mortbay.log.Slf4jLog");
        
        // tell macosx to keep the menu associated with the screen
        System.setProperty("apple.laf.useScreenMenuBar", "true");  
        System.setProperty("com.apple.eawt.CocoaComponent.CompatibilityMode", "false"); 

        // tell the signpost library to log
        //System.setProperty("debug","true");
            
        // if not already set, make sure jython can find its python stuff
        if (System.getProperty("python.path") == null) {
            System.setProperty("python.path","lib/python");
        }
        
        // set the log verbosity level
        org.apache.log4j.Logger.getRootLogger().setLevel(Level.toLevel(Configurations.get("gridworks.verbosity","info")));

        port = Configurations.getInteger("gridworks.port",DEFAULT_PORT);
        host = Configurations.get("gridworks.host",DEFAULT_HOST);

        Gridworks gridworks = new Gridworks();
        
        gridworks.init(args);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Gridworks;init(String[]);;;public void init(String[] args) throws Exception {

        GridworksServer server = new GridworksServer();
        server.init(host,port);

        boolean headless = Configurations.getBoolean("gridworks.headless",false);
        if (!headless) {
            try {
                GridworksClient client = new GridworksClient();
                client.init(host,port);
            } catch (Exception e) {
                logger.warn("Sorry, some error prevented us from launching the browser for you.\n\n Point your browser to http://" + host + ":" + port + "/ to start using Gridworks.");
            }
        }
        
        // hook up the signal handlers
        Runtime.getRuntime().addShutdownHook(
            new Thread(new ShutdownSignalHandler(server))
        );
 
        server.join();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Gridworks;init(String,int);;;public void init(String host, int port) throws Exception {
        logger.info("Starting Server bound to '" + host + ":" + port + "'");

        String memory = Configurations.get("gridworks.memory");
        if (memory != null) logger.info("Max memory size: " + memory);
        
        int maxThreads = Configurations.getInteger("gridworks.queue.size", 30);
        int maxQueue = Configurations.getInteger("gridworks.queue.max_size", 300);
        long keepAliveTime = Configurations.getInteger("gridworks.queue.idle_time", 60);

        LinkedBlockingQueue<Runnable> queue = new LinkedBlockingQueue<Runnable>(maxQueue);
        
        threadPool = new ThreadPoolExecutor(maxThreads, maxQueue, keepAliveTime, TimeUnit.SECONDS, queue);

        this.setThreadPool(new ThreadPoolExecutorAdapter(threadPool));
        
        Connector connector = new SocketConnector();
        connector.setPort(port);
        connector.setHost(host);
        connector.setMaxIdleTime(Configurations.getInteger("gridworks.connection.max_idle_time",60000));
        connector.setStatsOn(false);
        this.addConnector(connector);

        final File contextRoot = new File(Configurations.get("gridworks.webapp","webapp"));
        final String contextPath = Configurations.get("gridworks.context_path","/");

        File webXml = new File(contextRoot, "WEB-INF/web.xml");
        if (!webXml.isFile()) {
            logger.warn("Warning: Failed to find web application. Could not find 'web.xml' at '" + webXml.getAbsolutePath() + "'");
            System.exit(-1);
        }

        logger.info("Initializing context: '" + contextPath + "' from '" + contextRoot.getAbsolutePath() + "'");
        WebAppContext context = new WebAppContext(contextRoot.getAbsolutePath(), contextPath);
        context.setMaxFormContentSize(1048576);
        //context.setCopyWebDir(false);
        //context.setDefaultsDescriptor(null);

        this.setHandler(context);
        this.setStopAtShutdown(true);
        this.setSendServerVersion(true);

        // Enable context autoreloading
        if (Configurations.getBoolean("gridworks.autoreloading",false)) {
            scanForUpdates(contextRoot, context);
        }
        
        // start the server
        this.start();
        
        // inject configuration parameters in the servlets
        // NOTE: this is done *after* starting the server because jetty might override the init
        // parameters if we set them in the webapp context upon reading the web.xml file
        ServletHolder servlet = context.getServletHandler().getServlet("gridworks");
        servlet.setInitParameter("gridworks.data", getDataDir());
        servlet.doStart();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Gridworks;doStop();;;@Override
    protected void doStop() throws Exception {    
        try {
            // shutdown our scheduled tasks first, if any
            if (threadPool != null) threadPool.shutdown();
            
            // then let the parent stop
            super.doStop();
        } catch (InterruptedException e) {
            // ignore
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Gridworks;scanForUpdates(File,WebAppContext);;;static private void scanForUpdates(final File contextRoot, final WebAppContext context) {
        List<File> scanList = new ArrayList<File>();

        scanList.add(new File(contextRoot, "WEB-INF/web.xml"));
        findFiles(".class", new File(contextRoot, "WEB-INF/classes"), scanList);

        logger.info("Starting autoreloading scanner... ");

        Scanner scanner = new Scanner();
        scanner.setScanInterval(Configurations.getInteger("gridworks.scanner.period",1));
        scanner.setScanDirs(scanList);
        scanner.setReportExistingFilesOnStartup(false);

        scanner.addListener(new Scanner.BulkListener() {
            @SuppressWarnings("unchecked")
            public void filesChanged(List changedFiles) {
                try {
                    logger.info("Stopping context: " + contextRoot.getAbsolutePath());
                    context.stop();

                    logger.info("Starting context: " + contextRoot.getAbsolutePath());
                    context.start();
                } catch (Exception ex) {
                    throw new RuntimeException(ex);
                }
            }
        });

        scanner.start();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Gridworks;findFiles(String,File,Collection<File>);;;static private void findFiles(final String extension, File baseDir, final Collection<File> found) {
        baseDir.listFiles(new FileFilter() {
            public boolean accept(File pathname) {
                if (pathname.isDirectory()) {
                    findFiles(extension, pathname, found);
                } else if (pathname.getName().endsWith(extension)) {
                    found.add(pathname);
                }
                return false;
            }
        });
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Gridworks;getDataDir();;;static private String getDataDir() {
        
        String data_dir = Configurations.get("gridworks.data_dir");
        if (data_dir != null) {
            return data_dir;
        }
        
        String os = System.getProperty("os.name").toLowerCase();
        if (os.contains("windows")) {
            try {
                // NOTE(SM): finding the "local data app" in windows from java is actually a PITA
                // see http://stackoverflow.com/questions/1198911/how-to-get-local-application-data-folder-in-java
                // so we're using a library that uses JNI to ask directly the win32 APIs, 
                // it's not elegant but it's the safest bet.
                
                DataPath localDataPath = JDataPathSystem.getLocalSystem().getLocalDataPath("Gridworks");
                File data = new File(fixWindowsUnicodePath(localDataPath.getPath()));
                data.mkdirs();
                return data.getAbsolutePath();
            } catch (Error e) {
                /*
                 *  The above trick can fail, particularly on a 64-bit OS as the jdatapath.dll
                 *  we include is compiled for 32-bit. In this case, we just have to dig up
                 *  environment variables and try our best to find a user-specific path.
                 */
                
                logger.warn("Failed to use jdatapath to detect user data path: resorting to environment variables");
                
                File parentDir = null;
                String appData = System.getenv("APPDATA"); 
                if (appData != null && appData.length() > 0) {
                    // e.g., C:\Users\[userid]\AppData\Roaming
                    parentDir = new File(appData);
                } else {
                    String userProfile = System.getenv("USERPROFILE");
                    if (userProfile != null && userProfile.length() > 0) {
                        // e.g., C:\Users\[userid]
                        parentDir = new File(userProfile);
                    }
                }

                if (parentDir == null) {
                    parentDir = new File(".");
                }
                
                File data = new File(parentDir, "Gridworks");
                data.mkdirs();
                
                return data.getAbsolutePath();
            }
        } else if (os.contains("mac os x")) {
            // on macosx, use "~/Library/Application Support"
            String home = System.getProperty("user.home");
            String data_home = (home != null) ? home + "/Library/Application Support/Gridworks" : ".gridworks"; 
            File data = new File(data_home);
            data.mkdirs();
            return data.getAbsolutePath();
        } else { // most likely a UNIX flavor
            // start with the XDG environment
            // see http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
            String data_home = System.getenv("XDG_DATA_HOME");
            if (data_home == null) { // if not found, default back to ~/.local/share
                String home = System.getProperty("user.home");
                if (home == null) home = ".";
                data_home = home + "/.local/share";
            }
            File data = new File(data_home + "/gridworks");
            data.mkdirs();
            return data.getAbsolutePath();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Gridworks;fixWindowsUnicodePath(String);;;static private String fixWindowsUnicodePath(String path) {
        int q = path.indexOf('?');
        if (q < 0) {
            return path;
        }
        int pathSep = path.indexOf(File.separatorChar, q);
        
        String goodPath = System.getenv("APPDATA");
        if (goodPath == null || goodPath.length() == 0) {
            goodPath = System.getenv("USERPROFILE");
            if (!goodPath.endsWith(File.separator)) {
                goodPath = goodPath + File.separator;
            }
        }
        
        int goodPathSep = goodPath.indexOf(File.separatorChar, q);
        
        return path.substring(0, q) + goodPath.substring(q, goodPathSep) + path.substring(pathSep);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Gridworks;init(String,int);;;@SuppressWarnings("unchecked")
    public void init(String host, int port) throws Exception {

        uri = new URI("http://" + host + ":" + port + "/");

        if (MACOSX) {

            // for more info on the code found here that is macosx-specific see:
            //  http://developer.apple.com/mac/library/documentation/Java/Conceptual/Java14Development/07-NativePlatformIntegration/NativePlatformIntegration.html
            //  http://developer.apple.com/mac/library/releasenotes/CrossPlatform/JavaSnowLeopardUpdate1LeopardUpdate6RN/NewandNoteworthy/NewandNoteworthy.html

            JMenuBar mb = new JMenuBar(); 
            JMenu m = new JMenu("Open");
            JMenuItem mi = new JMenuItem("Open New Gridworks Window...");
            mi.addActionListener(this);
            m.add(mi);
            mb.add(m);

            Class applicationClass = Class.forName("com.apple.eawt.Application"); 
            Object macOSXApplication = applicationClass.getConstructor((Class[]) null).newInstance((Object[]) null);
            Method setDefaultMenuBar = applicationClass.getDeclaredMethod("setDefaultMenuBar", new Class[] { JMenuBar.class });
            setDefaultMenuBar.invoke(macOSXApplication, new Object[] { mb });
           
            // FIXME(SM): this part below doesn't seem to work, I get a NPE but I have *no* idea why, suggestions?
            
//            PopupMenu dockMenu = new PopupMenu("dock");
//            MenuItem mmi = new MenuItem("Open new Gridworks Window...");
//            mmi.addActionListener(this);
//            dockMenu.add(mmi);
//            this.add(dockMenu);
//
//            Method setDockMenu = applicationClass.getDeclaredMethod("setDockMenu", new Class[] { PopupMenu.class });
//            setDockMenu.invoke(macOSXApplication, new Object[] { dockMenu });
        }
        
        openBrowser();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Gridworks;actionPerformed(ActionEvent);;;public void actionPerformed(ActionEvent e) { 
      String item = e.getActionCommand(); 
      if (item.startsWith("Open")) {
          openBrowser();
      }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Gridworks;openBrowser();;;private void openBrowser() {
        try {
            Desktop.getDesktop().browse(uri);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Gridworks;ShutdownSignalHandler(Server);;;public ShutdownSignalHandler(Server server) {
        this._server = server;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\gridworks\Gridworks;run();;;public void run() {

        // Tell the server we want to try and shutdown gracefully
        // this means that the server will stop accepting new connections
        // right away but it will continue to process the ones that
        // are in execution for the given timeout before attempting to stop
        // NOTE: this is *not* a blocking method, it just sets a parameter
        //       that _server.stop() will rely on
        _server.setGracefulShutdown(3000);

        try {
            _server.stop();
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\logging\IndentingLayout;activateOptions();;;public void activateOptions() {
        // no options at this time
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\logging\IndentingLayout;format(LoggingEvent);;;public String format(LoggingEvent event) {
        String message = event.getRenderedMessage();
        if (message == null) return "";
        if (message.length() < 2) return message;
        
        char leader = message.charAt(0);
        char secondLeader = message.charAt(1);
        if ((leader == '<') && (secondLeader == ' ') && (this.indentation > 0)) this.indentation--;

        // Reset buf
        StringBuffer buf = new StringBuffer(256);

        Date date = new Date();
        long now = date.getTime();
        calendar.setTime(date);

        long delta = 0;
        if (previousTime > 0) {
            delta = now - previousTime;
        }
        previousTime = now;

//        if ((previousTime == 0) || (delta > MAX_DELTA)) {
//            buf.append('\n');
//            indentation = 0; // reset indentation after a while, as we might
//            // have runaway/unmatched log entries
//        }

        int hour = calendar.get(Calendar.HOUR_OF_DAY);
        if (hour < 10) buf.append('0');
        buf.append(hour);
        buf.append(':');

        int mins = calendar.get(Calendar.MINUTE);
        if (mins < 10) buf.append('0');
        buf.append(mins);
        buf.append(':');

        int secs = calendar.get(Calendar.SECOND);
        if (secs < 10) buf.append('0');
        buf.append(secs);
        buf.append('.');

        int millis = (int) (now % 1000);
        if (millis < 100) buf.append('0');
        if (millis < 10) buf.append('0');
        buf.append(millis);

        buf.append(" [");
        String context = ((String) event.getMDC("LogEvent"));
        if (context == null) {
            context = event.getLoggerName();
        }
        if (context.length() < CONTEXT_SIZE) {
            pad(buf, CONTEXT_SIZE - context.length(), ' ');
            buf.append(context);
        } else {
            buf.append("..");
            buf.append(context.substring(context.length() - CONTEXT_SIZE + 2));
        }
        buf.append("] ");

        pad(buf, indentation, ' ');

        buf.append(message);

        buf.append(" (");
        buf.append(delta);
        buf.append("ms)\n");

        if ((leader == '>') && (secondLeader == ' ')) indentation++;

        return buf.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\logging\IndentingLayout;pad(StringBuffer,int,char);;;private void pad(StringBuffer buffer, int pads, char padchar) {
        for (int i = 0; i < pads; i++) {
            buffer.append(padchar);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\logging\IndentingLayout;ignoresThrowable();;;public boolean ignoresThrowable() {
        return true;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\threads\ThreadPoolExecutorAdapter;ThreadPoolExecutorAdapter(ThreadPoolExecutor);;;public ThreadPoolExecutorAdapter(ThreadPoolExecutor executor) {
        this.executor = executor;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\threads\ThreadPoolExecutorAdapter;dispatch(Runnable);;;public boolean dispatch(Runnable job) {
        try {
            executor.execute(job);
            return true;
        } catch (RejectedExecutionException e) {
            Log.warn(e);
            return false;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\threads\ThreadPoolExecutorAdapter;getIdleThreads();;;public int getIdleThreads() {
        return executor.getPoolSize() - executor.getActiveCount();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\threads\ThreadPoolExecutorAdapter;getThreads();;;public int getThreads() {
        return executor.getPoolSize();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\threads\ThreadPoolExecutorAdapter;isLowOnThreads();;;public boolean isLowOnThreads() {
        return executor.getActiveCount() >= executor.getMaximumPoolSize();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\threads\ThreadPoolExecutorAdapter;join();;;public void join() throws InterruptedException {
        executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\threads\ThreadPoolExecutorAdapter;isFailed();;;public boolean isFailed() {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\threads\ThreadPoolExecutorAdapter;isRunning();;;public boolean isRunning() {
        return !executor.isTerminated() && !executor.isTerminating();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\threads\ThreadPoolExecutorAdapter;isStarted();;;public boolean isStarted() {
        return !executor.isTerminated() && !executor.isTerminating();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\threads\ThreadPoolExecutorAdapter;isStarting();;;public boolean isStarting() {
        return false;
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\threads\ThreadPoolExecutorAdapter;isStopped();;;public boolean isStopped() {
        return executor.isTerminated();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\threads\ThreadPoolExecutorAdapter;isStopping();;;public boolean isStopping() {
        return executor.isTerminating();
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\threads\ThreadPoolExecutorAdapter;start();;;public void start() throws Exception {
        if (executor.isTerminated() || executor.isTerminating()
                || executor.isShutdown()) {
            throw new IllegalStateException("Cannot restart");
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\threads\ThreadPoolExecutorAdapter;stop();;;public void stop() throws Exception {
        executor.shutdown();
        if (!executor.awaitTermination(60, TimeUnit.SECONDS)) {
            executor.shutdownNow();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\threads\ThreadPoolExecutorAdapter;addLifeCycleListener(Listener);;;public void addLifeCycleListener(Listener listener) {
        System.err.println("we should implement this!");
    }
E:\Mestrado\FPFNAnalysis\projects\OpenRefine\revisions\rev_e3fc7ab_ecca18f\rev_e3fc7ab-ecca18f;\server\src\com\metaweb\util\threads\ThreadPoolExecutorAdapter;removeLifeCycleListener(Listener);;;public void removeLifeCycleListener(Listener listener) {
        System.err.println("we should implement this!");
    }
E:\Mestrado\FPFNAnalysis\projects\Osmand\revisions\rev_6b959dd_8ceaed0\rev_6b959dd-8ceaed0;\DataExtractionOSM\src\net\osmand\data\DataTileManager;getObjectsCount();		;;
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;setUpClass();        if (logger.isInfoEnabled());;        if(logger.isInfoEnabled())
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;tearDownClass();        if (hostNames != null);;        if(hostNames != null)
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();            Map<String,Integer> oldNodeIdMap = new HashMap<String,Integer>(nodeIds);;;            Map<String, Integer> oldNodeIdMap = new HashMap<String, Integer>(nodeIds);
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();            assertEquals("correct number of nodes added", newNodeIds.size(), ec2GossipTestConfig.numNewNodes);;;            assertEquals("correct number of nodes added",
                         newNodeIds.size(),
                         ec2GossipTestConfig.numNewNodes);
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();            for (String newHostname : newHostnames) {
                if (oldHostnames.contains(newHostname)) {;;            for(String newHostname: newHostnames) {
                if(oldHostnames.contains(newHostname)) {
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();            for (Integer newNodeId: newNodeIds) {
                if (oldNodeIdSet.contains(newNodeId)) {;;            for(Integer newNodeId: newNodeIds) {
                if(oldNodeIdSet.contains(newNodeId)) {
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();            for (String oldHostname: oldHostnames) {;;            for(String oldHostname: oldHostnames) {
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();            int peerNodeId = Iterables.find(nodeIds.values(),
                                          new Predicate<Integer>() {
                                              public boolean apply(Integer input) {
                                                  return !newNodeIds.contains(input);
                                              }
                                          });
            ;;            int peerNodeId = Iterables.find(nodeIds.values(), new Predicate<Integer>() {

                public boolean apply(Integer input) {
                    return !newNodeIds.contains(input);
                }
            });
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();            for (String hostname: newHostnames) {;;            for(String hostname: newHostnames) {
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();                AdminClient adminClient = new AdminClient("tcp://" + hostname + ":6666", new AdminClientConfig());;;                AdminClient adminClient = new AdminClient("tcp://" + hostname + ":6666",
                                                          new AdminClientConfig());
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();                Versioned<String> versioned = adminClient.getRemoteMetadata(nodeId, MetadataStore.CLUSTER_KEY);;;                Versioned<String> versioned = adminClient.getRemoteMetadata(nodeId,
                                                                            MetadataStore.CLUSTER_KEY);
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();                ;;
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();                vectorClock.incrementVersion(nodeId,  System.currentTimeMillis());;;                vectorClock.incrementVersion(nodeId, System.currentTimeMillis());
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();                    adminClient.updateRemoteMetadata(peerNodeId, MetadataStore.CLUSTER_KEY, versioned);;;                    adminClient.updateRemoteMetadata(peerNodeId,
                                                     MetadataStore.CLUSTER_KEY,
                                                     versioned);
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();                } catch (VoldemortException e) {;;                } catch(VoldemortException e) {
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();;;
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();                private AdminClient adminClient = new AdminClient("tcp://" + hostNames.get(0) + ":6666",
                                                      new AdminClientConfig());
                ;;                private AdminClient adminClient = new AdminClient("tcp://" + hostNames.get(0)
                                                                          + ":6666",
                                                                  new AdminClientConfig());
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();                    for (int testNodeId: oldNodeIdSet) {;;                    for(int testNodeId: oldNodeIdSet) {
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();                            for (Node node: cluster.getNodes()) {;;                            for(Node node: cluster.getNodes()) {
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;testGossip();                        } catch (VoldemortException e) {;;                        } catch(VoldemortException e) {
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;expandCluster();private static Pair<List<Integer>,List<String>> expandCluster() throws Exception {
        List<HostNamePair> newInstances = createInstances(ec2GossipTestConfig.numNewNodes, ec2GossipTestConfig);;;private static Pair<List<Integer>, List<String>> expandCluster() throws Exception {
        List<HostNamePair> newInstances = createInstances(ec2GossipTestConfig.numNewNodes,
                                                          ec2GossipTestConfig);
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;expandCluster();        if (logger.isInfoEnabled());;        if(logger.isInfoEnabled())
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;expandCluster();        if (logger.isInfoEnabled());;        if(logger.isInfoEnabled())
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2GossipTest;expandCluster();        
        return new Pair<List<Integer>,List<String>>(
                       Lists.transform(newHostnames,
                                       new Function<String, Integer>() {
                                           public Integer apply(String hostname) {
                                               return nodeIds.get(hostname);
                                           }
                                       }),
                       newHostnames);;;
        return new Pair<List<Integer>, List<String>>(Lists.transform(newHostnames,
                                                                     new Function<String, Integer>() {

                                                                         public Integer apply(String hostname) {
                                                                             return nodeIds.get(hostname);
                                                                         }
                                                                     }),
                                                     newHostnames);
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\contrib\ec2-testing\test\voldemort\utils\Ec2RebalanceTest;useDonorBased();;;@Override
    protected boolean useDonorBased() {
        return this.useDonorBased;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\admin\AdminClient;updateEntries(int,String,Iterator<Pair<ByteArray,Versioned<byte[]>>>,VoldemortFilter,long,long,Runnable);;;public void updateEntries(int nodeId,
                              String storeName,
                              Iterator<Pair<ByteArray, Versioned<byte[]>>> entryIterator,
                              VoldemortFilter filter,
                              final long flushInterval,
                              final long flushCount,
                              Runnable flushCallback) {
        Node node = this.getAdminClientCluster().getNodeById(nodeId);
        SocketDestination destination = new SocketDestination(node.getHost(),
                                                              node.getAdminPort(),
                                                              RequestFormatType.ADMIN_PROTOCOL_BUFFERS);
        SocketAndStreams sands = pool.checkout(destination);
        DataOutputStream outputStream = sands.getOutputStream();
        DataInputStream inputStream = sands.getInputStream();
        boolean firstMessage = true;
        long flushTimer = MAX_FLUSH_TIMER;
        long printStatsTimer = System.currentTimeMillis() + PRINT_STATS_INTERVAL;
        long entryCount = 0;

        try {
            if(entryIterator.hasNext()) {
                while(entryIterator.hasNext()) {
                    Pair<ByteArray, Versioned<byte[]>> entry = entryIterator.next();
                    VAdminProto.PartitionEntry partitionEntry = VAdminProto.PartitionEntry.newBuilder()
                                                                                          .setKey(ProtoUtils.encodeBytes(entry.getFirst()))
                                                                                          .setVersioned(ProtoUtils.encodeVersioned(entry.getSecond()))
                                                                                          .build();
                    VAdminProto.UpdatePartitionEntriesRequest.Builder updateRequest = VAdminProto.UpdatePartitionEntriesRequest.newBuilder()
                                                                                                                               .setStore(storeName)
                                                                                                                               .setPartitionEntry(partitionEntry);
                    entryCount++;
                    if(firstMessage) {
                        if(filter != null) {
                            updateRequest.setFilter(encodeFilter(filter));
                        }

                        ProtoUtils.writeMessage(outputStream,
                                                VAdminProto.VoldemortAdminRequest.newBuilder()
                                                                                 .setType(VAdminProto.AdminRequestType.UPDATE_PARTITION_ENTRIES)
                                                                                 .setUpdatePartitionEntries(updateRequest)
                                                                                 .build());
                        // flush the first message regardless by passing in 0 as
                        // the flushTimer
                        flushWithCallback(0, entryCount, flushCount, flushCallback, outputStream);
                        // reset the flush timer
                        flushTimer = System.currentTimeMillis() + flushInterval;
                        firstMessage = false;
                    } else {
                        ProtoUtils.writeMessage(outputStream, updateRequest.build());
                        if(flushWithCallback(flushTimer,
                                             entryCount,
                                             flushCount,
                                             flushCallback,
                                             outputStream)) {
                            // reset counters after each flush
                            flushTimer = System.currentTimeMillis() + flushInterval;
                        }
                    }

                    if(printStatsTimer <= System.currentTimeMillis()
                       || 0 == entryCount % PRINT_STATS_THRESHOLD) {
                        logger.info("UpdatePartitionEntries: fetched " + entryCount + " to node "
                                    + nodeId + " for store " + storeName);
                        printStatsTimer = System.currentTimeMillis() + PRINT_STATS_INTERVAL;
                    }
                }
                ProtoUtils.writeEndOfStream(outputStream);
                // flush the last message regardless by passing in 0 as the
                // flushTimer
                flushWithCallback(0, entryCount, flushCount, flushCallback, outputStream);
                VAdminProto.UpdatePartitionEntriesResponse.Builder updateResponse = ProtoUtils.readToBuilder(inputStream,
                                                                                                             VAdminProto.UpdatePartitionEntriesResponse.newBuilder());
                if(updateResponse.hasError()) {
                    throwException(updateResponse.getError());
                }
            }
        } catch(IOException e) {
            close(sands.getSocket());
            throw new VoldemortException(e);
        } finally {
            pool.checkin(destination, sands);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\admin\AdminClient;flushWithCallback(long,long,long,Runnable,DataOutputStream);;;private boolean flushWithCallback(long flushTimer,
                                      long entryCounter,
                                      long flushCount,
                                      Runnable callback,
                                      DataOutputStream outputStream) throws IOException {
        boolean flushed = false;
        if(flushTimer <= System.currentTimeMillis() || 0 == entryCounter % flushCount) {
            outputStream.flush();
            if(null != callback) {
                callback.run();
            }
            flushed = true;
        }
        return flushed;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\admin\AdminClient;rebalanceNode(List<RebalancePartitionsInfo>);;;public int rebalanceNode(List<RebalancePartitionsInfo> stealInfos) {
        List<VAdminProto.RebalancePartitionInfoMap> rebalancePartitionInfoMap = ProtoUtils.encodeRebalancePartitionInfoMap(stealInfos);
        VAdminProto.InitiateRebalanceNodeOnDonorRequest rebalanceNodeRequest = VAdminProto.InitiateRebalanceNodeOnDonorRequest.newBuilder()
                                                                                                                              .addAllRebalancePartitionInfo(rebalancePartitionInfoMap)
                                                                                                                              .build();
        VAdminProto.VoldemortAdminRequest adminRequest = VAdminProto.VoldemortAdminRequest.newBuilder()
                                                                                          .setType(VAdminProto.AdminRequestType.INITIATE_REBALANCE_NODE_ON_DONOR)
                                                                                          .setInitiateRebalanceNodeOnDonor(rebalanceNodeRequest)
                                                                                          .build();
        VAdminProto.AsyncOperationStatusResponse.Builder response = sendAndReceive(stealInfos.get(0)
                                                                                             .getDonorId(),
                                                                                   adminRequest,
                                                                                   VAdminProto.AsyncOperationStatusResponse.newBuilder());

        if(response.hasError())
            throwException(response.getError());

        return response.getRequestId();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\admin\AdminClient;deleteStoreRebalanceState(int,int,String);;;public void deleteStoreRebalanceState(int donorNodeId, int stealerNodeId, String storeName) {

        VAdminProto.VoldemortAdminRequest request = VAdminProto.VoldemortAdminRequest.newBuilder()
                                                                                     .setType(VAdminProto.AdminRequestType.DELETE_STORE_REBALANCE_STATE)
                                                                                     .setDeleteStoreRebalanceState(VAdminProto.DeleteStoreRebalanceStateRequest.newBuilder()
                                                                                                                                                               .setNodeId(donorNodeId)
                                                                                                                                                               .setStoreName(storeName)
                                                                                                                                                               .build())
                                                                                     .build();
        VAdminProto.DeleteStoreRebalanceStateResponse.Builder response = sendAndReceive(stealerNodeId,
                                                                                        request,
                                                                                        VAdminProto.DeleteStoreRebalanceStateResponse.newBuilder());
        if(response.hasError())
            throwException(response.getError());

    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\admin\AdminClient;getRemoteRebalancerState(int);;;public Versioned<RebalancerState> getRemoteRebalancerState(int nodeId) {
        Versioned<String> value = getRemoteMetadata(nodeId, MetadataStore.REBALANCING_STEAL_INFO);
        return new Versioned<RebalancerState>(RebalancerState.create(value.getValue()),
                                              value.getVersion());
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\ProtoUtils;decodeRebalancePartitionInfoMap(List<VAdminProto.RebalancePartitionInfoMap>);;;public static List<RebalancePartitionsInfo> decodeRebalancePartitionInfoMap(List<VAdminProto.RebalancePartitionInfoMap> rebalancePartitionInfoMaps) {
        List<RebalancePartitionsInfo> infos = Lists.newArrayList();
        for(RebalancePartitionInfoMap map: rebalancePartitionInfoMaps) {
            infos.add(decodeRebalancePartitionInfoMap(map));
        }
        return infos;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\ProtoUtils;encodeRebalancePartitionInfoMap(List<RebalancePartitionsInfo>);;;public static List<RebalancePartitionInfoMap> encodeRebalancePartitionInfoMap(List<RebalancePartitionsInfo> stealInfos) {
        List<RebalancePartitionInfoMap> maps = Lists.newArrayList();
        for(RebalancePartitionsInfo info: stealInfos) {
            maps.add(encodeRebalancePartitionInfoMap(info));
        }
        return maps;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;valueOf(int);;;        case 26: return INITIATE_REBALANCE_NODE_ON_DONOR;
        case 27: return DELETE_STORE_REBALANCE_STATE;
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;InitiateRebalanceNodeOnDonorRequest();;;private InitiateRebalanceNodeOnDonorRequest() {
      initFields();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;InitiateRebalanceNodeOnDonorRequest(boolean);;;private InitiateRebalanceNodeOnDonorRequest(boolean noInit) {}
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDefaultInstance();;;public static InitiateRebalanceNodeOnDonorRequest getDefaultInstance() {
      return defaultInstance;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDefaultInstanceForType();;;public InitiateRebalanceNodeOnDonorRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDescriptor();;;public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return voldemort.client.protocol.pb.VAdminProto.internal_static_voldemort_InitiateRebalanceNodeOnDonorRequest_descriptor;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;internalGetFieldAccessorTable();;;protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return voldemort.client.protocol.pb.VAdminProto.internal_static_voldemort_InitiateRebalanceNodeOnDonorRequest_fieldAccessorTable;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getRebalancePartitionInfoList();;;public java.util.List<voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap> getRebalancePartitionInfoList() {
      return rebalancePartitionInfo_;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getRebalancePartitionInfoCount();;;public int getRebalancePartitionInfoCount() { return rebalancePartitionInfo_.size(); }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getRebalancePartitionInfo(int);;;public voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap getRebalancePartitionInfo(int index) {
      return rebalancePartitionInfo_.get(index);
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;initFields();;;private void initFields() {
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;isInitialized();;;public final boolean isInitialized() {
      for (voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap element : getRebalancePartitionInfoList()) {
        if (!element.isInitialized()) return false;
      }
      return true;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;writeTo(com.google.protobuf.CodedOutputStream);;;public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap element : getRebalancePartitionInfoList()) {
        output.writeMessage(1, element);
      }
      getUnknownFields().writeTo(output);
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getSerializedSize();;;public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      for (voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap element : getRebalancePartitionInfoList()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, element);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(com.google.protobuf.ByteString);;;public static voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(com.google.protobuf.ByteString,com.google.protobuf.ExtensionRegistryLite);;;public static voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(byte[]);;;public static voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(byte[],com.google.protobuf.ExtensionRegistryLite);;;public static voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(java.io.InputStream);;;public static voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite);;;public static voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseDelimitedFrom(java.io.InputStream);;;public static voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseDelimitedFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite);;;public static voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(com.google.protobuf.CodedInputStream);;;public static voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite);;;public static voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;newBuilder();;;public static Builder newBuilder() { return Builder.create(); }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;newBuilderForType();;;public Builder newBuilderForType() { return newBuilder(); }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;newBuilder(voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest);;;public static Builder newBuilder(voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;toBuilder();;;public Builder toBuilder() { return newBuilder(this); }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;Builder();;;private Builder() {}
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;create();;;private static Builder create() {
        Builder builder = new Builder();
        builder.result = new voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest();
        return builder;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;internalGetResult();;;protected voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest internalGetResult() {
        return result;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;clear();;;public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest();
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;clone();;;public Builder clone() {
        return create().mergeFrom(result);
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDescriptorForType();;;public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest.getDescriptor();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDefaultInstanceForType();;;public voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest getDefaultInstanceForType() {
        return voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest.getDefaultInstance();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;isInitialized();;;public boolean isInitialized() {
        return result.isInitialized();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;build();;;public voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;buildParsed();;;private voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;buildPartial();;;public voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        if (result.rebalancePartitionInfo_ != java.util.Collections.EMPTY_LIST) {
          result.rebalancePartitionInfo_ =
            java.util.Collections.unmodifiableList(result.rebalancePartitionInfo_);
        }
        voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest returnMe = result;
        result = null;
        return returnMe;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;mergeFrom(com.google.protobuf.Message);;;public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest) {
          return mergeFrom((voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;mergeFrom(voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest);;;public Builder mergeFrom(voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest other) {
        if (other == voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest.getDefaultInstance()) return this;
        if (!other.rebalancePartitionInfo_.isEmpty()) {
          if (result.rebalancePartitionInfo_.isEmpty()) {
            result.rebalancePartitionInfo_ = new java.util.ArrayList<voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap>();
          }
          result.rebalancePartitionInfo_.addAll(other.rebalancePartitionInfo_);
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite);;;public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap.Builder subBuilder = voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap.newBuilder();
              input.readMessage(subBuilder, extensionRegistry);
              addRebalancePartitionInfo(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getRebalancePartitionInfoList();;;public java.util.List<voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap> getRebalancePartitionInfoList() {
        return java.util.Collections.unmodifiableList(result.rebalancePartitionInfo_);
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getRebalancePartitionInfoCount();;;public int getRebalancePartitionInfoCount() {
        return result.getRebalancePartitionInfoCount();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getRebalancePartitionInfo(int);;;public voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap getRebalancePartitionInfo(int index) {
        return result.getRebalancePartitionInfo(index);
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;setRebalancePartitionInfo(int,voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap);;;public Builder setRebalancePartitionInfo(int index, voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.rebalancePartitionInfo_.set(index, value);
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;setRebalancePartitionInfo(int,voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap.Builder);;;public Builder setRebalancePartitionInfo(int index, voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap.Builder builderForValue) {
        result.rebalancePartitionInfo_.set(index, builderForValue.build());
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;addRebalancePartitionInfo(voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap);;;public Builder addRebalancePartitionInfo(voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap value) {
        if (value == null) {
          throw new NullPointerException();
        }
        if (result.rebalancePartitionInfo_.isEmpty()) {
          result.rebalancePartitionInfo_ = new java.util.ArrayList<voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap>();
        }
        result.rebalancePartitionInfo_.add(value);
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;addRebalancePartitionInfo(voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap.Builder);;;public Builder addRebalancePartitionInfo(voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap.Builder builderForValue) {
        if (result.rebalancePartitionInfo_.isEmpty()) {
          result.rebalancePartitionInfo_ = new java.util.ArrayList<voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap>();
        }
        result.rebalancePartitionInfo_.add(builderForValue.build());
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;addAllRebalancePartitionInfo(java.lang.Iterable<?extendsvoldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap>);;;public Builder addAllRebalancePartitionInfo(
          java.lang.Iterable<? extends voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap> values) {
        if (result.rebalancePartitionInfo_.isEmpty()) {
          result.rebalancePartitionInfo_ = new java.util.ArrayList<voldemort.client.protocol.pb.VAdminProto.RebalancePartitionInfoMap>();
        }
        super.addAll(values, result.rebalancePartitionInfo_);
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;clearRebalancePartitionInfo();;;public Builder clearRebalancePartitionInfo() {
        result.rebalancePartitionInfo_ = java.util.Collections.emptyList();
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;DeleteStoreRebalanceStateRequest();;;private DeleteStoreRebalanceStateRequest() {
      initFields();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;DeleteStoreRebalanceStateRequest(boolean);;;private DeleteStoreRebalanceStateRequest(boolean noInit) {}
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDefaultInstance();;;public static DeleteStoreRebalanceStateRequest getDefaultInstance() {
      return defaultInstance;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDefaultInstanceForType();;;public DeleteStoreRebalanceStateRequest getDefaultInstanceForType() {
      return defaultInstance;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDescriptor();;;public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return voldemort.client.protocol.pb.VAdminProto.internal_static_voldemort_DeleteStoreRebalanceStateRequest_descriptor;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;internalGetFieldAccessorTable();;;protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return voldemort.client.protocol.pb.VAdminProto.internal_static_voldemort_DeleteStoreRebalanceStateRequest_fieldAccessorTable;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;hasStoreName();;;public boolean hasStoreName() { return hasStoreName; }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getStoreName();;;public java.lang.String getStoreName() { return storeName_; }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;hasNodeId();;;public boolean hasNodeId() { return hasNodeId; }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getNodeId();;;public int getNodeId() { return nodeId_; }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;initFields();;;private void initFields() {
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;isInitialized();;;public final boolean isInitialized() {
      if (!hasStoreName) return false;
      if (!hasNodeId) return false;
      return true;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;writeTo(com.google.protobuf.CodedOutputStream);;;public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasStoreName()) {
        output.writeString(1, getStoreName());
      }
      if (hasNodeId()) {
        output.writeInt32(2, getNodeId());
      }
      getUnknownFields().writeTo(output);
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getSerializedSize();;;public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasStoreName()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getStoreName());
      }
      if (hasNodeId()) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, getNodeId());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(com.google.protobuf.ByteString);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(com.google.protobuf.ByteString,com.google.protobuf.ExtensionRegistryLite);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(byte[]);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(byte[],com.google.protobuf.ExtensionRegistryLite);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(java.io.InputStream);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseDelimitedFrom(java.io.InputStream);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseDelimitedFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(com.google.protobuf.CodedInputStream);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;newBuilder();;;public static Builder newBuilder() { return Builder.create(); }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;newBuilderForType();;;public Builder newBuilderForType() { return newBuilder(); }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;newBuilder(voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest);;;public static Builder newBuilder(voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;toBuilder();;;public Builder toBuilder() { return newBuilder(this); }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;Builder();;;private Builder() {}
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;create();;;private static Builder create() {
        Builder builder = new Builder();
        builder.result = new voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest();
        return builder;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;internalGetResult();;;protected voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest internalGetResult() {
        return result;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;clear();;;public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest();
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;clone();;;public Builder clone() {
        return create().mergeFrom(result);
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDescriptorForType();;;public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest.getDescriptor();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDefaultInstanceForType();;;public voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest getDefaultInstanceForType() {
        return voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest.getDefaultInstance();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;isInitialized();;;public boolean isInitialized() {
        return result.isInitialized();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;build();;;public voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;buildParsed();;;private voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;buildPartial();;;public voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest returnMe = result;
        result = null;
        return returnMe;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;mergeFrom(com.google.protobuf.Message);;;public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest) {
          return mergeFrom((voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;mergeFrom(voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest);;;public Builder mergeFrom(voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest other) {
        if (other == voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest.getDefaultInstance()) return this;
        if (other.hasStoreName()) {
          setStoreName(other.getStoreName());
        }
        if (other.hasNodeId()) {
          setNodeId(other.getNodeId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite);;;public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              setStoreName(input.readString());
              break;
            }
            case 16: {
              setNodeId(input.readInt32());
              break;
            }
          }
        }
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;hasStoreName();;;public boolean hasStoreName() {
        return result.hasStoreName();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getStoreName();;;public java.lang.String getStoreName() {
        return result.getStoreName();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;setStoreName(java.lang.String);;;public Builder setStoreName(java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  result.hasStoreName = true;
        result.storeName_ = value;
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;clearStoreName();;;public Builder clearStoreName() {
        result.hasStoreName = false;
        result.storeName_ = getDefaultInstance().getStoreName();
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;hasNodeId();;;public boolean hasNodeId() {
        return result.hasNodeId();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getNodeId();;;public int getNodeId() {
        return result.getNodeId();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;setNodeId(int);;;public Builder setNodeId(int value) {
        result.hasNodeId = true;
        result.nodeId_ = value;
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;clearNodeId();;;public Builder clearNodeId() {
        result.hasNodeId = false;
        result.nodeId_ = 0;
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;DeleteStoreRebalanceStateResponse();;;private DeleteStoreRebalanceStateResponse() {
      initFields();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;DeleteStoreRebalanceStateResponse(boolean);;;private DeleteStoreRebalanceStateResponse(boolean noInit) {}
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDefaultInstance();;;public static DeleteStoreRebalanceStateResponse getDefaultInstance() {
      return defaultInstance;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDefaultInstanceForType();;;public DeleteStoreRebalanceStateResponse getDefaultInstanceForType() {
      return defaultInstance;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDescriptor();;;public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return voldemort.client.protocol.pb.VAdminProto.internal_static_voldemort_DeleteStoreRebalanceStateResponse_descriptor;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;internalGetFieldAccessorTable();;;protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return voldemort.client.protocol.pb.VAdminProto.internal_static_voldemort_DeleteStoreRebalanceStateResponse_fieldAccessorTable;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;hasError();;;public boolean hasError() { return hasError; }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getError();;;public voldemort.client.protocol.pb.VProto.Error getError() { return error_; }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;initFields();;;private void initFields() {
      error_ = voldemort.client.protocol.pb.VProto.Error.getDefaultInstance();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;isInitialized();;;public final boolean isInitialized() {
      if (hasError()) {
        if (!getError().isInitialized()) return false;
      }
      return true;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;writeTo(com.google.protobuf.CodedOutputStream);;;public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (hasError()) {
        output.writeMessage(1, getError());
      }
      getUnknownFields().writeTo(output);
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getSerializedSize();;;public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (hasError()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getError());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(com.google.protobuf.ByteString);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(com.google.protobuf.ByteString,com.google.protobuf.ExtensionRegistryLite);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(byte[]);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(byte[],com.google.protobuf.ExtensionRegistryLite);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(java.io.InputStream);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseDelimitedFrom(java.io.InputStream);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseDelimitedFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(com.google.protobuf.CodedInputStream);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;parseFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite);;;public static voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;newBuilder();;;public static Builder newBuilder() { return Builder.create(); }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;newBuilderForType();;;public Builder newBuilderForType() { return newBuilder(); }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;newBuilder(voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse);;;public static Builder newBuilder(voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;toBuilder();;;public Builder toBuilder() { return newBuilder(this); }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;Builder();;;private Builder() {}
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;create();;;private static Builder create() {
        Builder builder = new Builder();
        builder.result = new voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse();
        return builder;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;internalGetResult();;;protected voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse internalGetResult() {
        return result;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;clear();;;public Builder clear() {
        if (result == null) {
          throw new IllegalStateException(
            "Cannot call clear() after build().");
        }
        result = new voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse();
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;clone();;;public Builder clone() {
        return create().mergeFrom(result);
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDescriptorForType();;;public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse.getDescriptor();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDefaultInstanceForType();;;public voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse getDefaultInstanceForType() {
        return voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse.getDefaultInstance();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;isInitialized();;;public boolean isInitialized() {
        return result.isInitialized();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;build();;;public voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse build() {
        if (result != null && !isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return buildPartial();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;buildParsed();;;private voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        if (!isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return buildPartial();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;buildPartial();;;public voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse buildPartial() {
        if (result == null) {
          throw new IllegalStateException(
            "build() has already been called on this Builder.");
        }
        voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse returnMe = result;
        result = null;
        return returnMe;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;mergeFrom(com.google.protobuf.Message);;;public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse) {
          return mergeFrom((voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;mergeFrom(voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse);;;public Builder mergeFrom(voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse other) {
        if (other == voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateResponse.getDefaultInstance()) return this;
        if (other.hasError()) {
          mergeError(other.getError());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite);;;public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                return this;
              }
              break;
            }
            case 10: {
              voldemort.client.protocol.pb.VProto.Error.Builder subBuilder = voldemort.client.protocol.pb.VProto.Error.newBuilder();
              if (hasError()) {
                subBuilder.mergeFrom(getError());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setError(subBuilder.buildPartial());
              break;
            }
          }
        }
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;hasError();;;public boolean hasError() {
        return result.hasError();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getError();;;public voldemort.client.protocol.pb.VProto.Error getError() {
        return result.getError();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;setError(voldemort.client.protocol.pb.VProto.Error);;;public Builder setError(voldemort.client.protocol.pb.VProto.Error value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasError = true;
        result.error_ = value;
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;setError(voldemort.client.protocol.pb.VProto.Error.Builder);;;public Builder setError(voldemort.client.protocol.pb.VProto.Error.Builder builderForValue) {
        result.hasError = true;
        result.error_ = builderForValue.build();
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;mergeError(voldemort.client.protocol.pb.VProto.Error);;;public Builder mergeError(voldemort.client.protocol.pb.VProto.Error value) {
        if (result.hasError() &&
            result.error_ != voldemort.client.protocol.pb.VProto.Error.getDefaultInstance()) {
          result.error_ =
            voldemort.client.protocol.pb.VProto.Error.newBuilder(result.error_).mergeFrom(value).buildPartial();
        } else {
          result.error_ = value;
        }
        result.hasError = true;
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;clearError();;;public Builder clearError() {
        result.hasError = false;
        result.error_ = voldemort.client.protocol.pb.VProto.Error.getDefaultInstance();
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;hasInitiateRebalanceNodeOnDonor();;;public boolean hasInitiateRebalanceNodeOnDonor() { return hasInitiateRebalanceNodeOnDonor; }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getInitiateRebalanceNodeOnDonor();;;public voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest getInitiateRebalanceNodeOnDonor() { return initiateRebalanceNodeOnDonor_; }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;hasDeleteStoreRebalanceState();;;public boolean hasDeleteStoreRebalanceState() { return hasDeleteStoreRebalanceState; }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDeleteStoreRebalanceState();;;public voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest getDeleteStoreRebalanceState() { return deleteStoreRebalanceState_; }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;initFields();;;      initiateRebalanceNodeOnDonor_ = voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest.getDefaultInstance();
      deleteStoreRebalanceState_ = voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest.getDefaultInstance();
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;isInitialized();;;      if (hasInitiateRebalanceNodeOnDonor()) {
        if (!getInitiateRebalanceNodeOnDonor().isInitialized()) return false;
      }
      if (hasDeleteStoreRebalanceState()) {
        if (!getDeleteStoreRebalanceState().isInitialized()) return false;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;writeTo(com.google.protobuf.CodedOutputStream);;;      if (hasInitiateRebalanceNodeOnDonor()) {
        output.writeMessage(28, getInitiateRebalanceNodeOnDonor());
      }
      if (hasDeleteStoreRebalanceState()) {
        output.writeMessage(29, getDeleteStoreRebalanceState());
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getSerializedSize();;;      if (hasInitiateRebalanceNodeOnDonor()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(28, getInitiateRebalanceNodeOnDonor());
      }
      if (hasDeleteStoreRebalanceState()) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(29, getDeleteStoreRebalanceState());
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;mergeFrom(voldemort.client.protocol.pb.VAdminProto.VoldemortAdminRequest);;;        if (other.hasInitiateRebalanceNodeOnDonor()) {
          mergeInitiateRebalanceNodeOnDonor(other.getInitiateRebalanceNodeOnDonor());
        }
        if (other.hasDeleteStoreRebalanceState()) {
          mergeDeleteStoreRebalanceState(other.getDeleteStoreRebalanceState());
        }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite);;;            case 226: {
              voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest.Builder subBuilder = voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest.newBuilder();
              if (hasInitiateRebalanceNodeOnDonor()) {
                subBuilder.mergeFrom(getInitiateRebalanceNodeOnDonor());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setInitiateRebalanceNodeOnDonor(subBuilder.buildPartial());
              break;
            }
            case 234: {
              voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest.Builder subBuilder = voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest.newBuilder();
              if (hasDeleteStoreRebalanceState()) {
                subBuilder.mergeFrom(getDeleteStoreRebalanceState());
              }
              input.readMessage(subBuilder, extensionRegistry);
              setDeleteStoreRebalanceState(subBuilder.buildPartial());
              break;
            }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;hasInitiateRebalanceNodeOnDonor();;;public boolean hasInitiateRebalanceNodeOnDonor() {
        return result.hasInitiateRebalanceNodeOnDonor();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getInitiateRebalanceNodeOnDonor();;;public voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest getInitiateRebalanceNodeOnDonor() {
        return result.getInitiateRebalanceNodeOnDonor();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;setInitiateRebalanceNodeOnDonor(voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest);;;public Builder setInitiateRebalanceNodeOnDonor(voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasInitiateRebalanceNodeOnDonor = true;
        result.initiateRebalanceNodeOnDonor_ = value;
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;setInitiateRebalanceNodeOnDonor(voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest.Builder);;;public Builder setInitiateRebalanceNodeOnDonor(voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest.Builder builderForValue) {
        result.hasInitiateRebalanceNodeOnDonor = true;
        result.initiateRebalanceNodeOnDonor_ = builderForValue.build();
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;mergeInitiateRebalanceNodeOnDonor(voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest);;;public Builder mergeInitiateRebalanceNodeOnDonor(voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest value) {
        if (result.hasInitiateRebalanceNodeOnDonor() &&
            result.initiateRebalanceNodeOnDonor_ != voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest.getDefaultInstance()) {
          result.initiateRebalanceNodeOnDonor_ =
            voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest.newBuilder(result.initiateRebalanceNodeOnDonor_).mergeFrom(value).buildPartial();
        } else {
          result.initiateRebalanceNodeOnDonor_ = value;
        }
        result.hasInitiateRebalanceNodeOnDonor = true;
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;clearInitiateRebalanceNodeOnDonor();;;public Builder clearInitiateRebalanceNodeOnDonor() {
        result.hasInitiateRebalanceNodeOnDonor = false;
        result.initiateRebalanceNodeOnDonor_ = voldemort.client.protocol.pb.VAdminProto.InitiateRebalanceNodeOnDonorRequest.getDefaultInstance();
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;hasDeleteStoreRebalanceState();;;public boolean hasDeleteStoreRebalanceState() {
        return result.hasDeleteStoreRebalanceState();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;getDeleteStoreRebalanceState();;;public voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest getDeleteStoreRebalanceState() {
        return result.getDeleteStoreRebalanceState();
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;setDeleteStoreRebalanceState(voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest);;;public Builder setDeleteStoreRebalanceState(voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest value) {
        if (value == null) {
          throw new NullPointerException();
        }
        result.hasDeleteStoreRebalanceState = true;
        result.deleteStoreRebalanceState_ = value;
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;setDeleteStoreRebalanceState(voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest.Builder);;;public Builder setDeleteStoreRebalanceState(voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest.Builder builderForValue) {
        result.hasDeleteStoreRebalanceState = true;
        result.deleteStoreRebalanceState_ = builderForValue.build();
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;mergeDeleteStoreRebalanceState(voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest);;;public Builder mergeDeleteStoreRebalanceState(voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest value) {
        if (result.hasDeleteStoreRebalanceState() &&
            result.deleteStoreRebalanceState_ != voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest.getDefaultInstance()) {
          result.deleteStoreRebalanceState_ =
            voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest.newBuilder(result.deleteStoreRebalanceState_).mergeFrom(value).buildPartial();
        } else {
          result.deleteStoreRebalanceState_ = value;
        }
        result.hasDeleteStoreRebalanceState = true;
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\protocol\pb\VAdminProto;clearDeleteStoreRebalanceState();;;public Builder clearDeleteStoreRebalanceState() {
        result.hasDeleteStoreRebalanceState = false;
        result.deleteStoreRebalanceState_ = voldemort.client.protocol.pb.VAdminProto.DeleteStoreRebalanceStateRequest.getDefaultInstance();
        return this;
      }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\OrderedClusterTransition;getOrderedRebalancePartitionsInfoList();;;public List<RebalancePartitionsInfo> getOrderedRebalancePartitionsInfoList() {
        return orderedRebalancePartitionsInfoList;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\OrderedClusterTransition;printRebalanceNodePlan(List<RebalancePartitionsInfo>);;;private String printRebalanceNodePlan(List<RebalancePartitionsInfo> rebalancePartitionInfoList) {
        StringBuilder builder = new StringBuilder();
        for(RebalancePartitionsInfo partitionInfo: rebalancePartitionInfoList) {
            builder.append(partitionInfo).append(Utils.NEWLINE);
        }
        return builder.toString();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\OrderedClusterTransition;orderedPartitionInfos(List<RebalancePartitionsInfo>);;;private List<RebalancePartitionsInfo> orderedPartitionInfos(List<RebalancePartitionsInfo> clusterRebalancePartitionsInfo) {
        List<RebalancePartitionsInfo> listPrimaries = new ArrayList<RebalancePartitionsInfo>();
        List<RebalancePartitionsInfo> listReplicas = new ArrayList<RebalancePartitionsInfo>();

        for(RebalancePartitionsInfo partitionInfo: clusterRebalancePartitionsInfo) {
            List<Integer> stealMasterPartitions = partitionInfo.getStealMasterPartitions();
            if(stealMasterPartitions != null && !stealMasterPartitions.isEmpty()) {
                listPrimaries.add(partitionInfo);
            } else {
                listReplicas.add(partitionInfo);
            }
        }

        // Add all the plans which list the replicas at the end
        listPrimaries.addAll(listReplicas);

        return listPrimaries;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceCLI;main(String[]);;;            parser.accepts("batch",
                           "Number of primary partitions to move together [ Default : "
                                   + RebalanceClientConfig.PRIMARY_PARTITION_BATCH_SIZE + " ]")
                  .withRequiredArg()
                  .ofType(Integer.class)
                  .describedAs("num-primary-partitions");
            parser.accepts("stealer-based",
                           "Run the rebalancing from the stealer node's perspective [ Default : "
                                   + RebalanceClientConfig.STEALER_BASED_REBALANCING + " ]")
                  .withRequiredArg()
                  .ofType(Boolean.class)
                  .describedAs("boolean");
            parser.accepts("verbose-logging",
                           "Verbose logging such as keys found missing on specific nodes during post-rebalancing entropy verification");
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceCLI;main(String[]);;;            int primaryPartitionBatchSize = CmdUtils.valueOf(options,
                                                             "batch",
                                                             RebalanceClientConfig.PRIMARY_PARTITION_BATCH_SIZE);
            boolean stealerBasedRebalancing = CmdUtils.valueOf(options,
                                                               "stealer-based",
                                                               RebalanceClientConfig.STEALER_BASED_REBALANCING);
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceCLI;main(String[]);;;            config.setPrimaryPartitionBatchSize(primaryPartitionBatchSize);
            config.setStealerBasedRebalancing(stealerBasedRebalancing);
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceCLI;main(String[]);;;                    boolean verbose = options.has("verbose-logging");
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceCLI;printHelp(PrintStream,OptionParser);;;        stream.println("\t (vii) --batch [ Number of primary partitions to move together ]");
        stream.println("\t (viii) --stealer-based [ Run the rebalancing from the stealers perspective ]");
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceClientConfig;RebalanceClientConfig(Properties);;;        if(props.containsKey(PrimaryPartitionBatchSizeString))
            this.setPrimaryPartitionBatchSize(props.getInt(PrimaryPartitionBatchSizeString));

        if(props.containsKey(StealerBasedRebalancingString))
            this.setStealerBasedRebalancing(props.getBoolean(StealerBasedRebalancingString));
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceClientConfig;setStealerBasedRebalancing(boolean);;;public void setStealerBasedRebalancing(boolean stealerBasedRebalancing) {
        this.stealerBasedRebalancing = stealerBasedRebalancing;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceClientConfig;isStealerBasedRebalancing();;;public boolean isStealerBasedRebalancing() {
        return stealerBasedRebalancing;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceClientConfig;setPrimaryPartitionBatchSize(int);;;public void setPrimaryPartitionBatchSize(int primaryPartitionBatchSize) {
        this.primaryPartitionBatchSize = primaryPartitionBatchSize;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceClientConfig;getPrimaryPartitionBatchSize();;;public int getPrimaryPartitionBatchSize() {
        return primaryPartitionBatchSize;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceClusterPlan;RebalanceClusterPlan(Cluster,Cluster,List<StoreDefinition>,boolean,boolean);;;public RebalanceClusterPlan(final Cluster currentCluster,
                                final Cluster targetCluster,
                                final List<StoreDefinition> storeDefs,
                                final boolean enabledDeletePartition,
                                final boolean isStealerBased) {
        this.rebalanceTaskQueue = new ConcurrentLinkedQueue<RebalanceNodePlan>();
        this.currentAllStoresNodeIdToAllPartitionTuples = Maps.newHashMap();
        this.targetAllStoresNodeIdToAllPartitionTuples = Maps.newHashMap();

        // Number of partitions to remain same
        if(currentCluster.getNumberOfPartitions() != targetCluster.getNumberOfPartitions())
            throw new VoldemortException("Total number of partitions should be equal [ Current cluster ("
                                         + currentCluster.getNumberOfPartitions()
                                         + ") not equal to Target cluster ("
                                         + targetCluster.getNumberOfPartitions() + ") ]");

        // Similarly number of nodes to remain same
        if(currentCluster.getNumberOfNodes() != targetCluster.getNumberOfNodes())
            throw new VoldemortException("Total number of nodes should be equal [ Current cluster ("
                                         + currentCluster.getNumberOfNodes()
                                         + ") not equal to Target cluster ("
                                         + targetCluster.getNumberOfNodes() + ") ]");

        HashMultimap<Integer, RebalancePartitionsInfo> rebalancePartitionList = HashMultimap.create();
        for(Node node: targetCluster.getNodes()) {
            for(RebalancePartitionsInfo info: getRebalancePartitionsInfo(currentCluster,
                                                                         targetCluster,
                                                                         storeDefs,
                                                                         node.getId(),
                                                                         enabledDeletePartition)) {
                if(isStealerBased) {
                    rebalancePartitionList.put(info.getStealerId(), info);
                } else {
                    rebalancePartitionList.put(info.getDonorId(), info);
                }
            }
        }

        // Populate the rebalance task queue
        for(int nodeId: rebalancePartitionList.keySet()) {
            rebalanceTaskQueue.offer(new RebalanceNodePlan(nodeId,
                                                           Lists.newArrayList(rebalancePartitionList.get(nodeId)),
                                                           isStealerBased));
        }

    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceController;rebalance(Cluster,Cluster,List<StoreDefinition>);;;        logger.info("Show plan : " + rebalanceConfig.isShowPlanEnabled());
        logger.info("Delete post rebalancing : "
                    + rebalanceConfig.isDeleteAfterRebalancingEnabled());
        logger.info("Stealer based rebalancing : " + rebalanceConfig.isStealerBasedRebalancing());
        logger.info("Primary partition batch size : "
                    + rebalanceConfig.getPrimaryPartitionBatchSize());
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceController;rebalancePerClusterTransition(Cluster,Cluster,List<StoreDefinition>);;;        // Used for creating clones
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceController;rebalancePerClusterTransition(Cluster,Cluster,List<StoreDefinition>);;;                numPrimaryPartitionMoves += stolenPrimaryPartitions.size();
                stealerToStolenPrimaryPartitions.putAll(stealerNode.getId(),
                                                        stolenPrimaryPartitions);
                stealerToStolenPrimaryPartitionsClone.putAll(stealerNode.getId(),
                                                             stolenPrimaryPartitions);
            }
        }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceController;rebalancePerPartitionTransition(OrderedClusterTransition);;;private void rebalancePerPartitionTransition(final OrderedClusterTransition orderedClusterTransition) {
        try {
            final List<RebalancePartitionsInfo> rebalancePartitionsInfoList = orderedClusterTransition.getOrderedRebalancePartitionsInfoList();

            if(rebalancePartitionsInfoList.isEmpty()) {
                RebalanceUtils.printLog(orderedClusterTransition.getId(),
                                        logger,
                                        "Skipping rebalance task id "
                                                + orderedClusterTransition.getId()
                                                + " since it is empty");
                return;
            }

            RebalanceUtils.printLog(orderedClusterTransition.getId(),
                                    logger,
                                    "Starting rebalance task id "
                                            + orderedClusterTransition.getId());

            // Flatten the node plans to partition plans
            List<RebalancePartitionsInfo> rebalancePartitionPlanList = rebalancePartitionsInfoList;

            // Split the store definitions
            List<StoreDefinition> readOnlyStoreDefs = RebalanceUtils.filterStores(orderedClusterTransition.getStoreDefs(),
                                                                                  true);
            List<StoreDefinition> readWriteStoreDefs = RebalanceUtils.filterStores(orderedClusterTransition.getStoreDefs(),
                                                                                   false);
            boolean hasReadOnlyStores = readOnlyStoreDefs != null && readOnlyStoreDefs.size() > 0;
            boolean hasReadWriteStores = readWriteStoreDefs != null
                                         && readWriteStoreDefs.size() > 0;

            // STEP 1 - Cluster state change
            boolean finishedReadOnlyPhase = false;
            List<RebalancePartitionsInfo> filteredRebalancePartitionPlanList = RebalanceUtils.filterPartitionPlanWithStores(rebalancePartitionPlanList,
                                                                                                                            readOnlyStoreDefs);

            rebalanceStateChange(orderedClusterTransition.getId(),
                                 orderedClusterTransition.getCurrentCluster(),
                                 orderedClusterTransition.getTargetCluster(),
                                 filteredRebalancePartitionPlanList,
                                 hasReadOnlyStores,
                                 hasReadWriteStores,
                                 finishedReadOnlyPhase);

            // STEP 2 - Move RO data
            if(hasReadOnlyStores) {
                rebalancePerTaskTransition(orderedClusterTransition.getId(),
                                           orderedClusterTransition.getCurrentCluster(),
                                           filteredRebalancePartitionPlanList,
                                           hasReadOnlyStores,
                                           hasReadWriteStores,
                                           finishedReadOnlyPhase);
            }

            // STEP 3 - Cluster change state
            finishedReadOnlyPhase = true;
            filteredRebalancePartitionPlanList = RebalanceUtils.filterPartitionPlanWithStores(rebalancePartitionPlanList,
                                                                                              readWriteStoreDefs);

            rebalanceStateChange(orderedClusterTransition.getId(),
                                 orderedClusterTransition.getCurrentCluster(),
                                 orderedClusterTransition.getTargetCluster(),
                                 filteredRebalancePartitionPlanList,
                                 hasReadOnlyStores,
                                 hasReadWriteStores,
                                 finishedReadOnlyPhase);

            // STEP 4 - Move RW data
            if(hasReadWriteStores) {
                rebalancePerTaskTransition(orderedClusterTransition.getId(),
                                           orderedClusterTransition.getCurrentCluster(),
                                           filteredRebalancePartitionPlanList,
                                           hasReadOnlyStores,
                                           hasReadWriteStores,
                                           finishedReadOnlyPhase);
            }

            RebalanceUtils.printLog(orderedClusterTransition.getId(),
                                    logger,
                                    "Successfully terminated rebalance task id "
                                            + orderedClusterTransition.getId());

        } catch(Exception e) {
            RebalanceUtils.printErrorLog(orderedClusterTransition.getId(),
                                         logger,
                                         "Error in rebalance task id "
                                                 + orderedClusterTransition.getId() + " - "
                                                 + e.getMessage(),
                                         e);
            throw new VoldemortException("Rebalance failed on rebalance task id "
                                         + orderedClusterTransition.getId(), e);
        }

    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceController;rebalancePerTaskTransition(int,Cluster,List<RebalancePartitionsInfo>,boolean,boolean,boolean);;;        final List<RebalanceTask> incompleteTasks = Lists.newArrayList();

        // Semaphores for donor nodes - To avoid multiple disk sweeps
        Semaphore[] donorPermits = new Semaphore[currentCluster.getNumberOfNodes()];
        for(Node node: currentCluster.getNodes()) {
            donorPermits[node.getId()] = new Semaphore(1);
        }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceController;rebalancePerTaskTransition(int,Cluster,List<RebalancePartitionsInfo>,boolean,boolean,boolean);                                    "All rebalance tasks were submitted (shutting down in ";;                                    "All rebalance tasks were submitted ( shutting down in "
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceController;rebalancePerTaskTransition(int,Cluster,List<RebalancePartitionsInfo>,boolean,boolean,boolean);                                            + " sec)");;;                                            + " sec )");
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceController;rebalancePerTaskTransition(int,Cluster,List<RebalancePartitionsInfo>,boolean,boolean,boolean);;;            // If there were no failures, then we could have had a genuine
            // timeout ( Rebalancing took longer than the operator expected ).
            // We should throw a VoldemortException and not a
            // VoldemortRebalancingException ( which will start reverting
            // metadata ). The operator may want to manually then resume the
            // process.
            if(incompleteTasks.size() > 0) {
                throw new VoldemortException("Rebalance tasks are still incomplete / running "
                                             + incompleteTasks);
            }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceController;executeTasks(int,ExecutorService,List<RebalancePartitionsInfo>,Semaphore[]);;;private List<RebalanceTask> executeTasks(final int taskId,
                                             final ExecutorService service,
                                             List<RebalancePartitionsInfo> rebalancePartitionPlanList,
                                             Semaphore[] donorPermits) {
        List<RebalanceTask> taskList = Lists.newArrayList();
        if(rebalanceConfig.isStealerBasedRebalancing()) {
            for(RebalancePartitionsInfo partitionsInfo: rebalancePartitionPlanList) {
                StealerBasedRebalanceTask rebalanceTask = new StealerBasedRebalanceTask(taskId,
                                                                                        partitionsInfo,
                                                                                        rebalanceConfig,
                                                                                        donorPermits[partitionsInfo.getDonorId()],
                                                                                        adminClient);
                taskList.add(rebalanceTask);
                service.execute(rebalanceTask);
            }
        } else {
            // Group by donor nodes
            HashMap<Integer, List<RebalancePartitionsInfo>> donorNodeBasedPartitionsInfo = RebalanceUtils.groupPartitionsInfoByNode(rebalancePartitionPlanList,
                                                                                                                                    false);
            for(Entry<Integer, List<RebalancePartitionsInfo>> entries: donorNodeBasedPartitionsInfo.entrySet()) {
                DonorBasedRebalanceTask rebalanceTask = new DonorBasedRebalanceTask(taskId,
                                                                                    entries.getValue(),
                                                                                    rebalanceConfig,
                                                                                    donorPermits[entries.getValue()
                                                                                                        .get(0)
                                                                                                        .getDonorId()],
                                                                                    adminClient);
                taskList.add(rebalanceTask);
                service.execute(rebalanceTask);
            }
        }
        return taskList;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceNodePlan;RebalanceNodePlan(int,List<RebalancePartitionsInfo>,boolean);;;public RebalanceNodePlan(int nodeId,
                             List<RebalancePartitionsInfo> rebalanceTaskList,
                             boolean isNodeStealer) {
        this.nodeId = nodeId;
        this.rebalanceTaskList = rebalanceTaskList;
        this.isNodeStealer = isNodeStealer;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceNodePlan;isNodeStealer();;;public boolean isNodeStealer() {
        return this.isNodeStealer;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\RebalanceNodePlan;getNodeId();;;public int getNodeId() {
        return nodeId;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\task\DonorBasedRebalanceTask;DonorBasedRebalanceTask(int,List<RebalancePartitionsInfo>,RebalanceClientConfig,Semaphore,AdminClient);;;public DonorBasedRebalanceTask(final int taskId,
                                   final List<RebalancePartitionsInfo> stealInfos,
                                   final RebalanceClientConfig config,
                                   final Semaphore donorPermit,
                                   final AdminClient adminClient) {
        super(taskId, stealInfos, config, donorPermit, adminClient);
        RebalanceUtils.assertSameDonor(stealInfos, -1);
        this.donorNodeId = stealInfos.get(0).getDonorId();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\task\DonorBasedRebalanceTask;run();;;public void run() {
        int rebalanceAsyncId = INVALID_REBALANCE_ID;

        try {
            RebalanceUtils.printLog(taskId, logger, "Acquiring donor permit for node "
                                                    + donorNodeId + " for " + stealInfos);
            donorPermit.acquire();

            RebalanceUtils.printLog(taskId, logger, "Starting on node " + donorNodeId
                                                    + " rebalancing task " + stealInfos);
            rebalanceAsyncId = adminClient.rebalanceNode(stealInfos);

            // Wait for the task to get over
            adminClient.waitForCompletion(donorNodeId,
                                          rebalanceAsyncId,
                                          config.getRebalancingClientTimeoutSeconds(),
                                          TimeUnit.SECONDS);
            RebalanceUtils.printLog(taskId,
                                    logger,
                                    "Succesfully finished rebalance for async operation id "
                                            + rebalanceAsyncId);

        } catch(UnreachableStoreException e) {
            exception = e;
            logger.error("Donor node " + donorNodeId
                         + " is unreachable, please make sure it is up and running : "
                         + e.getMessage(), e);
        } catch(Exception e) {
            exception = e;
            logger.error("Rebalance failed : " + e.getMessage(), e);
        } finally {
            donorPermit.release();
            isComplete.set(true);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\task\DonorBasedRebalanceTask;toString();;;@Override
    public String toString() {
        return "Donor based rebalance task on donor node " + donorNodeId + " : " + getStealInfos();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\task\RebalanceTask;RebalanceTask(int,List<RebalancePartitionsInfo>,RebalanceClientConfig,Semaphore,AdminClient);;;public RebalanceTask(final int taskId,
                         final List<RebalancePartitionsInfo> stealInfos,
                         final RebalanceClientConfig config,
                         final Semaphore donorPermit,
                         final AdminClient adminClient) {
        this.stealInfos = stealInfos;
        this.taskId = taskId;
        this.config = config;
        this.adminClient = adminClient;
        this.donorPermit = donorPermit;
        this.exception = null;
        this.isComplete = new AtomicBoolean(false);
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\task\RebalanceTask;getStealInfos();;;public List<RebalancePartitionsInfo> getStealInfos() {
        return this.stealInfos;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\task\RebalanceTask;isComplete();;;public boolean isComplete() {
        return this.isComplete.get();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\task\RebalanceTask;hasException();;;public boolean hasException() {
        return exception != null;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\task\RebalanceTask;getError();;;public Exception getError() {
        return exception;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\task\RebalanceTask;toString();;;@Override
    public String toString() {
        return "Rebalance task : " + getStealInfos();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\task\StealerBasedRebalanceTask;StealerBasedRebalanceTask(int,RebalancePartitionsInfo,RebalanceClientConfig,Semaphore,AdminClient);;;public StealerBasedRebalanceTask(final int taskId,
                                     final RebalancePartitionsInfo stealInfo,
                                     final RebalanceClientConfig config,
                                     final Semaphore donorPermit,
                                     final AdminClient adminClient) {
        super(taskId, Lists.newArrayList(stealInfo), config, donorPermit, adminClient);
        this.stealerNodeId = stealInfo.getStealerId();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\task\StealerBasedRebalanceTask;startNodeRebalancing();;;private int startNodeRebalancing() {
        int nTries = 0;
        AlreadyRebalancingException rebalanceException = null;

        while(nTries < config.getMaxTriesRebalancing()) {
            nTries++;
            try {

                RebalanceUtils.printLog(taskId, logger, "Starting on node " + stealerNodeId
                                                        + " rebalancing task " + stealInfos.get(0));

                int asyncOperationId = adminClient.rebalanceNode(stealInfos.get(0));
                return asyncOperationId;

            } catch(AlreadyRebalancingException e) {
                RebalanceUtils.printLog(taskId,
                                        logger,
                                        "Node "
                                                + stealerNodeId
                                                + " is currently rebalancing. Waiting till completion");
                adminClient.waitForCompletion(stealerNodeId,
                                              MetadataStore.SERVER_STATE_KEY,
                                              VoldemortState.NORMAL_SERVER.toString(),
                                              config.getRebalancingClientTimeoutSeconds(),
                                              TimeUnit.SECONDS);
                rebalanceException = e;
            }
        }

        throw new VoldemortException("Failed to start rebalancing with plan: " + getStealInfos(),
                                     rebalanceException);
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\task\StealerBasedRebalanceTask;run();;;public void run() {
        int rebalanceAsyncId = INVALID_REBALANCE_ID;

        try {
            RebalanceUtils.printLog(taskId, logger, "Acquiring donor permit for node "
                                                    + stealInfos.get(0).getDonorId() + " for "
                                                    + stealInfos);
            donorPermit.acquire();

            rebalanceAsyncId = startNodeRebalancing();

            // Wait for the task to get over
            adminClient.waitForCompletion(stealerNodeId,
                                          rebalanceAsyncId,
                                          config.getRebalancingClientTimeoutSeconds(),
                                          TimeUnit.SECONDS);
            RebalanceUtils.printLog(taskId,
                                    logger,
                                    "Succesfully finished rebalance for async operation id "
                                            + rebalanceAsyncId);

        } catch(UnreachableStoreException e) {
            exception = e;
            logger.error("Stealer node " + stealerNodeId
                         + " is unreachable, please make sure it is up and running : "
                         + e.getMessage(), e);
        } catch(Exception e) {
            exception = e;
            logger.error("Rebalance failed : " + e.getMessage(), e);
        } finally {
            donorPermit.release();
            isComplete.set(true);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\client\rebalance\task\StealerBasedRebalanceTask;toString();;;@Override
    public String toString() {
        return "Stealer based rebalance task on stealer node " + stealerNodeId + " : "
               + getStealInfos();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\protocol\admin\AdminServiceRequestHandler;handleRequest(DataInputStream,DataOutputStream);;;            case INITIATE_REBALANCE_NODE_ON_DONOR:
                ProtoUtils.writeMessage(outputStream,
                                        handleRebalanceNodeOnDonor(request.getInitiateRebalanceNodeOnDonor()));
                break;
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\protocol\admin\AdminServiceRequestHandler;handleRequest(DataInputStream,DataOutputStream);;;            case DELETE_STORE_REBALANCE_STATE:
                ProtoUtils.writeMessage(outputStream,
                                        handleDeleteStoreRebalanceState(request.getDeleteStoreRebalanceState()));
                break;
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\protocol\admin\AdminServiceRequestHandler;handleDeleteStoreRebalanceState(VAdminProto.DeleteStoreRebalanceStateRequest);;;private VAdminProto.DeleteStoreRebalanceStateResponse handleDeleteStoreRebalanceState(VAdminProto.DeleteStoreRebalanceStateRequest request) {
        VAdminProto.DeleteStoreRebalanceStateResponse.Builder response = VAdminProto.DeleteStoreRebalanceStateResponse.newBuilder();

        try {

            int nodeId = request.getNodeId();
            String storeName = request.getStoreName();

            logger.info("Removing rebalancing state for donor node " + nodeId + " and store "
                        + storeName);
            RebalancePartitionsInfo info = metadataStore.getRebalancerState().find(nodeId);
            if(info == null) {
                throw new VoldemortException("Could not find state for donor node " + nodeId);
            }

            HashMap<Integer, List<Integer>> replicaToPartition = info.getReplicaToAddPartitionList(storeName);
            if(replicaToPartition == null) {
                throw new VoldemortException("Could not find state for donor node " + nodeId
                                             + " and store " + storeName);
            }

            info.removeStore(storeName);
            logger.info("Removed rebalancing state for donor node " + nodeId + " and store "
                        + storeName);

            if(info.getUnbalancedStoreList().isEmpty()) {
                metadataStore.deleteRebalancingState(info);
                logger.info("Removed entire rebalancing state for donor node " + nodeId);
            }
        } catch(VoldemortException e) {
            response.setError(ProtoUtils.encodeError(errorCodeMapper, e));
            logger.error("handleDeleteStoreRebalanceState failed for request(" + request.toString()
                         + ")", e);
        }
        return response.build();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\protocol\admin\AdminServiceRequestHandler;handleRebalanceNodeOnDonor(VAdminProto.InitiateRebalanceNodeOnDonorRequest);;;public VAdminProto.AsyncOperationStatusResponse handleRebalanceNodeOnDonor(VAdminProto.InitiateRebalanceNodeOnDonorRequest request) {
        VAdminProto.AsyncOperationStatusResponse.Builder response = VAdminProto.AsyncOperationStatusResponse.newBuilder();
        try {
            if(!voldemortConfig.isEnableRebalanceService())
                throw new VoldemortException("Rebalance service is not enabled for node: "
                                             + metadataStore.getNodeId());

            List<RebalancePartitionsInfo> rebalanceStealInfos = ProtoUtils.decodeRebalancePartitionInfoMap(request.getRebalancePartitionInfoList());

            // Assert that all the plans we got have the same donor node
            RebalanceUtils.assertSameDonor(rebalanceStealInfos, metadataStore.getNodeId());

            int requestId = rebalancer.rebalanceNodeOnDonor(rebalanceStealInfos);

            response.setRequestId(requestId)
                    .setDescription(rebalanceStealInfos.toString())
                    .setStatus("Started rebalancing on donor")
                    .setComplete(false);

        } catch(VoldemortException e) {
            response.setError(ProtoUtils.encodeError(errorCodeMapper, e));
            logger.error("handleRebalanceNodeOnDonor failed for request(" + request.toString()
                         + ")", e);
        }

        return response.build();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\protocol\admin\AdminServiceRequestHandler;handleFetchAndUpdate(VAdminProto.InitiateFetchAndUpdateRequest);;;                                long startTime = System.currentTimeMillis();
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\protocol\admin\AdminServiceRequestHandler;handleFetchAndUpdate(VAdminProto.InitiateFetchAndUpdateRequest);;;                                    long totalTime = (System.currentTimeMillis() - startTime) / 1000;
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\protocol\admin\AdminServiceRequestHandler;handleFetchAndUpdate(VAdminProto.InitiateFetchAndUpdateRequest);;;                                long totalTime = (System.currentTimeMillis() - startTime) / 1000;
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\protocol\admin\FetchEntriesStreamRequestHandler;FetchEntriesStreamRequestHandler(FetchPartitionEntriesRequest,MetadataStore,ErrorCodeMapper,VoldemortConfig,StoreRepository,NetworkClassLoader,StreamStats);;;        logger.info("Starting fetch entries for store '" + storageEngine.getName()
                    + "' with replica to partition mapping " + replicaToPartitionList);
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\protocol\admin\FetchKeysStreamRequestHandler;FetchKeysStreamRequestHandler(FetchPartitionEntriesRequest,MetadataStore,ErrorCodeMapper,VoldemortConfig,StoreRepository,NetworkClassLoader,StreamStats);;;        logger.info("Starting fetch keys for store '" + storageEngine.getName()
                    + "' with replica to partition mapping " + replicaToPartitionList);
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\protocol\admin\UpdatePartitionEntriesStreamRequestHandler;handleRequest(DataInputStream,DataOutputStream);;;                long totalTime = (System.currentTimeMillis() - startTime) / 1000;
                logger.info("Update entries successfully updated " + counter
                            + " entries for store '" + storageEngine.getName() + "' in "
                            + totalTime + " s");
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\Rebalancer;rebalanceNodeOnDonor(List<RebalancePartitionsInfo>);;;public int rebalanceNodeOnDonor(final List<RebalancePartitionsInfo> stealInfos) {

        AdminClient adminClient = null;
        List<Integer> stealerNodeIdsPermitsAcquired = Lists.newArrayList();
        try {
            adminClient = RebalanceUtils.createTempAdminClient(voldemortConfig,
                                                               metadataStore.getCluster(),
                                                               1);
            int donorNodeId = metadataStore.getNodeId();

            for(RebalancePartitionsInfo info: stealInfos) {
                int stealerNodeId = info.getStealerId();

                // Check if stealer node is in rebalancing state
                if(!adminClient.getRemoteServerState(stealerNodeId)
                               .getValue()
                               .equals(VoldemortState.REBALANCING_MASTER_SERVER)) {
                    throw new VoldemortException("Stealer node " + stealerNodeId + " not in "
                                                 + VoldemortState.REBALANCING_MASTER_SERVER
                                                 + " state ");
                }

                // Also check if it has this plan
                if(adminClient.getRemoteRebalancerState(stealerNodeId).getValue().find(donorNodeId) == null) {
                    throw new VoldemortException("Stealer node " + stealerNodeId
                                                 + " does not have any plan for donor "
                                                 + donorNodeId + ". Excepted to have " + info);
                }

                // Get a lock for the stealer node
                if(!acquireRebalancingPermit(stealerNodeId)) {
                    throw new VoldemortException("Node " + metadataStore.getNodeId()
                                                 + " is already trying to steal from "
                                                 + stealerNodeId);
                }

                // Add to list of permits acquired
                stealerNodeIdsPermitsAcquired.add(stealerNodeId);
            }
        } catch(VoldemortException e) {

            // Rollback acquired permits for some of the donor nodes
            for(int stealerNodeId: stealerNodeIdsPermitsAcquired) {
                releaseRebalancingPermit(stealerNodeId);
            }

            throw e;

        } finally {
            if(adminClient != null) {
                adminClient.stop();
            }
        }

        // Acquired lock successfully, start rebalancing...
        int requestId = asyncService.getUniqueRequestId();

        // Why do we pass 'info' instead of 'stealInfo'? So that we can change
        // the state as the stores finish rebalance
        asyncService.submitOperation(requestId,
                                     new DonorBasedRebalanceAsyncOperation(this,
                                                                           storeRepository,
                                                                           voldemortConfig,
                                                                           metadataStore,
                                                                           requestId,
                                                                           stealInfos));

        return requestId;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalanceAsyncOperation;groupByStores(List<RebalancePartitionsInfo>);;;private HashMultimap<String, Pair<Integer, HashMap<Integer, List<Integer>>>> groupByStores(List<RebalancePartitionsInfo> stealInfos) {

        HashMultimap<String, Pair<Integer, HashMap<Integer, List<Integer>>>> returnMap = HashMultimap.create();
        for(RebalancePartitionsInfo info: stealInfos) {
            int stealerNodeId = info.getStealerId();
            for(Entry<String, HashMap<Integer, List<Integer>>> entry: info.getStoreToReplicaToAddPartitionList()
                                                                          .entrySet()) {
                returnMap.put(entry.getKey(), Pair.create(stealerNodeId, entry.getValue()));
            }
        }
        return returnMap;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalanceAsyncOperation;DonorBasedRebalanceAsyncOperation(Rebalancer,StoreRepository,VoldemortConfig,MetadataStore,int,List<RebalancePartitionsInfo>);;;public DonorBasedRebalanceAsyncOperation(Rebalancer rebalancer,
                                             StoreRepository storeRepository,
                                             VoldemortConfig voldemortConfig,
                                             MetadataStore metadataStore,
                                             int requestId,
                                             List<RebalancePartitionsInfo> stealInfos) {
        super(rebalancer, voldemortConfig, metadataStore, requestId, "Donor based rebalance : "
                                                                     + stealInfos);
        this.storeRepository = storeRepository;
        this.stealInfos = stealInfos;
        this.targetCluster = metadataStore.getCluster();
        this.initialCluster = stealInfos.get(0).getInitialCluster();

        // Group the plans by the store names
        this.storeToNodePartitionMapping = groupByStores(stealInfos);

        pushSlavesExecutor = rebalancer.getAsyncOperationService();

        updatePushSlavePool = Collections.synchronizedMap(new HashMap<String, List<DonorBasedRebalancePusherSlave>>());
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalanceAsyncOperation;operate();;;@Override
    public void operate() throws Exception {

        adminClient = RebalanceUtils.createTempAdminClient(voldemortConfig,
                                                           metadataStore.getCluster(),
                                                           voldemortConfig.getMaxParallelStoresRebalancing());
        final CopyOnWriteArrayList<Exception> failures = new CopyOnWriteArrayList<Exception>();
        final ConcurrentLinkedQueue<String> storesRebalancing = new ConcurrentLinkedQueue<String>();
        final ConcurrentLinkedQueue<String> storesCompleted = new ConcurrentLinkedQueue<String>();
        final int totalStoresCount = storeToNodePartitionMapping.keySet().size();

        try {

            for(final String storeName: ImmutableList.copyOf(storeToNodePartitionMapping.keySet())) {

                executors.submit(new Runnable() {

                    public void run() {
                        try {
                            Set<Pair<Integer, HashMap<Integer, List<Integer>>>> stealerNodeToMappingTuples = storeToNodePartitionMapping.get(storeName);
                            boolean isReadOnlyStore = metadataStore.getStoreDef(storeName)
                                                                   .getType()
                                                                   .compareTo(ReadOnlyStorageConfiguration.TYPE_NAME) == 0;

                            // Add the store to the rebalancing list
                            storesRebalancing.add(storeName);
                            updateStatus(getHeader(stealInfos) + "Completed working on "
                                         + storesCompleted.size() + " out of " + totalStoresCount
                                         + " stores. Still rebalancing " + storesRebalancing);

                            // Start the rebalance..
                            rebalanceStore(storeName,
                                           adminClient,
                                           stealerNodeToMappingTuples,
                                           isReadOnlyStore);

                            // Remove the metadata from all the stealer nodes
                            for(Pair<Integer, HashMap<Integer, List<Integer>>> entry: stealerNodeToMappingTuples) {
                                adminClient.deleteStoreRebalanceState(metadataStore.getNodeId(),
                                                                      entry.getFirst(),
                                                                      storeName);
                                logger.info("Removed rebalance state for store " + storeName
                                            + " : " + metadataStore.getNodeId() + " ---> "
                                            + entry.getFirst());
                            }

                            // We finished the store, delete it
                            storesRebalancing.remove(storeName);

                            // Increment the store count
                            storesCompleted.add(storeName);

                            updateStatus(getHeader(stealInfos) + "Completed working on "
                                         + storesCompleted.size() + " out of " + totalStoresCount
                                         + " stores. Still rebalancing " + storesRebalancing);

                        } catch(Exception e) {
                            logger.error(getHeader(stealInfos)
                                         + "Error while rebalancing for store " + storeName + " - "
                                         + e.getMessage(), e);
                            failures.add(e);
                        }
                    }
                });

            }

            waitForShutdown();

            // Check if we have finished all of the stores
            if(storesCompleted.size() != totalStoresCount) {
                logger.error(getHeader(stealInfos)
                             + "Could not complete all stores. Completed stores - "
                             + storesCompleted);
                throw new VoldemortRebalancingException(getHeader(stealInfos)
                                                                + "Could not complete all stores. Completed stores - "
                                                                + storesCompleted,
                                                        failures);
            } else {
                logger.info(getHeader(stealInfos) + "Rebalance of " + stealInfos
                            + " completed successfully for all " + totalStoresCount + " stores");
            }
        } finally {
            adminClient.stop();
            adminClient = null;
            for(RebalancePartitionsInfo stealInfo: stealInfos) {
                rebalancer.releaseRebalancingPermit(stealInfo.getStealerId());
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalanceAsyncOperation;getHeader(List<RebalancePartitionsInfo>);;;private String getHeader(List<RebalancePartitionsInfo> stealInfos) {
        List<Integer> stealerNodeIds = Lists.newArrayList();
        for(RebalancePartitionsInfo info: stealInfos) {
            stealerNodeIds.add(info.getStealerId());
        }
        return " Donor " + stealInfos.get(0).getDonorId() + ", Stealer " + stealerNodeIds + "] ";
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalanceAsyncOperation;rebalanceStore(String,AdminClient,Set<Pair<Integer,HashMap<Integer,List<Integer>>>>,boolean);;;private void rebalanceStore(final String storeName,
                                final AdminClient adminClient,
                                Set<Pair<Integer, HashMap<Integer, List<Integer>>>> stealerNodeToMappingTuples,
                                boolean isReadOnlyStore) {

        StorageEngine<ByteArray, byte[], byte[]> storageEngine = storeRepository.getStorageEngine(storeName);
        StoreDefinition storeDef = metadataStore.getStoreDef(storeName);
        List<DonorBasedRebalancePusherSlave> storePushSlaves = Lists.newArrayList();
        updatePushSlavePool.put(storeName, storePushSlaves);

        if(isReadOnlyStore) {

            // TODO: Add support for reading local RO files and streaming them
            // over
            throw new VoldemortException("Donor-based rebalancing for read-only store is currently not supported!");
        } else {

            // Create queue for every node that we need to dump data to
            HashMap<Integer, SynchronousQueue<Pair<ByteArray, Versioned<byte[]>>>> nodeToQueue = Maps.newHashMap();

            // Optimization to get rid of redundant copying of
            // data which already exists on this node
            Set<Pair<Integer, HashMap<Integer, List<Integer>>>> optimizedStealerNodeToMappingTuples = Sets.newHashSet();

            if(voldemortConfig.getRebalancingOptimization() && !storageEngine.isPartitionAware()) {
                for(Pair<Integer, HashMap<Integer, List<Integer>>> entry: stealerNodeToMappingTuples) {
                    HashMap<Integer, List<Integer>> optimizedReplicaToPartition = RebalanceUtils.getOptimizedReplicaToPartitionList(entry.getFirst(),
                                                                                                                                    initialCluster,
                                                                                                                                    storeDef,
                                                                                                                                    entry.getSecond());

                    if(optimizedReplicaToPartition.size() > 0) {
                        optimizedStealerNodeToMappingTuples.add(Pair.create(entry.getFirst(),
                                                                            optimizedReplicaToPartition));
                    }
                }
            } else {
                optimizedStealerNodeToMappingTuples.addAll(stealerNodeToMappingTuples);
            }

            if(optimizedStealerNodeToMappingTuples.size() <= 0) {
                return;
            }

            for(Pair<Integer, HashMap<Integer, List<Integer>>> tuple: stealerNodeToMappingTuples) {
                final SynchronousQueue<Pair<ByteArray, Versioned<byte[]>>> queue = new SynchronousQueue<Pair<ByteArray, Versioned<byte[]>>>();
                nodeToQueue.put(tuple.getFirst(), queue);

                int jobId = pushSlavesExecutor.getUniqueRequestId();
                String jobName = "DonorBasedRebalancePusherSlave for store " + storeName
                                 + " on node " + tuple.getFirst();
                DonorBasedRebalancePusherSlave updatePushSlave = new DonorBasedRebalancePusherSlave(jobId,
                                                                                                    jobName,
                                                                                                    tuple.getFirst(),
                                                                                                    queue,
                                                                                                    storeName,
                                                                                                    adminClient);
                storePushSlaves.add(updatePushSlave);
                pushSlavesExecutor.submitOperation(jobId, updatePushSlave);
                logger.info("Submitted donor-based pusher job: id=" + jobId + " name=" + jobName);
            }

            fetchEntriesForStealers(storageEngine,
                                    optimizedStealerNodeToMappingTuples,
                                    storeDef,
                                    nodeToQueue,
                                    storeName);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalanceAsyncOperation;fetchEntriesForStealers(StorageEngine<ByteArray,byte[],byte[]>,Set<Pair<Integer,HashMap<Integer,List<Integer>>>>,StoreDefinition,HashMap<Integer,SynchronousQueue<Pair<ByteArray,Versioned<byte[]>>>>,String);;;private void fetchEntriesForStealers(StorageEngine<ByteArray, byte[], byte[]> storageEngine,
                                         Set<Pair<Integer, HashMap<Integer, List<Integer>>>> optimizedStealerNodeToMappingTuples,
                                         StoreDefinition storeDef,
                                         HashMap<Integer, SynchronousQueue<Pair<ByteArray, Versioned<byte[]>>>> nodeToQueue,
                                         String storeName) {
        int scanned = 0;
        int[] fetched = new int[targetCluster.getNumberOfNodes()];
        long startTime = System.currentTimeMillis();

        ClosableIterator<ByteArray> keys = storageEngine.keys();

        while(running.get() && keys.hasNext()) {
            ByteArray key = keys.next();
            scanned++;
            List<Integer> nodeIds = RebalanceUtils.checkKeyBelongsToPartition(key.get(),
                                                                              optimizedStealerNodeToMappingTuples,
                                                                              targetCluster,
                                                                              storeDef);

            if(nodeIds.size() > 0) {
                List<Versioned<byte[]>> values = storageEngine.get(key, null);
                for(Versioned<byte[]> value: values) {
                    for(int nodeId: nodeIds) {
                        try {
                            fetched[nodeId]++;
                            nodeToQueue.get(nodeId).put(Pair.create(key, value));
                        } catch(InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }

            // print progress for every 100k entries.
            if(0 == scanned % 100000) {
                printProgress(scanned, fetched, startTime, storeName);
            }
        }
        terminateAllSlaves(updatePushSlavePool.get(storeName));
        close(keys, storeName, scanned, fetched, startTime);
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalanceAsyncOperation;printProgress(int,int[],long,String);;;private void printProgress(int scanned, int[] fetched, long startTime, String storeName) {
        logger.info("Successfully scanned " + scanned + " tuples in "
                    + ((System.currentTimeMillis() - startTime) / 1000) + " s");
        for(int i = 0; i < fetched.length; i++) {
            logger.info(fetched[i] + " tuples fetched for store '" + storeName + " for node " + i);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalanceAsyncOperation;close(ClosableIterator<ByteArray>,String,int,int[],long);;;private void close(ClosableIterator<ByteArray> keys,
                       String storeName,
                       int scanned,
                       int[] fetched,
                       long startTime) {

        printProgress(scanned, fetched, startTime, storeName);
        if(null != keys)
            keys.close();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalanceAsyncOperation;terminateAllSlaves(List<DonorBasedRebalancePusherSlave>);;;private void terminateAllSlaves(List<DonorBasedRebalancePusherSlave> updatePushSlavePool) {
        // Everything is done, put the terminator in
        for(Iterator<DonorBasedRebalancePusherSlave> it = updatePushSlavePool.iterator(); it.hasNext();) {
            it.next().setCompletion(false, true);
        }

        // wait for all async slave to finish
        for(Iterator<DonorBasedRebalancePusherSlave> it = updatePushSlavePool.iterator(); it.hasNext();) {
            it.next().waitCompletion();
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalanceAsyncOperation;terminateAllSlavesAsync(List<DonorBasedRebalancePusherSlave>);;;private void terminateAllSlavesAsync(List<DonorBasedRebalancePusherSlave> updatePushSlavePool) {
        // Everything is done, put the terminator in
        for(Iterator<DonorBasedRebalancePusherSlave> it = updatePushSlavePool.iterator(); it.hasNext();) {
            it.next().setCompletion(false, true);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalanceAsyncOperation;stop();;;@Override
    public void stop() {
        running.set(false);
        updateStatus(getHeader(stealInfos) + "Stop called on donor-based rebalance operation");
        logger.info(getHeader(stealInfos) + "Stop called on donor-based rebalance operation");
        for(List<DonorBasedRebalancePusherSlave> storePushSlaves: updatePushSlavePool.values()) {
            terminateAllSlavesAsync(storePushSlaves);
        }
        executors.shutdownNow();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalancePusherSlave;DonorBasedRebalancePusherSlave(int,String,int,BlockingQueue<Pair<ByteArray,Versioned<byte[]>>>,String,AdminClient);;;public DonorBasedRebalancePusherSlave(int id,
                                          String description,
                                          int nodeId,
                                          BlockingQueue<Pair<ByteArray, Versioned<byte[]>>> queue,
                                          String storeName,
                                          AdminClient adminClient) {
        super(id, description);
        this.nodeId = nodeId;
        this.queue = queue;
        this.storeName = storeName;
        this.adminClient = adminClient;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalancePusherSlave;operate();;;@Override
    public void operate() throws Exception {

        while(!getStatus().isComplete()) {
            try {
                adminClient.updateEntries(nodeId,
                                          storeName,
                                          nodeIterator,
                                          null,
                                          5000 /* 5 second flush interval */,
                                          1000 /* flush after sending 1k entries */,
                                          new Runnable() {

                                              // clear all msg in the recovery
                                              // list when flushed
                                              public void run() {
                                                  nodeIterator.purge();
                                              }
                                          });
                // once we get out of updateEntries, we finished all keys
                setCompletion(true, false);
                logger.info("DonorBasedRebalancePusherSlave finished sending partitions for store "
                            + storeName + " to node " + nodeId);
            } catch(VoldemortException e) {
                if(e.getCause() instanceof IOException) {
                    nodeIterator.setRecoveryMode();
                    // we terminated due to remote error, keep retrying after
                    // sleeping for a bit
                    logger.error("Exception received while pushing entries for store " + storeName
                                 + " to remote node " + nodeId
                                 + ". Will retry again after 5 minutes");
                    logger.error(e.getCause());
                    Thread.sleep(30000);
                } else {
                    throw e;
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalancePusherSlave;stop();;;@Override
    public void stop() {
        setCompletion(true, true);
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalancePusherSlave;setCompletion(boolean,boolean);;;public synchronized void setCompletion(boolean immediateTerminate, boolean notifySlave) {
        if(!getStatus().isComplete()) {
            try {
                if(notifySlave) {
                    queue.put(END);
                }
            } catch(InterruptedException e) {
                logger.info("Unable to send termination message to pusher slave for node " + nodeId
                            + " due to the following reason: " + e.getMessage());
            } finally {
                if(immediateTerminate) {
                    markComplete();
                    notifyAll();
                }
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalancePusherSlave;waitCompletion();;;public synchronized void waitCompletion() {
        while(!getStatus().isComplete()) {
            try {
                logger.info("Waiting for the completion, with 10s timeout, of pusher slave for "
                            + getStatus().getDescription() + " with id=" + getStatus().getId());
                // check for status every 10 seconds
                wait(10000);
            } catch(InterruptedException e) {

            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalancePusherSlave;close();;;public void close() {}
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalancePusherSlave;setRecoveryMode();;;public void setRecoveryMode() {
            // won't need to be in recovery mode if nothing to recover
            if(tentativeList.size() > 0) {
                recoveryModeOn = true;
                recoveryPosition = 0;
            }
        }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalancePusherSlave;purge();;;public void purge() {
            if(!recoveryModeOn) {
                tentativeList.clear();
            }
        }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalancePusherSlave;hasNext();;;public boolean hasNext() {
            while(null == currentElem) {
                try {
                    currentElem = getNextElem();
                } catch(InterruptedException e) {
                    logger.info("hasNext is interrupted while waiting for the next elem.");
                }
            }
            if(currentElem != null && currentElem.equals(END)) {
                return false;
            } else {
                return true;
            }
        }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalancePusherSlave;next();;;public Pair<ByteArray, Versioned<byte[]>> next() {
            while(null == currentElem) {
                try {
                    currentElem = getNextElem();
                } catch(InterruptedException e) {
                    logger.info("next is interrupted while waiting for the next elem.");
                }
                if(currentElem != null && currentElem.equals(END)) {
                    throw new NoSuchElementException();
                }
            }
            Pair<ByteArray, Versioned<byte[]>> returnValue = currentElem;
            currentElem = null;
            return returnValue;
        }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalancePusherSlave;getNextElem();;;private Pair<ByteArray, Versioned<byte[]>> getNextElem() throws InterruptedException {
            Pair<ByteArray, Versioned<byte[]>> retValue = null;
            if(recoveryModeOn) {
                retValue = tentativeList.get(recoveryPosition);
                recoveryPosition++;
                if(recoveryPosition >= tentativeList.size()) {
                    // recovery is done
                    recoveryModeOn = false;
                }

                // some verification checks
                if(retValue == null) {
                    logger.error("No elements found in the recovery list while in the recovery mode!\n"
                                 + "  recovery list size: "
                                 + tentativeList.size()
                                 + "  recovery position: " + recoveryPosition);
                }
            } else {
                retValue = queue.take();
                tentativeList.add(retValue);
            }
            return retValue;
        }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\DonorBasedRebalancePusherSlave;remove();;;public void remove() {
            throw new VoldemortException("Remove not supported");
        }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\RebalanceAsyncOperation;createExecutors(int);;;protected ExecutorService createExecutors(int numThreads) {

        return Executors.newFixedThreadPool(numThreads, new ThreadFactory() {

            public Thread newThread(Runnable r) {
                Thread thread = new Thread(r);
                thread.setName(r.getClass().getName());
                return thread;
            }
        });
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\RebalanceAsyncOperation;RebalanceAsyncOperation(Rebalancer,VoldemortConfig,MetadataStore,int,String);;;public RebalanceAsyncOperation(Rebalancer rebalancer,
                                   VoldemortConfig voldemortConfig,
                                   MetadataStore metadataStore,
                                   int requestId,
                                   String operationString) {
        super(requestId, operationString);
        this.voldemortConfig = voldemortConfig;
        this.metadataStore = metadataStore;
        this.adminClient = null;
        this.executors = createExecutors(voldemortConfig.getMaxParallelStoresRebalancing());
        this.rebalancer = rebalancer;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\RebalanceAsyncOperation;waitForShutdown();;;protected void waitForShutdown() {
        try {
            executors.shutdown();
            executors.awaitTermination(voldemortConfig.getRebalancingTimeoutSec(), TimeUnit.SECONDS);
        } catch(InterruptedException e) {
            logger.error("Interrupted while awaiting termination for executors.", e);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\StealerBasedRebalanceAsyncOperation;StealerBasedRebalanceAsyncOperation(Rebalancer,VoldemortConfig,MetadataStore,int,RebalancePartitionsInfo);;;public StealerBasedRebalanceAsyncOperation(Rebalancer rebalancer,
                                               VoldemortConfig voldemortConfig,
                                               MetadataStore metadataStore,
                                               int requestId,
                                               RebalancePartitionsInfo stealInfo) {
        super(rebalancer, voldemortConfig, metadataStore, requestId, "Stealer based rebalance : "
                                                                     + stealInfo);
        this.rebalancer = rebalancer;
        this.stealInfo = stealInfo;
        this.rebalanceStatusList = new ArrayList<Integer>();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\StealerBasedRebalanceAsyncOperation;operate();;;@Override
    public void operate() throws Exception {
        adminClient = RebalanceUtils.createTempAdminClient(voldemortConfig,
                                                           metadataStore.getCluster(),
                                                           voldemortConfig.getMaxParallelStoresRebalancing());
        final List<Exception> failures = new ArrayList<Exception>();
        final ConcurrentLinkedQueue<String> storesRebalancing = new ConcurrentLinkedQueue<String>();
        final AtomicInteger completedStoresCount = new AtomicInteger(0);
        final int totalStoresCount = stealInfo.getUnbalancedStoreList().size();

        try {

            for(final String storeName: ImmutableList.copyOf(stealInfo.getUnbalancedStoreList())) {

                executors.submit(new Runnable() {

                    public void run() {
                        try {
                            boolean isReadOnlyStore = metadataStore.getStoreDef(storeName)
                                                                   .getType()
                                                                   .compareTo(ReadOnlyStorageConfiguration.TYPE_NAME) == 0;

                            // Add the store to the rebalancing list
                            storesRebalancing.add(storeName);
                            updateStatus(getHeader(stealInfo) + "Completed working on "
                                         + completedStoresCount.get() + " out of "
                                         + totalStoresCount + " stores. Still rebalancing "
                                         + storesRebalancing);

                            // Start the rebalance..
                            rebalanceStore(storeName, adminClient, stealInfo, isReadOnlyStore);

                            // We finished the store, delete it
                            stealInfo.removeStore(storeName);
                            storesRebalancing.remove(storeName);

                            // Increment the store count
                            completedStoresCount.getAndIncrement();

                            updateStatus(getHeader(stealInfo) + "Completed working on "
                                         + completedStoresCount.get() + " out of "
                                         + totalStoresCount + " stores. Still rebalancing "
                                         + storesRebalancing);

                        } catch(Exception e) {
                            logger.error(getHeader(stealInfo)
                                         + "Error while rebalancing for store " + storeName + " - "
                                         + e.getMessage(), e);
                            failures.add(e);
                        }
                    }
                });

            }

            waitForShutdown();

            // If empty, clean state
            List<String> unbalancedStores = Lists.newArrayList(stealInfo.getUnbalancedStoreList());
            if(unbalancedStores.isEmpty()) {
                logger.info(getHeader(stealInfo) + "Rebalance of " + stealInfo
                            + " completed successfully for all " + totalStoresCount + " stores");
                updateStatus(getHeader(stealInfo) + "Rebalance of " + stealInfo
                             + " completed successfully for all " + totalStoresCount + " stores");
                metadataStore.deleteRebalancingState(stealInfo);
            } else {
                throw new VoldemortRebalancingException(getHeader(stealInfo)
                                                        + "Failed to rebalance task " + stealInfo
                                                        + ". Could only complete "
                                                        + completedStoresCount.get() + " out of "
                                                        + totalStoresCount + " stores", failures);
            }

        } finally {
            // free the permit in all cases.
            logger.info(getHeader(stealInfo) + "Releasing permit for donor node "
                        + stealInfo.getDonorId());

            rebalancer.releaseRebalancingPermit(stealInfo.getDonorId());
            adminClient.stop();
            adminClient = null;
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\StealerBasedRebalanceAsyncOperation;stop();;;@Override
    public void stop() {
        updateStatus(getHeader(stealInfo) + "Stop called on rebalance operation");
        if(null != adminClient) {
            for(int asyncID: rebalanceStatusList) {
                adminClient.stopAsyncRequest(metadataStore.getNodeId(), asyncID);
            }
        }

        executors.shutdownNow();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\StealerBasedRebalanceAsyncOperation;getHeader(RebalancePartitionsInfo);;;private String getHeader(RebalancePartitionsInfo stealInfo) {
        return "Stealer " + stealInfo.getStealerId() + ", Donor " + stealInfo.getDonorId() + "] ";
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\server\rebalance\async\StealerBasedRebalanceAsyncOperation;rebalanceStore(String,AdminClient,RebalancePartitionsInfo,boolean);;;private void rebalanceStore(String storeName,
                                final AdminClient adminClient,
                                RebalancePartitionsInfo stealInfo,
                                boolean isReadOnlyStore) {
        // Move partitions
        if(stealInfo.getReplicaToAddPartitionList(storeName) != null
           && stealInfo.getReplicaToAddPartitionList(storeName).size() > 0) {

            logger.info(getHeader(stealInfo) + "Starting partitions migration for store "
                        + storeName + " from donor node " + stealInfo.getDonorId());

            int asyncId = adminClient.migratePartitions(stealInfo.getDonorId(),
                                                        metadataStore.getNodeId(),
                                                        storeName,
                                                        stealInfo.getReplicaToAddPartitionList(storeName),
                                                        null,
                                                        stealInfo.getInitialCluster(),
                                                        true);
            rebalanceStatusList.add(asyncId);

            if(logger.isDebugEnabled()) {
                logger.debug(getHeader(stealInfo) + "Waiting for completion for " + storeName
                             + " with async id " + asyncId);
            }
            adminClient.waitForCompletion(metadataStore.getNodeId(),
                                          asyncId,
                                          voldemortConfig.getRebalancingTimeoutSec(),
                                          TimeUnit.SECONDS,
                                          getStatus());

            rebalanceStatusList.remove((Object) asyncId);

            logger.info(getHeader(stealInfo) + "Completed partition migration for store "
                        + storeName + " from donor node " + stealInfo.getDonorId());
        }

        // Delete partitions
        if(stealInfo.getReplicaToDeletePartitionList(storeName) != null
           && stealInfo.getReplicaToDeletePartitionList(storeName).size() > 0 && !isReadOnlyStore) {

            logger.info(getHeader(stealInfo) + "Deleting partitions for store " + storeName
                        + " on donor node " + stealInfo.getDonorId());

            adminClient.deletePartitions(stealInfo.getDonorId(),
                                         storeName,
                                         stealInfo.getReplicaToDeletePartitionList(storeName),
                                         stealInfo.getInitialCluster(),
                                         null);
            logger.info(getHeader(stealInfo) + "Deleted partitions for store " + storeName
                        + " on donor node " + stealInfo.getDonorId());

        }

        logger.info(getHeader(stealInfo) + "Finished all migration for store " + storeName);
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\utils\Entropy;Entropy(int);;;        this.verboseLogging = false;
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\utils\Entropy;Entropy(int,long,boolean);;;public Entropy(int nodeId, long numKeys, boolean verboseLogging) {
        this.nodeId = nodeId;
        this.numKeys = numKeys;
        this.verboseLogging = verboseLogging;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\utils\Entropy;main(String);;;        parser.accepts("verbose-logging",
                       "Verbose logging such as keys found missing on specific nodes");
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\utils\Entropy;main(String);;;        boolean verboseLogging = options.has("verbose-logging");
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\utils\Entropy;generateEntropy(Cluster,List<StoreDefinition>,File,boolean,boolean);;;
                                        if(this.verboseLogging) {
                                            String stringKey = ByteUtils.getString(key, "UTF-8");
                                            System.out.println("missing key=" + stringKey
                                                               + " on node=" + node.getId());
                                            System.out.println("is value null "
                                                               + ((value == null) ? "true"
                                                                                 : "false"));
                                            System.out.println("is size zero "
                                                               + ((value.size() == 0) ? "true"
                                                                                     : "false"));
                                        }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\utils\RebalanceUtils;getOptimizedReplicaToPartitionList(int,Cluster,StoreDefinition,HashMap<Integer,List<Integer>>);;;public static HashMap<Integer, List<Integer>> getOptimizedReplicaToPartitionList(int stealerNodeId,
                                                                                     Cluster cluster,
                                                                                     StoreDefinition storeDef,
                                                                                     HashMap<Integer, List<Integer>> currentReplicaToPartitionList) {

        HashMap<Integer, List<Integer>> optimizedReplicaToPartitionList = Maps.newHashMap();
        RoutingStrategy strategy = new RoutingStrategyFactory().updateRoutingStrategy(storeDef,
                                                                                      cluster);
        for(Entry<Integer, List<Integer>> tuple: currentReplicaToPartitionList.entrySet()) {
            List<Integer> partitionList = Lists.newArrayList();
            for(int partition: tuple.getValue()) {
                List<Integer> preferenceList = strategy.getReplicatingPartitionList(partition);

                // If this node was already in the
                // preference list before, a copy of the
                // data will already exist - Don't copy
                // it!
                if(!RebalanceUtils.containsPreferenceList(cluster, preferenceList, stealerNodeId)) {
                    partitionList.add(partition);
                }
            }

            if(partitionList.size() > 0) {
                optimizedReplicaToPartitionList.put(tuple.getKey(), partitionList);
            }
        }

        return optimizedReplicaToPartitionList;

    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\utils\RebalanceUtils;assertSameDonor(List<RebalancePartitionsInfo>,int);;;public static void assertSameDonor(List<RebalancePartitionsInfo> partitionInfos,
                                       int expectedDonorId) {
        int donorId = (expectedDonorId < 0) ? partitionInfos.get(0).getDonorId() : expectedDonorId;
        for(RebalancePartitionsInfo info: partitionInfos) {
            if(info.getDonorId() != donorId) {
                throw new VoldemortException("Found a stealer information " + info
                                             + " having a different donor node from others ( "
                                             + donorId + " )");
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\utils\RebalanceUtils;generateMinCluster(Cluster,Cluster,List<StoreDefinition>,String,int);;;
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\utils\RebalanceUtils;checkKeyBelongsToPartition(byte[],Set<Pair<Integer,HashMap<Integer,List<Integer>>>>,Cluster,StoreDefinition);;;public static List<Integer> checkKeyBelongsToPartition(byte[] key,
                                                           Set<Pair<Integer, HashMap<Integer, List<Integer>>>> stealerNodeToMappingTuples,
                                                           Cluster cluster,
                                                           StoreDefinition storeDef) {
        List<Integer> keyPartitions = new RoutingStrategyFactory().updateRoutingStrategy(storeDef,
                                                                                         cluster)
                                                                  .getPartitionList(key);
        List<Integer> nodesToPush = Lists.newArrayList();
        for(Pair<Integer, HashMap<Integer, List<Integer>>> stealNodeToMap: stealerNodeToMappingTuples) {
            List<Integer> nodePartitions = cluster.getNodeById(stealNodeToMap.getFirst())
                                                  .getPartitionIds();
            if(checkKeyBelongsToPartition(keyPartitions, nodePartitions, stealNodeToMap.getSecond())) {
                nodesToPush.add(stealNodeToMap.getFirst());
            }
        }
        return nodesToPush;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\utils\RebalanceUtils;createUpdatedCluster(Cluster,int,List<Integer>);;;public static Cluster createUpdatedCluster(Cluster currentCluster,
                                               int stealerNodeId,
                                               List<Integer> donatedPartitions) {

        // Clone the cluster
        ClusterMapper mapper = new ClusterMapper();
        Cluster updatedCluster = mapper.readCluster(new StringReader(mapper.writeCluster(currentCluster)));

        // Go over every donated partition one by one
        for(int donatedPartition: donatedPartitions) {

            // Gets the donor Node that owns this donated partition
            Node donorNode = RebalanceUtils.getNodeByPartitionId(updatedCluster, donatedPartition);
            Node stealerNode = updatedCluster.getNodeById(stealerNodeId);

            if(donorNode == stealerNode) {
                // Moving to the same location = No-op
                continue;
            }

            // Update the list of partitions for this node
            donorNode = RebalanceUtils.removePartitionToNode(donorNode, donatedPartition);
            stealerNode = RebalanceUtils.addPartitionToNode(stealerNode, donatedPartition);

            // Sort the nodes
            updatedCluster = updateCluster(updatedCluster, Lists.newArrayList(donorNode,
                                                                              stealerNode));

        }

        return updatedCluster;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\utils\RebalanceUtils;addPartitionToNode(Node,Set<Integer>);;;        Collections.sort(deepCopy);
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\utils\RebalanceUtils;printMap(Map<Integer,Set<Pair<Integer,Integer>>>);;;            // Put into sorted key order such that primary replicas occur before
            // secondary replicas and so on...
            final TreeMap<Integer, List<Integer>> sortedReplicaTypeToPartitions = new TreeMap<Integer, List<Integer>>(replicaTypeToPartitions);
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\src\java\voldemort\utils\RebalanceUtils;groupPartitionsInfoByNode(List<RebalancePartitionsInfo>,boolean);;;public static HashMap<Integer, List<RebalancePartitionsInfo>> groupPartitionsInfoByNode(List<RebalancePartitionsInfo> rebalancePartitionPlanList,
                                                                                            boolean groupByStealerNode) {
        HashMap<Integer, List<RebalancePartitionsInfo>> nodeToPartitionsInfo = Maps.newHashMap();
        if(rebalancePartitionPlanList != null) {
            for(RebalancePartitionsInfo partitionInfo: rebalancePartitionPlanList) {
                int nodeId = groupByStealerNode ? partitionInfo.getStealerId()
                                               : partitionInfo.getDonorId();
                List<RebalancePartitionsInfo> partitionInfos = nodeToPartitionsInfo.get(nodeId);
                if(partitionInfos == null) {
                    partitionInfos = Lists.newArrayList();
                    nodeToPartitionsInfo.put(nodeId, partitionInfos);
                }
                partitionInfos.add(partitionInfo);
            }
        }
        return nodeToPartitionsInfo;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\test\unit\voldemort\client\rebalance\AbstractRebalanceTest;setUp();;;        rwStoreDefWithReplication2 = new StoreDefinitionBuilder().setName(testStoreNameRW2)
                                                                 .setType(BdbStorageConfiguration.TYPE_NAME)
                                                                 .setKeySerializer(new SerializerDefinition("string"))
                                                                 .setValueSerializer(new SerializerDefinition("string"))
                                                                 .setRoutingPolicy(RoutingTier.SERVER)
                                                                 .setRoutingStrategyType(RoutingStrategyType.CONSISTENT_STRATEGY)
                                                                 .setReplicationFactor(2)
                                                                 .setPreferredReads(1)
                                                                 .setRequiredReads(1)
                                                                 .setPreferredWrites(1)
                                                                 .setRequiredWrites(1)
                                                                 .build();
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\test\unit\voldemort\client\rebalance\AbstractRebalanceTest;setUp();;;        file = File.createTempFile("rw-two-stores-", ".xml");
        FileUtils.writeStringToFile(file,
                                    new StoreDefinitionsMapper().writeStoreList(Lists.newArrayList(rwStoreDefWithReplication,
                                                                                                   rwStoreDefWithReplication2)));
        rwTwoStoreDefFileWithReplication = file.getAbsolutePath();
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\test\unit\voldemort\client\rebalance\AbstractRebalanceTest;useDonorBased();;;protected abstract boolean useDonorBased();
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\test\unit\voldemort\client\rebalance\AbstractRebalanceTest;testRWRebalanceWithReplication();;;        config.setStealerBasedRebalancing(!useDonorBased());
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\test\unit\voldemort\client\rebalance\AbstractRebalanceTest;testRebalanceCleanPrimary();;;
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\test\unit\voldemort\client\rebalance\AbstractRebalanceTest;testRWRebalanceFourNodes();;;@Test
    public void testRWRebalanceFourNodes() throws Exception {
        Cluster currentCluster = ServerTestUtils.getLocalCluster(4, new int[][] {
                { 0, 1, 4, 7, 9 }, { 2, 3, 5, 6, 8 }, {}, {} });

        ArrayList<Node> nodes = Lists.newArrayList(currentCluster.getNodes());
        int totalPortNum = nodes.size() * 3;
        int[] ports = new int[totalPortNum];
        for(int i = 0; i < nodes.size(); i++) {
            ports[i * 3] = nodes.get(i).getHttpPort();
            ports[i * 3 + 1] = nodes.get(i).getSocketPort();
            ports[i * 3 + 2] = nodes.get(i).getAdminPort();
        }

        Cluster targetCluster = ServerTestUtils.getLocalCluster(4, ports, new int[][] {
                { 0, 4, 7 }, { 2, 8 }, { 1, 6 }, { 3, 5, 9 } });

        // start servers
        List<Integer> serverList = Arrays.asList(0, 1, 2, 3);
        currentCluster = startServers(currentCluster,
                                      rwTwoStoreDefFileWithReplication,
                                      serverList,
                                      null);
        // Update the cluster information based on the node information
        targetCluster = updateCluster(targetCluster);

        RebalanceClientConfig config = new RebalanceClientConfig();
        config.setDeleteAfterRebalancingEnabled(true);
        config.setStealerBasedRebalancing(!useDonorBased());
        config.setPrimaryPartitionBatchSize(10);
        RebalanceController rebalanceClient = new RebalanceController(getBootstrapUrl(currentCluster,
                                                                                      0),
                                                                      config);
        try {
            populateData(currentCluster,
                         rwStoreDefWithReplication,
                         rebalanceClient.getAdminClient(),
                         false);

            populateData(currentCluster,
                         rwStoreDefWithReplication2,
                         rebalanceClient.getAdminClient(),
                         false);

            rebalanceAndCheck(currentCluster,
                              targetCluster,
                              Lists.newArrayList(rwStoreDefWithReplication,
                                                 rwStoreDefWithReplication2),
                              rebalanceClient,
                              serverList);
            checkConsistentMetadata(targetCluster, serverList);
        } catch(Exception e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        } finally {
            // stop servers
            stopServer(serverList);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\test\unit\voldemort\client\rebalance\AbstractRebalanceTest;checkGetEntries(Node,Cluster,StoreDefinition,Store<ByteArray,byte[],byte[]>,HashMap<Integer,List<Integer>>);;;                if(values.size() == 0) {
                    fail("unable to find value for key=" + entry.getKey() + " on node="
                         + node.getId());
                }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\test\unit\voldemort\client\rebalance\RebalanceClusterPlanTest;getUniqueNodeCount(List<RebalancePartitionsInfo>,boolean);;;private int getUniqueNodeCount(List<RebalancePartitionsInfo> rebalanceInfoList,
                                   boolean isDonorBased) {
        HashSet<Integer> uniqueNodeSet = Sets.newHashSet();
        for(RebalancePartitionsInfo partitionInfo: rebalanceInfoList) {
            int nodeId;
            if(isDonorBased) {
                nodeId = partitionInfo.getDonorId();
            } else {
                nodeId = partitionInfo.getStealerId();
            }
            if(!uniqueNodeSet.contains(nodeId)) {
                uniqueNodeSet.add(nodeId);
            }
        }
        return uniqueNodeSet.size();
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\test\unit\voldemort\client\rebalance\RebalanceClusterPlanTest;getStealerNodePartitionInfoCount(int,List<RebalancePartitionsInfo>);;;private int getStealerNodePartitionInfoCount(int stealerId,
                                                 List<RebalancePartitionsInfo> rebalanceInfoList) {
        int count = 0;

        for(RebalancePartitionsInfo partitionInfo: rebalanceInfoList) {
            if(partitionInfo.getStealerId() == stealerId) {
                count++;
            }
        }
        return count;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\test\unit\voldemort\client\rebalance\RebalanceClusterPlanTest;getStealerNodePartitionInfoList(int,List<RebalancePartitionsInfo>);;;private List<RebalancePartitionsInfo> getStealerNodePartitionInfoList(int stealerId,
                                                                          List<RebalancePartitionsInfo> rebalanceInfoList) {
        ArrayList<RebalancePartitionsInfo> partitionList = Lists.newArrayList();

        for(RebalancePartitionsInfo partitionInfo: rebalanceInfoList) {
            if(partitionInfo.getStealerId() == stealerId) {
                partitionList.add(partitionInfo);
            }
        }
        return partitionList;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\test\unit\voldemort\client\rebalance\RebalanceClusterPlanTest;checkOrderedPartitionInfo(List<RebalancePartitionsInfo>);;;private void checkOrderedPartitionInfo(List<RebalancePartitionsInfo> rebalancePartitionInfoList) {
        boolean primaryMovesCompleted = false;
        for(RebalancePartitionsInfo partitionInfo: rebalancePartitionInfoList) {
            List<Integer> stealMasterPartitions = partitionInfo.getStealMasterPartitions();
            if(stealMasterPartitions == null || stealMasterPartitions.isEmpty()) {
                primaryMovesCompleted = true;
            } else if(primaryMovesCompleted) {
                // if partitionInfo contains primary movement and we have
                // previously concluded that all partitionInfo with primary
                // movements are processed, we are looking at an out-of-ordered
                // partitionInfo
                fail("OrderedPartitionInfo has primary partition move after non-primary partition moves: "
                     + rebalancePartitionInfoList);
            }
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\test\unit\voldemort\client\rebalance\RebalanceClusterPlanTest;checkAllRebalanceInfoPresent(List<RebalancePartitionsInfo>,List<RebalancePartitionsInfo>);;;private void checkAllRebalanceInfoPresent(List<RebalancePartitionsInfo> toCheckRebalanceInfoList,
                                              List<RebalancePartitionsInfo> rebalanceInfoList) {
        for(RebalancePartitionsInfo rebalanceInfo: rebalanceInfoList) {
            boolean match = false;
            for(RebalancePartitionsInfo nodeRebalanceInfo: toCheckRebalanceInfoList) {
                if(rebalanceInfo.getDonorId() == nodeRebalanceInfo.getDonorId()) {
                    assertEquals("Store lists should match",
                                 rebalanceInfo.getUnbalancedStoreList(),
                                 nodeRebalanceInfo.getUnbalancedStoreList());

                    assertEquals("Clusters to be same",
                                 rebalanceInfo.getInitialCluster(),
                                 nodeRebalanceInfo.getInitialCluster());

                    for(String storeName: rebalanceInfo.getUnbalancedStoreList()) {
                        assertEquals("add partition mapping for store " + storeName
                                             + " should be same ",
                                     rebalanceInfo.getReplicaToAddPartitionList(storeName),
                                     nodeRebalanceInfo.getReplicaToAddPartitionList(storeName));
                        assertEquals("delete partition mapping for store " + storeName
                                             + " should be same ",
                                     rebalanceInfo.getReplicaToDeletePartitionList(storeName),
                                     nodeRebalanceInfo.getReplicaToDeletePartitionList(storeName));
                    }
                    match = true;
                }
            }

            assertNotSame("rebalancePartition Info " + rebalanceInfo
                                  + " should be present in the nodePlan "
                                  + toCheckRebalanceInfoList,
                          false,
                          match);
        }
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\test\unit\voldemort\client\rebalance\RebalanceTest;RebalanceTest(boolean,boolean);;;public RebalanceTest(boolean useNio, boolean useDonorBased) {
        this.useNio = useNio;
        this.useDonorBased = useDonorBased;
    }
E:\Mestrado\FPFNAnalysis\projects\voldemort\revisions\rev_c3972b6_50f243f\rev_c3972b6-50f243f;\test\unit\voldemort\client\rebalance\RebalanceTest;useDonorBased();;;@Override
    protected boolean useDonorBased() {
        return this.useDonorBased;
    }
