###################################
# Input data
###################################

#load tables

#foreach($project in $projectList )
${project.name}SM <- read.table("./$project.folder/result-semiStructured.csv", sep="\t", header=TRUE)
${project.name}UM <- read.table("./$project.folder/result-unStructured.csv", sep="\t", header=TRUE)
#end

###################################
# Global variables
###################################

SM <- "semistructured"
UM <- "unstructured"

# color of semistructured lines
COLSM <- "green"
#COLSM <- "gray95"

# color of unstructured lines
COLUM <- "red"
#COLUM <- "gray25"

# Pointtype
POINTTYPE <- "o"
POINTCH <- 20

###################################
# Functions
###################################

#builds dataframe from csv-input files
buildDataFrame <- function(project, semistructuredTable, unstructuredTable)
{
	SMRevisions <- semistructuredTable$Revisions
	UMRevisions <- unstructuredTable$Revisions
	
	SMconflicts <- semistructuredTable$Syntactic.Conflicts
	UMconflicts <- unstructuredTable$Syntactic.Conflicts	

	SMConfLines <- semistructuredTable$Confilicting.Lines.1 + semistructuredTable$Conflicting.Lines.2
	UMConfLines <- unstructuredTable$Confilicting.Lines.1   + unstructuredTable$Conflicting.Lines.2	

	SMfiles <- semistructuredTable$Number.of.Files
	UMfiles <- unstructuredTable$Number.of.Files
	
	SMsemConf <- semistructuredTable$Semantic.Conflicts
	UMsemConf <- unstructuredTable$Semantic.Conflicts

	dataFrameSM <- data.frame(as.factor(project), as.character(SMRevisions), 
	                          as.numeric(SMconflicts), as.numeric(SMConfLines), 
	                          as.numeric(SMfiles), as.factor(SM),
	                          as.numeric(SMsemConf))
	colnames(dataFrameSM) <- c("Programm", "Revisions", 
	                           "Conf", "ConfLines", 
	                           "ConfFiles", "Merge",
	                           "SemConf")

	dataFrameUM <- data.frame(as.factor(project), as.character(UMRevisions),
	                          as.numeric(UMconflicts), as.numeric(UMConfLines), 
	                          as.numeric(UMfiles),  as.factor(UM),
	                          as.numeric(UMsemConf))

	colnames(dataFrameUM) <- c("Programm", "Revisions", 
	                           "Conf", "ConfLines", 
	                           "ConfFiles", "Merge",
	                           "SemConf")

	dataFrame <- rbind(dataFrameSM, dataFrameUM)

	return(dataFrame)
}

# draw a conflict bar plot
drawConflictsBarPlot <- function(projectName, dataFrame, legendposition)
{	
	barplotFrameSM <- subset(dataFrame,dataFrame$Programm==projectName& dataFrame$Merge==SM,select=Conf)
	names(barplotFrameSM)[names(barplotFrameSM)=="Conf"] <- "Conf-SM"
	
	barplotFrameUM <- subset(dataFrame,dataFrame$Programm==projectName& dataFrame$Merge==UM,select=Conf)
	names(barplotFrameUM)[names(barplotFrameUM)=="Conf"] <- "Conf-UM"
		
	barplotFrame <- cbind(barplotFrameSM, barplotFrameUM)

	barplotMatrix <- as.matrix(barplotFrame)
	barplotMatrix <- t(barplotMatrix)
	revs <- subset(dataFrame,dataFrame$Programm==projectName,select=Revisions)

	mp <- barplot(barplotMatrix, beside = TRUE, axisnames=FALSE, col=c(COLSM,COLUM))

	#draw axis
	axis(1, at=mp[1, ], labels=FALSE, tick=FALSE)
	labels <- paste(revs$Revisions)
	text(mp[1, ], par("usr")[3]-0.05, srt=-60, adj=c(-0.15,0), labels=labels, xpd=TRUE, cex=1) 
	
	#draw grid
	grid(lty="dotdash", col="darkgrey")	

	
	# draw legend
	drawLegendBarPlot(legendposition)

	# draw title
	title(ylab="Number of conflicts",cex.lab=1)
}

drawConflictLinesBarPlot <- function(projectName, dataFrame, legendposition)
{
	
	barplotFrameSM <- subset(dataFrame,dataFrame$Programm==projectName& dataFrame$Merge==SM,select=ConfLines)
	names(barplotFrameSM)[names(barplotFrameSM)=="ConfLines"] <- "ConfLines-SM"
	
	barplotFrameUM <- subset(dataFrame,dataFrame$Programm==projectName& dataFrame$Merge==UM,select=ConfLines)
	names(barplotFrameUM)[names(barplotFrameUM)=="ConfLines"] <- "ConfLines-UM"
	
	barplotFrame <- cbind(barplotFrameSM, barplotFrameUM)
	
	barplotMatrix <- as.matrix(barplotFrame)
	barplotMatrix <- t(barplotMatrix)
	revs <- subset(dataFrame,dataFrame$Programm==projectName,select=Revisions)
	
	mp <- barplot(barplotMatrix, beside = TRUE, axisnames=FALSE, col=c(COLSM,COLUM))

	#draw axis
	axis(1, at=mp[1, ], labels=FALSE, tick=FALSE)
	labels <- paste(revs$Revisions)
	text(mp[1, ], par("usr")[3]-0.05, srt=-60, adj=c(-0.15,0), labels=labels, xpd=TRUE, cex=1) 
	
	#draw grid
	grid(lty="dotdash", col="darkgrey")	
	
	# draw legend
	drawLegendBarPlot(legendposition)

	# draw title
	title(ylab="Number of conflicting lines of code",cex.lab=1)	
}

drawConflictFilesBarPlot <- function(projectName, dataFrame, legendposition)
{
	
	barplotFrameSM <- subset(dataFrame,dataFrame$Programm==projectName& dataFrame$Merge==SM,select=ConfFiles)
	names(barplotFrameSM)[names(barplotFrameSM)=="ConfFiles"] <- "ConfFiles-SM"
	
	barplotFrameUM <- subset(dataFrame,dataFrame$Programm==projectName& dataFrame$Merge==UM,select=ConfFiles)
	names(barplotFrameUM)[names(barplotFrameUM)=="ConfFiles"] <- "ConfFiles-UM"
	
	barplotFrame <- cbind(barplotFrameSM, barplotFrameUM)
	
	barplotMatrix <- as.matrix(barplotFrame)
	barplotMatrix <- t(barplotMatrix)
	revs <- subset(dataFrame,dataFrame$Programm==projectName,select=Revisions)
	
	mp <- barplot(barplotMatrix, beside = TRUE, axisnames=FALSE, col=c(COLSM,COLUM))

	#draw axis
	axis(1, at=mp[1, ], labels=FALSE, tick=FALSE)
	labels <- paste(revs$Revisions)
	text(mp[1, ], par("usr")[3]-0.05, srt=-60, adj=c(-0.15,0), labels=labels, xpd=TRUE, cex=1) 

	
	#draw grid
	grid(lty="dotdash", col="darkgrey")	

	
	# draw legend
	drawLegendBarPlot(legendposition)

	# draw title
	title(ylab="Number of conflicting files",cex.lab=1)
}


drawConflictSemanticBarPlot <- function(projectName, dataFrame, legendposition)
{
	
	barplotFrameSM <- subset(dataFrame,dataFrame$Programm==projectName& dataFrame$Merge==SM,select=SemConf)
	names(barplotFrameSM)[names(barplotFrameSM)=="SemConf"] <- "SemConf-SM"
	
	barplotFrameUM <- subset(dataFrame,dataFrame$Programm==projectName& dataFrame$Merge==UM,select=SemConf)
	names(barplotFrameUM)[names(barplotFrameUM)=="SemConf"] <- "SemConf-UM"
	
	barplotFrame <- cbind(barplotFrameSM, barplotFrameUM)
	
	barplotMatrix <- as.matrix(barplotFrame)
	barplotMatrix <- t(barplotMatrix)
	revs <- subset(dataFrame,dataFrame$Programm==projectName,select=Revisions)
	
	mp <- barplot(barplotMatrix, beside = TRUE, axisnames=FALSE, col=c(COLSM,COLUM))

	#draw axis
	axis(1, at=mp[1, ], labels=FALSE, tick=FALSE)
	labels <- paste(revs$Revisions)
	text(mp[1, ], par("usr")[3]-0.05, srt=-60, adj=c(-0.15,0), labels=labels, xpd=TRUE, cex=1) 

	
	#draw grid
	grid(lty="dotdash", col="darkgrey")	

	
	# draw legend
	drawLegendBarPlot(legendposition)

	# draw title
	title(ylab="Number of semantic conflicts",cex.lab=1)
}


# function for axis and grid
drawCaption <- function(table)
{
	# draw revision axis
	axis(	1, 
		at = table$Revisions, 
		labels = FALSE, 
		tick = TRUE
	)
	
	# labels for xaxis
	labels <- paste(table$Revisions)
	
	# draw labels on xaxis
	text(	
		table$Revisions, 
		par("usr")[3], 
		srt = -60, 
		labels = labels, 
		adj = c(-0.1,1), 
		xpd=TRUE,
		cex=1
	)
	
	#draw grid
	grid(lty="dotdash", col="darkgrey")	
}


drawLegendBarPlot <- function(position)
{
 legend(position,                             
         legend=c("Semistructured Merge","Unstructured Merge"),
         cex=0.7,            
         fill=c(COLSM,COLUM),
         bg="white")  
}



drawBarplotPNGs <- function()
{
	WIDTH <- 640
	HEIGHT <- 480

#foreach($project in $projectList)
	png(filename="./${project.name}-conflicts-Barplot.png",width=WIDTH,height=HEIGHT)
	par(mar=c(6,5,1,2)) 
	drawConflictsBarPlot("${project.name}", ${project.name}df, "topleft")
	dev.off()

	png(filename="./${project.name}-conflictingLines-Barplot.png",width=WIDTH,height=HEIGHT)
	par(mar=c(6,5,1,2)) 
	drawConflictLinesBarPlot("${project.name}", ${project.name}df, "topleft")
	dev.off()

	png(filename="./${project.name}-conflictingFiles-Barplot.png",width=WIDTH,height=HEIGHT)
	par(mar=c(6,5,1,2)) 
	drawConflictFilesBarPlot("${project.name}", ${project.name}df, "topleft")
	dev.off()

	png(filename="./${project.name}-semanticConflicts-Barplot.png",width=WIDTH,height=HEIGHT)
	par(mar=c(6,5,1,2)) 
	drawConflictSemanticBarPlot("${project.name}", ${project.name}df, "topright")
	dev.off()
#end
}

###################################
# Operations
###################################

### Build DataFrames Start

#build dataframes from input tables
#single tables
#foreach($project in $projectList)
${project.name}df <- buildDataFrame("${project.name}", ${project.name}SM, ${project.name}UM)
#end

### Build DataFrame End
drawBarplotPNGs()

