package cin.ufpe.br.blocks;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import cin.ufpe.br.util.FileHandlerr;

public class Ttt {

	public static ArrayList<MatchedBlocks> collectMineTheirsBlocksFromText(String filename) throws IOException{
		ArrayList<String> fileText = FileHandlerr.readFile(filename);
		ArrayList<MatchedBlocks> allblocks = new ArrayList<>();
		int index = 0;

		try {
			File file = new File(filename);
			Scanner scanner = new Scanner(file);
			scanner.useDelimiter("\r\n");
			while (scanner.hasNext()) {
				String line = scanner.next();
				ArrayList<String> mineBlock  = new ArrayList<String>();
				ArrayList<String> yoursBlock = new ArrayList<String>();
				String revisionsFile = "";
				String originFile = ""; 

				int mineIndex = 0;
				int yoursIndex = 0;

				boolean ismine = false;
				boolean isyours = true;

				if(checkForRevisions(line)){
					revisionsFile = line.split(";")[0];
					originFile = line.split(";")[1];
				} 
				if(checkForStatic(line) && !ismine){
					ismine = true;
					isyours = false;
				}else if(checkForStatic(line) && !isyours){
					isyours = true;
					ismine = false;
				}
				if(ismine){
					mineBlock.add(mineIndex,line);
					mineIndex++;
				} else if(isyours) {
					yoursBlock.add(yoursIndex,line);
					yoursIndex++;
				}

				MatchedBlocks blocks = new MatchedBlocks( String.join("\n",mineBlock),  String.join("\n",yoursBlock), originFile, revisionsFile);
				allblocks.add(blocks);
			}
			scanner.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		return allblocks;
	}

	private static Boolean checkForEOF(int numberOfLines, int index){
		Boolean eof = false;
		if(index < numberOfLines){
			eof = true;
		}
		return eof;
	}

	private static Boolean checkForStatic(String text){
		Boolean foundYoursEnd = false;
		if(text.contains("static")){
			foundYoursEnd = true;
		}
		return foundYoursEnd;
	}

	private static Boolean checkForRevisions(String text){
		Boolean foundYoursEnd = false;
		if(text.contains(".revisions")){
			foundYoursEnd = true;
		}
		return foundYoursEnd;
	}

	public static void main(String[] args) {
		try {
			ArrayList<MatchedBlocks> b = collectMineTheirsBlocksFromText("test.txt");
			System.out.println(b.size());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
