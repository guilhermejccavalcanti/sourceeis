package cin.ufpe.br.blocks;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;

import cin.ufpe.br.util.FileHandlerr;

public class Ttt {

	public static ArrayList<MatchedBlocks> collectMineTheirsBlocksFromText(String filename) throws IOException{
		ArrayList<String> fileText = FileHandlerr.readFile(filename);
		ArrayList<MatchedBlocks> allblocks = new ArrayList<>();
		int index = 0;

		try {
			File file = new File(filename);
			Scanner scanner = new Scanner(file);
			scanner.useDelimiter("\r\n");
			while (scanner.hasNext()) {
				String line = scanner.next();
				if(checkForRevisions(line)){
					String revisionsFile = line.split(";")[0];
					String originFile = line.split(";")[1];

					ArrayList<String> mineBlock  = new ArrayList<String>();
					ArrayList<String> yoursBlock = new ArrayList<String>();

					if(scanner.hasNext()){
						line = scanner.next();
						index += 1;
						int mineIndex = 0;

						mineBlock.add(mineIndex,line);
						mineIndex++;
						if(scanner.hasNext()){
							line = scanner.next();
							while(scanner.hasNext() && !checkForStatic(line)){
								mineBlock.add(mineIndex,line);
								mineIndex++;
								line = scanner.next();
							}

							if(scanner.hasNext()){
								line = scanner.next();
								int yoursIndex = 0;
								while(scanner.hasNext() && !checkForRevisions(line)){
									yoursBlock.add(yoursIndex,line);
									yoursIndex++;
									index++;
								}
							}
							MatchedBlocks blocks = new MatchedBlocks(mineBlock, yoursBlock, originFile, revisionsFile);
							allblocks.add(blocks);
						}
					}
				}
				scanner.next();
			}
			scanner.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		return allblocks;
	}

	private static Boolean checkForEOF(int numberOfLines, int index){
		Boolean eof = false;
		if(index < numberOfLines){
			eof = true;
		}
		return eof;
	}

	private static Boolean checkForStatic(String text){
		Boolean foundYoursEnd = false;
		if(text.contains("static")){
			foundYoursEnd = true;
		}
		return foundYoursEnd;
	}

	private static Boolean checkForRevisions(String text){
		Boolean foundYoursEnd = false;
		if(text.contains(".revisions")){
			foundYoursEnd = true;
		}
		return foundYoursEnd;
	}

	public static void main(String[] args) {
		try {
			ArrayList<MatchedBlocks> b = collectMineTheirsBlocksFromText("test.txt");
			System.out.println(b.size());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
