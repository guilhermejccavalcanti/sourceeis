package cin.ufpe.br.analyser;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import cin.ufpe.br.git.CheckFileForMineYours;
import cin.ufpe.br.git.CheckoutCommit;
import cin.ufpe.br.git.MergeCommitsNumberFinder;
import cin.ufpe.br.parser.LightweightParser;
import cin.ufpe.br.util.ConflictsCollector;
import cin.ufpe.br.util.FileHandler;
import cin.ufpe.br.util.MergeConflict;
import cin.ufpe.br.util.ProjectsInfoCollector;

import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.MethodDeclaration;

public final class Analyser {

	public static void analyse(List<MergeConflict> conflicts){
		findConflictsInvolvingSameSyntacticType(conflicts);

		analyseConflictsResolution();

		checkMethodsDependencies();
	}

	private static void findConflictsInvolvingSameSyntacticType(List<MergeConflict> conflicts) {
		List<String> logEqualTypesConflictsEntries = new ArrayList<String>();
		List<String> logFullUnparsableConflictsEntries = new ArrayList<String>();
		List<String> logPartialUnparsableConflictsEntries = new ArrayList<String>();
		List<String> logOtherConflictsEntries = new ArrayList<String>();
		List<String> logEntireClassConflictsEntries = new ArrayList<String>();

		for(MergeConflict mergeConflict: conflicts){
			if(mergeConflict.rightunableToParse && mergeConflict.leftunableToParse){
				logFullUnparsableConflictsEntries.add((mergeConflict.originFile+";"+mergeConflict.body));
			}else if(mergeConflict.rightunableToParse || mergeConflict.leftunableToParse) {
				logPartialUnparsableConflictsEntries.add((mergeConflict.originFile+";"+mergeConflict.body));
			}else{
				boolean arealltypesequal = false;
				String equalType = "";
				if(!mergeConflict.rightTypes.isEmpty()){
					ArrayList<String> typesstring = new ArrayList<String>(Arrays.asList(mergeConflict.rightTypesString.split("\n")));
					final String t1 = typesstring.get(0);
					arealltypesequal = typesstring.stream().allMatch(s -> s.equals(t1)); 
					equalType = t1;
					if(!mergeConflict.leftTypes.isEmpty()){
						typesstring = new ArrayList<String>(Arrays.asList(mergeConflict.leftTypesString.split("\n")));
						final String t2 = typesstring.get(0);
						arealltypesequal = arealltypesequal && typesstring.stream().allMatch(s -> s.equals(t2));
						equalType = t2;
					}
				} else if(!mergeConflict.leftTypes.isEmpty()){
					ArrayList<String> typesstring = new ArrayList<String>(Arrays.asList(mergeConflict.leftTypesString.split("\n")));
					final String t3 = typesstring.get(0);
					arealltypesequal = typesstring.stream().allMatch(s -> s.equals(t3));
					equalType = t3;
				}

				boolean isEntireClassConflict = Arrays.asList(mergeConflict.rightTypesString.split("\n")).contains("TypeDeclaration") || 
						Arrays.asList(mergeConflict.leftTypesString.split("\n")).contains("TypeDeclaration");
				if(arealltypesequal && !isEntireClassConflict){
					if(!equalType.isEmpty())logEqualTypesConflictsEntries.add(mergeConflict.originFile +";"+equalType);
				} else {
					if(isEntireClassConflict){
						logEntireClassConflictsEntries.add((mergeConflict.originFile+";"+mergeConflict.body));
					} else {
						logOtherConflictsEntries.add((mergeConflict.originFile+";"+mergeConflict.body));
					}
				}			
			}
		}

		logTypeAnalysis(logFullUnparsableConflictsEntries, SyntacticType.UNPARSABLE);
		logTypeAnalysis(logPartialUnparsableConflictsEntries, SyntacticType.PARTIAL);
		logTypeAnalysis(logEqualTypesConflictsEntries, SyntacticType.EQUAL);
		logTypeAnalysis(logOtherConflictsEntries, SyntacticType.OTHER);
		logTypeAnalysis(logEntireClassConflictsEntries, SyntacticType.CLASS);
	}

	private static void analyseConflictsResolution(){
		ArrayList<MergeConflict> conflicts = null;

		//gathering information
		try {
			conflicts = ConflictsCollector.collectNoParser("log_fullunparsable_conflicts.csv");

			//conflicts equality log
			List<String> logNONEEntries = new ArrayList<String>();
			List<String> logMINEEntries = new ArrayList<String>();
			List<String> logYOURSEntries= new ArrayList<String>();
			List<String> logBOTHEntries = new ArrayList<String>();
			List<String> logGENERALEntries = new ArrayList<String>();

			for(MergeConflict mc : conflicts){
				ProjectsInfoCollector.collect(mc);
				MergeCommitsNumberFinder.find(mc);

				try{
					(new CheckoutCommit()).checkoutRepository(mc,mc.mergeCommit);			
					ArrayList<String> mergedFileContent = FileHandler.readFile("E:\\Mestrado\\FPFNAnalysis\\projects\\" + mc.projectName + "\\git\\" + mc.filePath);
					String answer = CheckFileForMineYours.checkForMineYours(mergedFileContent,					
							new ArrayList<String>(Arrays.asList(mc.left.split("\\r?\\n"))),
							new ArrayList<String>(Arrays.asList(mc.right.split("\\r?\\n"))));


					String logentry = mc.originFile+";"+mc.body;
					String general = mc.originFile + ";" + answer;
					logGENERALEntries.add(general);
					switch(answer){
					case "NONE":
						logNONEEntries.add(logentry);
						break;
					case "MINE":
						logMINEEntries.add(logentry);
						break;
					case "YOURS":
						logYOURSEntries.add(logentry);
						break;
					case "BOTH":
						logBOTHEntries.add(logentry);
						break;
					}
					System.out.println(general);
				}catch(Exception e){

				}
			}

			logConflictsResolutionAnalysis(logNONEEntries,ResolutionType.NONE);
			logConflictsResolutionAnalysis(logMINEEntries,ResolutionType.MINE);
			logConflictsResolutionAnalysis(logYOURSEntries,ResolutionType.YOURS);
			logConflictsResolutionAnalysis(logBOTHEntries,ResolutionType.BOTH);
			logConflictsResolutionAnalysis(logGENERALEntries,ResolutionType.GENERAL);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static void checkMethodsDependencies() {
		try{
			ArrayList<MergeConflict> conflicts = ConflictsCollector.collectNoParser("test_log_yours_conflicts.csv");
			for(MergeConflict mc: conflicts){
				ProjectsInfoCollector.collect(mc);
				MergeCommitsNumberFinder.find(mc);
				boolean similarMethods = false;
				boolean similarName	   = false;
				boolean hasReference   = false;

				/*				List<String> files =  FileUtils.listFiles(new File("E:\\Mestrado\\FPFNAnalysis\\projects\\" + mc.projectName + "\\git\\"),new String[]{"java"}, true)
						.stream()
						.map(c -> c.getParent())
						.distinct()
						.collect(Collectors.toList());*/

				//1. get all methods signatures involved in a conflict
				List<String> leftmethods = FileHandler.findMethodSignatures(mc.left);
				List<String> rightmethods= FileHandler.findMethodSignatures(mc.right);

				//2. get the respective method declaration
				for(String leftsignature : leftmethods){
					(new CheckoutCommit()).checkoutRepositoryCMD(mc, mc.leftCommit);
					String commitFileContentLeft = FileHandler.readFile(new File("E:\\Mestrado\\FPFNAnalysis\\projects\\" + mc.projectName + "\\git\\" + mc.filePath));
					CompilationUnit parsedleft = LightweightParser.parse(commitFileContentLeft);
					MethodDeclaration leftdecl = LightweightParser.findMethodDeclaration(parsedleft, leftsignature);

					for(String rightsignature : rightmethods){
						(new CheckoutCommit()).checkoutRepositoryCMD(mc, mc.rightCommit);
						String commitFileContentRight = FileHandler.readFile(new File("E:\\Mestrado\\FPFNAnalysis\\projects\\" + mc.projectName + "\\git\\" + mc.filePath));
						CompilationUnit parsedright = LightweightParser.parse(commitFileContentRight);
						MethodDeclaration rightdecl = LightweightParser.findMethodDeclaration(parsedright, rightsignature);

						if(leftdecl != null && rightdecl != null){

							//3. compare methods body similarity
							String leftbody = leftdecl.getBody().toString();
							String rightbody = rightdecl.getBody().toString();
							double bodysimilarity = FileHandler.computeStringSimilarity(leftbody, rightbody);
							if(bodysimilarity > 0.80)

							System.out.println("a");
							//4. compare methods name similarity 


							//5. check if the methods refer each other
						}
					}
				}

				System.out.println();
			}
		}catch(Exception e){
			e.printStackTrace();

		}
	}

	// aux for logging
	private static enum SyntacticType{
		UNPARSABLE,
		PARTIAL,
		EQUAL,
		CLASS,
		OTHER;
	}
	// aux for logging
	private static enum ResolutionType{
		NONE,
		BOTH,
		MINE,
		YOURS,
		GENERAL
	}

	private static void logTypeAnalysis(List<String> logentries, SyntacticType type) {
		try {
			File file = null; 
			switch(type){
			case UNPARSABLE:
				file = new File("log_fullunparsable_conflicts.csv" );
				break;
			case PARTIAL:
				file = new File("log_partialunparsable_conflicts.csv" );
				break;
			case EQUAL:
				file = new File("log_equaltypes_conflicts.csv");
				break;
			case CLASS:
				file = new File("log_entireclass_conflicts.csv");
				break;
			case OTHER:
				file = new File("log_other_conflicts.csv" );
				break;
			}

			if(!file.exists()){file.createNewFile();}
			PrintWriter pw = new PrintWriter(new FileOutputStream(file, true), true);
			try{
				for(String entry : logentries){pw.append(entry + "\n");}
				pw.flush();pw.close();
			}finally{
				try{pw.close();}
				catch(Exception e){e.printStackTrace();}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private static void logConflictsResolutionAnalysis(List<String> logentries, ResolutionType type) {
		try {
			File file = null; 
			switch(type){
			case NONE:
				file = new File("log_none_conflicts.csv" );
				break;
			case MINE:
				file = new File("log_mine_conflicts.csv" );
				break;
			case YOURS:
				file = new File("log_yours_conflicts.csv" );
				break;
			case BOTH:
				file = new File("log_both_conflicts.csv" );
				break;
			case GENERAL:
				file = new File("log_general_conflicts.csv" );
				break;
			}
			if(!file.exists()){file.createNewFile();}
			PrintWriter pw = new PrintWriter(new FileOutputStream(file, true), true);
			try{
				for(String entry : logentries){pw.append(entry + "\n");}
				pw.flush();pw.close();
			}finally{
				try{pw.close();}
				catch(Exception e){e.printStackTrace();}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		checkMethodsDependencies();
	}
}
