/home/local/CIN/gjcc/fpfnanalysis/projects/lucene-solr/revisions/rev_8da43_435a2/rev_8da43-435a2/src/test/org/apache/lucene/analysis/TestTokenStreamBWComp.java;<<<<<<< MINE
public void testMixedOldApiConsumer2() throws Exception {
    // RoundRobinOldAPI is using TokenStream(next)
    TokenStream stream = new RoundRobinOldAPI();
    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);
    
    assertTrue(stream.incrementToken());
    Token bar = stream.next();
    assertEquals("foo", termAtt.term());
    assertEquals("bar", bar.term());

    assertTrue(stream.incrementToken());
    assertEquals("meh", termAtt.term());
    assertEquals("private 'bar' term should still be valid", "bar", bar.term());

    Token foo = stream.next();
    assertEquals("the term attribute should still be the same", "meh", termAtt.term());
    assertEquals("foo", foo.term());
    assertEquals("private 'bar' term should still be valid", "bar", bar.term());
  }
=======
>>>>>>> YOURS
/home/local/CIN/gjcc/fpfnanalysis/projects/lucene-solr/revisions/rev_8da43_435a2/rev_8da43-435a2/src/test/org/apache/lucene/analysis/TestTeeTokenFilter.java;<<<<<<< MINE
public void performance() throws Exception {
    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};
    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};
    for (int k = 0; k < tokCount.length; k++) {
      StringBuilder buffer = new StringBuilder();
      System.out.println("-----Tokens: " + tokCount[k] + "-----");
      for (int i = 0; i < tokCount[k]; i++) {
        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');
      }
      //make sure we produce the same tokens
      ModuloSinkTokenizer sink = new ModuloSinkTokenizer(tokCount[k], 100);
      final Token reusableToken = new Token();
      TokenStream stream = new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), sink);
      while (stream.next(reusableToken) != null) {
      }
      stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), 100);
      List tmp = new ArrayList();
      for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {
        tmp.add(nextToken.clone());
      }
      List sinkList = sink.getTokens();
      assertTrue("tmp Size: " + tmp.size() + " is not: " + sinkList.size(), tmp.size() == sinkList.size());
      for (int i = 0; i < tmp.size(); i++) {
        Token tfTok = (Token) tmp.get(i);
        Token sinkTok = (Token) sinkList.get(i);
        assertTrue(tfTok.term() + " is not equal to " + sinkTok.term() + " at token: " + i, tfTok.term().equals(sinkTok.term()) == true);
      }
      //simulate two fields, each being analyzed once, for 20 documents

      for (int j = 0; j < modCounts.length; j++) {
        int tfPos = 0;
        long start = System.currentTimeMillis();
        for (int i = 0; i < 20; i++) {
          stream = new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString())));
          for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {
            tfPos += nextToken.getPositionIncrement();
          }
          stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), modCounts[j]);
          for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {
            tfPos += nextToken.getPositionIncrement();
          }
        }
        long finish = System.currentTimeMillis();
        System.out.println("ModCount: " + modCounts[j] + " Two fields took " + (finish - start) + " ms");
        int sinkPos = 0;
        //simulate one field with one sink
        start = System.currentTimeMillis();
        for (int i = 0; i < 20; i++) {
          sink = new ModuloSinkTokenizer(tokCount[k], modCounts[j]);
          stream = new TeeTokenFilter(new StandardFilter(new StandardTokenizer(new StringReader(buffer.toString()))), sink);
          for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {
            sinkPos += nextToken.getPositionIncrement();
          }
          //System.out.println("Modulo--------");
          stream = sink;
          for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {
            sinkPos += nextToken.getPositionIncrement();
          }
        }
        finish = System.currentTimeMillis();
        System.out.println("ModCount: " + modCounts[j] + " Tee fields took " + (finish - start) + " ms");
        assertTrue(sinkPos + " does not equal: " + tfPos, sinkPos == tfPos);

      }
      System.out.println("- End Tokens: " + tokCount[k] + "-----");
    }

  }
=======
>>>>>>> YOURS