/home/local/CIN/gjcc/fpfnanalysis/projects/lucene-solr/revisions/rev_8da43_435a2/rev_8da43-435a2/src/test/org/apache/lucene/analysis/TestTokenStreamBWComp.java;<<<<<<< MINE
public void testMixedOldApiConsumer2() throws Exception {
    // RoundRobinOldAPI is using TokenStream(next)
    TokenStream stream = new RoundRobinOldAPI();
    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);
    
    assertTrue(stream.incrementToken());
    Token bar = stream.next();
    assertEquals("foo", termAtt.term());
    assertEquals("bar", bar.term());

    assertTrue(stream.incrementToken());
    assertEquals("meh", termAtt.term());
    assertEquals("private 'bar' term should still be valid", "bar", bar.term());

    Token foo = stream.next();
    assertEquals("the term attribute should still be the same", "meh", termAtt.term());
    assertEquals("foo", foo.term());
    assertEquals("private 'bar' term should still be valid", "bar", bar.term());
  }
=======
>>>>>>> YOURS
/home/local/CIN/gjcc/fpfnanalysis/projects/lucene-solr/revisions/rev_8da43_435a2/rev_8da43-435a2/src/test/org/apache/lucene/analysis/TestTeeTokenFilter.java;<<<<<<< MINE
protected void setUp() throws Exception {
    super.setUp();
    tokens1 = new String[]{"The", "quick", "Burgundy", "Fox", "jumped", "over", "the", "lazy", "Red", "Dogs"};
    tokens2 = new String[]{"The", "Lazy", "Dogs", "should", "stay", "on", "the", "porch"};
    buffer1 = new StringBuilder();

    for (int i = 0; i < tokens1.length; i++) {
      buffer1.append(tokens1[i]).append(' ');
    }
    buffer2 = new StringBuilder();
    for (int i = 0; i < tokens2.length; i++) {
      buffer2.append(tokens2[i]).append(' ');

    }
  }
=======
>>>>>>> YOURS



